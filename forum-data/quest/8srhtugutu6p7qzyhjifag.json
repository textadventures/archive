{
  "Topic": {
    "TopicId": "8srhtugutu6p7qzyhjifag",
    "ForumId": "10",
    "Title": "Opened Door Description?",
    "LastUpdated": "2017-07-26T06:53:29.1941857Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "53bcd601-a33d-48be-9a5b-f36490c76b4c",
      "UserId": 316011,
      "Username": "NinjaNin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/404cc44b9e0a72308fe02e5a99b23aa4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey I finally finished the tutorial, but now I'm stuck in my first real game. \r\n\r\nI want the player to be stuck in a locked room and I figured out the bit about the door and how to unlock it, but now I want to add a description to the door, to where the player gets a different message depending on weather the door is open or not or unlocked or not.\r\n\r\n I know that I need to use the If script but after that I'm stuck. Which expression do I use? I've traded the one with the flag and if the door is open or not but I don't know if that will really be sufficient. Can anyone help me? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey I finally finished the tutorial, but now I'm stuck in my first real game.</p>\n<p>I want the player to be stuck in a locked room and I figured out the bit about the door and how to unlock it, but now I want to add a description to the door, to where the player gets a different message depending on weather the door is open or not or unlocked or not.</p>\n<p>I know that I need to use the If script but after that I'm stuck. Which expression do I use? I've traded the one with the flag and if the door is open or not but I don't know if that will really be sufficient. Can anyone help me?</p>\n\n",
      "PostDate": "2017-07-26T06:53:29.1941857Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "35eed31d-d99c-44e6-bf83-8c989f100ce5",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello!\r\n\r\nGood to hear from you!\r\n\r\nNow, let's get down to business.\r\n\r\n---\r\n\r\nI named my door ```door```, so replace **every instance** of ```door``` with the name of your door.\r\n\r\nCode View first:\r\n**NOTE: THIS CODE ORIGINALLY CONTAINED AN ERROR, WHICH HAS NOW BEEN FIXED (THANKS, HK!)**\r\n```\r\n<!--\r\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\r\n-->\r\n\r\n<look type=\"script\">\r\n  if (door.isopen) {\r\n    msg (\"The door is ajar.\")\r\n  }\r\n  else {\r\n    msg (\"The door is closed at the moment.\")\r\n  }\r\n</look>\r\n```\r\nis the same as\r\n```\r\n <look>{either door.isopen: The door is ajar.| The door is closed at the moment.}</look>\r\n\r\n<!--\r\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\r\n-->\r\n```\r\n\r\n```\r\n<inroomdescription>{either door.isopen: The door is now open.| The door is closed at the moment.}</inroomdescription>\r\n\r\n<!--\r\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\r\n-->\r\n```\r\n\r\nHere's the entire sample game, so you can see it as a whole:\r\n\r\n<details><summary>CLICK HERE TO VIEW THE CODE</summary>\r\n\r\n``` xml\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"a jar\">\r\n    <gameid>afadb32b-5937-43f9-b109-2b802cd508ff</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <appendobjectdescription />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"door\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"openable\" />\r\n      <inherit name=\"container_lockable\" />\r\n      <feature_container />\r\n      <keycount type=\"int\">1</keycount>\r\n      <inroomdescription>{either door.isopen: The door is now open.| The door is closed at the moment.}</inroomdescription>\r\n      <key type=\"object\">Skellington Key</key>\r\n      <look type=\"script\">\r\n        if (door.isopen) {\r\n          msg (\"The door is ajar.\")\r\n        }\r\n        else {\r\n          msg (\"The door is closed.\")\r\n        }\r\n      </look>\r\n      <openscript type=\"script\">\r\n        if (this.locked) {\r\n          if (this.autounlock and AllKeysAvailable(this)) {\r\n            do (this, \"unlock\")\r\n            if (not this.isopen) {\r\n              OpenObject (this)\r\n            }\r\n          }\r\n          else {\r\n            msg (DynamicTemplate(\"LockedObject\", this))\r\n          }\r\n        }\r\n        else {\r\n          OpenObject (this)\r\n        }\r\n      </openscript>\r\n      <exit alias=\"up\" to=\"room\">\r\n        <inherit name=\"updirection\" />\r\n      </exit>\r\n    </object>\r\n    <object name=\"Skellington Key\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look type=\"string\"></look>\r\n    </object>\r\n    <exit name=\"lockeddoor1\" alias=\"in\" to=\"another room\">\r\n      <inherit name=\"indirection\" />\r\n      <locked />\r\n      <lockmessage>The door is locked.</lockmessage>\r\n      <runscript type=\"boolean\">false</runscript>\r\n      <script type=\"script\">\r\n      </script>\r\n    </exit>\r\n  </object>\r\n  <object name=\"another room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit name=\"locked door\" alias=\"out\" to=\"room\">\r\n      <inherit name=\"outdirection\" />\r\n      <locked />\r\n    </exit>\r\n  </object>\r\n</asl>\r\n```\r\n</details>\r\n\r\n\r\n---\r\n\r\n\r\nHere's a link to using the text processor shortcuts ([http://docs.textadventures.co.uk/quest/text_processor.html](http://docs.textadventures.co.uk/quest/text_processor.html \"Click here to learn some neat tricks!\")).\r\n\r\nNOTE: the above example (the one just beneath Code View first) is the best way to code this. \r\n\r\nThe below example only works when entered into certain fields while using the editor (and in specific ways when entering in Code View):\r\n\r\nIt will work here:\r\n![image](https://user-images.githubusercontent.com/27799208/28610031-84a70324-71ac-11e7-80d7-6dedd6d06f97.png)\r\n**NOTE: The 'In-room description' text will display along with the room description every time you LOOK or enter the room.**\r\n\r\n---\r\nBut it will NOT work like this (in Code View):\r\n```\r\nmsg (\"{either door.isopen:The door is ajar.| The door is closed.}\")\r\n```\r\n\r\n---",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello!</p>\n<p>Good to hear from you!</p>\n<p>Now, let's get down to business.</p>\n<hr>\n<p>I named my door <code>door</code>, so replace <strong>every instance</strong> of <code>door</code> with the name of your door.</p>\n<p>Code View first:<br>\n<strong>NOTE: THIS CODE ORIGINALLY CONTAINED AN ERROR, WHICH HAS NOW BEEN FIXED (THANKS, HK!)</strong></p>\n<pre><code>&lt;!--\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\n--&gt;\n\n&lt;look type=\"script\"&gt;\n  if (door.isopen) {\n    msg (\"The door is ajar.\")\n  }\n  else {\n    msg (\"The door is closed at the moment.\")\n  }\n&lt;/look&gt;\n</code></pre>\n<p>is the same as</p>\n<pre><code> &lt;look&gt;{either door.isopen: The door is ajar.| The door is closed at the moment.}&lt;/look&gt;\n\n&lt;!--\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\n--&gt;\n</code></pre>\n<pre><code>&lt;inroomdescription&gt;{either door.isopen: The door is now open.| The door is closed at the moment.}&lt;/inroomdescription&gt;\n\n&lt;!--\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\n--&gt;\n</code></pre>\n<p>Here's the entire sample game, so you can see it as a whole:</p>\n<details><summary>CLICK HERE TO VIEW THE CODE</summary>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"a jar\"&gt;\n    &lt;gameid&gt;afadb32b-5937-43f9-b109-2b802cd508ff&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;appendobjectdescription /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"door\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"openable\" /&gt;\n      &lt;inherit name=\"container_lockable\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;keycount type=\"int\"&gt;1&lt;/keycount&gt;\n      &lt;inroomdescription&gt;{either door.isopen: The door is now open.| The door is closed at the moment.}&lt;/inroomdescription&gt;\n      &lt;key type=\"object\"&gt;Skellington Key&lt;/key&gt;\n      &lt;look type=\"script\"&gt;\n        if (door.isopen) {\n          msg (\"The door is ajar.\")\n        }\n        else {\n          msg (\"The door is closed.\")\n        }\n      &lt;/look&gt;\n      &lt;openscript type=\"script\"&gt;\n        if (this.locked) {\n          if (this.autounlock and AllKeysAvailable(this)) {\n            do (this, \"unlock\")\n            if (not this.isopen) {\n              OpenObject (this)\n            }\n          }\n          else {\n            msg (DynamicTemplate(\"LockedObject\", this))\n          }\n        }\n        else {\n          OpenObject (this)\n        }\n      &lt;/openscript&gt;\n      &lt;exit alias=\"up\" to=\"room\"&gt;\n        &lt;inherit name=\"updirection\" /&gt;\n      &lt;/exit&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Skellington Key\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look type=\"string\"&gt;&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;exit name=\"lockeddoor1\" alias=\"in\" to=\"another room\"&gt;\n      &lt;inherit name=\"indirection\" /&gt;\n      &lt;locked /&gt;\n      &lt;lockmessage&gt;The door is locked.&lt;/lockmessage&gt;\n      &lt;runscript type=\"boolean\"&gt;false&lt;/runscript&gt;\n      &lt;script type=\"script\"&gt;\n      &lt;/script&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"another room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit name=\"locked door\" alias=\"out\" to=\"room\"&gt;\n      &lt;inherit name=\"outdirection\" /&gt;\n      &lt;locked /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>Here's a link to using the text processor shortcuts (<a href=\"http://docs.textadventures.co.uk/quest/text_processor.html\" title=\"Click here to learn some neat tricks!\">http://docs.textadventures.co.uk/quest/text_processor.html</a>).</p>\n<p>NOTE: the above example (the one just beneath Code View first) is the best way to code this.</p>\n<p>The below example only works when entered into certain fields while using the editor (and in specific ways when entering in Code View):</p>\n<p>It will work here:<br>\n<img src=\"https://user-images.githubusercontent.com/27799208/28610031-84a70324-71ac-11e7-80d7-6dedd6d06f97.png\" alt=\"image\"><br>\n<strong>NOTE: The 'In-room description' text will display along with the room description every time you LOOK or enter the room.</strong></p>\n<hr>\n<p>But it will NOT work like this (in Code View):</p>\n<pre><code>msg (\"{either door.isopen:The door is ajar.| The door is closed.}\")\n</code></pre>\n<hr>\n\n",
      "PostDate": "2017-07-26T07:26:28.4932605Z",
      "LastEditDate": "2017-07-26T15:53:12.2159134Z",
      "link": null
    },
    {
      "PostId": "320cbc94-29a6-4f08-a091-5f58506e3492",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The pic below shows you what you need to do to the 'door' container to make it work.  In the look at description, you just need to **use the IF 'object is open' script and select object door, then print message \"the door is open\"; ELSE print message \"the door is closed\"**\r\nA GUI look...\r\n![](http://imageshack.com/a/img923/2959/w5C6ki.png)\r\nRemember, just because you 'open door', Quest doesn't know that the object door is now actually open.  If you run a script as I did below, make sure you add the 'open object' door script.  I've forgotten that many times!!\r\nEDIT: And just an FYI if you haven't gotten to this yet - Remember to also lock and name the exit that is blocked by the door.  In this case below, the exit lock is named 'doorclosed'",
      "EditableFormat": "markdown",
      "HTML": "<p>The pic below shows you what you need to do to the 'door' container to make it work.  In the look at description, you just need to <strong>use the IF 'object is open' script and select object door, then print message \"the door is open\"; ELSE print message \"the door is closed\"</strong><br>\nA GUI look...<br>\n<img src=\"http://imageshack.com/a/img923/2959/w5C6ki.png\" alt=\"\"><br>\nRemember, just because you 'open door', Quest doesn't know that the object door is now actually open.  If you run a script as I did below, make sure you add the 'open object' door script.  I've forgotten that many times!!<br>\nEDIT: And just an FYI if you haven't gotten to this yet - Remember to also lock and name the exit that is blocked by the door.  In this case below, the exit lock is named 'doorclosed'</p>\n\n",
      "PostDate": "2017-07-26T13:33:08.3698738Z",
      "LastEditDate": "2017-07-26T13:35:44.3168077Z",
      "link": null
    },
    {
      "PostId": "baab8861-0fc5-4712-86a2-b7921041fc60",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "a quick correction to Richard's part of code (if you want to use/refer to code, just so you don't get an error with-if trying to use it):\r\n\r\n```\r\n<!--\r\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\r\n-->\r\n\r\n<look type=\"script\">\r\n  if (door.isopen) {\r\n    msg (\"The door is ajar.\")\r\n  }\r\n  else {\r\n    msg (\"The door is closed at the moment.\")\r\n  }\r\n</look>\r\n```\r\n\r\n----------------------------\r\n\r\nthis is a really useful link:\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/object.html\r\n\r\nthese are most of the built-in Attributes for Objects\r\n\r\n-----------------------------\r\n\r\nas has already been explained by the above posters:\r\n\r\n(replace any of my full-capitolized stuff with the names you're using in your game for it)\r\n(ALSO: my 'NAME_OF_OBJECT' can also be 'NAME_OF_EXIT' for the built-in 'locked' Boolean Attribute)\r\n\r\nthe actual control for whether a door is recognized by quest as being opened/closed is:\r\n\r\nthe built-in 'isopen' Boolean Attribute: http://docs.textadventures.co.uk/quest/attributes/isopen.html\r\n\r\nNAME_OF_OBJECT.isopen = true // the Object is opened\r\nNAME_OF_OBJECT.isopen = false // the Object is closed\r\n\r\nand for the scripting of it:\r\n\r\n```\r\n// NAME_OF_OBJECT.isopen = false\r\n\r\nif (NAME_OF_OBJECT.isopen) { // if (TRUE) // for Boolean Attributes, quest knows that 'if (NAME_OF_OBJECT.isopen)' is defaulted as being 'if (NAME_OF_OBJECT.isopen = true)'\r\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is opened.\")\r\n} else { // if (FALSE) // if this wasn't an 'if-else' (two choice only), we'd need to use this: 'if (not NAME_OF_OBJECT.isopen)' or 'if (NAME_OF_OBJECT.isopen = false) or 'if (NAME_OF_OBJECT.isopen <> true)'\r\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is closed.\")\r\n}\r\n\r\n// output: The [NAME_OF_OBJECT.alias] is closed.\r\n\r\n// ---------------------------------------------\r\n\r\n// NAME_OF_OBJECT.isopen = true\r\n\r\nif (NAME_OF_OBJECT.isopen) {\r\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is opened.\")\r\n} else {\r\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is closed.\")\r\n}\r\n\r\n// output: The [NAME_OF_OBJECT.alias] is opened.\r\n```\r\n\r\n------------------------\r\n\r\nand it's the same for if loccked/unlocked too:\r\n\r\nvia the built-in 'locked' Boolean Attribute: http://docs.textadventures.co.uk/quest/attributes/locked.html\r\n\r\nNAME_OF_OBJECT.locked = true // the Object is locked\r\nNAME_OF_OBJECT.locked = false // the Object is unlocked\r\n\r\n```\r\n// NAME_OF_OBJECT.locked = false\r\n\r\nif (NAME_OF_OBJECT.locked) { /\r\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is locked.\")\r\n} else {\r\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is unlocked.\")\r\n}\r\n\r\n// output: The [NAME_OF_OBJECT.alias] is unlocked.\r\n\r\n// ---------------------------------------------\r\n\r\n// NAME_OF_OBJECT.locked = true\r\n\r\nif (NAME_OF_OBJECT.locked) {\r\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is locked.\")\r\n} else {\r\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is unlocked.\")\r\n}\r\n\r\n// output: The [NAME_OF_OBJECT.alias] is locked.\r\n```\r\n\r\n-----------\r\n\r\nquest has a lot of helper Functions, such as displaying a message when something is opened/closed/locked/unlocked, but they may not actually set the 'locked/isopen' Boolean Attributes. So, opening/closing/locked/unlocked, causes a lot of people, a lot of issues with trying to get it right and working, including me, laughs.\r\n\r\nsome of the various helper Functions on locked/unlocked/opening/closing stuff:\r\n\r\n(these the same as seen within the GUI/Editor, as its drop-downs and/or text boxes and/or script options and/or check/uncheck option boxes, either on the Object's various Tabs, and/or on the special 'game' Game Settings Object's various Tabs)\r\n\r\nhttp://docs.textadventures.co.uk/quest/attributes/autoopen.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/autounlock.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/canlockopen.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/close.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/closescript.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/isopen.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/key.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/locked.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/lockmessage.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/nokeymessage.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/onclose.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/onlock.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/onopen.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/onunlock.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/open.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/openscript.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/unlockmessage.html\r\n\r\nand the associated Object Types / Types:\r\n\r\nhttp://docs.textadventures.co.uk/quest/attributes/openable.html\r\n\r\nhttp://docs.textadventures.co.uk/quest/attributes/container.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/container_base.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/container_closed.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/container_lockable.html\r\nhttp://docs.textadventures.co.uk/quest/attributes/container_open.html\r\n\r\n------------------\r\n\r\nremember, ONLY the built-in 'isopen' and 'locked' Boolean Attributes actually control/determine whether an Object is actually in the 'open/closed/locked/unlocked' states:\r\n\r\nNAME_OF_OBJECT.isopen = true\r\nNAME_OF_OBJECT.isopen = false\r\nNAME_OF_OBJECT.locked = true\r\nNAME_OF_OBJECT.locked = false",
      "EditableFormat": "markdown",
      "HTML": "<p>a quick correction to Richard's part of code (if you want to use/refer to code, just so you don't get an error with-if trying to use it):</p>\n<pre><code>&lt;!--\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\n--&gt;\n\n&lt;look type=\"script\"&gt;\n  if (door.isopen) {\n    msg (\"The door is ajar.\")\n  }\n  else {\n    msg (\"The door is closed at the moment.\")\n  }\n&lt;/look&gt;\n</code></pre>\n<hr>\n<p>this is a really useful link:</p>\n<p>http://docs.textadventures.co.uk/quest/elements/object.html</p>\n<p>these are most of the built-in Attributes for Objects</p>\n<hr>\n<p>as has already been explained by the above posters:</p>\n<p>(replace any of my full-capitolized stuff with the names you're using in your game for it)<br>\n(ALSO: my 'NAME_OF_OBJECT' can also be 'NAME_OF_EXIT' for the built-in 'locked' Boolean Attribute)</p>\n<p>the actual control for whether a door is recognized by quest as being opened/closed is:</p>\n<p>the built-in 'isopen' Boolean Attribute: http://docs.textadventures.co.uk/quest/attributes/isopen.html</p>\n<p>NAME_OF_OBJECT.isopen = true // the Object is opened<br>\nNAME_OF_OBJECT.isopen = false // the Object is closed</p>\n<p>and for the scripting of it:</p>\n<pre><code>// NAME_OF_OBJECT.isopen = false\n\nif (NAME_OF_OBJECT.isopen) { // if (TRUE) // for Boolean Attributes, quest knows that 'if (NAME_OF_OBJECT.isopen)' is defaulted as being 'if (NAME_OF_OBJECT.isopen = true)'\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is opened.\")\n} else { // if (FALSE) // if this wasn't an 'if-else' (two choice only), we'd need to use this: 'if (not NAME_OF_OBJECT.isopen)' or 'if (NAME_OF_OBJECT.isopen = false) or 'if (NAME_OF_OBJECT.isopen &lt;&gt; true)'\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is closed.\")\n}\n\n// output: The [NAME_OF_OBJECT.alias] is closed.\n\n// ---------------------------------------------\n\n// NAME_OF_OBJECT.isopen = true\n\nif (NAME_OF_OBJECT.isopen) {\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is opened.\")\n} else {\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is closed.\")\n}\n\n// output: The [NAME_OF_OBJECT.alias] is opened.\n</code></pre>\n<hr>\n<p>and it's the same for if loccked/unlocked too:</p>\n<p>via the built-in 'locked' Boolean Attribute: http://docs.textadventures.co.uk/quest/attributes/locked.html</p>\n<p>NAME_OF_OBJECT.locked = true // the Object is locked<br>\nNAME_OF_OBJECT.locked = false // the Object is unlocked</p>\n<pre><code>// NAME_OF_OBJECT.locked = false\n\nif (NAME_OF_OBJECT.locked) { /\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is locked.\")\n} else {\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is unlocked.\")\n}\n\n// output: The [NAME_OF_OBJECT.alias] is unlocked.\n\n// ---------------------------------------------\n\n// NAME_OF_OBJECT.locked = true\n\nif (NAME_OF_OBJECT.locked) {\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is locked.\")\n} else {\n  msg (\"The \" + NAME_OF_OBJECT.alias + \" is unlocked.\")\n}\n\n// output: The [NAME_OF_OBJECT.alias] is locked.\n</code></pre>\n<hr>\n<p>quest has a lot of helper Functions, such as displaying a message when something is opened/closed/locked/unlocked, but they may not actually set the 'locked/isopen' Boolean Attributes. So, opening/closing/locked/unlocked, causes a lot of people, a lot of issues with trying to get it right and working, including me, laughs.</p>\n<p>some of the various helper Functions on locked/unlocked/opening/closing stuff:</p>\n<p>(these the same as seen within the GUI/Editor, as its drop-downs and/or text boxes and/or script options and/or check/uncheck option boxes, either on the Object's various Tabs, and/or on the special 'game' Game Settings Object's various Tabs)</p>\n<p>http://docs.textadventures.co.uk/quest/attributes/autoopen.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/autounlock.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/canlockopen.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/close.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/closescript.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/isopen.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/key.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/locked.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/lockmessage.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/nokeymessage.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/onclose.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/onlock.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/onopen.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/onunlock.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/open.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/openscript.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/unlockmessage.html</p>\n<p>and the associated Object Types / Types:</p>\n<p>http://docs.textadventures.co.uk/quest/attributes/openable.html</p>\n<p>http://docs.textadventures.co.uk/quest/attributes/container.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/container_base.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/container_closed.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/container_lockable.html<br>\nhttp://docs.textadventures.co.uk/quest/attributes/container_open.html</p>\n<hr>\n<p>remember, ONLY the built-in 'isopen' and 'locked' Boolean Attributes actually control/determine whether an Object is actually in the 'open/closed/locked/unlocked' states:</p>\n<p>NAME_OF_OBJECT.isopen = true<br>\nNAME_OF_OBJECT.isopen = false<br>\nNAME_OF_OBJECT.locked = true<br>\nNAME_OF_OBJECT.locked = false</p>\n\n",
      "PostDate": "2017-07-26T14:16:20.5276475Z",
      "LastEditDate": "2017-07-26T14:41:23.4874889Z",
      "link": null
    },
    {
      "PostId": "cca5b7fc-fc40-4677-a5c6-5087f6cd1d99",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "About Boolean Attributes:\r\n\r\nthese are also known as 'flags', (which I don't personally like, sighs), as 'flag' is used to name something that has only two states (dualism: opposites/adversarial): \r\n\r\nBooleans: true/false\r\nBinary: 1/0\r\nElectrical/Polar Charges: +/-\r\n\r\nstandard comparison model:\r\n1 = true = + = on/yes\r\n0 = false = - = off/no\r\n\r\nvarious other dualism toggle names: on/off, up/down, left/right, in/out, yes/no, innocent/guilty, fat/skinny, tall/short, stupid/smart, sexy/ugly, male/female, young/old, alive/dead, fast/slow, hot/cold, etc etc etc\r\n\r\nBoolean Logic / Truth Tables:\r\n\r\nDefinitions:\r\n\r\ntrue = TRUE\r\nfalse = FALSE\r\n\r\nNegation (not) / Complements:\r\n\r\nnot true = FALSE\r\nnot false = TRUE\r\n\r\n'AND' logic:\r\n\r\ntrue and true = TRUE\r\ntrue and false = FALSE\r\nfalse and true = FALSE\r\nfalse and false = FALSE\r\n\r\n'OR' logic:\r\n\r\ntrue or true = TRUE\r\ntrue or false = TRUE\r\nfalse or true = TRUE\r\nfalse or false = FALSE\r\n\r\nsome examples:\r\n\r\n```\r\nconceptual-logic understanding:\r\n\r\n(for this example, choose to use either 'dead' or 'alive', whichever you prefer, but not both!!!, as they're the same thing, just slightly different way of thinking about it)\r\n\r\norc.dead_boolean_attribute = true // the orc is dead\r\norc.dead_boolean_attribute = false // the orc is alive\r\n\r\norc.alive_boolean_attribute = true // the orc is alive\r\norc.alive_boolean_attribute = false // the orc is dead\r\n\r\n-----------------------------\r\n\r\nif (orc.dead_boolean_attribute) {\r\n  msg (\"The orc is dead.\")\r\n} else {\r\n  msg (\"The orc is alive.\")\r\n}\r\n\r\n--------\r\n\r\nif (not orc.dead_boolean_attribute) {\r\n  msg (\"The orc is alive.\")\r\n} else {\r\n  msg (\"The orc is dead.\")\r\n}\r\n\r\n----\r\n\r\n<![CDATA[\r\n  if (orc.dead_boolean_attribute <> true) {\r\n    msg (\"The orc is alive.\")\r\n  } else {\r\n    msg (\"The orc is dead.\")\r\n  }\r\n]]>\r\n\r\n---\r\n\r\n<![CDATA[\r\n  if (orc.dead_boolean_attribute <> false) {\r\n    msg (\"The orc is dead.\")\r\n  } else {\r\n    msg (\"The orc is alive.\")\r\n  }\r\n]]>\r\n\r\n-------\r\n\r\nif (orc.poisoned_boolean_attribute and orc.dead_boolean_attribute) {\r\n  msg (\"The orc is: poisoned and dead\")\r\n} else if (orc.poisoned_boolean_attribute and not orc.dead_boolean_attribute) {\r\n  msg (\"The orc is: poisoned and alive\")\r\n} else if (not orc.poisoned_boolean_attribute and orc.dead_boolean_attribute) {\r\n  msg (\"The orc is: not poisoned and dead\")\r\n} else if (not orc.poisoned_boolean_attribute and not orc.dead_boolean_attribute) {\r\n  msg (\"The orc is: not poisoned and alive\")\r\n}\r\n\r\n-----\r\n\r\nif (orc.poisoned_boolean_attribute or orc.dead_boolean_attribute) {\r\n  msg (\"The orc is either: poisoned or dead\")\r\n} else if (orc.poisoned_boolean_attribute or not orc.dead_boolean_attribute) {\r\n  msg (\"The orc is either: poisoned or alive\")\r\n} else if (not orc.poisoned_boolean_attribute or orc.dead_boolean_attribute) {\r\n  msg (\"The orc is either: not poisoned or dead\")\r\n} else if (not orc.poisoned_boolean_attribute or not orc.dead_boolean_attribute) {\r\n  msg (\"The orc is either: not poisoned or alive\")\r\n}\r\n\r\n--------------\r\n\r\n// orc.dead_boolean_attribute = true\r\n// orc.poisoned_boolean_attribute = true\r\n\r\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"test 1\")\r\n} else if (orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 2\")\r\n} else if (not orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"test 3\")\r\n} else if (not orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 4\")\r\n}\r\n\r\n// output: test 1\r\n\r\n---------------------------\r\n\r\n// orc.dead_boolean_attribute = false\r\n// orc.poisoned_boolean_attribute = false\r\n\r\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"test 1\")\r\n} else if (orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 2\")\r\n} else if (not orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"test 3\")\r\n} else if (not orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 4\")\r\n}\r\n\r\n// output: test 4\r\n\r\n-------------\r\n\r\n// orc.dead_boolean_attribute = true\r\n// orc.poisoned_boolean_attribute = false\r\n\r\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"test 1\")\r\n} else if (orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 2\")\r\n} else if (not orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"test 3\")\r\n} else if (not orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 4\")\r\n}\r\n\r\n// output: test 2\r\n\r\n-------------\r\n\r\n// orc.dead_boolean_attribute = false\r\n// orc.poisoned_boolean_attribute = true\r\n\r\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else if (orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\r\n  msg (\"\")\r\n} else if (not orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"test 3\")\r\n} else if (not orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 4\")\r\n}\r\n\r\n// output: test 3\r\n\r\n------------\r\n\r\n// orc.dead_boolean_attribute = false\r\n// orc.poisoned_boolean_attribute = false\r\n\r\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"test 1\")\r\n} else if (orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 2\")\r\n} else if (not orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"test 3\")\r\n} else if (not orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 4\")\r\n}\r\n\r\n// output: test 4\r\n\r\n----------\r\n\r\n// orc.dead_boolean_attribute = true\r\n// orc.poisoned_boolean_attribute = true\r\n\r\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"test 1\")\r\n} else if (orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 2\")\r\n} else if (not orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"test 3\")\r\n} else if (not orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 4\")\r\n}\r\n\r\n// output: test 1\r\n\r\n-----\r\n\r\n// orc.dead_boolean_attribute = false\r\n// orc.poisoned_boolean_attribute = true\r\n\r\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"test 1\")\r\n} else if (orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 2\")\r\n} else if (not orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"test 3\")\r\n} else if (not orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 4\")\r\n}\r\n\r\n// output: test 3\r\n\r\n---------\r\n\r\n// orc.dead_boolean_attribute = true\r\n// orc.poisoned_boolean_attribute = false\r\n\r\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"test 1\")\r\n} else if (orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 2\")\r\n} else if (not orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"test 3\")\r\n} else if (not orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\r\n  msg (\"test 4\")\r\n}\r\n\r\n// output: test 2\r\n\r\n-------------\r\n\r\n// orc.dead_boolean_attribute = true\r\n// orc.poisoned_boolean_attribute = true\r\n\r\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else {\r\n  msg (\"FALSE\")\r\n}\r\n\r\n// output: TRUE\r\n\r\n--------\r\n\r\n// orc.dead_boolean_attribute = true\r\n// orc.poisoned_boolean_attribute = false\r\n\r\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else {\r\n  msg (\"FALSE\")\r\n}\r\n\r\n// output: FALSE\r\n\r\n------\r\n\r\n// orc.dead_boolean_attribute = false\r\n// orc.poisoned_boolean_attribute = true\r\n\r\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else {\r\n  msg (\"FALSE\")\r\n}\r\n\r\n// output: FALSE\r\n\r\n-----\r\n\r\n// orc.dead_boolean_attribute = false\r\n// orc.poisoned_boolean_attribute = false\r\n\r\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else {\r\n  msg (\"FALSE\")\r\n}\r\n\r\n// output: FALSE\r\n\r\n-----\r\n\r\n// orc.dead_boolean_attribute = true\r\n// orc.poisoned_boolean_attribute = true\r\n\r\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else {\r\n  msg (\"FALSE\")\r\n}\r\n\r\n// output: TRUE\r\n\r\n-----\r\n\r\n// orc.dead_boolean_attribute = false\r\n// orc.poisoned_boolean_attribute = false\r\n\r\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else {\r\n  msg (\"FALSE\")\r\n}\r\n\r\n// output: FALSE\r\n\r\n----\r\n\r\n// orc.dead_boolean_attribute = true\r\n// orc.poisoned_boolean_attribute = false\r\n\r\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else {\r\n  msg (\"FALSE\")\r\n}\r\n\r\n// output: TRUE\r\n\r\n--------\r\n\r\n// orc.dead_boolean_attribute = false\r\n// orc.poisoned_boolean_attribute = true\r\n\r\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\r\n  msg (\"TRUE\")\r\n} else {\r\n  msg (\"FALSE\")\r\n}\r\n\r\n// output: TRUE\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>About Boolean Attributes:</p>\n<p>these are also known as 'flags', (which I don't personally like, sighs), as 'flag' is used to name something that has only two states (dualism: opposites/adversarial):</p>\n<p>Booleans: true/false<br>\nBinary: 1/0<br>\nElectrical/Polar Charges: +/-</p>\n<p>standard comparison model:<br>\n1 = true = + = on/yes<br>\n0 = false = - = off/no</p>\n<p>various other dualism toggle names: on/off, up/down, left/right, in/out, yes/no, innocent/guilty, fat/skinny, tall/short, stupid/smart, sexy/ugly, male/female, young/old, alive/dead, fast/slow, hot/cold, etc etc etc</p>\n<p>Boolean Logic / Truth Tables:</p>\n<p>Definitions:</p>\n<p>true = TRUE<br>\nfalse = FALSE</p>\n<p>Negation (not) / Complements:</p>\n<p>not true = FALSE<br>\nnot false = TRUE</p>\n<p>'AND' logic:</p>\n<p>true and true = TRUE<br>\ntrue and false = FALSE<br>\nfalse and true = FALSE<br>\nfalse and false = FALSE</p>\n<p>'OR' logic:</p>\n<p>true or true = TRUE<br>\ntrue or false = TRUE<br>\nfalse or true = TRUE<br>\nfalse or false = FALSE</p>\n<p>some examples:</p>\n<pre><code>conceptual-logic understanding:\n\n(for this example, choose to use either 'dead' or 'alive', whichever you prefer, but not both!!!, as they're the same thing, just slightly different way of thinking about it)\n\norc.dead_boolean_attribute = true // the orc is dead\norc.dead_boolean_attribute = false // the orc is alive\n\norc.alive_boolean_attribute = true // the orc is alive\norc.alive_boolean_attribute = false // the orc is dead\n\n-----------------------------\n\nif (orc.dead_boolean_attribute) {\n  msg (\"The orc is dead.\")\n} else {\n  msg (\"The orc is alive.\")\n}\n\n--------\n\nif (not orc.dead_boolean_attribute) {\n  msg (\"The orc is alive.\")\n} else {\n  msg (\"The orc is dead.\")\n}\n\n----\n\n&lt;![CDATA[\n  if (orc.dead_boolean_attribute &lt;&gt; true) {\n    msg (\"The orc is alive.\")\n  } else {\n    msg (\"The orc is dead.\")\n  }\n]]&gt;\n\n---\n\n&lt;![CDATA[\n  if (orc.dead_boolean_attribute &lt;&gt; false) {\n    msg (\"The orc is dead.\")\n  } else {\n    msg (\"The orc is alive.\")\n  }\n]]&gt;\n\n-------\n\nif (orc.poisoned_boolean_attribute and orc.dead_boolean_attribute) {\n  msg (\"The orc is: poisoned and dead\")\n} else if (orc.poisoned_boolean_attribute and not orc.dead_boolean_attribute) {\n  msg (\"The orc is: poisoned and alive\")\n} else if (not orc.poisoned_boolean_attribute and orc.dead_boolean_attribute) {\n  msg (\"The orc is: not poisoned and dead\")\n} else if (not orc.poisoned_boolean_attribute and not orc.dead_boolean_attribute) {\n  msg (\"The orc is: not poisoned and alive\")\n}\n\n-----\n\nif (orc.poisoned_boolean_attribute or orc.dead_boolean_attribute) {\n  msg (\"The orc is either: poisoned or dead\")\n} else if (orc.poisoned_boolean_attribute or not orc.dead_boolean_attribute) {\n  msg (\"The orc is either: poisoned or alive\")\n} else if (not orc.poisoned_boolean_attribute or orc.dead_boolean_attribute) {\n  msg (\"The orc is either: not poisoned or dead\")\n} else if (not orc.poisoned_boolean_attribute or not orc.dead_boolean_attribute) {\n  msg (\"The orc is either: not poisoned or alive\")\n}\n\n--------------\n\n// orc.dead_boolean_attribute = true\n// orc.poisoned_boolean_attribute = true\n\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"test 1\")\n} else if (orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\n  msg (\"test 2\")\n} else if (not orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"test 3\")\n} else if (not orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\n  msg (\"test 4\")\n}\n\n// output: test 1\n\n---------------------------\n\n// orc.dead_boolean_attribute = false\n// orc.poisoned_boolean_attribute = false\n\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"test 1\")\n} else if (orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\n  msg (\"test 2\")\n} else if (not orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"test 3\")\n} else if (not orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\n  msg (\"test 4\")\n}\n\n// output: test 4\n\n-------------\n\n// orc.dead_boolean_attribute = true\n// orc.poisoned_boolean_attribute = false\n\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"test 1\")\n} else if (orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\n  msg (\"test 2\")\n} else if (not orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"test 3\")\n} else if (not orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\n  msg (\"test 4\")\n}\n\n// output: test 2\n\n-------------\n\n// orc.dead_boolean_attribute = false\n// orc.poisoned_boolean_attribute = true\n\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else if (orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\n  msg (\"\")\n} else if (not orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"test 3\")\n} else if (not orc.dead_boolean_attribute and not orc.poisoned_boolean_attribute) {\n  msg (\"test 4\")\n}\n\n// output: test 3\n\n------------\n\n// orc.dead_boolean_attribute = false\n// orc.poisoned_boolean_attribute = false\n\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"test 1\")\n} else if (orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\n  msg (\"test 2\")\n} else if (not orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"test 3\")\n} else if (not orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\n  msg (\"test 4\")\n}\n\n// output: test 4\n\n----------\n\n// orc.dead_boolean_attribute = true\n// orc.poisoned_boolean_attribute = true\n\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"test 1\")\n} else if (orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\n  msg (\"test 2\")\n} else if (not orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"test 3\")\n} else if (not orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\n  msg (\"test 4\")\n}\n\n// output: test 1\n\n-----\n\n// orc.dead_boolean_attribute = false\n// orc.poisoned_boolean_attribute = true\n\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"test 1\")\n} else if (orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\n  msg (\"test 2\")\n} else if (not orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"test 3\")\n} else if (not orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\n  msg (\"test 4\")\n}\n\n// output: test 3\n\n---------\n\n// orc.dead_boolean_attribute = true\n// orc.poisoned_boolean_attribute = false\n\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"test 1\")\n} else if (orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\n  msg (\"test 2\")\n} else if (not orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"test 3\")\n} else if (not orc.dead_boolean_attribute or not orc.poisoned_boolean_attribute) {\n  msg (\"test 4\")\n}\n\n// output: test 2\n\n-------------\n\n// orc.dead_boolean_attribute = true\n// orc.poisoned_boolean_attribute = true\n\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else {\n  msg (\"FALSE\")\n}\n\n// output: TRUE\n\n--------\n\n// orc.dead_boolean_attribute = true\n// orc.poisoned_boolean_attribute = false\n\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else {\n  msg (\"FALSE\")\n}\n\n// output: FALSE\n\n------\n\n// orc.dead_boolean_attribute = false\n// orc.poisoned_boolean_attribute = true\n\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else {\n  msg (\"FALSE\")\n}\n\n// output: FALSE\n\n-----\n\n// orc.dead_boolean_attribute = false\n// orc.poisoned_boolean_attribute = false\n\nif (orc.dead_boolean_attribute and orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else {\n  msg (\"FALSE\")\n}\n\n// output: FALSE\n\n-----\n\n// orc.dead_boolean_attribute = true\n// orc.poisoned_boolean_attribute = true\n\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else {\n  msg (\"FALSE\")\n}\n\n// output: TRUE\n\n-----\n\n// orc.dead_boolean_attribute = false\n// orc.poisoned_boolean_attribute = false\n\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else {\n  msg (\"FALSE\")\n}\n\n// output: FALSE\n\n----\n\n// orc.dead_boolean_attribute = true\n// orc.poisoned_boolean_attribute = false\n\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else {\n  msg (\"FALSE\")\n}\n\n// output: TRUE\n\n--------\n\n// orc.dead_boolean_attribute = false\n// orc.poisoned_boolean_attribute = true\n\nif (orc.dead_boolean_attribute or orc.poisoned_boolean_attribute) {\n  msg (\"TRUE\")\n} else {\n  msg (\"FALSE\")\n}\n\n// output: TRUE\n</code></pre>\n\n",
      "PostDate": "2017-07-26T15:16:58.5861048Z",
      "LastEditDate": "2017-07-26T15:35:31.8204374Z",
      "link": null
    },
    {
      "PostId": "85d17402-f217-4741-acda-fa156dcb4e60",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK,\r\n\r\nGood catch!\r\n\r\n```\r\n<!--\r\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\r\n-->\r\n\r\n<look type=\"script\">\r\nif (door.isopen) {\r\n  msg (\"The door is ajar.\")\r\n}\r\nelse (The door is closed at the moment.) {     //<!-- MY ERROR  -->\r\n}       //<!--THIS LINE CONTINUES THE SAME ERROR -->\r\n </look>\r\n```\r\n\r\n```\r\n<!--\r\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\r\n-->\r\n\r\n<look type=\"script\">\r\n  if (door.isopen) {\r\n    msg (\"The door is ajar.\")\r\n  }\r\n  else {        //<!-- HK'S CORRECTION -->\r\n    msg (\"The door is closed at the moment.\")        //<!-- HK'S CORRECTION (CONTINUED)-->\r\n  }            //<!-- HK'S CORRECTION (CONTINUED) -->\r\n</look>\r\n```\r\n\r\n---\r\n(slaps forehead)\r\n\r\nI had it correct in the example of the complete game in that very same post. (I can only successfully copy & paste one time every day, apparently. After that, I'm just too worn out!)\r\n\r\n---\r\n\r\nI'm editing the first one, just in case someone tries it before reading on down to your post.",
      "EditableFormat": "markdown",
      "HTML": "<p>HK,</p>\n<p>Good catch!</p>\n<pre><code>&lt;!--\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\n--&gt;\n\n&lt;look type=\"script\"&gt;\nif (door.isopen) {\n  msg (\"The door is ajar.\")\n}\nelse (The door is closed at the moment.) {     //&lt;!-- MY ERROR  --&gt;\n}       //&lt;!--THIS LINE CONTINUES THE SAME ERROR --&gt;\n &lt;/look&gt;\n</code></pre>\n<pre><code>&lt;!--\nNOTE: Refer to the entire code (included below) to see where to plug these into the main file's code.\n--&gt;\n\n&lt;look type=\"script\"&gt;\n  if (door.isopen) {\n    msg (\"The door is ajar.\")\n  }\n  else {        //&lt;!-- HK'S CORRECTION --&gt;\n    msg (\"The door is closed at the moment.\")        //&lt;!-- HK'S CORRECTION (CONTINUED)--&gt;\n  }            //&lt;!-- HK'S CORRECTION (CONTINUED) --&gt;\n&lt;/look&gt;\n</code></pre>\n<hr>\n<p>(slaps forehead)</p>\n<p>I had it correct in the example of the complete game in that very same post. (I can only successfully copy &amp; paste one time every day, apparently. After that, I'm just too worn out!)</p>\n<hr>\n<p>I'm editing the first one, just in case someone tries it before reading on down to your post.</p>\n\n",
      "PostDate": "2017-07-26T15:48:27.9619739Z",
      "LastEditDate": "2017-07-26T15:49:18.4984137Z",
      "link": null
    },
    {
      "PostId": "6075907f-f46f-47fc-8903-83972e887e8a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't think he's/she's going to be using code (and thus my code posts probably scared him/her big time, lol), just the GUI/Editor, but it's always good to have error free code, for those who are trying to use it. People who know code: \"oh, this is just a typo or syntax mistake, easy fix\", but for people who don't know code, they're freaking out as the code is not working and they're seeing these frightening error messages.",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't think he's/she's going to be using code (and thus my code posts probably scared him/her big time, lol), just the GUI/Editor, but it's always good to have error free code, for those who are trying to use it. People who know code: \"oh, this is just a typo or syntax mistake, easy fix\", but for people who don't know code, they're freaking out as the code is not working and they're seeing these frightening error messages.</p>\n\n",
      "PostDate": "2017-07-26T15:52:51.050716Z",
      "LastEditDate": "2017-07-26T15:54:09.3683298Z",
      "link": null
    },
    {
      "PostId": "46036216-37b7-4c85-a9cf-d78ca179cf2e",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK,\r\n\r\nI'm all about being error free! (The whole point is for the code to work!)\r\n\r\nIf you find an an errror, pont it out! (Especialy if i mispell somethintg!)\r\n\r\nIt doth not hurt my pride, for I have none!\r\n\r\nI want the information to be correct.\r\n\r\nNOTE: This door swings both ways, everyone. If I ever point out an error, I'm not pointing out that YOU made an error, just that there IS an error.\r\n\r\n---\r\n###### This message has been brought to you by the KEEP THE FORUM ERROR FREE SOCIETY and the number <span title=\"This is a reference to the film CLERKS.\">37</span>.",
      "EditableFormat": "markdown",
      "HTML": "<p>HK,</p>\n<p>I'm all about being error free! (The whole point is for the code to work!)</p>\n<p>If you find an an errror, pont it out! (Especialy if i mispell somethintg!)</p>\n<p>It doth not hurt my pride, for I have none!</p>\n<p>I want the information to be correct.</p>\n<p>NOTE: This door swings both ways, everyone. If I ever point out an error, I'm not pointing out that YOU made an error, just that there IS an error.</p>\n<hr>\n<h6>This message has been brought to you by the KEEP THE FORUM ERROR FREE SOCIETY and the number <span title=\"This is a reference to the film CLERKS.\">37</span>.</h6>\n\n",
      "PostDate": "2017-07-26T16:03:16.6836173Z",
      "LastEditDate": "2017-07-26T16:04:42.4867889Z",
      "link": null
    },
    {
      "PostId": "a1af42a0-b3e8-4ad9-ac60-fcf99a8f28ea",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for updating my edited post)\r\n\r\n-------------\r\n\r\nI'm lazy and so I just free write my code, and since I don't test it, usually it doesn't work, so please let me know about it, and I'll try to not be lazy and get it fixed up so it's working. Yes, the door goes both ways, as I need help with having my code error-free and working, too, hehe\r\n\r\n--------\r\n\r\nI think you can put code on one line too, for example:\r\n\r\n```\r\nif (xxx) {\r\n  msg (\"blah\")\r\n} else { msg (\"blah blah blah\") }\r\n```\r\n\r\nsome people like doing this, if they just have a single code line/Attribute/Script, and/or especially, if they don't have a script or whatever, if they don't have anything at all being done:\r\n\r\n(not the best example, as with quest, you have just leave off the 'else' part entirely, but hopefully you get the idea)\r\n\r\n```\r\nif (xxx) {\r\n  msg (\"blah\")\r\n} else {}\r\n```\r\n\r\nexample of putting an entire code block on one line (but this isn't often done, as it's hard to read):\r\n\r\n```\r\nif (xxx) { msg (\"blah\") } else { msg (\"blah blah blah\") }\r\n```\r\n\r\nand you may be able to put your entire code on one line (horizontal: computer-friendly code, non-human-friendly code), but obviously we humans never do this:\r\n\r\n```\r\n<asl version=\"550\"><include ref=\"English.aslx\" /><include ref=\"Core.aslx\" /><game name=\"example_game\"><gameid>XXX</gameid><version>1.0</version><firstpublished>2017</firstpublished></game><object name=\"room\"><inherit name=\"editor_room\" /><object name=\"player\"><inherit name=\"editor_object\" /><inherit name=\"editor_player\" /></object></object></asl>\r\n```\r\n\r\nas we humans can't read it, whereas:\r\n\r\nvertical (and line spaced especially) coding, we can read easily:\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"example_game\">\r\n\r\n    <gameid>XXX</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <object name=\"player\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for updating my edited post)</p>\n<hr>\n<p>I'm lazy and so I just free write my code, and since I don't test it, usually it doesn't work, so please let me know about it, and I'll try to not be lazy and get it fixed up so it's working. Yes, the door goes both ways, as I need help with having my code error-free and working, too, hehe</p>\n<hr>\n<p>I think you can put code on one line too, for example:</p>\n<pre><code>if (xxx) {\n  msg (\"blah\")\n} else { msg (\"blah blah blah\") }\n</code></pre>\n<p>some people like doing this, if they just have a single code line/Attribute/Script, and/or especially, if they don't have a script or whatever, if they don't have anything at all being done:</p>\n<p>(not the best example, as with quest, you have just leave off the 'else' part entirely, but hopefully you get the idea)</p>\n<pre><code>if (xxx) {\n  msg (\"blah\")\n} else {}\n</code></pre>\n<p>example of putting an entire code block on one line (but this isn't often done, as it's hard to read):</p>\n<pre><code>if (xxx) { msg (\"blah\") } else { msg (\"blah blah blah\") }\n</code></pre>\n<p>and you may be able to put your entire code on one line (horizontal: computer-friendly code, non-human-friendly code), but obviously we humans never do this:</p>\n<pre><code>&lt;asl version=\"550\"&gt;&lt;include ref=\"English.aslx\" /&gt;&lt;include ref=\"Core.aslx\" /&gt;&lt;game name=\"example_game\"&gt;&lt;gameid&gt;XXX&lt;/gameid&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;firstpublished&gt;2017&lt;/firstpublished&gt;&lt;/game&gt;&lt;object name=\"room\"&gt;&lt;inherit name=\"editor_room\" /&gt;&lt;object name=\"player\"&gt;&lt;inherit name=\"editor_object\" /&gt;&lt;inherit name=\"editor_player\" /&gt;&lt;/object&gt;&lt;/object&gt;&lt;/asl&gt;\n</code></pre>\n<p>as we humans can't read it, whereas:</p>\n<p>vertical (and line spaced especially) coding, we can read easily:</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"example_game\"&gt;\n\n    &lt;gameid&gt;XXX&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;object name=\"player\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2017-07-26T16:49:20.7666311Z",
      "LastEditDate": "2017-07-26T17:07:17.4058927Z",
      "link": null
    },
    {
      "PostId": "30f952f4-c254-492e-a833-c6f973dbd960",
      "UserId": 316011,
      "Username": "NinjaNin",
      "AvatarUrl": "http://i.imgur.com/L53RidGb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey yall, thanks so much for the replies. \r\n\r\nhegemonkhan \r\nyou're right that I'm not using the code view and so your post was quite intimidating. I tried to read through it and follow it but I was lost almost at the beginning. I definitely got lost at the part with the orc and poison example. I understood it for the most part but don't really know how to execute it the way I want. I mostly rely on the Editor but am trying to learn how to use the code viewer but its slow going. Your links and examples will help me a bunch. \r\n\r\nThanks so much XanMag and Richard Headkid for your replies as well. \r\n\r\nFor my game I want a door that is closed and locked to be opened by a key, with different descriptions for the door depending on if its locked and closed or opened and the player is trying to open it again if that makes sense. So far I've figured out that I need to probably do an if script within an if script but not much else. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey yall, thanks so much for the replies.</p>\n<p>hegemonkhan<br>\nyou're right that I'm not using the code view and so your post was quite intimidating. I tried to read through it and follow it but I was lost almost at the beginning. I definitely got lost at the part with the orc and poison example. I understood it for the most part but don't really know how to execute it the way I want. I mostly rely on the Editor but am trying to learn how to use the code viewer but its slow going. Your links and examples will help me a bunch.</p>\n<p>Thanks so much XanMag and Richard Headkid for your replies as well.</p>\n<p>For my game I want a door that is closed and locked to be opened by a key, with different descriptions for the door depending on if its locked and closed or opened and the player is trying to open it again if that makes sense. So far I've figured out that I need to probably do an if script within an if script but not much else.</p>\n\n",
      "PostDate": "2017-07-28T07:06:16.3615998Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "41bb2b1f-40bb-4527-9076-ead482d225bf",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post updated)\r\n\r\n-------------\r\n\r\nit's not easy, but it does help with making games, you can do a lot more cool stuff and do it faster.\r\n\r\nthe main thing to learn is Attribute and the 'if' Script usage (\"The two super scripts\"), as this enables you to do 90% of everything that you want to do in/for your game. Next is learning List/Dictionary Attributes and iteration, which gives you 9% more, and now you know 99% of everything for making a game. Thus, learning more... is very diminishing returns.\r\n\r\nThat said, learning Attributes and the 'if' Script is a huge jump for people new to coding and from the tutorial, but it's neccessary if you want to make a cool/real/serious/good game.\r\n\r\n----------\r\n\r\nI threw a lot at you and it's indeed overwhelming (I was overwhelmed too back when I was learning to use quest and to code for my first time), if you're interested in learning, we'll take it a step at a time.\r\n\r\n--------------------------------\r\n\r\nagain, using all of the built-in stuff for opening/closing/locking/unlocking is very confusing, we have had many people making threads for help on opening/closing/locking/unlocking doors, and I myself get confused by it too, lol.\r\n\r\n----------\r\n\r\nThe boolean stuff isn't easy as that's Logic, and the 'logic' field of science is not an easy field. It takes time to understand.\r\n\r\n--------\r\n\r\nhere's some links:\r\n\r\n(remove the dot/period from the ht.tp in the links for for the url to work for them)\r\n\r\nht.tps://en.wikipedia.org/wiki/Truth_table\r\nht.tp://www.electronics-micros.com/electronics/venn-diagrams-and-boolean-algebra/ (Venn Diagrams are great for learning/understanding the truth tables / boolean logic)\r\nht.tps://en.wikipedia.org/wiki/Boolean_algebra\r\nht.tp://philosophy.lander.edu/logic/symbolic.html (there's more pages: click on the button for going to the next page)\r\nht.tps://www.youtube.com/watch?v=7_LgEvKPa2s\r\nht.tps://www.youtube.com/watch?v=SRzSZ_rEE_A\r\nht.tp://courses.umass.edu/phil110-gmh/MAIN/IHome-5.htm\r\nht.tps://en.wikipedia.org/wiki/Logic_gate\r\nht.tp://www.electronics-tutorials.ws/logic/logic_2.html\r\nht.tp://www.electronics-tutorials.ws/logic/logic_3.html\r\n\r\n----------------\r\n\r\nmaybe using english sentences might make more sense for you with it:\r\n\r\n'AND' logic:\r\n\r\nI'll give you a million dollars if you mow the lawn and clean your room\r\n// if you just clean your room (false and true), do you get a million dollars? NO (FALSE)\r\n// if you just mow the lawn (true and false), do you get a million dollars? NO (FALSE)\r\n// if you do neither (false and false), do you get a million dollars? NO (FALSE)\r\n// if you do both (true and true), do you get a million dollars? YES (TRUE)\r\n\r\n'OR' logic:\r\n\r\nI'll give you a million dollars if you either: mow the lawn or clean your room\r\n// if you just clean your room (false or true), do you get a million dollars? YES (TRUE)\r\n// if you just mow the lawn (true or false), do you get a million dollars? YES (TRUE)\r\n// if you do neither (false or false), do you get a million dollars? NO (FALSE)\r\n// if you do both (true or true), do you get a million dollars? YES (TRUE)\r\n\r\n-----------\r\n\r\n// player.sex = \"male\"\r\n// player.race = \"human\"\r\n\r\nif (player.sex = \"male\" and player.race = \" human\") { /* scripting * / }\r\n\r\nstring comparison checking:\r\n\r\n(let's just say it starts from the left)\r\n\r\nplayer.sex (\"male\") = \"male\"\r\ndoes: (\"m\") = \"m\" ----> true\r\ndoes: (\"a\") = \"a\" -----> true\r\ndoes: (\"l\") = \"l\" -----> true\r\ndoes: (\"e\") = \"e\" ---> true\r\ndoes: player.sex = \"male\" ----> true\r\n\r\nplayer.race (\"human\") = \"human\"\r\ndoes: (\"h\") = \"h\" ----> true\r\ndoes: (\"u\") = \"u\" -----> true\r\ndoes: (\"m\") = \"m\" -----> true\r\ndoes: (\"a\") = \"a\" ---> true\r\ndoes: (\"n\") = \"n\" ---> true\r\ndoes: player.race = \"human\" ----> true\r\n\r\n[player.sex = \"human\" (true)] and [player.race = \"human\" (true)]\r\n[true] and [true] ----> TRUE\r\n\r\n if (player.sex = \"male\" and player.race = \" human\") ----> TRUE ------> do ------> { /* scripting * / }\r\n\r\n-------------\r\n\r\n// player.sex = \"male\"\r\n// player.race = \"human\"\r\n\r\nif (player.sex = \"male\" and player.race = \" humaN\") { /* scripting * / }\r\n\r\nstring comparison checking:\r\n\r\n(let's just say it starts from the left)\r\n\r\nplayer.sex (\"male\") = \"male\"\r\ndoes: (\"m\") = \"m\" ----> true\r\ndoes: (\"a\") = \"a\" -----> true\r\ndoes: (\"l\") = \"l\" -----> true\r\ndoes: (\"e\") = \"e\" ---> true\r\ndoes: player.sex = \"male\" ----> true\r\n\r\nplayer.race (\"human\") = \"humaN\"\r\ndoes: (\"h\") = \"h\" ----> true\r\ndoes: (\"u\") = \"u\" -----> true\r\ndoes: (\"m\") = \"m\" -----> true\r\ndoes: (\"a\") = \"a\" ---> true\r\ndoes: (\"n\") = \"N\" ---> false // quest is case sensitive\r\ndoes: player.race = \"humaN\" ----> false\r\n\r\n[player.sex = \"human\" (true)] and [player.race = \"humaN\" (false)]\r\n[true] and [false] ----> FALSE\r\n\r\n if (player.sex = \"male\" and player.race = \" humaN\") ----> FALSE ------> SKIP OVER / do NOT do ------> { /* scripting * / }",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post updated)</p>\n<hr>\n<p>it's not easy, but it does help with making games, you can do a lot more cool stuff and do it faster.</p>\n<p>the main thing to learn is Attribute and the 'if' Script usage (\"The two super scripts\"), as this enables you to do 90% of everything that you want to do in/for your game. Next is learning List/Dictionary Attributes and iteration, which gives you 9% more, and now you know 99% of everything for making a game. Thus, learning more... is very diminishing returns.</p>\n<p>That said, learning Attributes and the 'if' Script is a huge jump for people new to coding and from the tutorial, but it's neccessary if you want to make a cool/real/serious/good game.</p>\n<hr>\n<p>I threw a lot at you and it's indeed overwhelming (I was overwhelmed too back when I was learning to use quest and to code for my first time), if you're interested in learning, we'll take it a step at a time.</p>\n<hr>\n<p>again, using all of the built-in stuff for opening/closing/locking/unlocking is very confusing, we have had many people making threads for help on opening/closing/locking/unlocking doors, and I myself get confused by it too, lol.</p>\n<hr>\n<p>The boolean stuff isn't easy as that's Logic, and the 'logic' field of science is not an easy field. It takes time to understand.</p>\n<hr>\n<p>here's some links:</p>\n<p>(remove the dot/period from the ht.tp in the links for for the url to work for them)</p>\n<p>ht.tps://en.wikipedia.org/wiki/Truth_table<br>\nht.tp://www.electronics-micros.com/electronics/venn-diagrams-and-boolean-algebra/ (Venn Diagrams are great for learning/understanding the truth tables / boolean logic)<br>\nht.tps://en.wikipedia.org/wiki/Boolean_algebra<br>\nht.tp://philosophy.lander.edu/logic/symbolic.html (there's more pages: click on the button for going to the next page)<br>\nht.tps://www.youtube.com/watch?v=7_LgEvKPa2s<br>\nht.tps://www.youtube.com/watch?v=SRzSZ_rEE_A<br>\nht.tp://courses.umass.edu/phil110-gmh/MAIN/IHome-5.htm<br>\nht.tps://en.wikipedia.org/wiki/Logic_gate<br>\nht.tp://www.electronics-tutorials.ws/logic/logic_2.html<br>\nht.tp://www.electronics-tutorials.ws/logic/logic_3.html</p>\n<hr>\n<p>maybe using english sentences might make more sense for you with it:</p>\n<p>'AND' logic:</p>\n<p>I'll give you a million dollars if you mow the lawn and clean your room<br>\n// if you just clean your room (false and true), do you get a million dollars? NO (FALSE)<br>\n// if you just mow the lawn (true and false), do you get a million dollars? NO (FALSE)<br>\n// if you do neither (false and false), do you get a million dollars? NO (FALSE)<br>\n// if you do both (true and true), do you get a million dollars? YES (TRUE)</p>\n<p>'OR' logic:</p>\n<p>I'll give you a million dollars if you either: mow the lawn or clean your room<br>\n// if you just clean your room (false or true), do you get a million dollars? YES (TRUE)<br>\n// if you just mow the lawn (true or false), do you get a million dollars? YES (TRUE)<br>\n// if you do neither (false or false), do you get a million dollars? NO (FALSE)<br>\n// if you do both (true or true), do you get a million dollars? YES (TRUE)</p>\n<hr>\n<p>// player.sex = \"male\"<br>\n// player.race = \"human\"</p>\n<p>if (player.sex = \"male\" and player.race = \" human\") { /* scripting * / }</p>\n<p>string comparison checking:</p>\n<p>(let's just say it starts from the left)</p>\n<p>player.sex (\"male\") = \"male\"<br>\ndoes: (\"m\") = \"m\" ----&gt; true<br>\ndoes: (\"a\") = \"a\" -----&gt; true<br>\ndoes: (\"l\") = \"l\" -----&gt; true<br>\ndoes: (\"e\") = \"e\" ---&gt; true<br>\ndoes: player.sex = \"male\" ----&gt; true</p>\n<p>player.race (\"human\") = \"human\"<br>\ndoes: (\"h\") = \"h\" ----&gt; true<br>\ndoes: (\"u\") = \"u\" -----&gt; true<br>\ndoes: (\"m\") = \"m\" -----&gt; true<br>\ndoes: (\"a\") = \"a\" ---&gt; true<br>\ndoes: (\"n\") = \"n\" ---&gt; true<br>\ndoes: player.race = \"human\" ----&gt; true</p>\n<p>[player.sex = \"human\" (true)] and [player.race = \"human\" (true)]<br>\n[true] and [true] ----&gt; TRUE</p>\n<p>if (player.sex = \"male\" and player.race = \" human\") ----&gt; TRUE ------&gt; do ------&gt; { /* scripting * / }</p>\n<hr>\n<p>// player.sex = \"male\"<br>\n// player.race = \"human\"</p>\n<p>if (player.sex = \"male\" and player.race = \" humaN\") { /* scripting * / }</p>\n<p>string comparison checking:</p>\n<p>(let's just say it starts from the left)</p>\n<p>player.sex (\"male\") = \"male\"<br>\ndoes: (\"m\") = \"m\" ----&gt; true<br>\ndoes: (\"a\") = \"a\" -----&gt; true<br>\ndoes: (\"l\") = \"l\" -----&gt; true<br>\ndoes: (\"e\") = \"e\" ---&gt; true<br>\ndoes: player.sex = \"male\" ----&gt; true</p>\n<p>player.race (\"human\") = \"humaN\"<br>\ndoes: (\"h\") = \"h\" ----&gt; true<br>\ndoes: (\"u\") = \"u\" -----&gt; true<br>\ndoes: (\"m\") = \"m\" -----&gt; true<br>\ndoes: (\"a\") = \"a\" ---&gt; true<br>\ndoes: (\"n\") = \"N\" ---&gt; false // quest is case sensitive<br>\ndoes: player.race = \"humaN\" ----&gt; false</p>\n<p>[player.sex = \"human\" (true)] and [player.race = \"humaN\" (false)]<br>\n[true] and [false] ----&gt; FALSE</p>\n<p>if (player.sex = \"male\" and player.race = \" humaN\") ----&gt; FALSE ------&gt; SKIP OVER / do NOT do ------&gt; { /* scripting * / }</p>\n\n",
      "PostDate": "2017-07-28T07:50:56.2997762Z",
      "LastEditDate": "2017-07-28T08:33:34.9979939Z",
      "link": null
    },
    {
      "PostId": "726465a4-0d62-4bc6-bad4-90a3f2f8230f",
      "UserId": 316011,
      "Username": "NinjaNin",
      "AvatarUrl": "http://i.imgur.com/L53RidGb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So Boolean attributes are basically it either is or it isn't. Such as the door is either closed to allow the scripting to open the door or open and skipping that script to print a message instead or just do nothing. It's still so confusing to me even with the links you provided, although they both helped and made me more confused. The second part of the truth table really confused me but this all made me realize that I'm trying to figure out something pretty redundant, I think. Honestly I'm a bit more confused and intimidated by the codes than before. \r\n\r\nIf scripts are really nice and I got a good grasp on them from the tutorial, but I don't understand how to differentiate from how to use the And/Or in the guide nor in coding, but I get the basic gist of it. So I guess my grasp on them isn't as strong as I thought. Right now I mostly figured out how to print the message I want and unlock the exit and open the door from using one script. But It doesn't print the message I want it to have when someone tries to open the door again. It only prints the default message, \"It is already open.\" Which isn't a big deal as its only a few words off my own custom message but it still bugs me. Is this something that can be fixed or just one of the things in Quest that just is. ",
      "EditableFormat": "markdown",
      "HTML": "<p>So Boolean attributes are basically it either is or it isn't. Such as the door is either closed to allow the scripting to open the door or open and skipping that script to print a message instead or just do nothing. It's still so confusing to me even with the links you provided, although they both helped and made me more confused. The second part of the truth table really confused me but this all made me realize that I'm trying to figure out something pretty redundant, I think. Honestly I'm a bit more confused and intimidated by the codes than before.</p>\n<p>If scripts are really nice and I got a good grasp on them from the tutorial, but I don't understand how to differentiate from how to use the And/Or in the guide nor in coding, but I get the basic gist of it. So I guess my grasp on them isn't as strong as I thought. Right now I mostly figured out how to print the message I want and unlock the exit and open the door from using one script. But It doesn't print the message I want it to have when someone tries to open the door again. It only prints the default message, \"It is already open.\" Which isn't a big deal as its only a few words off my own custom message but it still bugs me. Is this something that can be fixed or just one of the things in Quest that just is.</p>\n\n",
      "PostDate": "2017-08-01T06:43:59.2947502Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dc4eeb43-55be-46fd-8072-6d22711a7713",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi NinjaNin,\r\nThe only way I can think of changing the default message on the open object, would affect all open objects, not just one door.\r\nHere's how. Under the 'tree' stuff at the left-hand side of the screen, is the word filter, with an arrow. Click that, and tick the box 'Show Library Elements', basically, everything that goes into quest, some of which the adventure writer can change.\r\nNow, in the top 'search' box, type 'already', and click search. It will come back with a list of 9 things with 'already' in the description. These are dynamic texts, texts that you can change. Click on 'AlreadyOpen', now you will have to click 'copy' at this point to put it into your game and then you are free to change the 'AlreadyOpen' object description, but it will change all open object descriptions. The same could be done for 'AlreadyClosed' too. \r\nHope this helps. Writing how to do something is more complicated than doing it, by the way, so don't be put off.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi NinjaNin,<br>\nThe only way I can think of changing the default message on the open object, would affect all open objects, not just one door.<br>\nHere's how. Under the 'tree' stuff at the left-hand side of the screen, is the word filter, with an arrow. Click that, and tick the box 'Show Library Elements', basically, everything that goes into quest, some of which the adventure writer can change.<br>\nNow, in the top 'search' box, type 'already', and click search. It will come back with a list of 9 things with 'already' in the description. These are dynamic texts, texts that you can change. Click on 'AlreadyOpen', now you will have to click 'copy' at this point to put it into your game and then you are free to change the 'AlreadyOpen' object description, but it will change all open object descriptions. The same could be done for 'AlreadyClosed' too.<br>\nHope this helps. Writing how to do something is more complicated than doing it, by the way, so don't be put off.</p>\n\n",
      "PostDate": "2017-08-01T07:13:42.4823533Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "197edd7e-cde4-432b-b5a2-1a3b0f36e967",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for updating this edit)\r\n\r\n-------------------------------------------------\r\n\r\n@ Ninja Nin:\r\n\r\nsee if this post helps... HK crosses his fingers...\r\n\r\n-------------------------------\r\n\r\nin quest programming, the '=' sign has 2 different meanings:\r\n\r\n1. Assignment operator/operation:\r\n\r\nHK.sex = \"male\"\r\n\r\nthe String Value \"male\" is being STORED INTO (ASSIGNED TO/INTO) the 'HK' Object's 'sex' String Attribute VARIABLE\r\n\r\nthe Value (either as a simple value or a complex expression) must be on the right side of the '=' sign\r\n\r\nthe VARIABLE (either as a Variable, Attribute, or Parameter) (which is going to be holding the Value) must be on the left side of the '=' sign\r\n\r\nso, this would produce an error: \"male\" = HK.sex\r\n\r\n--------\r\n\r\nhaving a simple value for its stored Value, examples:\r\n\r\nHK.sex = \"male\"\r\nHK.damage = 75\r\n\r\nhaving a complex expression-value for its stored Value, an example:\r\n\r\nkatana.damage = 50\r\nHK.weapon = katana\r\nHK.strength = 50\r\nHK.damage = HK.weapon.damage + (HK.weapon.damage * (HK.strength / 100))\r\n// HK.damage = (50) + (50 * (50/100)) = (50) + (50 * (1/2)) = (50) + (25) = 75\r\n\r\nkatana.damage = 50\r\nHK.weapon = katana\r\nHK.strength = 100\r\nHK.damage = HK.weapon.damage + (HK.weapon.damage * (HK.strength / 100))\r\n// HK.damage = (50) + (50 * (100/100)) = (50) + (50 * 1) = (50) + (50) = 100\r\n\r\nkatana.damage = 50\r\nHK.weapon = katana\r\nHK.strength = 0\r\nHK.damage = HK.weapon.damage + (HK.weapon.damage * (HK.strength / 100))\r\n// HK.damage = (50) + (50 * (0/100)) = (50) + (50 * 0) = (50) + (0) = 50\r\n\r\n// -------\r\n\r\nplayer.alias = \"HK\"\r\nplayer.sex = \"male\"\r\nplayer.age_string = \"adult\"\r\nplayer.age_integer = 18\r\nplayer.race = \"human\"\r\nplayer.class = \"warrior\"\r\nplayer.description = player.alias + \" is a \" + player.age_integer + \" year old \" + player.age_string + \" \" + player.sex + \" \" + player.race + \" \" + player.class + \".\"\r\n// player.description = \"HK is a 18 year old adult male human warrior.\"\r\n// msg (player.description)\r\n// output:\r\n// HK is a 18 year old adult male human warrior.\r\n\r\n// ---------------------------------------------------------\r\n\r\nthus, the 'Assignment' programming operator/operation is very different from:\r\n\r\nmath's 'equal to / comparison' operator/operation:\r\n\r\n2 + 5 = 7 // no error\r\n7 = 2 + 5 // no error\r\n\r\nN + 5 = 7 // no error\r\n7 = N + 5  // no error\r\n\r\nin programming, my 'HK.sex' Attribute VARIABLE is the exact same as the 'N' VARIABLE in the math equation (the only difference is that in programming, you can hold any data type value within your VARIABLE: strings, integers/non-decimal-numbers, doubles/floats/floating-points/decimal-numbers, etc etc etc, whereas, math can only hold two data types in its VARIABLES: integers/non-decimal-numbers and doubles/floats/floating-points/decimal-numbers), for example:\r\n\r\nprogramming:\r\nHK.sex = \"male\"\r\nis conceptually the same as:\r\nmath:\r\nN = 5\r\n// ----------\r\nmath:\r\nN = 5\r\nN + 2 = ???\r\n// N + 2 = 7\r\n// ---------\r\npretend math example as programming's Assignment operator/operation:\r\nN = 5\r\nN = N + 2\r\n// N = 7\r\n// as if we were actually doing a math operation:\r\nN = N + 2\r\n-N -N\r\n0 = 0 + 2\r\n0 = 2\r\n// ---------------------\r\nprogramming:\r\n\r\n(this particular example below of adding String Values, which is known as 'concatenation', which mean literally putting things together)\r\n\r\nHK.sex = \"male\"\r\nHK.sex = HK.sex + \"(blah)\"\r\n// HK.sex = male (blah)\r\n\r\nmath addition vs concatenation:\r\n\r\n5 + 5 = 10\r\n55 + 55 = 110\r\n\"mama\" + \"mia\" = ERROR! human and computer: can't compute the sum of: \"mama\" + \"mia\"\r\n\"mama\" + 5 = ERROR! human and computer: can't compute the sum of: \"mama\" + 5\r\n\"5\" + 5 = ERROR! human and computer: can't compute the sum of: \"5\" + 5\r\n\r\n\"5\" + \"5\" = \"55\"\r\n\"55\" + \"55\" = \"5555\"\r\n\"mama\" + \"mia\" = \"mamamia\"\r\n\"mama\" + \"5\" = \"mama5\"\r\n\"mama\" + \" \" + \"mia\" = \"mama mia\"\r\n\"mama\" + \" \" + \"5\" + \" \" + \"mia\" = \"mama 5 mia\"\r\n\r\n// ---------------\r\n\r\nProgramming's 'Assignment' operator/operation:\r\n\r\nN = 5 // the 'N' VARIABLE is holding the '5' Integer Value\r\nN = 5 + 2 // the 'N' VARIABLE is holding the '7' Integer Value\r\n\r\nHK.sex = \"male\" // the 'HK.sex' Attribute VARIABLE is holding the \"male\" String Value\r\nHK.sex = HK.sex + \"(blah)\" //  the 'HK.sex' Attribute VARIABLE is holding the \"male (blah)\" String Value\r\n\r\n2. comparison / equal to operator/operation:\r\n\r\nhttps://en.wikipedia.org/wiki/Arity (unary: 'not' ---- binary: 'and', 'or', '>', '<', '=>', '=<', '=')\r\n.\r\n.\r\n**this will help you understand this: Boolean Logic / Truth Table, stuff, inside and out (I hope, lol):**\r\n.\r\n.\r\n```\r\n// if (EXPRESSION) { msg (\"yes\") } else { msg (\"no\") }\r\n//\r\n// if (EXPRESSION_IS_TRUE) { ----> msg (\"yes\") }\r\n// if (EXPRESSION_IS_FALSE) { ----> } else { msg (\"no\") }\r\n\r\n// --------------------------------------------------------------------------------\r\n\r\nif (true) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nif (false) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\n// -------------------------------------------------------------------\r\n\r\nif (not true) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nif (not false) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\n// ----------------------------------------------------------------\r\n\r\nif (5 = 5) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nif (3 = 5) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nif (5 = 3) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\n// ------------------------------------------------\r\n\r\nif (2 + 5 = 7) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (7 = 7) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nif (7 = 2 + 5) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (7 = 7) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nif (1 + 2 = 7) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (3 = 7) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nif (7 = 1 + 2) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (7 = 3) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\n// ----------------------------------------------\r\n\r\nN = 5\r\nif (N = 5) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = 5) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nN = 5\r\nif (5 = N) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = 5) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nN = 5\r\nif (N = 9) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = 9) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nN = 5\r\nif (9 = N) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (9 = 5) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nN = 2\r\nif (N = 5) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (2 = 5) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nN = 2\r\nif (5 = N) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = 2) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\n// --------------------------------\r\n\r\nplayer.damage = 5\r\nif (player.damage = 5) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = 5) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nplayer.damage = 5\r\nif (5 = player.damage) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = 5) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nplayer.damage = 5\r\nif (player.damage = 9) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = 9) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nplayer.damage = 5\r\nif (9 = player.damage) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (9 = 5) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nplayer.damage = 2\r\nif (player.damage = 5) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (2 = 5) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nplayer.damage = 2\r\nif (5 = player.damage) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = 2) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\n// -------------------\r\n\r\nHK.sex = \"male\"\r\nif (HK.sex = \"male\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"male\") {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nHK.sex = \"male\"\r\nif (\"male\" = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"male\") {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nHK.sex = \"male\"\r\nif (HK.sex = 5) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = 5) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = \"male\"\r\nif (5 = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = \"male\") {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = \"male\"\r\nif (HK.sex = \"female\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"female\") {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = \"male\"\r\nif (\"female\" = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"female\" = \"male\") {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = 5\r\nif (HK.sex = \"male\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (5 = \"male\") {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = 5\r\nif (\"male\" = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = 5) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = \"female\"\r\nif (HK.sex = \"male\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"female\" = \"male\") {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = \"female\"\r\nif (\"male\" = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"female\") {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\n// ------------------\r\n\r\norc.dead = true\r\nif (orc.dead) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (true) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\norc.dead = false\r\nif (orc.dead) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (false) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\n// -------------------\r\n\r\norc.dead = true\r\nif (orc.dead = true) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (true = true) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\norc.dead = true\r\nif (orc.dead = false) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (true = false) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\norc.dead = true\r\nif (true = orc.dead) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (true = true) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\norc.dead = true\r\nif (false = orc.dead) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (false = true) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\norc.dead = false\r\nif (orc.dead = true) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (false = true) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\norc.dead = false\r\nif (orc.dead = false) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (false = false) {\r\n// if (TRUE) { ---> msg (\"yes\") } \r\n\r\norc.dead = false\r\nif (true = orc.dead) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (true = false) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\norc.dead = false\r\nif (false = orc.dead) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (false = false) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\n// ----------------------------\r\n\r\norc.dead = true\r\nif (not orc.dead) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (not true) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\norc.dead = false\r\nif (not orc.dead) { msg (\"yes\") } else { msg (\"no\") }\r\n// if (not false) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\n// --------------------\r\n\r\nHK.sex = \"male\"\r\nHK.age = \"adult\"\r\nif (HK.sex = \"male\" and HK.age = \"adult\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"male\" and \"adult\" = \"adult\") {\r\n// if (true and true) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nHK.sex = \"male\"\r\nHK.age = \"adult\"\r\nif (HK.sex = \"male\" and HK.age = \"baby\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"male\" and \"adult\" = \"baby\") {\r\n// if (true and false) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = \"male\"\r\nHK.age = \"adult\"\r\nif (HK.sex = \"female\" and HK.age = \"adult\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"female\" and \"adult\" = \"adult\") {\r\n// if (false and true) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\nHK.sex = \"male\"\r\nHK.age = \"adult\"\r\nif (HK.sex = \"female\" and HK.age = \"baby\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"female\" and \"adult\" = \"baby\") {\r\n// if (false and false) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n\r\n// ---------------------------\r\n\r\nHK.sex = \"male\"\r\nHK.age = \"adult\"\r\nif (HK.sex = \"male\" or HK.age = \"adult\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"male\" or \"adult\" = \"adult\") {\r\n// if (true or true) {\r\n// if (TRUE) { ---> msg (\"yes\") }\r\n\r\nHK.sex = \"male\"\r\nHK.age = \"adult\"\r\nif (HK.sex = \"male\" or HK.age = \"baby\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"male\" or \"adult\" = \"baby\") {\r\n// if (true or false) {\r\n// if (TRUE) { ---> msg (yes\") }\r\n\r\nHK.sex = \"male\"\r\nHK.age = \"adult\"\r\nif (HK.sex = \"female\" or HK.age = \"adult\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"female\" or \"adult\" = \"adult\") {\r\n// if (false or true) {\r\n// if (TRUE) { ---> msg (\"no\") }\r\n\r\nHK.sex = \"male\"\r\nHK.age = \"adult\"\r\nif (HK.sex = \"female\" and HK.age = \"baby\") { msg (\"yes\") } else { msg (\"no\") }\r\n// if (\"male\" = \"female\" or \"adult\" = \"baby\") {\r\n// if (false or false) {\r\n// if (FALSE) { ---> } else { msg (\"no\") }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for updating this edit)</p>\n<hr>\n<p>@ Ninja Nin:</p>\n<p>see if this post helps... HK crosses his fingers...</p>\n<hr>\n<p>in quest programming, the '=' sign has 2 different meanings:</p>\n<ol>\n<li>Assignment operator/operation:</li>\n</ol>\n<p>HK.sex = \"male\"</p>\n<p>the String Value \"male\" is being STORED INTO (ASSIGNED TO/INTO) the 'HK' Object's 'sex' String Attribute VARIABLE</p>\n<p>the Value (either as a simple value or a complex expression) must be on the right side of the '=' sign</p>\n<p>the VARIABLE (either as a Variable, Attribute, or Parameter) (which is going to be holding the Value) must be on the left side of the '=' sign</p>\n<p>so, this would produce an error: \"male\" = HK.sex</p>\n<hr>\n<p>having a simple value for its stored Value, examples:</p>\n<p>HK.sex = \"male\"<br>\nHK.damage = 75</p>\n<p>having a complex expression-value for its stored Value, an example:</p>\n<p>katana.damage = 50<br>\nHK.weapon = katana<br>\nHK.strength = 50<br>\nHK.damage = HK.weapon.damage + (HK.weapon.damage * (HK.strength / 100))<br>\n// HK.damage = (50) + (50 * (50/100)) = (50) + (50 * (1/2)) = (50) + (25) = 75</p>\n<p>katana.damage = 50<br>\nHK.weapon = katana<br>\nHK.strength = 100<br>\nHK.damage = HK.weapon.damage + (HK.weapon.damage * (HK.strength / 100))<br>\n// HK.damage = (50) + (50 * (100/100)) = (50) + (50 * 1) = (50) + (50) = 100</p>\n<p>katana.damage = 50<br>\nHK.weapon = katana<br>\nHK.strength = 0<br>\nHK.damage = HK.weapon.damage + (HK.weapon.damage * (HK.strength / 100))<br>\n// HK.damage = (50) + (50 * (0/100)) = (50) + (50 * 0) = (50) + (0) = 50</p>\n<p>// -------</p>\n<p>player.alias = \"HK\"<br>\nplayer.sex = \"male\"<br>\nplayer.age_string = \"adult\"<br>\nplayer.age_integer = 18<br>\nplayer.race = \"human\"<br>\nplayer.class = \"warrior\"<br>\nplayer.description = player.alias + \" is a \" + player.age_integer + \" year old \" + player.age_string + \" \" + player.sex + \" \" + player.race + \" \" + player.class + \".\"<br>\n// player.description = \"HK is a 18 year old adult male human warrior.\"<br>\n// msg (player.description)<br>\n// output:<br>\n// HK is a 18 year old adult male human warrior.</p>\n<p>// ---------------------------------------------------------</p>\n<p>thus, the 'Assignment' programming operator/operation is very different from:</p>\n<p>math's 'equal to / comparison' operator/operation:</p>\n<p>2 + 5 = 7 // no error<br>\n7 = 2 + 5 // no error</p>\n<p>N + 5 = 7 // no error<br>\n7 = N + 5  // no error</p>\n<p>in programming, my 'HK.sex' Attribute VARIABLE is the exact same as the 'N' VARIABLE in the math equation (the only difference is that in programming, you can hold any data type value within your VARIABLE: strings, integers/non-decimal-numbers, doubles/floats/floating-points/decimal-numbers, etc etc etc, whereas, math can only hold two data types in its VARIABLES: integers/non-decimal-numbers and doubles/floats/floating-points/decimal-numbers), for example:</p>\n<p>programming:<br>\nHK.sex = \"male\"<br>\nis conceptually the same as:<br>\nmath:<br>\nN = 5<br>\n// ----------<br>\nmath:<br>\nN = 5<br>\nN + 2 = ???<br>\n// N + 2 = 7<br>\n// ---------<br>\npretend math example as programming's Assignment operator/operation:<br>\nN = 5<br>\nN = N + 2<br>\n// N = 7<br>\n// as if we were actually doing a math operation:<br>\nN = N + 2<br>\n-N -N<br>\n0 = 0 + 2<br>\n0 = 2<br>\n// ---------------------<br>\nprogramming:</p>\n<p>(this particular example below of adding String Values, which is known as 'concatenation', which mean literally putting things together)</p>\n<p>HK.sex = \"male\"<br>\nHK.sex = HK.sex + \"(blah)\"<br>\n// HK.sex = male (blah)</p>\n<p>math addition vs concatenation:</p>\n<p>5 + 5 = 10<br>\n55 + 55 = 110<br>\n\"mama\" + \"mia\" = ERROR! human and computer: can't compute the sum of: \"mama\" + \"mia\"<br>\n\"mama\" + 5 = ERROR! human and computer: can't compute the sum of: \"mama\" + 5<br>\n\"5\" + 5 = ERROR! human and computer: can't compute the sum of: \"5\" + 5</p>\n<p>\"5\" + \"5\" = \"55\"<br>\n\"55\" + \"55\" = \"5555\"<br>\n\"mama\" + \"mia\" = \"mamamia\"<br>\n\"mama\" + \"5\" = \"mama5\"<br>\n\"mama\" + \" \" + \"mia\" = \"mama mia\"<br>\n\"mama\" + \" \" + \"5\" + \" \" + \"mia\" = \"mama 5 mia\"</p>\n<p>// ---------------</p>\n<p>Programming's 'Assignment' operator/operation:</p>\n<p>N = 5 // the 'N' VARIABLE is holding the '5' Integer Value<br>\nN = 5 + 2 // the 'N' VARIABLE is holding the '7' Integer Value</p>\n<p>HK.sex = \"male\" // the 'HK.sex' Attribute VARIABLE is holding the \"male\" String Value<br>\nHK.sex = HK.sex + \"(blah)\" //  the 'HK.sex' Attribute VARIABLE is holding the \"male (blah)\" String Value</p>\n<ol start=\"2\">\n<li>comparison / equal to operator/operation:</li>\n</ol>\n<p>https://en.wikipedia.org/wiki/Arity (unary: 'not' ---- binary: 'and', 'or', '&gt;', '&lt;', '=&gt;', '=&lt;', '=')<br>\n.<br>\n.<br>\n<strong>this will help you understand this: Boolean Logic / Truth Table, stuff, inside and out (I hope, lol):</strong><br>\n.<br>\n.</p>\n<pre><code>// if (EXPRESSION) { msg (\"yes\") } else { msg (\"no\") }\n//\n// if (EXPRESSION_IS_TRUE) { ----&gt; msg (\"yes\") }\n// if (EXPRESSION_IS_FALSE) { ----&gt; } else { msg (\"no\") }\n\n// --------------------------------------------------------------------------------\n\nif (true) { msg (\"yes\") } else { msg (\"no\") }\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nif (false) { msg (\"yes\") } else { msg (\"no\") }\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\n// -------------------------------------------------------------------\n\nif (not true) { msg (\"yes\") } else { msg (\"no\") }\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nif (not false) { msg (\"yes\") } else { msg (\"no\") }\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\n// ----------------------------------------------------------------\n\nif (5 = 5) { msg (\"yes\") } else { msg (\"no\") }\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nif (3 = 5) { msg (\"yes\") } else { msg (\"no\") }\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nif (5 = 3) { msg (\"yes\") } else { msg (\"no\") }\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\n// ------------------------------------------------\n\nif (2 + 5 = 7) { msg (\"yes\") } else { msg (\"no\") }\n// if (7 = 7) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nif (7 = 2 + 5) { msg (\"yes\") } else { msg (\"no\") }\n// if (7 = 7) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nif (1 + 2 = 7) { msg (\"yes\") } else { msg (\"no\") }\n// if (3 = 7) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nif (7 = 1 + 2) { msg (\"yes\") } else { msg (\"no\") }\n// if (7 = 3) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\n// ----------------------------------------------\n\nN = 5\nif (N = 5) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = 5) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nN = 5\nif (5 = N) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = 5) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nN = 5\nif (N = 9) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = 9) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nN = 5\nif (9 = N) { msg (\"yes\") } else { msg (\"no\") }\n// if (9 = 5) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nN = 2\nif (N = 5) { msg (\"yes\") } else { msg (\"no\") }\n// if (2 = 5) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nN = 2\nif (5 = N) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = 2) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\n// --------------------------------\n\nplayer.damage = 5\nif (player.damage = 5) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = 5) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nplayer.damage = 5\nif (5 = player.damage) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = 5) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nplayer.damage = 5\nif (player.damage = 9) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = 9) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nplayer.damage = 5\nif (9 = player.damage) { msg (\"yes\") } else { msg (\"no\") }\n// if (9 = 5) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nplayer.damage = 2\nif (player.damage = 5) { msg (\"yes\") } else { msg (\"no\") }\n// if (2 = 5) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nplayer.damage = 2\nif (5 = player.damage) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = 2) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\n// -------------------\n\nHK.sex = \"male\"\nif (HK.sex = \"male\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"male\") {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nHK.sex = \"male\"\nif (\"male\" = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"male\") {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nHK.sex = \"male\"\nif (HK.sex = 5) { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = 5) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = \"male\"\nif (5 = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = \"male\") {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = \"male\"\nif (HK.sex = \"female\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"female\") {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = \"male\"\nif (\"female\" = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\n// if (\"female\" = \"male\") {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = 5\nif (HK.sex = \"male\") { msg (\"yes\") } else { msg (\"no\") }\n// if (5 = \"male\") {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = 5\nif (\"male\" = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = 5) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = \"female\"\nif (HK.sex = \"male\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"female\" = \"male\") {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = \"female\"\nif (\"male\" = HK.sex) { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"female\") {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\n// ------------------\n\norc.dead = true\nif (orc.dead) { msg (\"yes\") } else { msg (\"no\") }\n// if (true) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\norc.dead = false\nif (orc.dead) { msg (\"yes\") } else { msg (\"no\") }\n// if (false) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\n// -------------------\n\norc.dead = true\nif (orc.dead = true) { msg (\"yes\") } else { msg (\"no\") }\n// if (true = true) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\norc.dead = true\nif (orc.dead = false) { msg (\"yes\") } else { msg (\"no\") }\n// if (true = false) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\norc.dead = true\nif (true = orc.dead) { msg (\"yes\") } else { msg (\"no\") }\n// if (true = true) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\norc.dead = true\nif (false = orc.dead) { msg (\"yes\") } else { msg (\"no\") }\n// if (false = true) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\norc.dead = false\nif (orc.dead = true) { msg (\"yes\") } else { msg (\"no\") }\n// if (false = true) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\norc.dead = false\nif (orc.dead = false) { msg (\"yes\") } else { msg (\"no\") }\n// if (false = false) {\n// if (TRUE) { ---&gt; msg (\"yes\") } \n\norc.dead = false\nif (true = orc.dead) { msg (\"yes\") } else { msg (\"no\") }\n// if (true = false) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\norc.dead = false\nif (false = orc.dead) { msg (\"yes\") } else { msg (\"no\") }\n// if (false = false) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\n// ----------------------------\n\norc.dead = true\nif (not orc.dead) { msg (\"yes\") } else { msg (\"no\") }\n// if (not true) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\norc.dead = false\nif (not orc.dead) { msg (\"yes\") } else { msg (\"no\") }\n// if (not false) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\n// --------------------\n\nHK.sex = \"male\"\nHK.age = \"adult\"\nif (HK.sex = \"male\" and HK.age = \"adult\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"male\" and \"adult\" = \"adult\") {\n// if (true and true) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nHK.sex = \"male\"\nHK.age = \"adult\"\nif (HK.sex = \"male\" and HK.age = \"baby\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"male\" and \"adult\" = \"baby\") {\n// if (true and false) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = \"male\"\nHK.age = \"adult\"\nif (HK.sex = \"female\" and HK.age = \"adult\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"female\" and \"adult\" = \"adult\") {\n// if (false and true) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\nHK.sex = \"male\"\nHK.age = \"adult\"\nif (HK.sex = \"female\" and HK.age = \"baby\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"female\" and \"adult\" = \"baby\") {\n// if (false and false) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n\n// ---------------------------\n\nHK.sex = \"male\"\nHK.age = \"adult\"\nif (HK.sex = \"male\" or HK.age = \"adult\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"male\" or \"adult\" = \"adult\") {\n// if (true or true) {\n// if (TRUE) { ---&gt; msg (\"yes\") }\n\nHK.sex = \"male\"\nHK.age = \"adult\"\nif (HK.sex = \"male\" or HK.age = \"baby\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"male\" or \"adult\" = \"baby\") {\n// if (true or false) {\n// if (TRUE) { ---&gt; msg (yes\") }\n\nHK.sex = \"male\"\nHK.age = \"adult\"\nif (HK.sex = \"female\" or HK.age = \"adult\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"female\" or \"adult\" = \"adult\") {\n// if (false or true) {\n// if (TRUE) { ---&gt; msg (\"no\") }\n\nHK.sex = \"male\"\nHK.age = \"adult\"\nif (HK.sex = \"female\" and HK.age = \"baby\") { msg (\"yes\") } else { msg (\"no\") }\n// if (\"male\" = \"female\" or \"adult\" = \"baby\") {\n// if (false or false) {\n// if (FALSE) { ---&gt; } else { msg (\"no\") }\n</code></pre>\n\n",
      "PostDate": "2017-08-01T13:03:10.5191557Z",
      "LastEditDate": "2017-08-01T13:48:12.2581291Z",
      "link": null
    },
    {
      "PostId": "ae2e2a66-4dcf-4d3b-b4dd-f0a7dc8a26e6",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "example of door opening/closing scripting (and logic):\r\n\r\n```\r\n// for the 'open' Verb:\r\n\r\nif (door.isopen) { // if the door is already open: door.isopen = true\r\n  msg (\"The door is already open, silly. You can't open a door that is already opened!\")\r\n} else { // if the door is closed: door.isopen = false\r\n  door.isopen = true // you actually set the door to now being open\r\n  msg (\"You open the door\")\r\n}\r\n\r\n// for the 'close' Verb:\r\n\r\nif (door.isopen) { // if the door is open: door.isopen = true\r\n  door.isopen = false // you actually set the door to now being closed\r\n  msg (\"You open the door\")\r\n} else { // if the door is already closed: door.isopen = false\r\n  msg (\"The door is already closed, silly. You can't close a door that is already closed!\")\r\n}\r\n```\r\n\r\n----------------\r\n\r\na full game code of it (actual working code, aside from my all-capitolized stuff and my use of an older version of quest: v550, as that needs to be replaced with correct code, and the current engine/quest.exe: v570), example:\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"example_game\">\r\n\r\n    <gameid>SOME_RANDOMLY_GENERATED_HASH_STRING</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n  </object>\r\n\r\n  <object name=\"player\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n    <inherit name=\"editor_player\" />\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  </object>\r\n\r\n  <object name=\"door\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n    <attr name=\"isopen\" type=\"boolean\">false</attr>\r\n\r\n    <attr name=\"displayverbs\" type=\"simplestringlist\">my_look; my_open; my_close</attr>\r\n\r\n    <attr name=\"my_look\" type=\"script\">\r\n      msg (\"Door Current State (true:open, false:closed): \" + door.isopen)\r\n    </attr>\r\n\r\n    <attr name=\"my_open\" type=\"script\">\r\n      if (door.isopen) {\r\n        msg (\"The door is already open, silly. You can't open a door that is already opened!\")\r\n      } else {\r\n        door.isopen = true\r\n        msg (\"You open the door\")\r\n      }\r\n    </attr>\r\n\r\n    <attr name=\"my_close\" type=\"script\">\r\n      if (door.isopen) {\r\n        door.isopen = false\r\n        msg (\"You open the door\")\r\n      } else {\r\n        msg (\"The door is already closed, silly. You can't close a door that is already closed!\")\r\n      }\r\n    </attr>\r\n\r\n  </object>\r\n\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>example of door opening/closing scripting (and logic):</p>\n<pre><code>// for the 'open' Verb:\n\nif (door.isopen) { // if the door is already open: door.isopen = true\n  msg (\"The door is already open, silly. You can't open a door that is already opened!\")\n} else { // if the door is closed: door.isopen = false\n  door.isopen = true // you actually set the door to now being open\n  msg (\"You open the door\")\n}\n\n// for the 'close' Verb:\n\nif (door.isopen) { // if the door is open: door.isopen = true\n  door.isopen = false // you actually set the door to now being closed\n  msg (\"You open the door\")\n} else { // if the door is already closed: door.isopen = false\n  msg (\"The door is already closed, silly. You can't close a door that is already closed!\")\n}\n</code></pre>\n<hr>\n<p>a full game code of it (actual working code, aside from my all-capitolized stuff and my use of an older version of quest: v550, as that needs to be replaced with correct code, and the current engine/quest.exe: v570), example:</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"example_game\"&gt;\n\n    &lt;gameid&gt;SOME_RANDOMLY_GENERATED_HASH_STRING&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"player\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"door\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n    &lt;attr name=\"isopen\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n    &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;my_look; my_open; my_close&lt;/attr&gt;\n\n    &lt;attr name=\"my_look\" type=\"script\"&gt;\n      msg (\"Door Current State (true:open, false:closed): \" + door.isopen)\n    &lt;/attr&gt;\n\n    &lt;attr name=\"my_open\" type=\"script\"&gt;\n      if (door.isopen) {\n        msg (\"The door is already open, silly. You can't open a door that is already opened!\")\n      } else {\n        door.isopen = true\n        msg (\"You open the door\")\n      }\n    &lt;/attr&gt;\n\n    &lt;attr name=\"my_close\" type=\"script\"&gt;\n      if (door.isopen) {\n        door.isopen = false\n        msg (\"You open the door\")\n      } else {\n        msg (\"The door is already closed, silly. You can't close a door that is already closed!\")\n      }\n    &lt;/attr&gt;\n\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2017-08-01T14:10:03.0277522Z",
      "LastEditDate": "2017-08-01T14:38:12.4731507Z",
      "link": null
    },
    {
      "PostId": "f12be8eb-03d8-43d0-bc0d-3ae1f0ec8507",
      "UserId": 316011,
      "Username": "NinjaNin",
      "AvatarUrl": "http://i.imgur.com/L53RidGb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks Doctor Agon for the info. Hm so I can't just have it change for each openable/closeable item? I do have the code set up as HK says with the door.is open even in code and I set it up multiple times. I even opened a new game to try and implement it without breaking my other one but it still gives me the default message. \r\n\r\nCan I just delete the Dynamic Template for Always open or would that break the game hard core?\r\n\r\nThank you HK for all that info and examples. I think I have a grasp on the logic ( hopefully ), but it also seems like one of those things where if you think on it a lot then you'll get lost because its actually very simple? So AND means there must be both prerequisites to do the script and OR means that either or the prerequisites must be there to do the scripting. So If I wanted to do an IF script to open my door with a key it would be an AND If script. something like \r\n\r\n    if (Got(key)) {\r\n       if (door.isopen) {\r\n         msg (\"You reach to open the door before remembering it's already open.\")\r\n    }\r\n       else {\r\n         msg (\"You slide the key into the lock and turn it hearing the lock click.\")\r\n         UnlockExit (lockedtest)\r\n         HelperOpenObject (door)\r\n    }\r\n\r\nThis would be an AND script because the door both needs to be closed and have the key on the player for the scripting to open it to run right? What would an OR script look like then. Is that the Else If scripting? \r\n\r\nI do use the guide a lot still (Its just so neat and nice). Is there a difference on if I do it with the HelperOpenObject or by setting the attribute via code? \r\n\r\nAnyway I have written that exactly in the code view and it's still showing the default message instead of the message I wrote at the top of the code. \r\n         ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks Doctor Agon for the info. Hm so I can't just have it change for each openable/closeable item? I do have the code set up as HK says with the door.is open even in code and I set it up multiple times. I even opened a new game to try and implement it without breaking my other one but it still gives me the default message.</p>\n<p>Can I just delete the Dynamic Template for Always open or would that break the game hard core?</p>\n<p>Thank you HK for all that info and examples. I think I have a grasp on the logic ( hopefully ), but it also seems like one of those things where if you think on it a lot then you'll get lost because its actually very simple? So AND means there must be both prerequisites to do the script and OR means that either or the prerequisites must be there to do the scripting. So If I wanted to do an IF script to open my door with a key it would be an AND If script. something like</p>\n<pre><code>if (Got(key)) {\n   if (door.isopen) {\n     msg (\"You reach to open the door before remembering it's already open.\")\n}\n   else {\n     msg (\"You slide the key into the lock and turn it hearing the lock click.\")\n     UnlockExit (lockedtest)\n     HelperOpenObject (door)\n}\n</code></pre>\n<p>This would be an AND script because the door both needs to be closed and have the key on the player for the scripting to open it to run right? What would an OR script look like then. Is that the Else If scripting?</p>\n<p>I do use the guide a lot still (Its just so neat and nice). Is there a difference on if I do it with the HelperOpenObject or by setting the attribute via code?</p>\n<p>Anyway I have written that exactly in the code view and it's still showing the default message instead of the message I wrote at the top of the code.</p>\n\n",
      "PostDate": "2017-08-02T04:38:04.707326Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "75f59850-46f9-4568-9ace-1306ce753912",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting this edited post to update / be posted, grrr)\r\n(again, filler for getting this edited post to update / be posted, grrr)\r\n\r\n----------------------\r\n\r\nnested (layers of) 'ifs' is the same 'and' logic as is using the 'and' logic operator:\r\n\r\n```\r\nif (bedroom.clean and lawn.mowed and dishes.washed) {\r\n  msg (\"You can go play your video games now\")\r\n} else if (bedroom.clean and lawn.mowed) {\r\n  msg (\"Sorry, but you still have to wash the dishes first, before you can play your video games\")\r\n} else if (bedroom.clean and dishes.washed) {\r\n  msg (\"Sorry, but you still have to mow the lawn first, before you can play your video games\")\r\n} else if (dishes.washed and lawn.mowed) {\r\n  msg (\"Sorry, but you still have to clean your bedroom first, before you can play your video games\")\r\n} else if (bedroom.clean) {\r\n  msg (\"Sorry, but you still have to wash the dishes and mow the lawn, first, before you can play your video games\")\r\n} else if (dishes.washed) {\r\n  msg (\"Sorry, but you still have to clean your bedroom and mow the lawn, first, before you can play your video games\")\r\n}  else if (lawn.mowed) {\r\n  msg (\"Sorry, but you still have to wash the dishes and clean your bedroom, first, before you can play your video games\")\r\n}  else {\r\n  msg (\"Sorry, but you still have to wash the dishes, mow the lawn, and clean your bedroom, first, before you can play your video games\")\r\n}\r\n```\r\n\r\nis exact the same as:\r\n\r\n```\r\nif (bedroom.clean) {\r\n  if (lawn.mowed) {\r\n    if (dishes.washed) {\r\n      msg (\"You can go play your video games now\")\r\n    } else {\r\n      msg (\"Sorry, but you still have to wash the dishes first, before you can play your video games\")\r\n  } else if (dishes.washed) {\r\n    msg (\"Sorry, but you still have to mow the lawn first, before you can play your video games\")\r\n  } else {\r\n    msg (\"Sorry, but you still have to wash the dishes and mow the lawn, first, before you can play your video games\")\r\n} else {\r\n  if (dishes.washed and lawn.mowed) {\r\n    msg (\"Sorry, but you still have to clean your bedroom first, before you can play your video games\")  \r\n  } else if (dishes.washed) {\r\n    msg (\"Sorry, but you still have to clean your bedroom and mow the lawn, first, before you can play your video games\")\r\n  } else if (lawn.mowed) {\r\n    msg (\"Sorry, but you still have to wash the dishes and clean your bedroom, first, before you can play your video games\")\r\n  } else {\r\n    msg (\"Sorry, but you still have to wash the dishes, mow the lawn, and clean your bedroom, first, before you can play your video games\")\r\n  }\r\n}\r\n```\r\n\r\n---------------\r\n\r\nas for why you're still having issues:\r\n\r\nlet's first see if this correction of your example code, fixes it for you (if it works or not):\r\n\r\n(try using this fixed and expanded... sorry about all the logic combinations/possibilities that I added in lol ... code of yours, and let me know if it works or not. If you're still getting error messages or not. Try it in a new game too, and make sure you actually add in all the same Objects and Attributes as you named in your code)\r\n\r\n```\r\nif (Got(key)) {\r\n   if (door.isopen) {\r\n     msg (\"You reach to open the door before remembering it's already open.\")\r\n   } else {\r\n     msg (\"You slide the key into the lock and turn it hearing the lock click.\")\r\n     UnlockExit (lockedtest)\r\n     HelperOpenObject (door) // this should do this for you: door.isopen = true, but maybe it doesn't, if it doesn't, then you do it:\r\n     // door.isopen (but remove the double forward slashes in front, so this is not a comment line, but an actual code line)\r\n} else if (door.isopen and not lockedtest.locked) {\r\n  msg (\"Since you don't currently have the key for the door, you're very very very very glad that the door, is or still remains, open (and also that the Exit, is or still remains, unlocked, too) !\"\r\n} else if (door.isopen) {\r\n  msg (\"While the door is already open, the blasted Exit (which is the real door functionality), is locked or still locked... better hope you can find the key that you don't currently have...\")\r\n} else {\r\n  msg (\"The door is closed (and also the Exit is locked), and you don't currently have the key that is needed for opening it... you hope you can find that key again...\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting this edited post to update / be posted, grrr)<br>\n(again, filler for getting this edited post to update / be posted, grrr)</p>\n<hr>\n<p>nested (layers of) 'ifs' is the same 'and' logic as is using the 'and' logic operator:</p>\n<pre><code>if (bedroom.clean and lawn.mowed and dishes.washed) {\n  msg (\"You can go play your video games now\")\n} else if (bedroom.clean and lawn.mowed) {\n  msg (\"Sorry, but you still have to wash the dishes first, before you can play your video games\")\n} else if (bedroom.clean and dishes.washed) {\n  msg (\"Sorry, but you still have to mow the lawn first, before you can play your video games\")\n} else if (dishes.washed and lawn.mowed) {\n  msg (\"Sorry, but you still have to clean your bedroom first, before you can play your video games\")\n} else if (bedroom.clean) {\n  msg (\"Sorry, but you still have to wash the dishes and mow the lawn, first, before you can play your video games\")\n} else if (dishes.washed) {\n  msg (\"Sorry, but you still have to clean your bedroom and mow the lawn, first, before you can play your video games\")\n}  else if (lawn.mowed) {\n  msg (\"Sorry, but you still have to wash the dishes and clean your bedroom, first, before you can play your video games\")\n}  else {\n  msg (\"Sorry, but you still have to wash the dishes, mow the lawn, and clean your bedroom, first, before you can play your video games\")\n}\n</code></pre>\n<p>is exact the same as:</p>\n<pre><code>if (bedroom.clean) {\n  if (lawn.mowed) {\n    if (dishes.washed) {\n      msg (\"You can go play your video games now\")\n    } else {\n      msg (\"Sorry, but you still have to wash the dishes first, before you can play your video games\")\n  } else if (dishes.washed) {\n    msg (\"Sorry, but you still have to mow the lawn first, before you can play your video games\")\n  } else {\n    msg (\"Sorry, but you still have to wash the dishes and mow the lawn, first, before you can play your video games\")\n} else {\n  if (dishes.washed and lawn.mowed) {\n    msg (\"Sorry, but you still have to clean your bedroom first, before you can play your video games\")  \n  } else if (dishes.washed) {\n    msg (\"Sorry, but you still have to clean your bedroom and mow the lawn, first, before you can play your video games\")\n  } else if (lawn.mowed) {\n    msg (\"Sorry, but you still have to wash the dishes and clean your bedroom, first, before you can play your video games\")\n  } else {\n    msg (\"Sorry, but you still have to wash the dishes, mow the lawn, and clean your bedroom, first, before you can play your video games\")\n  }\n}\n</code></pre>\n<hr>\n<p>as for why you're still having issues:</p>\n<p>let's first see if this correction of your example code, fixes it for you (if it works or not):</p>\n<p>(try using this fixed and expanded... sorry about all the logic combinations/possibilities that I added in lol ... code of yours, and let me know if it works or not. If you're still getting error messages or not. Try it in a new game too, and make sure you actually add in all the same Objects and Attributes as you named in your code)</p>\n<pre><code>if (Got(key)) {\n   if (door.isopen) {\n     msg (\"You reach to open the door before remembering it's already open.\")\n   } else {\n     msg (\"You slide the key into the lock and turn it hearing the lock click.\")\n     UnlockExit (lockedtest)\n     HelperOpenObject (door) // this should do this for you: door.isopen = true, but maybe it doesn't, if it doesn't, then you do it:\n     // door.isopen (but remove the double forward slashes in front, so this is not a comment line, but an actual code line)\n} else if (door.isopen and not lockedtest.locked) {\n  msg (\"Since you don't currently have the key for the door, you're very very very very glad that the door, is or still remains, open (and also that the Exit, is or still remains, unlocked, too) !\"\n} else if (door.isopen) {\n  msg (\"While the door is already open, the blasted Exit (which is the real door functionality), is locked or still locked... better hope you can find the key that you don't currently have...\")\n} else {\n  msg (\"The door is closed (and also the Exit is locked), and you don't currently have the key that is needed for opening it... you hope you can find that key again...\")\n}\n</code></pre>\n\n",
      "PostDate": "2017-08-02T07:34:12.9380422Z",
      "LastEditDate": "2017-08-02T07:43:56.5615796Z",
      "link": null
    },
    {
      "PostId": "47e5ed11-3bd2-46d1-b943-c9bc5d74c84e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "what is the default message that it is still being displayed (and what action are you doing: opening or closing the door) ???\r\n(as this can help us in knowing or in the correct direction/focus of how to help you)\r\n\r\nmy apologies if you already mentioned what the default message was (I missed it if you did)\r\n(but-and again, could you post the default message again for me)\r\n\r\n------------------\r\n\r\nif it's still not working:\r\n\r\n(if you haven't) do a new game (so we start with the default quest code: see the 'IMPORTANT' below) and try to get it to work, which if it doesn't: post your entire game code here\r\n\r\nIMPORTANT: if you changed the built-in stuff within the GUI/Editor (filter -> show library elements -> copy), then quest engine (its library files) is NOT messed up, but if you actually physically went into the quest folder itself and opened up its library files, changed them and saved, then your quest is messed up, and so any new game will be messed up too. (you'll have to remove quest and re-download and install it).\r\n\r\nas now, with your game code posted, we now got something to work with, and trouble shoot for you.\r\n\r\n---------\r\n\r\nto post your (entire) game code (easiest way):\r\n\r\nsimply right click on your 'xxx.aslx' game file itself, and open it with a text editor software/program (notepad, wordpad, notepad++, Apple: text editor, etc etc etc)\r\n\r\nthis is your entire game code, so highlight all of it, copy it, and then paste it here... like this:\r\n\r\n```\r\nm```\r\n(paste your game code here)\r\nm```\r\n```\r\n\r\nthose weird characters is the key above the left TAB key and to the left of the '1' key (the rows of number keys at the top of the keyboard, not the 3x3 numbers on the right side of the keyboard if it has them). If you do SHIFT+ 'this key', you get the tilde (~) character/symbol. \r\n\r\nbut without the m's in front, which produces this:\r\n\r\n```\r\n(paste your game code here)\r\n```\r\n\r\nthe reason is by putting your game code into this post's 'code box', it preserves all of the formatting, which is very important for reading and trouble-shooting your code.",
      "EditableFormat": "markdown",
      "HTML": "<p>what is the default message that it is still being displayed (and what action are you doing: opening or closing the door) ???<br>\n(as this can help us in knowing or in the correct direction/focus of how to help you)</p>\n<p>my apologies if you already mentioned what the default message was (I missed it if you did)<br>\n(but-and again, could you post the default message again for me)</p>\n<hr>\n<p>if it's still not working:</p>\n<p>(if you haven't) do a new game (so we start with the default quest code: see the 'IMPORTANT' below) and try to get it to work, which if it doesn't: post your entire game code here</p>\n<p>IMPORTANT: if you changed the built-in stuff within the GUI/Editor (filter -&gt; show library elements -&gt; copy), then quest engine (its library files) is NOT messed up, but if you actually physically went into the quest folder itself and opened up its library files, changed them and saved, then your quest is messed up, and so any new game will be messed up too. (you'll have to remove quest and re-download and install it).</p>\n<p>as now, with your game code posted, we now got something to work with, and trouble shoot for you.</p>\n<hr>\n<p>to post your (entire) game code (easiest way):</p>\n<p>simply right click on your 'xxx.aslx' game file itself, and open it with a text editor software/program (notepad, wordpad, notepad++, Apple: text editor, etc etc etc)</p>\n<p>this is your entire game code, so highlight all of it, copy it, and then paste it here... like this:</p>\n<pre><code>m```\n(paste your game code here)\nm```\n</code></pre>\n<p>those weird characters is the key above the left TAB key and to the left of the '1' key (the rows of number keys at the top of the keyboard, not the 3x3 numbers on the right side of the keyboard if it has them). If you do SHIFT+ 'this key', you get the tilde (~) character/symbol.</p>\n<p>but without the m's in front, which produces this:</p>\n<pre><code>(paste your game code here)\n</code></pre>\n<p>the reason is by putting your game code into this post's 'code box', it preserves all of the formatting, which is very important for reading and trouble-shooting your code.</p>\n\n",
      "PostDate": "2017-08-02T08:01:54.1143061Z",
      "LastEditDate": "2017-08-02T08:09:50.4287793Z",
      "link": null
    },
    {
      "PostId": "1d0a639a-e1f5-4979-a91b-722498ad237e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post updated/posted)\r\n\r\n--------------------------------\r\n\r\nnvm... found it:\r\n\r\n\"But It doesn't print the message I want it to have when someone tries to open the door again. It only prints the default message, \"It is already open.\" Which isn't a big deal as its only a few words off my own custom message but it still bugs me. Is this something that can be fixed or just one of the things in Quest that just is. (Ninja Nin)\"\r\n\r\nah.... this helps a lot! This is likely due to you using the built-in stuff, and it does the default response for you.\r\n\r\nif you find the 'default response' Template involved and altering it, it is a global change (anytime you open/close anything)\r\n\r\nI believe to just change an individual Object's Verb's 'default response', you need to do something like this (or find out how to access/find it for a built-in Verb) ...\r\n\r\n```\r\n// creating/adding a custom Verb directly in-code:\r\n\r\n// and being able to set the 'default response' of it !!!!\r\n\r\n<object name=\"npc\">\r\n  <attr name=\"dialogue\" type=\"script\">\r\n    msg (\"hi\")\r\n  </attr>\r\n</object>\r\n\r\n<verb>\r\n  <property>dialogue</property>\r\n  <pattern>dialogue</pattern>\r\n  <defaultexpression>THIS IS HOW/WHERE YOU CHANGE THE DEFAULT RESPONSE</defaultexpression>\r\n</verb>\r\n```\r\n\r\nyou may be able to get at this 'defaultexpression' String Attribute, via:\r\n\r\n'NAME_OF_OBJECT' Object -> 'Attributes' Tab -> 'Attributes' box -> (scroll through it looking for your Verb and hopefully a control for changing its 'defaultexpression' String Attribute)\r\n\r\nOR\r\n\r\n'NAME_OF_OBJECT' Object -> 'Verbs' Tab -> 'Verbs' box -> (scroll through it looking for your Verb and hopefully a control for changing its 'defaultexpression' String Attribute)\r\n\r\nALSO, note that Verbs and Commands are linked together, so you may have to look through your Commands... trying to find your Verb and hopefully a control for changing its 'defaultexpression' String Attribute\r\n\r\nOTHERWISE, you can go into Code View (entire game code), and see if it has/created the 'Verb' Element creation tag of your Verb, which you can then change its defaultresponse:\r\n\r\n```\r\n<verb>\r\n  <property>NAME_OF_YOUR_VERB</property>\r\n  <pattern>NAME_OF_YOUR_VERB</patter>\r\n  <defaultexpression>THIS IS ITS DEFAULT EXPRESSION, WHICH YOU CAN RE-WRITE INTO THIS HERE TO CHANGE IT</defaultexpression>\r\n</verb>\r\n```\r\n\r\n-------------------\r\n\r\ntry to get Pixie's help/attention (if you have to, you can pm him), as he can guide you through doing whatever you need, as he knows this built-in quest stuff well\r\n\r\nor... probably Richard will figure all this out and help you too, lol. He's learning to code so fast... sighs (it took me 5 years).\r\n\r\n-------------------\r\n\r\nlet's look at the logic involved:\r\n\r\n1. set up: room_1A, door_1A is in room_1A, exit_1A is in room_1A taking you to room_1B, room_1B, door_1B is in room_1B, exit_1B is in room_1B taking you to room_1A, you start/are in room_1A, key_1 is in room_1A\r\n\r\ninitial settings: door_1A is closed (door_1A.isopen = false), exit_1A is locked (exit_1A.locked = true), door_1B is closed (door_1B.isopen = false), exit_1B is locked (exit_1B.locked = true)\r\n\r\n2. you find key_1 in room_1A\r\n\r\n3. you try to open door_1A in room_1A\r\n\r\n (let's just create/add a new/custom 'my_open' Verb, as the built-in 'open: open door' and/or 'use/useon: use key on door' Verbs are just un-needed more complication)\r\n\r\n(also, the Exit's 'unlocking/unlocking' will be done through the custom 'my_open/my_close' Verbs, to keep it simple and easily controlled, no need for more complication, lol): opening is unlocking and closing is locking\r\n\r\n(and, since our rooms are connected both ways, we need to do the same actions to both doors/exits, in order for this to work correctly and not be/get stuck in a room, lol)\r\n\r\n4. first, we want to 'if check' if the door_1A is open/closed (as if it's already open, the key is irrelevant):\r\n\r\n```\r\n// the 'door_1A' Object's 'my_open' Verb:\r\n\r\nif (door_1A.isopen) { // if door_1A is open\r\n  msg (\"The door_1A is already open (and the exit_1A is already unlocked), silly\")\r\n} else { // if door is closed\r\n  // scripting\r\n}\r\n```\r\n\r\n5. then, if the door_1A is closed, we need to check if you got the right key:\r\n\r\n```\r\n// the 'door_1A' Object's 'open' Verb:\r\n\r\nif (door_1A.isopen) { // if door is open\r\n  msg (\"The door_1A is already open (and the exit_1A is already unlocked), silly\")\r\n} else { // if door_1A is closed\r\n  if (Got (key_1)) { // if you have the correct key\r\n    // scripting\r\n  } else // if you do NOT have the correct key\r\n    msg (\"Sorry, but you need the right key to open up the locked door_1A.\")\r\n  }\r\n}\r\n```\r\n\r\n6. if you got the right key, we need to handle the opening/unlocking correctly:\r\n\r\n```\r\n// the 'door_1A' Object's 'my_open' Verb:\r\n\r\nif (door_1A.isopen) { // if door_1A is open\r\n  msg (\"The door_1A is already open (and the exit_1A is already unlocked), silly\")\r\n} else { // if door_1A is closed\r\n  if (Got (key_1)) { // if you have the correct key\r\n    door_1A.isopen = true // to open the door_1A, we have to set the door_1A to actually being open\r\n    door_1B.isopen = true // to open the door_1B, we have to set the door_1B to actually being open // we need to do both doors at the same time so we can't get stuck in a room, lol\r\n    exit_1A.locked = false // upon opening the door_1A, we unlock the exit_1A. To unlock the exit_1A, we have to set the exit_1A to actually being unlocked\r\n    exit_1B.locked = false // upon opening the door_1A, we unlock the exit_1B. To unlock the exit_1B, we have to set the exit_1B to actually being unlocked // we need to do both exits at the same time so we can't get stuck in a room, lol\r\n    // now that the exit_1A is unlocked (exit_1A.locked = false), I believe you can now, go-through / use, the exit_1A to go to room_1B (again, I'm not familiar with the built-in stuff like how Exits work, lol)\r\n  } else // if you do NOT have the correct key\r\n    msg (\"Sorry, but you need the right key to open/unlock up the closed/locked door_1A/exit_1A.\")\r\n  }\r\n}\r\n```\r\n\r\n7. and now we need to handle the 'my_close' Verb:\r\n\r\n```\r\n// the 'door_1A' Object's 'my_close' Verb:\r\n\r\nif (door_1A.isopen) { // if door_1A is open\r\n  if (Got (key_1)) { // if you have the correct key\r\n    door_1A.isopen = false // to close the door_1A, we have to set the door_1A to actually being closed\r\n    door_1B.isopen = false // to close the door_1B, we have to set the door_1B to actually being closed // we need to do both doors at the same time so we can't get stuck in a room, lol\r\n    exit_1A.locked = true // upon closing the door_1A, we lock the exit_1A. To lock the exit_1A, we have to set the exit_1A to actually being locked\r\n    exit_1B.locked = true // upon closing the door_1A, we lock the exit_1B. To lock the exit_1B, we have to set the exit_1B to actually being locked // we need to do both exits at the same time so we can't get stuck in a room, lol\r\n    // now that the exit_1A is locked (exit_1A.locked = false), I believe you can NO longer, go-through / use, the exit_1A to go to room_1B (again, I'm not familiar with the built-in stuff like how Exits work, lol)\r\n  } else // if you do NOT have the correct key\r\n    msg (\"Sorry, but you need the right key to close/lock the open/unlocked door_1A/exit_1A.\")\r\n  }\r\n} else { // if door_1A is closed\r\n  msg (\"The door_1A is already closed (and the exit_1A is already locked), silly\")\r\n}\r\n```\r\n\r\n8. now, we just do the exact same thing for the 'door_1B' Object's 'my_open' Verb\r\n\r\n```\r\n// the 'door_1B' Object's 'my_open' Verb:\r\n\r\nif (door_1B.isopen) { // if door_1B is open\r\n  msg (\"The door_1B is already open (and the exit_1B is already unlocked), silly\")\r\n} else { // if door_1B is closed\r\n  if (Got (key_1)) { // if you have the correct key\r\n    door_1B.isopen = true // to open the door_1B, we have to set the door_1B to actually being open\r\n    door_1A.isopen = true // to open the door_1A, we have to set the door_1A to actually being open // we need to do both doors at the same time so we can't get stuck in a room, lol\r\n    exit_1B.locked = false // upon opening the door_1B, we unlock the exit_1B. To unlock the exit_1B, we have to set the exit_1B to actually being unlocked\r\n    exit_1A.locked = false // upon opening the door_1B, we unlock the exit_1A. To unlock the exit_1A, we have to set the exit_1A to actually being unlocked // we need to do both exits at the same time so we can't get stuck in a room, lol\r\n    // now that the exit_1B is unlocked (exit_1B.locked = false), I believe you can now, go-through / use, the exit_1B to go to room_1A (again, I'm not familiar with the built-in stuff like how Exits work, lol)\r\n  } else // if you do NOT have the correct key\r\n    msg (\"Sorry, but you need the right key to open/unlock up the closed/locked door_1B/exit_1B.\")\r\n  }\r\n}\r\n```\r\n\r\n9. now, we just do the exact same thing for the 'door_1B' Object's 'my_close' Verb:\r\n\r\n```\r\n// the 'door_1B' Object's 'my_close' Verb:\r\n\r\nif (door_1B.isopen) { // if door_1B is open\r\n  if (Got (key_1)) { // if you have the correct key\r\n    door_1B.isopen = false // to close the door_1B, we have to set the door_1B to actually being closed\r\n    door_1A.isopen = false // to close the door_1A, we have to set the door_1A to actually being closed // we need to do both doors at the same time so we can't get stuck in a room, lol\r\n    exit_1B.locked = true // upon closing the door_1B, we lock the exit_1B. To lock the exit_1B, we have to set the exit_1B to actually being locked\r\n    exit_1A.locked = true // upon closing the door_1B, we lock the exit_1A. To lock the exit_1A, we have to set the exit_1A to actually being locked // we need to do both exits at the same time so we can't get stuck in a room, lol\r\n    // now that the exit_1B is locked (exit_1B.locked = false), I believe you can NO longer, go-through / use, the exit_1B to go to room_1A (again, I'm not familiar with the built-in stuff like how Exits work, lol)\r\n  } else // if you do NOT have the correct key\r\n    msg (\"Sorry, but you need the right key to close/lock the open/unlocked door_1B/exit_1B.\")\r\n  }\r\n} else { // if door_1B is closed\r\n  msg (\"The door_1B is already closed (and the exit_1B is already locked), silly\")\r\n}\r\n```\r\n\r\n--------\r\n\r\ndo you see how this logic design, keeps it simple and under control, and thus it works, regardless of: what room you are in, whether you have the key or not, whether the door is opened/closed, whether the exit is unlocked/locked: (no errors, no getting stuck in a room during game play) ???",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post updated/posted)</p>\n<hr>\n<p>nvm... found it:</p>\n<p>\"But It doesn't print the message I want it to have when someone tries to open the door again. It only prints the default message, \"It is already open.\" Which isn't a big deal as its only a few words off my own custom message but it still bugs me. Is this something that can be fixed or just one of the things in Quest that just is. (Ninja Nin)\"</p>\n<p>ah.... this helps a lot! This is likely due to you using the built-in stuff, and it does the default response for you.</p>\n<p>if you find the 'default response' Template involved and altering it, it is a global change (anytime you open/close anything)</p>\n<p>I believe to just change an individual Object's Verb's 'default response', you need to do something like this (or find out how to access/find it for a built-in Verb) ...</p>\n<pre><code>// creating/adding a custom Verb directly in-code:\n\n// and being able to set the 'default response' of it !!!!\n\n&lt;object name=\"npc\"&gt;\n  &lt;attr name=\"dialogue\" type=\"script\"&gt;\n    msg (\"hi\")\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;dialogue&lt;/property&gt;\n  &lt;pattern&gt;dialogue&lt;/pattern&gt;\n  &lt;defaultexpression&gt;THIS IS HOW/WHERE YOU CHANGE THE DEFAULT RESPONSE&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n<p>you may be able to get at this 'defaultexpression' String Attribute, via:</p>\n<p>'NAME_OF_OBJECT' Object -&gt; 'Attributes' Tab -&gt; 'Attributes' box -&gt; (scroll through it looking for your Verb and hopefully a control for changing its 'defaultexpression' String Attribute)</p>\n<p>OR</p>\n<p>'NAME_OF_OBJECT' Object -&gt; 'Verbs' Tab -&gt; 'Verbs' box -&gt; (scroll through it looking for your Verb and hopefully a control for changing its 'defaultexpression' String Attribute)</p>\n<p>ALSO, note that Verbs and Commands are linked together, so you may have to look through your Commands... trying to find your Verb and hopefully a control for changing its 'defaultexpression' String Attribute</p>\n<p>OTHERWISE, you can go into Code View (entire game code), and see if it has/created the 'Verb' Element creation tag of your Verb, which you can then change its defaultresponse:</p>\n<pre><code>&lt;verb&gt;\n  &lt;property&gt;NAME_OF_YOUR_VERB&lt;/property&gt;\n  &lt;pattern&gt;NAME_OF_YOUR_VERB&lt;/patter&gt;\n  &lt;defaultexpression&gt;THIS IS ITS DEFAULT EXPRESSION, WHICH YOU CAN RE-WRITE INTO THIS HERE TO CHANGE IT&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n<hr>\n<p>try to get Pixie's help/attention (if you have to, you can pm him), as he can guide you through doing whatever you need, as he knows this built-in quest stuff well</p>\n<p>or... probably Richard will figure all this out and help you too, lol. He's learning to code so fast... sighs (it took me 5 years).</p>\n<hr>\n<p>let's look at the logic involved:</p>\n<ol>\n<li>set up: room_1A, door_1A is in room_1A, exit_1A is in room_1A taking you to room_1B, room_1B, door_1B is in room_1B, exit_1B is in room_1B taking you to room_1A, you start/are in room_1A, key_1 is in room_1A</li>\n</ol>\n<p>initial settings: door_1A is closed (door_1A.isopen = false), exit_1A is locked (exit_1A.locked = true), door_1B is closed (door_1B.isopen = false), exit_1B is locked (exit_1B.locked = true)</p>\n<ol start=\"2\">\n<li>\n<p>you find key_1 in room_1A</p>\n</li>\n<li>\n<p>you try to open door_1A in room_1A</p>\n</li>\n</ol>\n<p>(let's just create/add a new/custom 'my_open' Verb, as the built-in 'open: open door' and/or 'use/useon: use key on door' Verbs are just un-needed more complication)</p>\n<p>(also, the Exit's 'unlocking/unlocking' will be done through the custom 'my_open/my_close' Verbs, to keep it simple and easily controlled, no need for more complication, lol): opening is unlocking and closing is locking</p>\n<p>(and, since our rooms are connected both ways, we need to do the same actions to both doors/exits, in order for this to work correctly and not be/get stuck in a room, lol)</p>\n<ol start=\"4\">\n<li>first, we want to 'if check' if the door_1A is open/closed (as if it's already open, the key is irrelevant):</li>\n</ol>\n<pre><code>// the 'door_1A' Object's 'my_open' Verb:\n\nif (door_1A.isopen) { // if door_1A is open\n  msg (\"The door_1A is already open (and the exit_1A is already unlocked), silly\")\n} else { // if door is closed\n  // scripting\n}\n</code></pre>\n<ol start=\"5\">\n<li>then, if the door_1A is closed, we need to check if you got the right key:</li>\n</ol>\n<pre><code>// the 'door_1A' Object's 'open' Verb:\n\nif (door_1A.isopen) { // if door is open\n  msg (\"The door_1A is already open (and the exit_1A is already unlocked), silly\")\n} else { // if door_1A is closed\n  if (Got (key_1)) { // if you have the correct key\n    // scripting\n  } else // if you do NOT have the correct key\n    msg (\"Sorry, but you need the right key to open up the locked door_1A.\")\n  }\n}\n</code></pre>\n<ol start=\"6\">\n<li>if you got the right key, we need to handle the opening/unlocking correctly:</li>\n</ol>\n<pre><code>// the 'door_1A' Object's 'my_open' Verb:\n\nif (door_1A.isopen) { // if door_1A is open\n  msg (\"The door_1A is already open (and the exit_1A is already unlocked), silly\")\n} else { // if door_1A is closed\n  if (Got (key_1)) { // if you have the correct key\n    door_1A.isopen = true // to open the door_1A, we have to set the door_1A to actually being open\n    door_1B.isopen = true // to open the door_1B, we have to set the door_1B to actually being open // we need to do both doors at the same time so we can't get stuck in a room, lol\n    exit_1A.locked = false // upon opening the door_1A, we unlock the exit_1A. To unlock the exit_1A, we have to set the exit_1A to actually being unlocked\n    exit_1B.locked = false // upon opening the door_1A, we unlock the exit_1B. To unlock the exit_1B, we have to set the exit_1B to actually being unlocked // we need to do both exits at the same time so we can't get stuck in a room, lol\n    // now that the exit_1A is unlocked (exit_1A.locked = false), I believe you can now, go-through / use, the exit_1A to go to room_1B (again, I'm not familiar with the built-in stuff like how Exits work, lol)\n  } else // if you do NOT have the correct key\n    msg (\"Sorry, but you need the right key to open/unlock up the closed/locked door_1A/exit_1A.\")\n  }\n}\n</code></pre>\n<ol start=\"7\">\n<li>and now we need to handle the 'my_close' Verb:</li>\n</ol>\n<pre><code>// the 'door_1A' Object's 'my_close' Verb:\n\nif (door_1A.isopen) { // if door_1A is open\n  if (Got (key_1)) { // if you have the correct key\n    door_1A.isopen = false // to close the door_1A, we have to set the door_1A to actually being closed\n    door_1B.isopen = false // to close the door_1B, we have to set the door_1B to actually being closed // we need to do both doors at the same time so we can't get stuck in a room, lol\n    exit_1A.locked = true // upon closing the door_1A, we lock the exit_1A. To lock the exit_1A, we have to set the exit_1A to actually being locked\n    exit_1B.locked = true // upon closing the door_1A, we lock the exit_1B. To lock the exit_1B, we have to set the exit_1B to actually being locked // we need to do both exits at the same time so we can't get stuck in a room, lol\n    // now that the exit_1A is locked (exit_1A.locked = false), I believe you can NO longer, go-through / use, the exit_1A to go to room_1B (again, I'm not familiar with the built-in stuff like how Exits work, lol)\n  } else // if you do NOT have the correct key\n    msg (\"Sorry, but you need the right key to close/lock the open/unlocked door_1A/exit_1A.\")\n  }\n} else { // if door_1A is closed\n  msg (\"The door_1A is already closed (and the exit_1A is already locked), silly\")\n}\n</code></pre>\n<ol start=\"8\">\n<li>now, we just do the exact same thing for the 'door_1B' Object's 'my_open' Verb</li>\n</ol>\n<pre><code>// the 'door_1B' Object's 'my_open' Verb:\n\nif (door_1B.isopen) { // if door_1B is open\n  msg (\"The door_1B is already open (and the exit_1B is already unlocked), silly\")\n} else { // if door_1B is closed\n  if (Got (key_1)) { // if you have the correct key\n    door_1B.isopen = true // to open the door_1B, we have to set the door_1B to actually being open\n    door_1A.isopen = true // to open the door_1A, we have to set the door_1A to actually being open // we need to do both doors at the same time so we can't get stuck in a room, lol\n    exit_1B.locked = false // upon opening the door_1B, we unlock the exit_1B. To unlock the exit_1B, we have to set the exit_1B to actually being unlocked\n    exit_1A.locked = false // upon opening the door_1B, we unlock the exit_1A. To unlock the exit_1A, we have to set the exit_1A to actually being unlocked // we need to do both exits at the same time so we can't get stuck in a room, lol\n    // now that the exit_1B is unlocked (exit_1B.locked = false), I believe you can now, go-through / use, the exit_1B to go to room_1A (again, I'm not familiar with the built-in stuff like how Exits work, lol)\n  } else // if you do NOT have the correct key\n    msg (\"Sorry, but you need the right key to open/unlock up the closed/locked door_1B/exit_1B.\")\n  }\n}\n</code></pre>\n<ol start=\"9\">\n<li>now, we just do the exact same thing for the 'door_1B' Object's 'my_close' Verb:</li>\n</ol>\n<pre><code>// the 'door_1B' Object's 'my_close' Verb:\n\nif (door_1B.isopen) { // if door_1B is open\n  if (Got (key_1)) { // if you have the correct key\n    door_1B.isopen = false // to close the door_1B, we have to set the door_1B to actually being closed\n    door_1A.isopen = false // to close the door_1A, we have to set the door_1A to actually being closed // we need to do both doors at the same time so we can't get stuck in a room, lol\n    exit_1B.locked = true // upon closing the door_1B, we lock the exit_1B. To lock the exit_1B, we have to set the exit_1B to actually being locked\n    exit_1A.locked = true // upon closing the door_1B, we lock the exit_1A. To lock the exit_1A, we have to set the exit_1A to actually being locked // we need to do both exits at the same time so we can't get stuck in a room, lol\n    // now that the exit_1B is locked (exit_1B.locked = false), I believe you can NO longer, go-through / use, the exit_1B to go to room_1A (again, I'm not familiar with the built-in stuff like how Exits work, lol)\n  } else // if you do NOT have the correct key\n    msg (\"Sorry, but you need the right key to close/lock the open/unlocked door_1B/exit_1B.\")\n  }\n} else { // if door_1B is closed\n  msg (\"The door_1B is already closed (and the exit_1B is already locked), silly\")\n}\n</code></pre>\n<hr>\n<p>do you see how this logic design, keeps it simple and under control, and thus it works, regardless of: what room you are in, whether you have the key or not, whether the door is opened/closed, whether the exit is unlocked/locked: (no errors, no getting stuck in a room during game play) ???</p>\n\n",
      "PostDate": "2017-08-02T09:30:33.8944334Z",
      "LastEditDate": "2017-08-02T10:08:18.5861714Z",
      "link": null
    },
    {
      "PostId": "fa1167f1-29c1-4fea-bafa-22f8d7cbe359",
      "UserId": 316011,
      "Username": "NinjaNin",
      "AvatarUrl": "http://i.imgur.com/L53RidGb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was very confused by your last post. So I just make my own open verb? I'd have to call it something else right? Or Quest will get it confused with the official open verb? I tried it out in quest but got an error message trying to do an if script in the else in the guide. I tried it out in code view and it just broke for me. I don't know what I'm doing wrong. \r\n\r\n```\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"From the Forum\">\r\n    <gameid>2a541114-7ed5-4161-a061-707e8670825e</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n  </game>\r\n  <object name=\"room1A\">\r\n    <inherit name=\"editor_room\" />\r\n    <alias>room</alias>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit name=\"room1Alock\" alias=\"east\" to=\"room1B\">\r\n      <inherit name=\"eastdirection\" />\r\n      <locked />\r\n    </exit>\r\n    <object name=\"door1A\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"openable\" />\r\n      <alias>door</alias>\r\n      <feature_container />\r\n      <myopen type=\"script\">\r\n        if (door1A.isopen) {\r\n          msg (\"The door is already open (and the exit is already unlocked) silly!\")\r\n        }\r\n        else {\r\n        }\r\n      </myopen>\r\n      <openscript type=\"script\">\r\n        if (door1A.isopen) {\r\n          msg (\"The door is already open and unlocked silly. \")\r\n        }\r\n        else {\r\n          if (Got (key_1)) {\r\n            UnlockExit (room1Alock)\r\n            HelperOpenObject (door1A)\r\n            UnlockExit (room1Block)\r\n            msg (\"You unlock and open the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to open up the locked door.\")\r\n          }\r\n        }\r\n      }\r\n      </openscript>\r\n    </object>\r\n    <object name=\"key_1\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <takemsg>You pick up the key</takemsg>\r\n    </object>\r\n  </object>\r\n  <object name=\"room1B\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit name=\"room1Block\" alias=\"west\" to=\"room1A\">\r\n      <inherit name=\"westdirection\" />\r\n      <locked />\r\n    </exit>\r\n    <object name=\"door1B\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"openable\" />\r\n      <alias>door</alias>\r\n      <feature_container />\r\n    </object>\r\n  </object>\r\n  <verb name=\"myopen\">\r\n    <pattern>myopen</pattern>\r\n    <property>myopen</property>\r\n    <defaulttext>You open the door</defaulttext>\r\n  </verb>\r\n</asl>\r\n```\r\nHere's my game code for the example that you set. I looked into it a bit and apparently dynamic templates, which is what the open script uses is different from a regular one, as in it's used with all open objects and can change dynamically depending on the objects gender and stuff. I can change the dynamic template and have found it already but I still want to try and do my own custom template if I can. Would Pixie or Richard mind if I shoot them a note? \r\n\r\nA dumb question as well but do you need to code something in order? Like if I start writing my verbs first will it sort itself out or will it break the whole game? \r\n\r\nAnother question, What does an OR script look like then? Or can there only be AND scripts?",
      "EditableFormat": "markdown",
      "HTML": "<p>I was very confused by your last post. So I just make my own open verb? I'd have to call it something else right? Or Quest will get it confused with the official open verb? I tried it out in quest but got an error message trying to do an if script in the else in the guide. I tried it out in code view and it just broke for me. I don't know what I'm doing wrong.</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"From the Forum\"&gt;\n    &lt;gameid&gt;2a541114-7ed5-4161-a061-707e8670825e&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room1A\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;alias&gt;room&lt;/alias&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit name=\"room1Alock\" alias=\"east\" to=\"room1B\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n      &lt;locked /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"door1A\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"openable\" /&gt;\n      &lt;alias&gt;door&lt;/alias&gt;\n      &lt;feature_container /&gt;\n      &lt;myopen type=\"script\"&gt;\n        if (door1A.isopen) {\n          msg (\"The door is already open (and the exit is already unlocked) silly!\")\n        }\n        else {\n        }\n      &lt;/myopen&gt;\n      &lt;openscript type=\"script\"&gt;\n        if (door1A.isopen) {\n          msg (\"The door is already open and unlocked silly. \")\n        }\n        else {\n          if (Got (key_1)) {\n            UnlockExit (room1Alock)\n            HelperOpenObject (door1A)\n            UnlockExit (room1Block)\n            msg (\"You unlock and open the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to open up the locked door.\")\n          }\n        }\n      }\n      &lt;/openscript&gt;\n    &lt;/object&gt;\n    &lt;object name=\"key_1\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;takemsg&gt;You pick up the key&lt;/takemsg&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room1B\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit name=\"room1Block\" alias=\"west\" to=\"room1A\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n      &lt;locked /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"door1B\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"openable\" /&gt;\n      &lt;alias&gt;door&lt;/alias&gt;\n      &lt;feature_container /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb name=\"myopen\"&gt;\n    &lt;pattern&gt;myopen&lt;/pattern&gt;\n    &lt;property&gt;myopen&lt;/property&gt;\n    &lt;defaulttext&gt;You open the door&lt;/defaulttext&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>Here's my game code for the example that you set. I looked into it a bit and apparently dynamic templates, which is what the open script uses is different from a regular one, as in it's used with all open objects and can change dynamically depending on the objects gender and stuff. I can change the dynamic template and have found it already but I still want to try and do my own custom template if I can. Would Pixie or Richard mind if I shoot them a note?</p>\n<p>A dumb question as well but do you need to code something in order? Like if I start writing my verbs first will it sort itself out or will it break the whole game?</p>\n<p>Another question, What does an OR script look like then? Or can there only be AND scripts?</p>\n\n",
      "PostDate": "2017-08-05T06:11:33.1931148Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "375d1d4c-92aa-4a25-b2b3-c130a8674551",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "let me (not be my usual lazy-bum self and) test out my code saturday/tomarrow (its almost friday midnight here, need to sleep, lol), and get back to you on it (sometime saturday/tormarrow), as I likely made/have some stupid mistake/typo (90% of the time, an error in code, is some stupid small mistake/typo, the problem is finding it, lol), as that way, you'll have a working model/code, that you can take a look at in the GUI/Editor and play as a demo game, which is more familiar and recognizable/understandable, so you can see how the stuff is done and how it looks.\r\n\r\n------------\r\n\r\ndon't worry about my code, I'm throwing full coding at you, this stuff took myself 5 years to learn, it's not easy to pick up right away, it takes time to learn and understand how code work and how to read it. As you really got to train your brain in the logic and mindset/thinking required for coding, and its not natural, so it takes time to train your brain in it and learn/understand coding.\r\n\r\n----------\r\n\r\nwhen I provide you the working copy tomorrow, you can study it in the GUI/Editor, which will be much more clear for you.\r\n\r\n(once you learn to code, it's hard to not throw code at people, as it's much faster and easier to write/type/code than it is to try to do a step by step guide through using the GUI/Editor's script options and etc, so my apologies for scaring you with all of my code I've been throwing at you)\r\n\r\n--------------------------------\r\n\r\nabout your other questions:\r\n\r\n1. yes, you can create/add your own Verbs (and anything/everything else too, lol), and/or use the built-in Verbs (and all the other stuff too).\r\n\r\nSome of the built-in Verbs (or whatever else) have their own scripting.\r\n\r\nSome of the built-in Verbs have no scripting, as it is waiting for your scripting as its the type of stuff that you'd have to put in what you want (for example: 'talk/speak' Verb, it can be anything, its fully for you to customize/determine, so there's no set scripting obviously).\r\n\r\nAlso, there's a lot of \"under the hood coding\" that enables those Verbs (or whatever) to do their functionality.\r\n\r\nFor the Verbs that are for you to put in what scripting you want, they'll work as they were made to work for whatever you want put into them.\r\n\r\nHowever, there's also some Verbs that do have set scripting which the \"under the hood coding\" needs for it to do its functionality, and if you over-ride/over-write it, you thus wipe out its \"under the hood functionality\" for it to work, as it needed that set scripting that you over-wrote/over-ridden.\r\n\r\n\r\n2. yes, in quest the 'name' (the 'name' String Attribute) is the ID, and so, all names MUST be unique, for example:\r\n\r\n```\r\n<object name=\"ball\">\r\n</object>\r\n\r\n<object name=\"ball\">\r\n</object>\r\n```\r\n\r\nthis will cause an error (or possibly quest will ask you to choose/specify which one you meant).\r\n\r\njust as I and only I have my DNA/genetic-code, just as you and only you have your DNA/genetic-code, just as \"that person/organism\" has its DNA/genetic-code (and nothing else does, it and only it has that DNA/genetic-code). DNA/genetic-code is an organism's 'ID' in the real world. For quest, the 'name' String Attribute is it's ID.\r\n\r\nwhereas, many people can have the name of 'Mike', a person's name is NOT their ID (usually it works, so long as you're the only 'Mike' in the target group, but that's NOT the definition of 'ID', as identification is 100% and only 100%, else it's not identification)\r\n\r\na person's name in the real world is equivalent to quest's built-in 'alias' String Attribute, as really quest does NOT care one bit about what you type in for its Object's 'alias' String Attribute. Quest only cares about what you type in for its 'name' String Attribute. No two 'names' can be the same (not technically an exception, but Attributes can have the same name when they're contained within different Objects, but you can't have two Attributes with the same 'name' within the same Object: every Object can have an 'alias' String Attribute, but an Object can't have two 'alias' Attributes. The technicality of why this is not breaking the uniqueness rule of the 'name' String Attribute as the ID: an Attribute's actual full name and thus ID, is: NAME_OF_OBJECT.NAME_OF_ATTRIBUTE, so for example: Joe.alias = \"joe\" and John.alias = \"john\" isn't breaking the ID rule: Joe.alias is NOT equal to John.alias, and this is thus not breaking the rule either: Joe.alias = \"joe\" and Joe.alias_2 = \"joe\")\r\n\r\nif you create/add anything with the same name (in the same location/scope) as something that already exists, that's how you 'over-ride/over-write' it.\r\n\r\n--------\r\n\r\nI personally don't know the built-in stuff that well, and so i create a lot of custom stuff, and so I have to be careful in my own naming/labeling scheme/convention/system, not to accidentally use a name/label that is already in use, as I don't want to over-ride/over-write something that involves the \"under the hood coding\" which gives that built-in functionality to me, as I'm not good enough to recreate/re-code in that same \"under the hood coding\", as it can be really complex/advanced stuff (and/or requires lots of coding knowledge to know how quest works, which unfortunately few people have, and so that's why quest v6.0/QuestKit won't be happening any time soon, as unfortunately, Alex (and possibly co) created quest using a bunch of different and very wide-ranging programming languages, which he had the knowledge and skill of/with, but so far no one else has come along knowing all the stuff that went into creating quest. Some of the \"under the hood / built-in stuff\" isn't that messy/deep (which can be easily adjusted/changed), but then there's the messy/deep stuff that I was just talking about, which isn't so easy to change/alter.\r\n\r\n3. the 'Templates' allows you to be able to change the messaging/prompts to whatever you want (the big purpose is for human language conversions of quest: european english~american english~chinese~german~french~japanese~russian~indian~etc etc etc, but can be used for individual game makers and their games too, for what the want the default repsonses or whatever to be as the responses you want them as being), but I do believe they're global changes.\r\n\r\nHowever, I know you can somehow do it locally (maybe... you just got to over-ride/over-write them: create/add into/for a specific Object), but I've just not gotten into learning how Templates work yet, sighs. Pixie can help you with them (and has guides already done too, which maybe you can follow, as Pixie is great at explaining/guiding, whereas I'm not, as can be seen, laughs)\r\n\r\n4. definately, go ahead and pm Pixie and/or Richard (not sure if Richard knows how Templates work yet, but he can probably research them and be an expert on them in no time: he's learning to code so quickly), but Pixie can certainly help, he knows quest quite well, as he's continuing to develop quest (just not the all the stuff that's needed for converting it into fully using JS:v6.0/QuestKit so that it can run on any platform, as Pixie just doesn't know all of that stuff/programming languages and etc stuff involved in quest's creation, not yet anyways, but it'll take him time... as he's probably already super busy between real life and just developing quest further. He just posted that it'd likely take at least 5 years to learn how to convert quest into fully using JS, that's how messy quest's creation is, lots of programming languages to learn and how to use them together, not easy to learn)\r\n\r\n5. \"order of operations\" matter as much in programming as it does in mathematics: vitally so!\r\n\r\nnow, placement in code vertically doesn't matter, so long as you're keeping the nesting/indenting/containment/parent-child heirarchy (think of literally like the folders on your computer, quest's code structure is exactly the same as that) intact/correct, with the exception of the 'include ref' library file references, Delegates, and maybe also the special 'game' Game Settings Object.\r\n\r\nlet me try to explain this stuff... (I'll probably just continue to confuse you, laughs, but I've already done that, so no harm in confusing you more, laughs, right?)\r\n\r\n---------------------\r\n\r\nin quest, the GAME OBJECT is the 'asl' tag\r\n\r\nthese 'tag' lines/blocks are the \"actual physical things that exist\" within your game/game-file and/or library-file.\r\n\r\nthese tags, these \"actual physical things that exist\" are known as 'Elements'. The (normal) Elements are: Objects, Exits, Verbs, Commands, Functions, Turnscripts, Timers, and Object Types / Types\r\n\r\nAttributes are a bit weird, as they're kind of a hybrid between an Element and scripting. Attributes are/have tags, but they HAVE TO BE CONTAINED WITHIN an (NON-Attribute) Element: Objects, Exits, Verbs, Commands, Functions, Turnscripts, Timers, and Object Types / Types, yet they (Script Attributes) can hold scripting too, like some Elements can. So, they kinda are Elements but also are kinda not Elements. Attributes are hard for me to explain.\r\n\r\nanything without the 'tag' lines/blocks is either: scripting (actions) or comments (for us humans to read, to know what's going on or whatever, documentation for us humans: comments are NOT code used by quest)\r\n\r\nto do comments:\r\n\r\n(these can't be wrongly put inside of stuff/tags, as that'll cause a syntax error)\r\n\r\n```\r\n// THIS IS MY COMMENT LINE: kljdqslkjdlqsjdlqksjdlkqsjd fjkljflksdjfkldsjflkjsdlfkdslkfjdsklfjdlskjfldskjflkdsjflkdsjflkdsjflkdsjfldkjflkdwjfldkwjflwdkjfldwkjfldkwjfdlwkjfldkwjflkdwjflkdwjflkdwjflkdwjflkwdjflkdwjflkwdjflkdwjflkdwjflkdwjflkwdjflkwjfl\r\n// THIS IS ANOTHER COMMENT LINE:  kljlskjlksjdlkqsj jkasldkjaslkdjalkjdlkasjdlkasjdlksajdlkslkdsqlkdhlskqhdlksqhdlskqjdlksqjdlkjsqlkdjsqlkjdlqskjdlksqjdlkqsjdlkqsjdlkqsjdlkqsjdlkqsjdlkqsjd\r\n\r\nor:\r\n\r\n<!--\r\nTHIS IS A COMMENT BLOCK:\r\n\r\nsdkjwlfjdlwkfjlwdkjfkljflksjlksqjdlksqjdlksqjdlksqjdlkjqslkdjqslkjdfklwhjlkshfjvbjkwbdklsndlksqjdlkqsjdlkqsjdlkqsjdlkjqslkdjsqlkdjslkqjdlksq\r\n\r\nslkjlkfjlkjdlsqk\r\n-->\r\n```\r\n\r\n------------\r\n\r\nfor the 'xxx.aslx' game file:\r\n\r\nthis is the GAME OBJECT:\r\n\r\n```\r\n<asl> // beginning 'asl' tag (like the start of a sentence:code-line or the start of a paragraph:code-block)\r\n  // mass of game code/content: EVERYTHING MUST GO BETWEEN/WITHIN these 'asl' tags (except for comments)\r\n</asl> // ending 'asl' tag\r\n\r\n// comments: blah blah blah\r\n\r\n<!--\r\ncomments: blah blah blah\r\n-->\r\n```\r\n\r\nand, if you want to made a 'xxx.aslx' library file:\r\n\r\nthis is the LIBRARY OBJECT:\r\n\r\n```\r\n<library>\r\n  // mass of code/content: EVERYTHING MUST GO BETWEEN/WITHIN these 'library' tags (except for comments) \r\n</library>\r\n```\r\n\r\n------------\r\n\r\n(back to the game file)\r\n\r\nnow, you HAVE TO put in the version number into the beginning 'asl' tag (this is known as its 'signature/header': holds special types of Attributes):\r\n\r\n```\r\n<asl version=\"570\"> // v570 is the most recent version (or is it v580, meh) Pixie just released publically\r\n</asl>\r\n```\r\n\r\nI'm still using an older version: quest (quest.exe) v550, so I have to tell quest so:\r\n\r\n```\r\n<asl version=\"550\">\r\n</asl>\r\n```\r\n\r\nto know your quest version:\r\n\r\nopen up into the GUI/Editor, and in the menu bar at the top, under the 'help' (or is there directly an 'about' menu option? I don't have quest open at the moment and can't remember, lol), click on 'about', and you'll see its version, for a pretend example:\r\n\r\nquest version: 5.7.6.398234802380832\r\n\r\nyou completely ignore the  decimal number (after the 3rd digit: for the example above: x.x.x.398234802380832)\r\n\r\nyou also completely ignore the '1s column/digit', AS IT IS ALWAYS TO BE: 0 (zero), so in the example it would be the: x.x.6, that is ignored, and instead it is this:  X.X.0)\r\n\r\nand that's your 3 digit version (570) for putting into the beginning 'asl' tag:\r\n\r\n```\r\n<asl version=\"570\">\r\n</asl>\r\n```\r\n\r\n-------------------\r\n\r\nnow, next MUST BE the default (or custom) ENGINE library files (quest is really powerful, as literally its engine comes from its library files, which if you're a good programmer and you know quest well, you can create your own totally different engine library files, making whatever engine you want for quest, though probably there's some limits on the engine... lol. I don't think you could make a 3D world engine... but maybe... though I don't think that'd be possible.... I don't think... lol):\r\n\r\nthe language library file goes FIRST:ABOVE, and then goes next (BELOW) the ENGINE library file(s)\r\n\r\n```\r\n<asl version=\"570\">\r\n\r\n  <include ref=\"English.aslx\" /> // for english speakers quest.exe download // also note that this is a tag line (horizonal) (and not the usual tag block: vertical), and for this type of tag line, it's correct syntax is this: <include ref=\"NAME_OF_LIBRARY_FILE.aslx\" /> // not sure if the language library files are also 'hubs' to individual language library files like the 'core.aslx' library file is below.\r\n\r\n  <include ref=\"Core.aslx\" /> // this is actually a 'hub' library file (though it may also have/hold some coding too), with lots of its own 'include ref' to all of the individual 'core' engine library files (can be seen within the quest folder itself, but do NOT mess with them: you can open them up and look at them BUT do NOT: change them and then save it, unless you want to have to delete quest and re-download and re-install it, lol)\r\n  \r\n</asl>\r\n```\r\n\r\nnext, if you're using Delegates (don't worry about these, as they're a bit more advanced stuff), here's a good place to put them (to be safe), an example of one of mine (for an Object's Script Attribute that will have the scripting for it, I'll show it when I get past this required vertical ordering of stuff):\r\n\r\n```\r\n<asl version=\"570\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <delegate name=\"critical_hit_delegate\" parameters=\"name_of_object_dot_name_of_attribute\" type=\"int\" />\r\n\r\n</asl>\r\n```\r\n\r\nlastly, just to be safe, next should be the special (and required) 'game' Game Settings Object:\r\n\r\n```\r\n<asl version=\"570\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <delegate name=\"critical_hit_delegate\" parameters=\"name_of_object_dot_name_of_attribute\" type=\"int\" />\r\n\r\n  <game name=\"example_game\">\r\n\r\n    // these three tags (gameid, version, firstpublished) are Attributes (I'm not sure if they're all String Attributes or not, so I'm just writing/coding them as they appear by default format/syntax by quest):\r\n\r\n    <gameid>SOME RANDOMLY GENERATED HASH STRING MAINLY AS ID FOR THE ONLINE SERVERS BUT IT MIGHT STILL BE REQUIRED FOR OFFLINE USAGE TOO</gameid> // default new game code\r\n    <version>1.0</version> // default new game code\r\n    <firstpublished>2017</firstpublished>  // default new game code\r\n\r\n  </game>\r\n\r\n</asl>\r\n```\r\n\r\ndo note (EXTREMELY IMPORTANT) the indenting/nesting:\r\n\r\n1. there's NO indenting (NO/ZERO indenting units) in front of the 'asl' tags\r\n2. there's only 1 indenting unit (an indenting \"uni\"t is conventionally: 2 individual white-spaces:SPACEBAR-key or 1 tab-space:TAB-key) in front of the Element (non-Attribute) Tags: 'include ref', 'delegate', and 'game' tags\r\n3. the Attribute tags MUST be within an Element, and thus they must be indenting another unit BEYOND (to the right) of its parent Element tag\r\n\r\n---------------------\r\n\r\nand now (after:below the special 'game' Game Settings Object) , the vertical ordering does not matter at all (aside from the ending 'asl' tag, as all of this stuff has to be contained within the 'asl' tag block, aka, the GAME OBJECT), though you do got to have the proper/correct indenting/nesting and placement, as that always matters:\r\n\r\n```\r\n<asl version=\"570\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <delegate name=\"critical_hit_delegate\" parameters=\"name_of_object_dot_name_of_attribute\" type=\"int\" />\r\n\r\n  <game name=\"example_game\">\r\n\r\n    <gameid>SOME RANDOMLY GENERATED HASH STRING MAINLY AS ID FOR THE ONLINE SERVERS BUT IT MIGHT STILL BE REQUIRED FOR OFFLINE USAGE TOO</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <object name=\"player\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n\r\n      <attr name=\"damage\" type=\"int\">100</attr>\r\n      <attr name=\"current_life\" type=\"int\">999</attr>\r\n      <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n      <attr name=\"life\" type=\"string\">999/999</attr>\r\n      <attr name=\"speed\" type=\"int\">100</attr>\r\n      <attr name=\"luck\" type=\"int\">75</attr>\r\n\r\n      <attr name=\"changedcurrent_life\" type=\"script\">\r\n        <![ CDATA[\r\n          if (this.current_life > this.maximum_life) {\r\n            this.current_life = this.maximum_life\r\n          } else if (this.current_life < 1) {\r\n            msg (\"You died or were killed\")\r\n            msg (\"GAME OVER\")\r\n            finish\r\n          }\r\n          this.life = this.current_life + \"/\" + this.maximum_life\r\n        ]]>\r\n      </attr>\r\n\r\n      <attr name=\"changedmaximum_life\" type=\"script\">\r\n        <![ CDATA[\r\n          if (this.current_life > this.maximum_life) {\r\n            this.current_life = this.maximum_life\r\n          }\r\n          this.life = this.current_life + \"/\" + this.maximum_life\r\n        ]]>\r\n      </attr>\r\n\r\n      <attr name=\"statusattributes\" type=\"simplestringdictionary\">life = Life: !; damage = Damage: !; speed = Speed: !; Luck: !</attr>\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n  <object name=\"orc_1\">\r\n\r\n    <inherit name=\"editor_object\" /> // this is a built-in Inherited Attribute (see Object Types / Types: this is more advanced stuff) // these specific 'editor_XXX' Inherited Attributes are destroyed at game start (so don't have any code that uses them for your during game play stuff), as they're just for giving the GUI/Editor its controls/options/Tabs/drop-down-boxes/text-boxes/check-in-boxes/etc for you to use in/with/for your using of the GUI/Editor\r\n    \r\n    //  these are some built-in Attributes (I'm using a different syntax/format/form of writing/typing/coding them in: long/full form/syntax/format):\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr> // this 'parent' Object (reference/pointer) Attribute, is what actually controls/determines containment/parent-child heirarcy (though for some situations, it's defaulted to not be shown by quest)\r\n    <attr name=\"alias\" type=\"string\">orc</attr>\r\n\r\n    // these are custom (my own) (some of the normal Attribute Types) Attributes (I'm using a different syntax/format/form of writing/typing/coding them in: long/full form/syntax/format):\r\n\r\n    <attr name=\"dead\" type=\"boolean\">false</attr>\r\n    <attr name=\"damage\" type=\"int\">50</attr>\r\n    <attr name=\"current_life\" type=\"int\">999</attr>\r\n    <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n    <attr name=\"life\" type=\"string\">Life: 999/999</attr>\r\n    <attr name=\"currency\" type=\"int\">200</attr>\r\n    <attr name=\"experience\" type=\"int\">300</attr>\r\n    <attr name=\"speed\" type=\"int\">0</attr>\r\n    <attr name=\"luck\" type=\"int\">25</attr>\r\n\r\n    // the special 'changedNAME_OF_ATTRIBUTE' Script Attribute (this is a bit advanced though):\r\n\r\n    <attr name=\"changedcurrent_life\" type=\"script\">\r\n      <![CDATA [\r\n        if (this.current_life > this.maximum_life) {\r\n          this.current_life = this.maximum_life\r\n        } else if (this.current_life < 1) {\r\n          this.current_life = 0\r\n          this.dead = true\r\n        }\r\n        this.life = this.current_life + \"/\" + this.maximum_life\r\n      ]]>\r\n    </attr>\r\n\r\n    <attr name=\"changedmaximum_life\" type=\"script\">\r\n      <![CDATA [\r\n        if (this.current_life > this.maximum_life) {\r\n          this.current_life = this.maximum_life\r\n        }\r\n        this.life = this.current_life + \"/\" + this.maximum_life\r\n      ]]>\r\n    </attr>\r\n\r\n    // a normal Script Attribute (and also is a Verb due to its extra coding I'll give to it: find/see the 'attack' Verb tag block):\r\n\r\n    <attr name=\"attack\" type=\"script\">\r\n      <![CDATA[\r\n        if (this.dead) { // if orc is dead\r\n          firsttime {\r\n            player.current_currency = player.current_currency + this.currency\r\n            player.current_experience = player.current_experience + this.experience\r\n            msg (\"You loot the dead \" + this.alias + \"'s corpse\")\r\n          } otherwise {\r\n            msg (\"The \" + this.alias + \" is already dead, and its corpse already looted, silly.\")\r\n          }\r\n        } else { // if orc is alive\r\n          you_go_first_boolean_variable = false // initially set for the orc going first (unless this is changed to 'true', the orc WILL go first. But if it's changed to 'true', then you WILL go first)\r\n          if (player.speed > this.speed) { // you go first\r\n            you_go_first_boolean_variable = true\r\n          } else if (player.speed = this.speed and RandomChance (50)) { // if tied in speed (player.speed = this.speed), \"flip a coin\" (50% chance of you going first)\r\n            you_go_first_boolean_variable = true\r\n          } // end of speed/who-goes-first 'if check'\r\n\r\n          if (you_go_first_boolean_variable) { // you go first\r\n            msg (UCase (this.alias) + \"'s Life: \" + this.life)\r\n            this.current_life = this.current_life - (player.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", player.luck))\r\n            msg (\"You damage the \" + this.alias + \" for \" + player.damage + \" damage\")\r\n            if (this.current_life < 1) { // if you killed the orc\r\n              this.dead = true // setting the orc to actually being dead, lol\r\n              msg (\"You killed the \" + this.alias +\"!\")\r\n            } else { // the orc is still alive, and now it's the orc's turn to attack/damage you\r\n              msg (\"The \" + this.alias + \" has \" + this.life + \" life remaining\")\r\n              msg (\"Your (Player's) Life: \" + player.life)\r\n              player.current_life = player.current_life - (this.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", this.luck))\r\n              msg (\"The \" + this.alias + \" damages you for \" + this.damage + \" damage)\r\n              // if your current life is less than 1, you're dead and the game is over (this is handled by the 'player' Player Object's special 'changedcurrent_life\" Script Attribute)\r\n              // otherwise, you're still alive (and so is the orc), so the combat round is over, and we keep doing combat rounds (looping) until one of you is dead:\r\n              do (this, \"attack\") // looping (doing another combat round) until one of you is dead\r\n            }\r\n          } else { // the orc goes first\r\n            msg (\"Your (Player's) Life: \" + player.life)\r\n            player.current_life = player.current life - (this.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", this.luck))\r\n            msg (\"The \" + this.alias + \" damages you for \" + this.damage + \" damage\")\r\n            // if your current life is less than 1, you're dead and the game is over (this is handled by the 'player' Player Object's special 'changedcurrent_life\" Script Attribute)\r\n            // otherwise, you're still alive (and so is the orc), and so now it's your turn:\r\n            msg (\"Your (Player's) Life: \" + player.life)\r\n            msg (UCase (this.alias) + \"'s Life: \" + this.life)\r\n            this.current_life = this.current_life - (player.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", player.luck))\r\n            msg (\"You damage the \" + this.alias + \" for \" + player.damage + \" damage\")\r\n            if (this.current_life < 1) { // if you killed the orc\r\n              this.dead = true // setting the orc to actually being dead, lol\r\n              msg (\"You killed the \" + this.alias +\"!\")\r\n            } else { // the orc is still alive (and so are you), so another combat round (looping), until one of you is dead\r\n              do (this, \"attack\") // looping (doing another combat round) until one of you is dead\r\n            }\r\n          }\r\n        }\r\n      ]]>\r\n    </attr>\r\n    \r\n  </object>\r\n\r\n  <object name=\"global_data_object\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n\r\n    <attr name=\"critical_hit_script_attribute\" type=\"critical_hit_delegate\">\r\n      if (RandomChance (name_of_object_dot_name_of_attribute)) {\r\n        return (2)\r\n      } else {\r\n        return (1)\r\n      }\r\n    </attr>\r\n\r\n  </object>\r\n\r\n  <verb>\r\n    <property>attack</property>\r\n    <pattern>attack</pattern>\r\n    <defaultexpression>You can't attack that!</defaultexpression>\r\n  </verb>\r\n\r\n</asl>\r\n```\r\n\r\nvs (different vertical ordering, but still correct/proper indenting/nesting and placement: NO errors)\r\n\r\n```\r\n<asl version=\"570\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <delegate name=\"critical_hit_delegate\" parameters=\"name_of_object_dot_name_of_attribute\" type=\"int\" />\r\n\r\n  <game name=\"example_game\">\r\n\r\n    <gameid>SOME RANDOMLY GENERATED HASH STRING MAINLY AS ID FOR THE ONLINE SERVERS BUT IT MIGHT STILL BE REQUIRED FOR OFFLINE USAGE TOO</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <verb>\r\n    <property>attack</property>\r\n    <pattern>attack</pattern>\r\n    <defaultexpression>You can't attack that!</defaultexpression>\r\n  </verb>\r\n\r\n  <object name=\"global_data_object\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n\r\n    <attr name=\"critical_hit_script_attribute\" type=\"critical_hit_delegate\">\r\n      if (RandomChance (name_of_object_dot_name_of_attribute)) {\r\n        return (2)\r\n      } else {\r\n        return (1)\r\n      }\r\n    </attr>\r\n\r\n  </object>\r\n\r\n  <object name=\"player\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n    <inherit name=\"editor_player\" />\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n    <attr name=\"statusattributes\" type=\"simplestringdictionary\">life = Life: !; damage = Damage: !; speed = Speed: !; Luck: !</attr>\r\n\r\n    <attr name=\"changedcurrent_life\" type=\"script\">\r\n      <![ CDATA[\r\n        if (this.current_life > this.maximum_life) {\r\n          this.current_life = this.maximum_life\r\n        } else if (this.current_life < 1) {\r\n          msg (\"You died or were killed\")\r\n          msg (\"GAME OVER\")\r\n          finish\r\n        }\r\n        this.life = this.current_life + \"/\" + this.maximum_life\r\n      ]]>\r\n    </attr>\r\n\r\n    <attr name=\"changedmaximum_life\" type=\"script\">\r\n      <![ CDATA[\r\n        if (this.current_life > this.maximum_life) {\r\n          this.current_life = this.maximum_life\r\n        }\r\n        this.life = this.current_life + \"/\" + this.maximum_life\r\n      ]]>\r\n    </attr>\r\n\r\n    <attr name=\"damage\" type=\"int\">100</attr>\r\n    <attr name=\"current_life\" type=\"int\">999</attr>\r\n    <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n    <attr name=\"life\" type=\"string\">999/999</attr>\r\n    <attr name=\"speed\" type=\"int\">100</attr>\r\n    <attr name=\"luck\" type=\"int\">75</attr>\r\n\r\n  </object>\r\n\r\n  <object name=\"orc_1\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n\r\n    <attr name=\"changedcurrent_life\" type=\"script\">\r\n      <![CDATA [\r\n        if (this.current_life > this.maximum_life) {\r\n          this.current_life = this.maximum_life\r\n        } else if (this.current_life < 1) {\r\n          this.current_life = 0\r\n          this.dead = true\r\n        }\r\n        this.life = this.current_life + \"/\" + this.maximum_life\r\n      ]]>\r\n    </attr>\r\n\r\n    <attr name=\"changedmaximum_life\" type=\"script\">\r\n      <![CDATA [\r\n        if (this.current_life > this.maximum_life) {\r\n          this.current_life = this.maximum_life\r\n        }\r\n        this.life = this.current_life + \"/\" + this.maximum_life\r\n      ]]>\r\n    </attr>\r\n\r\n    <attr name=\"attack\" type=\"script\">\r\n      <![CDATA[\r\n        if (this.dead) { // if orc is dead\r\n          firsttime {\r\n            player.current_currency = player.current_currency + this.currency\r\n            player.current_experience = player.current_experience + this.experience\r\n            msg (\"You loot the dead \" + this.alias + \"'s corpse\")\r\n          } otherwise {\r\n            msg (\"The \" + this.alias + \" is already dead, and its corpse already looted, silly.\")\r\n          }\r\n        } else { // if orc is alive\r\n          you_go_first_boolean_variable = false // initially set for the orc going first (unless this is changed to 'true', the orc WILL go first. But if it's changed to 'true', then you WILL go first)\r\n          if (player.speed > this.speed) { // you go first\r\n            you_go_first_boolean_variable = true\r\n          } else if (player.speed = this.speed and RandomChance (50)) { // if tied in speed (player.speed = this.speed), \"flip a coin\" (50% chance of you going first)\r\n            you_go_first_boolean_variable = true\r\n          } // end of speed/who-goes-first 'if check'\r\n\r\n          if (you_go_first_boolean_variable) { // you go first\r\n            msg (UCase (this.alias) + \"'s Life: \" + this.life)\r\n            this.current_life = this.current_life - (player.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", player.luck))\r\n            msg (\"You damage the \" + this.alias + \" for \" + player.damage + \" damage\")\r\n            if (this.current_life < 1) { // if you killed the orc\r\n              this.dead = true // setting the orc to actually being dead, lol\r\n              msg (\"You killed the \" + this.alias +\"!\")\r\n            } else { // the orc is still alive, and now it's the orc's turn to attack/damage you\r\n              msg (\"The \" + this.alias + \" has \" + this.life + \" life remaining\")\r\n              msg (\"Your (Player's) Life: \" + player.life)\r\n              player.current_life = player.current_life - (this.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", this.luck))\r\n              msg (\"The \" + this.alias + \" damages you for \" + this.damage + \" damage)\r\n              // if your current life is less than 1, you're dead and the game is over (this is handled by the 'player' Player Object's special 'changedcurrent_life\" Script Attribute)\r\n              // otherwise, you're still alive (and so is the orc), so the combat round is over, and we keep doing combat rounds (looping) until one of you is dead:\r\n              do (this, \"attack\") // looping (doing another combat round) until one of you is dead\r\n            }\r\n          } else { // the orc goes first\r\n            msg (\"Your (Player's) Life: \" + player.life)\r\n            player.current_life = player.current life - (this.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", this.luck))\r\n            msg (\"The \" + this.alias + \" damages you for \" + this.damage + \" damage\")\r\n            // if your current life is less than 1, you're dead and the game is over (this is handled by the 'player' Player Object's special 'changedcurrent_life\" Script Attribute)\r\n            // otherwise, you're still alive (and so is the orc), and so now it's your turn:\r\n            msg (\"Your (Player's) Life: \" + player.life)\r\n            msg (UCase (this.alias) + \"'s Life: \" + this.life)\r\n            this.current_life = this.current_life - (player.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", player.luck))\r\n            msg (\"You damage the \" + this.alias + \" for \" + player.damage + \" damage\")\r\n            if (this.current_life < 1) { // if you killed the orc\r\n              this.dead = true // setting the orc to actually being dead, lol\r\n              msg (\"You killed the \" + this.alias +\"!\")\r\n            } else { // the orc is still alive (and so are you), so another combat round (looping), until one of you is dead\r\n              do (this, \"attack\") // looping (doing another combat round) until one of you is dead\r\n            }\r\n          }\r\n        }\r\n      ]]>\r\n    </attr>\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n    <attr name=\"alias\" type=\"string\">orc</attr>\r\n\r\n    <attr name=\"dead\" type=\"boolean\">false</attr>\r\n    <attr name=\"damage\" type=\"int\">50</attr>\r\n    <attr name=\"current_life\" type=\"int\">999</attr>\r\n    <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n    <attr name=\"life\" type=\"string\">Life: 999/999</attr>\r\n    <attr name=\"currency\" type=\"int\">200</attr>\r\n    <attr name=\"experience\" type=\"int\">300</attr>\r\n    <attr name=\"speed\" type=\"int\">0</attr>\r\n    <attr name=\"luck\" type=\"int\">25</attr>\r\n    \r\n  </object>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n  </object>\r\n\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>let me (not be my usual lazy-bum self and) test out my code saturday/tomarrow (its almost friday midnight here, need to sleep, lol), and get back to you on it (sometime saturday/tormarrow), as I likely made/have some stupid mistake/typo (90% of the time, an error in code, is some stupid small mistake/typo, the problem is finding it, lol), as that way, you'll have a working model/code, that you can take a look at in the GUI/Editor and play as a demo game, which is more familiar and recognizable/understandable, so you can see how the stuff is done and how it looks.</p>\n<hr>\n<p>don't worry about my code, I'm throwing full coding at you, this stuff took myself 5 years to learn, it's not easy to pick up right away, it takes time to learn and understand how code work and how to read it. As you really got to train your brain in the logic and mindset/thinking required for coding, and its not natural, so it takes time to train your brain in it and learn/understand coding.</p>\n<hr>\n<p>when I provide you the working copy tomorrow, you can study it in the GUI/Editor, which will be much more clear for you.</p>\n<p>(once you learn to code, it's hard to not throw code at people, as it's much faster and easier to write/type/code than it is to try to do a step by step guide through using the GUI/Editor's script options and etc, so my apologies for scaring you with all of my code I've been throwing at you)</p>\n<hr>\n<p>about your other questions:</p>\n<ol>\n<li>yes, you can create/add your own Verbs (and anything/everything else too, lol), and/or use the built-in Verbs (and all the other stuff too).</li>\n</ol>\n<p>Some of the built-in Verbs (or whatever else) have their own scripting.</p>\n<p>Some of the built-in Verbs have no scripting, as it is waiting for your scripting as its the type of stuff that you'd have to put in what you want (for example: 'talk/speak' Verb, it can be anything, its fully for you to customize/determine, so there's no set scripting obviously).</p>\n<p>Also, there's a lot of \"under the hood coding\" that enables those Verbs (or whatever) to do their functionality.</p>\n<p>For the Verbs that are for you to put in what scripting you want, they'll work as they were made to work for whatever you want put into them.</p>\n<p>However, there's also some Verbs that do have set scripting which the \"under the hood coding\" needs for it to do its functionality, and if you over-ride/over-write it, you thus wipe out its \"under the hood functionality\" for it to work, as it needed that set scripting that you over-wrote/over-ridden.</p>\n<ol start=\"2\">\n<li>yes, in quest the 'name' (the 'name' String Attribute) is the ID, and so, all names MUST be unique, for example:</li>\n</ol>\n<pre><code>&lt;object name=\"ball\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ball\"&gt;\n&lt;/object&gt;\n</code></pre>\n<p>this will cause an error (or possibly quest will ask you to choose/specify which one you meant).</p>\n<p>just as I and only I have my DNA/genetic-code, just as you and only you have your DNA/genetic-code, just as \"that person/organism\" has its DNA/genetic-code (and nothing else does, it and only it has that DNA/genetic-code). DNA/genetic-code is an organism's 'ID' in the real world. For quest, the 'name' String Attribute is it's ID.</p>\n<p>whereas, many people can have the name of 'Mike', a person's name is NOT their ID (usually it works, so long as you're the only 'Mike' in the target group, but that's NOT the definition of 'ID', as identification is 100% and only 100%, else it's not identification)</p>\n<p>a person's name in the real world is equivalent to quest's built-in 'alias' String Attribute, as really quest does NOT care one bit about what you type in for its Object's 'alias' String Attribute. Quest only cares about what you type in for its 'name' String Attribute. No two 'names' can be the same (not technically an exception, but Attributes can have the same name when they're contained within different Objects, but you can't have two Attributes with the same 'name' within the same Object: every Object can have an 'alias' String Attribute, but an Object can't have two 'alias' Attributes. The technicality of why this is not breaking the uniqueness rule of the 'name' String Attribute as the ID: an Attribute's actual full name and thus ID, is: NAME_OF_OBJECT.NAME_OF_ATTRIBUTE, so for example: Joe.alias = \"joe\" and John.alias = \"john\" isn't breaking the ID rule: Joe.alias is NOT equal to John.alias, and this is thus not breaking the rule either: Joe.alias = \"joe\" and Joe.alias_2 = \"joe\")</p>\n<p>if you create/add anything with the same name (in the same location/scope) as something that already exists, that's how you 'over-ride/over-write' it.</p>\n<hr>\n<p>I personally don't know the built-in stuff that well, and so i create a lot of custom stuff, and so I have to be careful in my own naming/labeling scheme/convention/system, not to accidentally use a name/label that is already in use, as I don't want to over-ride/over-write something that involves the \"under the hood coding\" which gives that built-in functionality to me, as I'm not good enough to recreate/re-code in that same \"under the hood coding\", as it can be really complex/advanced stuff (and/or requires lots of coding knowledge to know how quest works, which unfortunately few people have, and so that's why quest v6.0/QuestKit won't be happening any time soon, as unfortunately, Alex (and possibly co) created quest using a bunch of different and very wide-ranging programming languages, which he had the knowledge and skill of/with, but so far no one else has come along knowing all the stuff that went into creating quest. Some of the \"under the hood / built-in stuff\" isn't that messy/deep (which can be easily adjusted/changed), but then there's the messy/deep stuff that I was just talking about, which isn't so easy to change/alter.</p>\n<ol start=\"3\">\n<li>the 'Templates' allows you to be able to change the messaging/prompts to whatever you want (the big purpose is for human language conversions of quest: european english~american english~chinese~german~french~japanese~russian~indian~etc etc etc, but can be used for individual game makers and their games too, for what the want the default repsonses or whatever to be as the responses you want them as being), but I do believe they're global changes.</li>\n</ol>\n<p>However, I know you can somehow do it locally (maybe... you just got to over-ride/over-write them: create/add into/for a specific Object), but I've just not gotten into learning how Templates work yet, sighs. Pixie can help you with them (and has guides already done too, which maybe you can follow, as Pixie is great at explaining/guiding, whereas I'm not, as can be seen, laughs)</p>\n<ol start=\"4\">\n<li>\n<p>definately, go ahead and pm Pixie and/or Richard (not sure if Richard knows how Templates work yet, but he can probably research them and be an expert on them in no time: he's learning to code so quickly), but Pixie can certainly help, he knows quest quite well, as he's continuing to develop quest (just not the all the stuff that's needed for converting it into fully using JS:v6.0/QuestKit so that it can run on any platform, as Pixie just doesn't know all of that stuff/programming languages and etc stuff involved in quest's creation, not yet anyways, but it'll take him time... as he's probably already super busy between real life and just developing quest further. He just posted that it'd likely take at least 5 years to learn how to convert quest into fully using JS, that's how messy quest's creation is, lots of programming languages to learn and how to use them together, not easy to learn)</p>\n</li>\n<li>\n<p>\"order of operations\" matter as much in programming as it does in mathematics: vitally so!</p>\n</li>\n</ol>\n<p>now, placement in code vertically doesn't matter, so long as you're keeping the nesting/indenting/containment/parent-child heirarchy (think of literally like the folders on your computer, quest's code structure is exactly the same as that) intact/correct, with the exception of the 'include ref' library file references, Delegates, and maybe also the special 'game' Game Settings Object.</p>\n<p>let me try to explain this stuff... (I'll probably just continue to confuse you, laughs, but I've already done that, so no harm in confusing you more, laughs, right?)</p>\n<hr>\n<p>in quest, the GAME OBJECT is the 'asl' tag</p>\n<p>these 'tag' lines/blocks are the \"actual physical things that exist\" within your game/game-file and/or library-file.</p>\n<p>these tags, these \"actual physical things that exist\" are known as 'Elements'. The (normal) Elements are: Objects, Exits, Verbs, Commands, Functions, Turnscripts, Timers, and Object Types / Types</p>\n<p>Attributes are a bit weird, as they're kind of a hybrid between an Element and scripting. Attributes are/have tags, but they HAVE TO BE CONTAINED WITHIN an (NON-Attribute) Element: Objects, Exits, Verbs, Commands, Functions, Turnscripts, Timers, and Object Types / Types, yet they (Script Attributes) can hold scripting too, like some Elements can. So, they kinda are Elements but also are kinda not Elements. Attributes are hard for me to explain.</p>\n<p>anything without the 'tag' lines/blocks is either: scripting (actions) or comments (for us humans to read, to know what's going on or whatever, documentation for us humans: comments are NOT code used by quest)</p>\n<p>to do comments:</p>\n<p>(these can't be wrongly put inside of stuff/tags, as that'll cause a syntax error)</p>\n<pre><code>// THIS IS MY COMMENT LINE: kljdqslkjdlqsjdlqksjdlkqsjd fjkljflksdjfkldsjflkjsdlfkdslkfjdsklfjdlskjfldskjflkdsjflkdsjflkdsjflkdsjfldkjflkdwjfldkwjflwdkjfldwkjfldkwjfdlwkjfldkwjflkdwjflkdwjflkdwjflkdwjflkwdjflkdwjflkwdjflkdwjflkdwjflkdwjflkwdjflkwjfl\n// THIS IS ANOTHER COMMENT LINE:  kljlskjlksjdlkqsj jkasldkjaslkdjalkjdlkasjdlkasjdlksajdlkslkdsqlkdhlskqhdlksqhdlskqjdlksqjdlkjsqlkdjsqlkjdlqskjdlksqjdlkqsjdlkqsjdlkqsjdlkqsjdlkqsjdlkqsjd\n\nor:\n\n&lt;!--\nTHIS IS A COMMENT BLOCK:\n\nsdkjwlfjdlwkfjlwdkjfkljflksjlksqjdlksqjdlksqjdlksqjdlkjqslkdjqslkjdfklwhjlkshfjvbjkwbdklsndlksqjdlkqsjdlkqsjdlkqsjdlkjqslkdjsqlkdjslkqjdlksq\n\nslkjlkfjlkjdlsqk\n--&gt;\n</code></pre>\n<hr>\n<p>for the 'xxx.aslx' game file:</p>\n<p>this is the GAME OBJECT:</p>\n<pre><code>&lt;asl&gt; // beginning 'asl' tag (like the start of a sentence:code-line or the start of a paragraph:code-block)\n  // mass of game code/content: EVERYTHING MUST GO BETWEEN/WITHIN these 'asl' tags (except for comments)\n&lt;/asl&gt; // ending 'asl' tag\n\n// comments: blah blah blah\n\n&lt;!--\ncomments: blah blah blah\n--&gt;\n</code></pre>\n<p>and, if you want to made a 'xxx.aslx' library file:</p>\n<p>this is the LIBRARY OBJECT:</p>\n<pre><code>&lt;library&gt;\n  // mass of code/content: EVERYTHING MUST GO BETWEEN/WITHIN these 'library' tags (except for comments) \n&lt;/library&gt;\n</code></pre>\n<hr>\n<p>(back to the game file)</p>\n<p>now, you HAVE TO put in the version number into the beginning 'asl' tag (this is known as its 'signature/header': holds special types of Attributes):</p>\n<pre><code>&lt;asl version=\"570\"&gt; // v570 is the most recent version (or is it v580, meh) Pixie just released publically\n&lt;/asl&gt;\n</code></pre>\n<p>I'm still using an older version: quest (quest.exe) v550, so I have to tell quest so:</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>to know your quest version:</p>\n<p>open up into the GUI/Editor, and in the menu bar at the top, under the 'help' (or is there directly an 'about' menu option? I don't have quest open at the moment and can't remember, lol), click on 'about', and you'll see its version, for a pretend example:</p>\n<p>quest version: 5.7.6.398234802380832</p>\n<p>you completely ignore the  decimal number (after the 3rd digit: for the example above: x.x.x.398234802380832)</p>\n<p>you also completely ignore the '1s column/digit', AS IT IS ALWAYS TO BE: 0 (zero), so in the example it would be the: x.x.6, that is ignored, and instead it is this:  X.X.0)</p>\n<p>and that's your 3 digit version (570) for putting into the beginning 'asl' tag:</p>\n<pre><code>&lt;asl version=\"570\"&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>now, next MUST BE the default (or custom) ENGINE library files (quest is really powerful, as literally its engine comes from its library files, which if you're a good programmer and you know quest well, you can create your own totally different engine library files, making whatever engine you want for quest, though probably there's some limits on the engine... lol. I don't think you could make a 3D world engine... but maybe... though I don't think that'd be possible.... I don't think... lol):</p>\n<p>the language library file goes FIRST:ABOVE, and then goes next (BELOW) the ENGINE library file(s)</p>\n<pre><code>&lt;asl version=\"570\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt; // for english speakers quest.exe download // also note that this is a tag line (horizonal) (and not the usual tag block: vertical), and for this type of tag line, it's correct syntax is this: &lt;include ref=\"NAME_OF_LIBRARY_FILE.aslx\" /&gt; // not sure if the language library files are also 'hubs' to individual language library files like the 'core.aslx' library file is below.\n\n  &lt;include ref=\"Core.aslx\" /&gt; // this is actually a 'hub' library file (though it may also have/hold some coding too), with lots of its own 'include ref' to all of the individual 'core' engine library files (can be seen within the quest folder itself, but do NOT mess with them: you can open them up and look at them BUT do NOT: change them and then save it, unless you want to have to delete quest and re-download and re-install it, lol)\n  \n&lt;/asl&gt;\n</code></pre>\n<p>next, if you're using Delegates (don't worry about these, as they're a bit more advanced stuff), here's a good place to put them (to be safe), an example of one of mine (for an Object's Script Attribute that will have the scripting for it, I'll show it when I get past this required vertical ordering of stuff):</p>\n<pre><code>&lt;asl version=\"570\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;delegate name=\"critical_hit_delegate\" parameters=\"name_of_object_dot_name_of_attribute\" type=\"int\" /&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>lastly, just to be safe, next should be the special (and required) 'game' Game Settings Object:</p>\n<pre><code>&lt;asl version=\"570\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;delegate name=\"critical_hit_delegate\" parameters=\"name_of_object_dot_name_of_attribute\" type=\"int\" /&gt;\n\n  &lt;game name=\"example_game\"&gt;\n\n    // these three tags (gameid, version, firstpublished) are Attributes (I'm not sure if they're all String Attributes or not, so I'm just writing/coding them as they appear by default format/syntax by quest):\n\n    &lt;gameid&gt;SOME RANDOMLY GENERATED HASH STRING MAINLY AS ID FOR THE ONLINE SERVERS BUT IT MIGHT STILL BE REQUIRED FOR OFFLINE USAGE TOO&lt;/gameid&gt; // default new game code\n    &lt;version&gt;1.0&lt;/version&gt; // default new game code\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;  // default new game code\n\n  &lt;/game&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>do note (EXTREMELY IMPORTANT) the indenting/nesting:</p>\n<ol>\n<li>there's NO indenting (NO/ZERO indenting units) in front of the 'asl' tags</li>\n<li>there's only 1 indenting unit (an indenting \"uni\"t is conventionally: 2 individual white-spaces:SPACEBAR-key or 1 tab-space:TAB-key) in front of the Element (non-Attribute) Tags: 'include ref', 'delegate', and 'game' tags</li>\n<li>the Attribute tags MUST be within an Element, and thus they must be indenting another unit BEYOND (to the right) of its parent Element tag</li>\n</ol>\n<hr>\n<p>and now (after:below the special 'game' Game Settings Object) , the vertical ordering does not matter at all (aside from the ending 'asl' tag, as all of this stuff has to be contained within the 'asl' tag block, aka, the GAME OBJECT), though you do got to have the proper/correct indenting/nesting and placement, as that always matters:</p>\n<pre><code>&lt;asl version=\"570\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;delegate name=\"critical_hit_delegate\" parameters=\"name_of_object_dot_name_of_attribute\" type=\"int\" /&gt;\n\n  &lt;game name=\"example_game\"&gt;\n\n    &lt;gameid&gt;SOME RANDOMLY GENERATED HASH STRING MAINLY AS ID FOR THE ONLINE SERVERS BUT IT MIGHT STILL BE REQUIRED FOR OFFLINE USAGE TOO&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;object name=\"player\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n\n      &lt;attr name=\"damage\" type=\"int\"&gt;100&lt;/attr&gt;\n      &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n      &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n      &lt;attr name=\"life\" type=\"string\"&gt;999/999&lt;/attr&gt;\n      &lt;attr name=\"speed\" type=\"int\"&gt;100&lt;/attr&gt;\n      &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n\n      &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n        &lt;![ CDATA[\n          if (this.current_life &gt; this.maximum_life) {\n            this.current_life = this.maximum_life\n          } else if (this.current_life &lt; 1) {\n            msg (\"You died or were killed\")\n            msg (\"GAME OVER\")\n            finish\n          }\n          this.life = this.current_life + \"/\" + this.maximum_life\n        ]]&gt;\n      &lt;/attr&gt;\n\n      &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n        &lt;![ CDATA[\n          if (this.current_life &gt; this.maximum_life) {\n            this.current_life = this.maximum_life\n          }\n          this.life = this.current_life + \"/\" + this.maximum_life\n        ]]&gt;\n      &lt;/attr&gt;\n\n      &lt;attr name=\"statusattributes\" type=\"simplestringdictionary\"&gt;life = Life: !; damage = Damage: !; speed = Speed: !; Luck: !&lt;/attr&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"orc_1\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt; // this is a built-in Inherited Attribute (see Object Types / Types: this is more advanced stuff) // these specific 'editor_XXX' Inherited Attributes are destroyed at game start (so don't have any code that uses them for your during game play stuff), as they're just for giving the GUI/Editor its controls/options/Tabs/drop-down-boxes/text-boxes/check-in-boxes/etc for you to use in/with/for your using of the GUI/Editor\n    \n    //  these are some built-in Attributes (I'm using a different syntax/format/form of writing/typing/coding them in: long/full form/syntax/format):\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt; // this 'parent' Object (reference/pointer) Attribute, is what actually controls/determines containment/parent-child heirarcy (though for some situations, it's defaulted to not be shown by quest)\n    &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n\n    // these are custom (my own) (some of the normal Attribute Types) Attributes (I'm using a different syntax/format/form of writing/typing/coding them in: long/full form/syntax/format):\n\n    &lt;attr name=\"dead\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;attr name=\"damage\" type=\"int\"&gt;50&lt;/attr&gt;\n    &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n    &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n    &lt;attr name=\"life\" type=\"string\"&gt;Life: 999/999&lt;/attr&gt;\n    &lt;attr name=\"currency\" type=\"int\"&gt;200&lt;/attr&gt;\n    &lt;attr name=\"experience\" type=\"int\"&gt;300&lt;/attr&gt;\n    &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n    &lt;attr name=\"luck\" type=\"int\"&gt;25&lt;/attr&gt;\n\n    // the special 'changedNAME_OF_ATTRIBUTE' Script Attribute (this is a bit advanced though):\n\n    &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n      &lt;![CDATA [\n        if (this.current_life &gt; this.maximum_life) {\n          this.current_life = this.maximum_life\n        } else if (this.current_life &lt; 1) {\n          this.current_life = 0\n          this.dead = true\n        }\n        this.life = this.current_life + \"/\" + this.maximum_life\n      ]]&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n      &lt;![CDATA [\n        if (this.current_life &gt; this.maximum_life) {\n          this.current_life = this.maximum_life\n        }\n        this.life = this.current_life + \"/\" + this.maximum_life\n      ]]&gt;\n    &lt;/attr&gt;\n\n    // a normal Script Attribute (and also is a Verb due to its extra coding I'll give to it: find/see the 'attack' Verb tag block):\n\n    &lt;attr name=\"attack\" type=\"script\"&gt;\n      &lt;![CDATA[\n        if (this.dead) { // if orc is dead\n          firsttime {\n            player.current_currency = player.current_currency + this.currency\n            player.current_experience = player.current_experience + this.experience\n            msg (\"You loot the dead \" + this.alias + \"'s corpse\")\n          } otherwise {\n            msg (\"The \" + this.alias + \" is already dead, and its corpse already looted, silly.\")\n          }\n        } else { // if orc is alive\n          you_go_first_boolean_variable = false // initially set for the orc going first (unless this is changed to 'true', the orc WILL go first. But if it's changed to 'true', then you WILL go first)\n          if (player.speed &gt; this.speed) { // you go first\n            you_go_first_boolean_variable = true\n          } else if (player.speed = this.speed and RandomChance (50)) { // if tied in speed (player.speed = this.speed), \"flip a coin\" (50% chance of you going first)\n            you_go_first_boolean_variable = true\n          } // end of speed/who-goes-first 'if check'\n\n          if (you_go_first_boolean_variable) { // you go first\n            msg (UCase (this.alias) + \"'s Life: \" + this.life)\n            this.current_life = this.current_life - (player.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", player.luck))\n            msg (\"You damage the \" + this.alias + \" for \" + player.damage + \" damage\")\n            if (this.current_life &lt; 1) { // if you killed the orc\n              this.dead = true // setting the orc to actually being dead, lol\n              msg (\"You killed the \" + this.alias +\"!\")\n            } else { // the orc is still alive, and now it's the orc's turn to attack/damage you\n              msg (\"The \" + this.alias + \" has \" + this.life + \" life remaining\")\n              msg (\"Your (Player's) Life: \" + player.life)\n              player.current_life = player.current_life - (this.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", this.luck))\n              msg (\"The \" + this.alias + \" damages you for \" + this.damage + \" damage)\n              // if your current life is less than 1, you're dead and the game is over (this is handled by the 'player' Player Object's special 'changedcurrent_life\" Script Attribute)\n              // otherwise, you're still alive (and so is the orc), so the combat round is over, and we keep doing combat rounds (looping) until one of you is dead:\n              do (this, \"attack\") // looping (doing another combat round) until one of you is dead\n            }\n          } else { // the orc goes first\n            msg (\"Your (Player's) Life: \" + player.life)\n            player.current_life = player.current life - (this.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", this.luck))\n            msg (\"The \" + this.alias + \" damages you for \" + this.damage + \" damage\")\n            // if your current life is less than 1, you're dead and the game is over (this is handled by the 'player' Player Object's special 'changedcurrent_life\" Script Attribute)\n            // otherwise, you're still alive (and so is the orc), and so now it's your turn:\n            msg (\"Your (Player's) Life: \" + player.life)\n            msg (UCase (this.alias) + \"'s Life: \" + this.life)\n            this.current_life = this.current_life - (player.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", player.luck))\n            msg (\"You damage the \" + this.alias + \" for \" + player.damage + \" damage\")\n            if (this.current_life &lt; 1) { // if you killed the orc\n              this.dead = true // setting the orc to actually being dead, lol\n              msg (\"You killed the \" + this.alias +\"!\")\n            } else { // the orc is still alive (and so are you), so another combat round (looping), until one of you is dead\n              do (this, \"attack\") // looping (doing another combat round) until one of you is dead\n            }\n          }\n        }\n      ]]&gt;\n    &lt;/attr&gt;\n    \n  &lt;/object&gt;\n\n  &lt;object name=\"global_data_object\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n\n    &lt;attr name=\"critical_hit_script_attribute\" type=\"critical_hit_delegate\"&gt;\n      if (RandomChance (name_of_object_dot_name_of_attribute)) {\n        return (2)\n      } else {\n        return (1)\n      }\n    &lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;verb&gt;\n    &lt;property&gt;attack&lt;/property&gt;\n    &lt;pattern&gt;attack&lt;/pattern&gt;\n    &lt;defaultexpression&gt;You can't attack that!&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>vs (different vertical ordering, but still correct/proper indenting/nesting and placement: NO errors)</p>\n<pre><code>&lt;asl version=\"570\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;delegate name=\"critical_hit_delegate\" parameters=\"name_of_object_dot_name_of_attribute\" type=\"int\" /&gt;\n\n  &lt;game name=\"example_game\"&gt;\n\n    &lt;gameid&gt;SOME RANDOMLY GENERATED HASH STRING MAINLY AS ID FOR THE ONLINE SERVERS BUT IT MIGHT STILL BE REQUIRED FOR OFFLINE USAGE TOO&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;verb&gt;\n    &lt;property&gt;attack&lt;/property&gt;\n    &lt;pattern&gt;attack&lt;/pattern&gt;\n    &lt;defaultexpression&gt;You can't attack that!&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n\n  &lt;object name=\"global_data_object\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n\n    &lt;attr name=\"critical_hit_script_attribute\" type=\"critical_hit_delegate\"&gt;\n      if (RandomChance (name_of_object_dot_name_of_attribute)) {\n        return (2)\n      } else {\n        return (1)\n      }\n    &lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"player\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n    &lt;attr name=\"statusattributes\" type=\"simplestringdictionary\"&gt;life = Life: !; damage = Damage: !; speed = Speed: !; Luck: !&lt;/attr&gt;\n\n    &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n      &lt;![ CDATA[\n        if (this.current_life &gt; this.maximum_life) {\n          this.current_life = this.maximum_life\n        } else if (this.current_life &lt; 1) {\n          msg (\"You died or were killed\")\n          msg (\"GAME OVER\")\n          finish\n        }\n        this.life = this.current_life + \"/\" + this.maximum_life\n      ]]&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n      &lt;![ CDATA[\n        if (this.current_life &gt; this.maximum_life) {\n          this.current_life = this.maximum_life\n        }\n        this.life = this.current_life + \"/\" + this.maximum_life\n      ]]&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"damage\" type=\"int\"&gt;100&lt;/attr&gt;\n    &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n    &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n    &lt;attr name=\"life\" type=\"string\"&gt;999/999&lt;/attr&gt;\n    &lt;attr name=\"speed\" type=\"int\"&gt;100&lt;/attr&gt;\n    &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"orc_1\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n\n    &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n      &lt;![CDATA [\n        if (this.current_life &gt; this.maximum_life) {\n          this.current_life = this.maximum_life\n        } else if (this.current_life &lt; 1) {\n          this.current_life = 0\n          this.dead = true\n        }\n        this.life = this.current_life + \"/\" + this.maximum_life\n      ]]&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n      &lt;![CDATA [\n        if (this.current_life &gt; this.maximum_life) {\n          this.current_life = this.maximum_life\n        }\n        this.life = this.current_life + \"/\" + this.maximum_life\n      ]]&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"attack\" type=\"script\"&gt;\n      &lt;![CDATA[\n        if (this.dead) { // if orc is dead\n          firsttime {\n            player.current_currency = player.current_currency + this.currency\n            player.current_experience = player.current_experience + this.experience\n            msg (\"You loot the dead \" + this.alias + \"'s corpse\")\n          } otherwise {\n            msg (\"The \" + this.alias + \" is already dead, and its corpse already looted, silly.\")\n          }\n        } else { // if orc is alive\n          you_go_first_boolean_variable = false // initially set for the orc going first (unless this is changed to 'true', the orc WILL go first. But if it's changed to 'true', then you WILL go first)\n          if (player.speed &gt; this.speed) { // you go first\n            you_go_first_boolean_variable = true\n          } else if (player.speed = this.speed and RandomChance (50)) { // if tied in speed (player.speed = this.speed), \"flip a coin\" (50% chance of you going first)\n            you_go_first_boolean_variable = true\n          } // end of speed/who-goes-first 'if check'\n\n          if (you_go_first_boolean_variable) { // you go first\n            msg (UCase (this.alias) + \"'s Life: \" + this.life)\n            this.current_life = this.current_life - (player.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", player.luck))\n            msg (\"You damage the \" + this.alias + \" for \" + player.damage + \" damage\")\n            if (this.current_life &lt; 1) { // if you killed the orc\n              this.dead = true // setting the orc to actually being dead, lol\n              msg (\"You killed the \" + this.alias +\"!\")\n            } else { // the orc is still alive, and now it's the orc's turn to attack/damage you\n              msg (\"The \" + this.alias + \" has \" + this.life + \" life remaining\")\n              msg (\"Your (Player's) Life: \" + player.life)\n              player.current_life = player.current_life - (this.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", this.luck))\n              msg (\"The \" + this.alias + \" damages you for \" + this.damage + \" damage)\n              // if your current life is less than 1, you're dead and the game is over (this is handled by the 'player' Player Object's special 'changedcurrent_life\" Script Attribute)\n              // otherwise, you're still alive (and so is the orc), so the combat round is over, and we keep doing combat rounds (looping) until one of you is dead:\n              do (this, \"attack\") // looping (doing another combat round) until one of you is dead\n            }\n          } else { // the orc goes first\n            msg (\"Your (Player's) Life: \" + player.life)\n            player.current_life = player.current life - (this.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", this.luck))\n            msg (\"The \" + this.alias + \" damages you for \" + this.damage + \" damage\")\n            // if your current life is less than 1, you're dead and the game is over (this is handled by the 'player' Player Object's special 'changedcurrent_life\" Script Attribute)\n            // otherwise, you're still alive (and so is the orc), and so now it's your turn:\n            msg (\"Your (Player's) Life: \" + player.life)\n            msg (UCase (this.alias) + \"'s Life: \" + this.life)\n            this.current_life = this.current_life - (player.damage * RunDelegateFunction (global_data_object, \"critical_hit_script_attribute\", player.luck))\n            msg (\"You damage the \" + this.alias + \" for \" + player.damage + \" damage\")\n            if (this.current_life &lt; 1) { // if you killed the orc\n              this.dead = true // setting the orc to actually being dead, lol\n              msg (\"You killed the \" + this.alias +\"!\")\n            } else { // the orc is still alive (and so are you), so another combat round (looping), until one of you is dead\n              do (this, \"attack\") // looping (doing another combat round) until one of you is dead\n            }\n          }\n        }\n      ]]&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n    &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n\n    &lt;attr name=\"dead\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;attr name=\"damage\" type=\"int\"&gt;50&lt;/attr&gt;\n    &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n    &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n    &lt;attr name=\"life\" type=\"string\"&gt;Life: 999/999&lt;/attr&gt;\n    &lt;attr name=\"currency\" type=\"int\"&gt;200&lt;/attr&gt;\n    &lt;attr name=\"experience\" type=\"int\"&gt;300&lt;/attr&gt;\n    &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n    &lt;attr name=\"luck\" type=\"int\"&gt;25&lt;/attr&gt;\n    \n  &lt;/object&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2017-08-05T06:38:34.3134949Z",
      "LastEditDate": "2017-08-05T13:09:55.1201587Z",
      "link": null
    },
    {
      "PostId": "3591d666-d4b4-42a7-bfdf-8769311da8f0",
      "UserId": 316011,
      "Username": "NinjaNin",
      "AvatarUrl": "http://i.imgur.com/L53RidGb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That would help loads thank you so much! I've actually learned a lot just looking at the code you've provided and the code view as well, so no worries with throwing this code right at me. It's confusing but really interesting. \r\n\r\nHow do you remember how many spaces to put and what pattern to use? ",
      "EditableFormat": "markdown",
      "HTML": "<p>That would help loads thank you so much! I've actually learned a lot just looking at the code you've provided and the code view as well, so no worries with throwing this code right at me. It's confusing but really interesting.</p>\n<p>How do you remember how many spaces to put and what pattern to use?</p>\n\n",
      "PostDate": "2017-08-05T07:18:23.8934437Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "10709ab9-fce4-4c3c-a9a7-d98d001efd4e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just edited my previous post (sorry about that, so if you don't mind, refresh and take a look at it), lots of code for you to look at (laughs... I try to explain it for you... regardless of whether you actually want to learn to code or not, laughs), so take a look and see if it makes some sense, or let me know if I just confused you even more, and I'll just get around to getting that code model working for you to try out. (I still haven't slept yet... need to get my sleep first... then I'll get that code working for you to try out)\r\n\r\n------------\r\n\r\nif you want to learn to code:\r\n\r\nlooking at other people's code is the best way to learn! (once you know/learn how to read/understand code, of course. You got to first learn/know code, before you can study other people's code, as otherwise, it's just a bunch of very very scary gibberish).\r\n\r\nit's like in math: imagine NEVER seeing each of the steps (and with explanations of those steps: I hate that they just assume you understand what's going on in the step, lol --- I HATE math, by the way, lol) to the final solution/answer of how to do some math problem you're stuck on/with, and/or even worse, imagine NEVER seeing how to do an entire field of math, you have to discover that field all by yourself! That's what it's like with programming when you don't get to see example code, and the professor just gives you a program to write, and you got to figure out how to do it, with never seeing how to do the program... you got to completely all on your own figure out how to do the program... it's really awesome (huge rush) when you do, and regardless of whether you do or not, you also usually learn a lot, but it also really sucks if you spend an entire week up nearly 24/7 trying to get the program done, and you fail to do so, getting an F grade on that project/program... sighs... Some programming professors are like this, and some are more helpful, letting you see some example code, and then some give you the code/program, and you practice and learn/memorize it, and then you're tested on it: you got to create/write/code the program in class as an exam/test.\r\n\r\n-------\r\n\r\nthat said, code is IP (intellectual property), so stealing/vandalizing/etc it outside of educational legally-protected uses and/or getting the owner's recorded permission, is a crime of course. But, if no one ever saw any code, there'd be very few people who can program/code in the world.\r\n\r\nImagine if calculus, trigonometry, geometry, algebra, etc was copyrighted/patented/trademarked... BAD BAD BAD BAD BAD, lol",
      "EditableFormat": "markdown",
      "HTML": "<p>just edited my previous post (sorry about that, so if you don't mind, refresh and take a look at it), lots of code for you to look at (laughs... I try to explain it for you... regardless of whether you actually want to learn to code or not, laughs), so take a look and see if it makes some sense, or let me know if I just confused you even more, and I'll just get around to getting that code model working for you to try out. (I still haven't slept yet... need to get my sleep first... then I'll get that code working for you to try out)</p>\n<hr>\n<p>if you want to learn to code:</p>\n<p>looking at other people's code is the best way to learn! (once you know/learn how to read/understand code, of course. You got to first learn/know code, before you can study other people's code, as otherwise, it's just a bunch of very very scary gibberish).</p>\n<p>it's like in math: imagine NEVER seeing each of the steps (and with explanations of those steps: I hate that they just assume you understand what's going on in the step, lol --- I HATE math, by the way, lol) to the final solution/answer of how to do some math problem you're stuck on/with, and/or even worse, imagine NEVER seeing how to do an entire field of math, you have to discover that field all by yourself! That's what it's like with programming when you don't get to see example code, and the professor just gives you a program to write, and you got to figure out how to do it, with never seeing how to do the program... you got to completely all on your own figure out how to do the program... it's really awesome (huge rush) when you do, and regardless of whether you do or not, you also usually learn a lot, but it also really sucks if you spend an entire week up nearly 24/7 trying to get the program done, and you fail to do so, getting an F grade on that project/program... sighs... Some programming professors are like this, and some are more helpful, letting you see some example code, and then some give you the code/program, and you practice and learn/memorize it, and then you're tested on it: you got to create/write/code the program in class as an exam/test.</p>\n<hr>\n<p>that said, code is IP (intellectual property), so stealing/vandalizing/etc it outside of educational legally-protected uses and/or getting the owner's recorded permission, is a crime of course. But, if no one ever saw any code, there'd be very few people who can program/code in the world.</p>\n<p>Imagine if calculus, trigonometry, geometry, algebra, etc was copyrighted/patented/trademarked... BAD BAD BAD BAD BAD, lol</p>\n\n",
      "PostDate": "2017-08-05T10:54:09.697739Z",
      "LastEditDate": "2017-08-05T11:09:36.5218869Z",
      "link": null
    },
    {
      "PostId": "32b00d15-80ce-403e-8d04-307a51f9b5d0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "containment/parent-child heirarchies:\r\n\r\n\r\nC:/ // drive\r\n-> Programs // folder\r\n->-> Quest 5 // folder\r\n->->-> (various more folders and/or quest library files)\r\n\r\ngrandfather\r\n-> father\r\n->-> son\r\n->->> grandson\r\n\r\nHK\r\n-> pants\r\n->-> wallet\r\n->->-> $1\r\n->->-> $5\r\n-> shirt\r\n->-> pen\r\nJOE\r\n-> jeans\r\n->-> pennies\r\n-> t-shirt\r\n\r\nmultiverse (ours)\r\n-> universe (ours)\r\n->-> galaxy cluster (ours)\r\n->->-> galaxy (ours, which we call the \"milky way\", a spiral galaxy, we're on one of its two \"tendrils/arms\", maybe 3/5 to the tip of it --- but not certain of our exact location/distance on the tendril/arm to the tip of it)\r\n->->->-> star (ours, which we call \"the sun\", most stars are binary: two stars next to each other, we've obiously got a single/unary star)\r\n->->->->-> planet (ours, which we call \"earth\")\r\n\r\n```\r\n<asl version=\"570\">\r\n  <object name=\"A1\">\r\n    <attr name=\"BB1\" type=\"string\">BB1</attr>\r\n    <object name=\"B1\">\r\n      <attr name=\"CC1\" type=\"string\">CC1</attr>\r\n      <object name=\"C1\">\r\n        <attr name=\"DD1\" type=\"string\">DD1</attr>\r\n      </object>\r\n    </object>\r\n    <object name=\"B2\">\r\n    </object>\r\n  </object>\r\n  <object name=\"A2\">\r\n    <attr name=\"BB2\" type=\"string\">BB2</attr>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n-------------------------\r\n\r\ngrandfather\r\n-> father\r\n->-> son\r\n->->-> grandson\r\n\r\n'grandfather' is the main (\"root\") parent of 'father', 'son', and 'grandson'\r\n'grandfather' is the direct parent of 'father'\r\n'grandfather' is the indirect parent of 'son' and 'grandson'\r\n\r\n'father' is the direct child of 'grandfather'\r\n'father' is the direct parent of 'son'\r\n'father' is the indirect parent of 'grandson'\r\n\r\n'son' is the indirect child of 'grandfather'\r\n'son' is the direct child of 'father'\r\n'son' is the direct parent of 'grandson'\r\n\r\n'grandson' is the indirect child of 'grandfather' and 'father'\r\n'grandson' is the direct child of 'son'\r\n\r\nas scripting code:\r\n\r\ngrandfather.parent = null // 'null' (at least in this specific usage of it: as the value for a 'parent' Object reference/pointer Attribute) means that the 'asl' GAME OBJECT is it's direct parent: it's NOT contained within anything else, it's ONLY contained within the 'asl' GAME OBJECT\r\nfather.parent = grandfather\r\nson.parent = father\r\ngrandson.parent = son\r\n\r\nas tag code:\r\n\r\n```\r\n// nested:\r\n\r\n// (when nested, quest defaults to hide (not show) its 'parent' Object (reference/pointer) Attribute\r\n// (quest also defaults to hide (not show) its 'parent' Object Attribute (reference/pointer) Attribute when its 'null' (when ONLY the 'asl' GAME OBJECT is it's parent)\r\n\r\n<asl version=\"570\">\r\n  <object name=\"grandfather\">\r\n    <object name=\"father\">\r\n      <object name=\"son\">\r\n        <object name=\"grandson\">\r\n        </object>\r\n      </object>\r\n    </object>\r\n  </object>\r\n</asl>\r\n\r\n// not using nesting:\r\n\r\n<asl version=\"570\">\r\n\r\n  <object name=\"grandfather\">\r\n    // again, quest defaults to hide its 'parent' Object (reference/pointer) Attribute, when it's 'null' (when the 'asl' GAME OBJECT is it's only parent)\r\n  </object>\r\n\r\n  <object name=\"father\">\r\n    <attr name=\"parent\" type=\"object\">grandfather</attr>\r\n  </object>\r\n\r\n  <object name=\"son\">\r\n    <attr name=\"parent\" type=\"object\">father</attr>\r\n  </object>\r\n\r\n  <object name=\"grandson\">\r\n    <attr name=\"parent\" type=\"object\">son</attr>\r\n  </object>\r\n\r\n</asl>\r\n```\r\n\r\n--------\r\n\r\nand what if we manipulate/change/alter the values of the 'parent' Object (reference/pointer) Attribute ??? (see below)\r\n\r\ngrandson.parent = null\r\nson.parent = grandson\r\nfather.parent = son\r\ngrandfather.parent = father\r\n\r\ngrandson\r\n-> son\r\n->-> father\r\n->->-> grandfather\r\n\r\n-------\r\n\r\ngrandson.parent = son\r\nson.parent = null\r\nfather.parent = son\r\ngrandfather.parent = son\r\n\r\nson\r\n-> grandfather\r\n-> father\r\n-> grandson",
      "EditableFormat": "markdown",
      "HTML": "<p>containment/parent-child heirarchies:</p>\n<p>C:/ // drive<br>\n-&gt; Programs // folder<br>\n-&gt;-&gt; Quest 5 // folder<br>\n-&gt;-&gt;-&gt; (various more folders and/or quest library files)</p>\n<p>grandfather<br>\n-&gt; father<br>\n-&gt;-&gt; son<br>\n-&gt;-&gt;&gt; grandson</p>\n<p>HK<br>\n-&gt; pants<br>\n-&gt;-&gt; wallet<br>\n-&gt;-&gt;-&gt; $1<br>\n-&gt;-&gt;-&gt; $5<br>\n-&gt; shirt<br>\n-&gt;-&gt; pen<br>\nJOE<br>\n-&gt; jeans<br>\n-&gt;-&gt; pennies<br>\n-&gt; t-shirt</p>\n<p>multiverse (ours)<br>\n-&gt; universe (ours)<br>\n-&gt;-&gt; galaxy cluster (ours)<br>\n-&gt;-&gt;-&gt; galaxy (ours, which we call the \"milky way\", a spiral galaxy, we're on one of its two \"tendrils/arms\", maybe 3/5 to the tip of it --- but not certain of our exact location/distance on the tendril/arm to the tip of it)<br>\n-&gt;-&gt;-&gt;-&gt; star (ours, which we call \"the sun\", most stars are binary: two stars next to each other, we've obiously got a single/unary star)<br>\n-&gt;-&gt;-&gt;-&gt;-&gt; planet (ours, which we call \"earth\")</p>\n<pre><code>&lt;asl version=\"570\"&gt;\n  &lt;object name=\"A1\"&gt;\n    &lt;attr name=\"BB1\" type=\"string\"&gt;BB1&lt;/attr&gt;\n    &lt;object name=\"B1\"&gt;\n      &lt;attr name=\"CC1\" type=\"string\"&gt;CC1&lt;/attr&gt;\n      &lt;object name=\"C1\"&gt;\n        &lt;attr name=\"DD1\" type=\"string\"&gt;DD1&lt;/attr&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n    &lt;object name=\"B2\"&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"A2\"&gt;\n    &lt;attr name=\"BB2\" type=\"string\"&gt;BB2&lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>grandfather<br>\n-&gt; father<br>\n-&gt;-&gt; son<br>\n-&gt;-&gt;-&gt; grandson</p>\n<p>'grandfather' is the main (\"root\") parent of 'father', 'son', and 'grandson'<br>\n'grandfather' is the direct parent of 'father'<br>\n'grandfather' is the indirect parent of 'son' and 'grandson'</p>\n<p>'father' is the direct child of 'grandfather'<br>\n'father' is the direct parent of 'son'<br>\n'father' is the indirect parent of 'grandson'</p>\n<p>'son' is the indirect child of 'grandfather'<br>\n'son' is the direct child of 'father'<br>\n'son' is the direct parent of 'grandson'</p>\n<p>'grandson' is the indirect child of 'grandfather' and 'father'<br>\n'grandson' is the direct child of 'son'</p>\n<p>as scripting code:</p>\n<p>grandfather.parent = null // 'null' (at least in this specific usage of it: as the value for a 'parent' Object reference/pointer Attribute) means that the 'asl' GAME OBJECT is it's direct parent: it's NOT contained within anything else, it's ONLY contained within the 'asl' GAME OBJECT<br>\nfather.parent = grandfather<br>\nson.parent = father<br>\ngrandson.parent = son</p>\n<p>as tag code:</p>\n<pre><code>// nested:\n\n// (when nested, quest defaults to hide (not show) its 'parent' Object (reference/pointer) Attribute\n// (quest also defaults to hide (not show) its 'parent' Object Attribute (reference/pointer) Attribute when its 'null' (when ONLY the 'asl' GAME OBJECT is it's parent)\n\n&lt;asl version=\"570\"&gt;\n  &lt;object name=\"grandfather\"&gt;\n    &lt;object name=\"father\"&gt;\n      &lt;object name=\"son\"&gt;\n        &lt;object name=\"grandson\"&gt;\n        &lt;/object&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n\n// not using nesting:\n\n&lt;asl version=\"570\"&gt;\n\n  &lt;object name=\"grandfather\"&gt;\n    // again, quest defaults to hide its 'parent' Object (reference/pointer) Attribute, when it's 'null' (when the 'asl' GAME OBJECT is it's only parent)\n  &lt;/object&gt;\n\n  &lt;object name=\"father\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;grandfather&lt;/attr&gt;\n  &lt;/object&gt;\n\n  &lt;object name=\"son\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;father&lt;/attr&gt;\n  &lt;/object&gt;\n\n  &lt;object name=\"grandson\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;son&lt;/attr&gt;\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>and what if we manipulate/change/alter the values of the 'parent' Object (reference/pointer) Attribute ??? (see below)</p>\n<p>grandson.parent = null<br>\nson.parent = grandson<br>\nfather.parent = son<br>\ngrandfather.parent = father</p>\n<p>grandson<br>\n-&gt; son<br>\n-&gt;-&gt; father<br>\n-&gt;-&gt;-&gt; grandfather</p>\n<hr>\n<p>grandson.parent = son<br>\nson.parent = null<br>\nfather.parent = son<br>\ngrandfather.parent = son</p>\n<p>son<br>\n-&gt; grandfather<br>\n-&gt; father<br>\n-&gt; grandson</p>\n\n",
      "PostDate": "2017-08-05T12:11:55.6761955Z",
      "LastEditDate": "2017-08-05T12:38:21.2468873Z",
      "link": null
    },
    {
      "PostId": "e1ab01a6-bdc3-4340-835e-dcaf395b5a55",
      "UserId": 316011,
      "Username": "NinjaNin",
      "AvatarUrl": "http://i.imgur.com/L53RidGb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you so much for the helpful code! I'm actually signed up for a class on coding in C++, so this is actually very helpful (hopefully) for it. \r\n\r\nI'll send Pixie and Richard a PM whenever I can and hopefully they can help me as well. You've been an amazing help and your code is very long and almost a bit intimidating. Do I need to remove the // from the code or can they just stay in there? \r\n\r\nDoes it really matter what version of Quest I have for most people? Or is it usually just little updates that Pixie does? Is it easy to update if I need to? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you so much for the helpful code! I'm actually signed up for a class on coding in C++, so this is actually very helpful (hopefully) for it.</p>\n<p>I'll send Pixie and Richard a PM whenever I can and hopefully they can help me as well. You've been an amazing help and your code is very long and almost a bit intimidating. Do I need to remove the // from the code or can they just stay in there?</p>\n<p>Does it really matter what version of Quest I have for most people? Or is it usually just little updates that Pixie does? Is it easy to update if I need to?</p>\n\n",
      "PostDate": "2017-08-09T02:45:00.2795997Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4fdb8894-c7d4-4eb5-9c22-607eca05338e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you need any help in C++, let me know, I'd be glad to help you with it.\r\n\r\n-------\r\n\r\nyou can leave the comment lines/blocks in or remove them, it doesn't make any difference. The comment lines/blocks are for humans (you and/or others) looking at your code.\r\n\r\n------\r\n\r\nI think... (Pixie can correct me) that actually there was no change to the engine from v550 to v570: meaning that v550 will work with v570, but that hasn't always been the case. It just depends whether a new version alters the engine, or if it's just some additional content/features/coding being added.\r\n\r\nyou can see quest's version history here: http://docs.textadventures.co.uk/quest/upgrade_notes.html\r\n\r\nand also Pixie's github page has the version history for his quest development (taking over as the new quest team member, as Alex needed to move on with his life: he's been developing quest for 20 years! https://blog.textadventures.co.uk/ --- read quite a good bit of the entries down until you get to the 'squiffy 5' section)\r\n\r\n-----\r\n\r\nI'm having a hard time with figuring out all of the built-in stuff... for me, it's very confusing...\r\n\r\nif you wanto take a look at it:\r\n\r\nObjects:\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/object.html (see the 'top:attributes' section and the bottom 'core Object Types' section)\r\n\r\nExits:\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/exit.html\r\n\r\n------------\r\n\r\nI was suppose to give you workable code back this last saturday (or whatever the day I said), so I totally failed at that. All I can do is say I'm sorry if that means anything, as I've got no excuses: I said I would and I didn't.\r\n\r\nI can probably provide my own custom code stuff (ignoring how all the built-in stuff works and by not using Exits) to give you a workable game/code, but I think it'd be better for you to just get some help with how to do this stuff with the built-in stuff and using Exits instead, and thus that means get some help from someone else, as I'm still confused over all of the built-in stuff (I have just now been trying to get it figured out for 2 hrs but am still just as confused, if not more so, lol).\r\n\r\nSo, maybe try to see if you can get Pixie's or who-evers help (XanMag can probably help too with the built-in stuff), as, especially Pixie, can help really well and explain how all of it is working really well.",
      "EditableFormat": "markdown",
      "HTML": "<p>if you need any help in C++, let me know, I'd be glad to help you with it.</p>\n<hr>\n<p>you can leave the comment lines/blocks in or remove them, it doesn't make any difference. The comment lines/blocks are for humans (you and/or others) looking at your code.</p>\n<hr>\n<p>I think... (Pixie can correct me) that actually there was no change to the engine from v550 to v570: meaning that v550 will work with v570, but that hasn't always been the case. It just depends whether a new version alters the engine, or if it's just some additional content/features/coding being added.</p>\n<p>you can see quest's version history here: http://docs.textadventures.co.uk/quest/upgrade_notes.html</p>\n<p>and also Pixie's github page has the version history for his quest development (taking over as the new quest team member, as Alex needed to move on with his life: he's been developing quest for 20 years! https://blog.textadventures.co.uk/ --- read quite a good bit of the entries down until you get to the 'squiffy 5' section)</p>\n<hr>\n<p>I'm having a hard time with figuring out all of the built-in stuff... for me, it's very confusing...</p>\n<p>if you wanto take a look at it:</p>\n<p>Objects:</p>\n<p>http://docs.textadventures.co.uk/quest/elements/object.html (see the 'top:attributes' section and the bottom 'core Object Types' section)</p>\n<p>Exits:</p>\n<p>http://docs.textadventures.co.uk/quest/elements/exit.html</p>\n<hr>\n<p>I was suppose to give you workable code back this last saturday (or whatever the day I said), so I totally failed at that. All I can do is say I'm sorry if that means anything, as I've got no excuses: I said I would and I didn't.</p>\n<p>I can probably provide my own custom code stuff (ignoring how all the built-in stuff works and by not using Exits) to give you a workable game/code, but I think it'd be better for you to just get some help with how to do this stuff with the built-in stuff and using Exits instead, and thus that means get some help from someone else, as I'm still confused over all of the built-in stuff (I have just now been trying to get it figured out for 2 hrs but am still just as confused, if not more so, lol).</p>\n<p>So, maybe try to see if you can get Pixie's or who-evers help (XanMag can probably help too with the built-in stuff), as, especially Pixie, can help really well and explain how all of it is working really well.</p>\n\n",
      "PostDate": "2017-08-09T09:23:38.5656534Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d8097651-302c-495c-a565-8d6000288f61",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**I tried using your code, and it works !!!! (just had a single small stupid typo: an extra '}' character/symbol)**\r\n--\r\n\r\n(you got it figured out, while I was totally baffled at using the built-in stuff, laughs). You already figured out the working code! just had one single stupid typo (an extra '}' character/symbol) !!! (90% of the time, it's some stupid small typo or whatever mistake!). You did my job for me, you already got the code right, hehe.\r\n\r\nyou have one typo to remove: an extra '}' character/symbol (shown by comments in the code below) and you can remove my 'myopen' Verb's 'script' and 'verb' tag lines/blocks:\r\n\r\nalso, I added in the Attributes for the other door to the other room, and I also added in a missing code line (from my own code, and thus you don't have it in your code: my fault!) to open both doors and close both doors.\r\n\r\nAlso, added in the 'closescript' Script Attributes too and their Attributes and handling\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"From the Forum\">\r\n\r\n    <gameid>2a541114-7ed5-4161-a061-707e8670825e</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room1A\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <alias>room</alias>\r\n\r\n    <object name=\"player\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n\r\n    </object>\r\n\r\n    <exit name=\"room1Alock\" alias=\"east\" to=\"room1B\">\r\n\r\n      <inherit name=\"eastdirection\" />\r\n\r\n      <locked />\r\n\r\n    </exit>\r\n\r\n    <object name=\"door1A\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n\r\n      <inherit name=\"openable\" />\r\n\r\n      <alias>door</alias>\r\n      <feature_container />\r\n\r\n      // --------------------------------------------------------------\r\n\r\n      // remove this entire tag block:\r\n\r\n      <myopen type=\"script\">\r\n        if (door1A.isopen) {\r\n          msg (\"The door is already open (and the exit is already unlocked) silly!\")\r\n        }\r\n        else {\r\n        }\r\n      </myopen>\r\n\r\n      // --------------------------------------------------------------------------\r\n\r\n      <openscript type=\"script\">\r\n        if (door1A.isopen) {\r\n          msg (\"The door is already open and unlocked silly. \")\r\n        }\r\n        else {\r\n          if (Got (key_1)) {\r\n            UnlockExit (room1Alock)\r\n            UnlockExit (room1Block)\r\n            HelperOpenObject (door1A)\r\n            HelperOpenObject (door1B) // <---------------------------- I forgot to include this line in my code, so I added it into your code\r\n            msg (\"You unlock and open the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to open up the locked door.\")\r\n          }\r\n        }\r\n      } // <----------------------------------------------- delete this extra ending/right curly brace/bracket\r\n      </openscript>\r\n\r\n     // -------------------------------------------------------------------\r\n\r\n    // adding in the 'closescript' Script Attribute:\r\n\r\n   <closescript type=\"script\">\r\n        if (door1A.isopen) {\r\n          if (Got (key_1)) {\r\n            LockExit (room1Alock)\r\n            LockExit (room1Block)\r\n            HelperCloseObject (door1A)\r\n            HelperCloseObject (door1B)\r\n            msg (\"You close and lock the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to close and lock the door.\")\r\n          }\r\n        }\r\n        else {\r\n          msg (\"The door is already locked and closed, silly.\")\r\n        }\r\n      </closescript>\r\n\r\n     // ------------------------------------------------------------\r\n\r\n    </object>\r\n\r\n    <object name=\"key_1\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n\r\n      <take />\r\n      <takemsg>You pick up the key</takemsg>\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n  <object name=\"room1B\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <exit name=\"room1Block\" alias=\"west\" to=\"room1A\">\r\n\r\n      <inherit name=\"westdirection\" />\r\n\r\n      <locked />\r\n\r\n    </exit>\r\n\r\n    <object name=\"door1B\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n\r\n      <inherit name=\"openable\" />\r\n\r\n      <alias>door</alias>\r\n\r\n      <feature_container />\r\n\r\n      // -------------------------------------------------------------\r\n\r\n      // add in these Attrbiutes for this door for this room:\r\n\r\n      <openscript type=\"script\">\r\n        if (door1B.isopen) {\r\n          msg (\"The door is already open and unlocked silly. \")\r\n        }\r\n        else {\r\n          if (Got (key_1)) {\r\n            UnlockExit (room1Alock)\r\n            UnlockExit (room1Block)\r\n            HelperOpenObject (door1A)\r\n            HelperOpenObject (door1B)\r\n            msg (\"You unlock and open the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to open up the locked door.\")\r\n          }\r\n        }\r\n      </openscript>\r\n\r\n     // --------------------------------------------------------------\r\n\r\n    // adding in the 'closescript' Script Attribute:\r\n\r\n   <closescript type=\"script\">\r\n        if (door1B.isopen) {\r\n          if (Got (key_1)) {\r\n            LockExit (room1Alock)\r\n            LockExit (room1Block)\r\n            HelperCloseObject (door1A)\r\n            HelperCloseObject (door1B)\r\n            msg (\"You close and lock the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to close and lock the door.\")\r\n          }\r\n        }\r\n        else {\r\n          msg (\"The door is already locked and closed, silly.\")\r\n        }\r\n      </closescript>\r\n\r\n     // ------------------------------------------------------------\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n  // ----------------------------------------------------------------------\r\n\r\n  // remove this entire tag block:\r\n\r\n  <verb name=\"myopen\">\r\n    <pattern>myopen</pattern>\r\n    <property>myopen</property>\r\n    <defaulttext>You open the door</defaulttext>\r\n  </verb>\r\n\r\n  // -------------------------------------------------------------------------------------\r\n\r\n</asl>\r\n```\r\n\r\n-------------------------------------------------\r\n\r\nhere's the fixed up code (doing everything in the above, without all the comments/clutter/etc):\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"From the Forum\">\r\n\r\n    <gameid>2a541114-7ed5-4161-a061-707e8670825e</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room1A\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <alias>room</alias>\r\n\r\n    <object name=\"player\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n\r\n    </object>\r\n\r\n    <exit name=\"room1Alock\" alias=\"east\" to=\"room1B\">\r\n\r\n      <inherit name=\"eastdirection\" />\r\n\r\n      <locked />\r\n\r\n    </exit>\r\n\r\n    <object name=\"door1A\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n\r\n      <inherit name=\"openable\" />\r\n\r\n      <alias>door</alias>\r\n\r\n      <feature_container />\r\n\r\n      <openscript type=\"script\">\r\n        if (door1A.isopen) {\r\n          msg (\"The door is already open and unlocked, silly. \")\r\n        }\r\n        else {\r\n          if (Got (key_1)) {\r\n            UnlockExit (room1Alock)\r\n            UnlockExit (room1Block)\r\n            HelperOpenObject (door1A)\r\n            HelperOpenObject (door1B)\r\n            msg (\"You unlock and open the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to open up the locked door.\")\r\n          }\r\n        }\r\n      </openscript>\r\n\r\n      <closescript type=\"script\">\r\n        if (door1A.isopen) {\r\n          if (Got (key_1)) {\r\n            LockExit (room1Alock)\r\n            LockExit (room1Block)\r\n            HelperCloseObject (door1A)\r\n            HelperCloseObject (door1B)\r\n            msg (\"You close and lock the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to close and lock the door.\")\r\n          }\r\n        }\r\n        else {\r\n          msg (\"The door is already locked and closed, silly.\")\r\n        }\r\n      </closescript>\r\n\r\n    </object>\r\n\r\n    <object name=\"key_1\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n\r\n      <take />\r\n      <takemsg>You pick up the key</takemsg>\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n  <object name=\"room1B\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <exit name=\"room1Block\" alias=\"west\" to=\"room1A\">\r\n\r\n      <inherit name=\"westdirection\" />\r\n\r\n      <locked />\r\n\r\n    </exit>\r\n\r\n    <object name=\"door1B\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n\r\n      <inherit name=\"openable\" />\r\n\r\n      <alias>door</alias>\r\n\r\n      <feature_container />\r\n\r\n      <openscript type=\"script\">\r\n        if (door1B.isopen) {\r\n          msg (\"The door is already open and unlocked silly. \")\r\n        }\r\n        else {\r\n          if (Got (key_1)) {\r\n            UnlockExit (room1Alock)\r\n            UnlockExit (room1Block)\r\n            HelperOpenObject (door1A)\r\n            HelperOpenObject (door1B)\r\n            msg (\"You unlock and open the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to open up the locked door.\")\r\n          }\r\n        }\r\n      </openscript>\r\n\r\n      <closescript type=\"script\">\r\n        if (door1B.isopen) {\r\n          if (Got (key_1)) {\r\n            LockExit (room1Alock)\r\n            LockExit (room1Block)\r\n            HelperCloseObject (door1A)\r\n            HelperCloseObject (door1B)\r\n            msg (\"You close and lock the door. \")\r\n          }\r\n          else {\r\n            msg (\"sorry but you need the right key to close and lock the door.\")\r\n          }\r\n        }\r\n        else {\r\n          msg (\"The door is already locked and closed, silly.\")\r\n        }\r\n      </closescript>\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<h2><strong>I tried using your code, and it works !!!! (just had a single small stupid typo: an extra '}' character/symbol)</strong></h2>\n<p>(you got it figured out, while I was totally baffled at using the built-in stuff, laughs). You already figured out the working code! just had one single stupid typo (an extra '}' character/symbol) !!! (90% of the time, it's some stupid small typo or whatever mistake!). You did my job for me, you already got the code right, hehe.</p>\n<p>you have one typo to remove: an extra '}' character/symbol (shown by comments in the code below) and you can remove my 'myopen' Verb's 'script' and 'verb' tag lines/blocks:</p>\n<p>also, I added in the Attributes for the other door to the other room, and I also added in a missing code line (from my own code, and thus you don't have it in your code: my fault!) to open both doors and close both doors.</p>\n<p>Also, added in the 'closescript' Script Attributes too and their Attributes and handling</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"From the Forum\"&gt;\n\n    &lt;gameid&gt;2a541114-7ed5-4161-a061-707e8670825e&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room1A\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;alias&gt;room&lt;/alias&gt;\n\n    &lt;object name=\"player\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;/object&gt;\n\n    &lt;exit name=\"room1Alock\" alias=\"east\" to=\"room1B\"&gt;\n\n      &lt;inherit name=\"eastdirection\" /&gt;\n\n      &lt;locked /&gt;\n\n    &lt;/exit&gt;\n\n    &lt;object name=\"door1A\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n\n      &lt;inherit name=\"openable\" /&gt;\n\n      &lt;alias&gt;door&lt;/alias&gt;\n      &lt;feature_container /&gt;\n\n      // --------------------------------------------------------------\n\n      // remove this entire tag block:\n\n      &lt;myopen type=\"script\"&gt;\n        if (door1A.isopen) {\n          msg (\"The door is already open (and the exit is already unlocked) silly!\")\n        }\n        else {\n        }\n      &lt;/myopen&gt;\n\n      // --------------------------------------------------------------------------\n\n      &lt;openscript type=\"script\"&gt;\n        if (door1A.isopen) {\n          msg (\"The door is already open and unlocked silly. \")\n        }\n        else {\n          if (Got (key_1)) {\n            UnlockExit (room1Alock)\n            UnlockExit (room1Block)\n            HelperOpenObject (door1A)\n            HelperOpenObject (door1B) // &lt;---------------------------- I forgot to include this line in my code, so I added it into your code\n            msg (\"You unlock and open the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to open up the locked door.\")\n          }\n        }\n      } // &lt;----------------------------------------------- delete this extra ending/right curly brace/bracket\n      &lt;/openscript&gt;\n\n     // -------------------------------------------------------------------\n\n    // adding in the 'closescript' Script Attribute:\n\n   &lt;closescript type=\"script\"&gt;\n        if (door1A.isopen) {\n          if (Got (key_1)) {\n            LockExit (room1Alock)\n            LockExit (room1Block)\n            HelperCloseObject (door1A)\n            HelperCloseObject (door1B)\n            msg (\"You close and lock the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to close and lock the door.\")\n          }\n        }\n        else {\n          msg (\"The door is already locked and closed, silly.\")\n        }\n      &lt;/closescript&gt;\n\n     // ------------------------------------------------------------\n\n    &lt;/object&gt;\n\n    &lt;object name=\"key_1\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n\n      &lt;take /&gt;\n      &lt;takemsg&gt;You pick up the key&lt;/takemsg&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"room1B\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;exit name=\"room1Block\" alias=\"west\" to=\"room1A\"&gt;\n\n      &lt;inherit name=\"westdirection\" /&gt;\n\n      &lt;locked /&gt;\n\n    &lt;/exit&gt;\n\n    &lt;object name=\"door1B\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n\n      &lt;inherit name=\"openable\" /&gt;\n\n      &lt;alias&gt;door&lt;/alias&gt;\n\n      &lt;feature_container /&gt;\n\n      // -------------------------------------------------------------\n\n      // add in these Attrbiutes for this door for this room:\n\n      &lt;openscript type=\"script\"&gt;\n        if (door1B.isopen) {\n          msg (\"The door is already open and unlocked silly. \")\n        }\n        else {\n          if (Got (key_1)) {\n            UnlockExit (room1Alock)\n            UnlockExit (room1Block)\n            HelperOpenObject (door1A)\n            HelperOpenObject (door1B)\n            msg (\"You unlock and open the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to open up the locked door.\")\n          }\n        }\n      &lt;/openscript&gt;\n\n     // --------------------------------------------------------------\n\n    // adding in the 'closescript' Script Attribute:\n\n   &lt;closescript type=\"script\"&gt;\n        if (door1B.isopen) {\n          if (Got (key_1)) {\n            LockExit (room1Alock)\n            LockExit (room1Block)\n            HelperCloseObject (door1A)\n            HelperCloseObject (door1B)\n            msg (\"You close and lock the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to close and lock the door.\")\n          }\n        }\n        else {\n          msg (\"The door is already locked and closed, silly.\")\n        }\n      &lt;/closescript&gt;\n\n     // ------------------------------------------------------------\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n  // ----------------------------------------------------------------------\n\n  // remove this entire tag block:\n\n  &lt;verb name=\"myopen\"&gt;\n    &lt;pattern&gt;myopen&lt;/pattern&gt;\n    &lt;property&gt;myopen&lt;/property&gt;\n    &lt;defaulttext&gt;You open the door&lt;/defaulttext&gt;\n  &lt;/verb&gt;\n\n  // -------------------------------------------------------------------------------------\n\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>here's the fixed up code (doing everything in the above, without all the comments/clutter/etc):</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"From the Forum\"&gt;\n\n    &lt;gameid&gt;2a541114-7ed5-4161-a061-707e8670825e&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room1A\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;alias&gt;room&lt;/alias&gt;\n\n    &lt;object name=\"player\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;/object&gt;\n\n    &lt;exit name=\"room1Alock\" alias=\"east\" to=\"room1B\"&gt;\n\n      &lt;inherit name=\"eastdirection\" /&gt;\n\n      &lt;locked /&gt;\n\n    &lt;/exit&gt;\n\n    &lt;object name=\"door1A\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n\n      &lt;inherit name=\"openable\" /&gt;\n\n      &lt;alias&gt;door&lt;/alias&gt;\n\n      &lt;feature_container /&gt;\n\n      &lt;openscript type=\"script\"&gt;\n        if (door1A.isopen) {\n          msg (\"The door is already open and unlocked, silly. \")\n        }\n        else {\n          if (Got (key_1)) {\n            UnlockExit (room1Alock)\n            UnlockExit (room1Block)\n            HelperOpenObject (door1A)\n            HelperOpenObject (door1B)\n            msg (\"You unlock and open the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to open up the locked door.\")\n          }\n        }\n      &lt;/openscript&gt;\n\n      &lt;closescript type=\"script\"&gt;\n        if (door1A.isopen) {\n          if (Got (key_1)) {\n            LockExit (room1Alock)\n            LockExit (room1Block)\n            HelperCloseObject (door1A)\n            HelperCloseObject (door1B)\n            msg (\"You close and lock the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to close and lock the door.\")\n          }\n        }\n        else {\n          msg (\"The door is already locked and closed, silly.\")\n        }\n      &lt;/closescript&gt;\n\n    &lt;/object&gt;\n\n    &lt;object name=\"key_1\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n\n      &lt;take /&gt;\n      &lt;takemsg&gt;You pick up the key&lt;/takemsg&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"room1B\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;exit name=\"room1Block\" alias=\"west\" to=\"room1A\"&gt;\n\n      &lt;inherit name=\"westdirection\" /&gt;\n\n      &lt;locked /&gt;\n\n    &lt;/exit&gt;\n\n    &lt;object name=\"door1B\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n\n      &lt;inherit name=\"openable\" /&gt;\n\n      &lt;alias&gt;door&lt;/alias&gt;\n\n      &lt;feature_container /&gt;\n\n      &lt;openscript type=\"script\"&gt;\n        if (door1B.isopen) {\n          msg (\"The door is already open and unlocked silly. \")\n        }\n        else {\n          if (Got (key_1)) {\n            UnlockExit (room1Alock)\n            UnlockExit (room1Block)\n            HelperOpenObject (door1A)\n            HelperOpenObject (door1B)\n            msg (\"You unlock and open the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to open up the locked door.\")\n          }\n        }\n      &lt;/openscript&gt;\n\n      &lt;closescript type=\"script\"&gt;\n        if (door1B.isopen) {\n          if (Got (key_1)) {\n            LockExit (room1Alock)\n            LockExit (room1Block)\n            HelperCloseObject (door1A)\n            HelperCloseObject (door1B)\n            msg (\"You close and lock the door. \")\n          }\n          else {\n            msg (\"sorry but you need the right key to close and lock the door.\")\n          }\n        }\n        else {\n          msg (\"The door is already locked and closed, silly.\")\n        }\n      &lt;/closescript&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2017-08-09T11:16:16.0617573Z",
      "LastEditDate": "2017-08-09T11:18:59.6908503Z",
      "link": null
    },
    {
      "PostId": "9004c190-ebab-4767-a89e-47941830a9bc",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi HK, just put your code above into quest to check it out. Try as I can, I cannot get the message 'The door is unlocked and open Silly!' message to appear. It only prints the default message 'It is already open'.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi HK, just put your code above into quest to check it out. Try as I can, I cannot get the message 'The door is unlocked and open Silly!' message to appear. It only prints the default message 'It is already open'.</p>\n\n",
      "PostDate": "2017-08-09T12:19:55.3998401Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6671e1bd-bef3-453b-ac94-b0edd12652f9",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, I've had another look at the 'open #object#' script, and I think I know why a custom message is not being printed when you open the door. \r\n\r\nVerb: open/close #object#\r\n[call function:TryOpenClose]\r\n//If object can be opened/can be closed ---> continue else print message 'object cannot be opened closed'\r\n//If object is not open/closed ---> continue else print message 'object is already open/closed'\r\n[call function:OpenObject]\r\n[call function:CloseObject]\r\n//Basically these two do the same thing. They print the successful message. 'It is open/closed' And Show/Hide the contents of the opened/closed object in question\r\nThen [#object# script]// This is the object in question that you are trying to open/close. And it will now perform the scripting following a successful open/close.eg. unlocking exits, printing a message, etc\r\n\r\nAs you can see, if the object is already open/closed, the path will stop at the first function [TryOpenClose]\r\nThere might be a few things I've missed, such as [doopen][doclose][openmsg], but I think this is the general gist of the open/close verb.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, I've had another look at the 'open #object#' script, and I think I know why a custom message is not being printed when you open the door.</p>\n<p>Verb: open/close #object#<br>\n[call function:TryOpenClose]<br>\n//If object can be opened/can be closed ---&gt; continue else print message 'object cannot be opened closed'<br>\n//If object is not open/closed ---&gt; continue else print message 'object is already open/closed'<br>\n[call function:OpenObject]<br>\n[call function:CloseObject]<br>\n//Basically these two do the same thing. They print the successful message. 'It is open/closed' And Show/Hide the contents of the opened/closed object in question<br>\nThen [#object# script]// This is the object in question that you are trying to open/close. And it will now perform the scripting following a successful open/close.eg. unlocking exits, printing a message, etc</p>\n<p>As you can see, if the object is already open/closed, the path will stop at the first function [TryOpenClose]<br>\nThere might be a few things I've missed, such as [doopen][doclose][openmsg], but I think this is the general gist of the open/close verb.</p>\n\n",
      "PostDate": "2017-08-09T19:34:38.6143924Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "822e2d70-99dc-49d4-b8a1-9b26be668c1f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, thanks for pointing that out, I wasn't even paying attention to the messages, ya, my custom messages aren't being used, only the default messages.\r\n\r\n-------\r\n\r\nah cool for finding out how the built-in stuff is working! great job! I have trouble with built-in stuff, laughs.\r\n\r\nI'm pretty sure there's a template for the default messages too and a way to customize it locally (for a specific Object), instead of changing it for global effect, but not sure how this is done, as I don't know how Templates work that well. Maybe you just over-ride/over-write it for an Object to make it local to/for only that Object, instead of it being a global change, but I'm not sure.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, thanks for pointing that out, I wasn't even paying attention to the messages, ya, my custom messages aren't being used, only the default messages.</p>\n<hr>\n<p>ah cool for finding out how the built-in stuff is working! great job! I have trouble with built-in stuff, laughs.</p>\n<p>I'm pretty sure there's a template for the default messages too and a way to customize it locally (for a specific Object), instead of changing it for global effect, but not sure how this is done, as I don't know how Templates work that well. Maybe you just over-ride/over-write it for an Object to make it local to/for only that Object, instead of it being a global change, but I'm not sure.</p>\n\n",
      "PostDate": "2017-08-09T23:50:55.5167696Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b1cff831-dac4-4261-ac0b-330c01e0716a",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There is a template for the default message for 'open object' and closed object. I mentioned it earlier in a previous post. \r\nAlreadyOpen\r\nAlreadyClosed\r\nTo use these dynamic templates in your game, you would first have to copy them. They are then able to be changed with whatever message you desire. BUT, it will affect all openable/closable objects. ",
      "EditableFormat": "markdown",
      "HTML": "<p>There is a template for the default message for 'open object' and closed object. I mentioned it earlier in a previous post.<br>\nAlreadyOpen<br>\nAlreadyClosed<br>\nTo use these dynamic templates in your game, you would first have to copy them. They are then able to be changed with whatever message you desire. BUT, it will affect all openable/closable objects.</p>\n\n",
      "PostDate": "2017-08-10T00:00:26.1269763Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7edf8fa3-c520-474d-843a-43cbce3ce691",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi. Apologies. NinjaNin, there is a way to do your custom open message, without altering the dynamic template. It involves setting up a room specific command for that object. The following code is for 2 doors, across 3 rooms. Rooms A&B use Quests built in open/close/unlock/lock features together with the built in lock-key feature. Rooms B&C use the customised room command 'open'. I've only put the open room command on for now for room B to C, so you can see what it does. If you need me to finish it off, let me know. \r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Test - Open-Close-Unlock-Lock\">\r\n    <gameid>4eff0bb7-9dfc-4d39-ad67-1c48c12e34f2</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n  </game>\r\n  <object name=\"roomB\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit name=\"Exit1AB\" alias=\"north\" to=\"roomA\">\r\n      <inherit name=\"northdirection\" />\r\n      <locked />\r\n    </exit>\r\n    <exit name=\"Exit1AC\" alias=\"east\" to=\"roomC\">\r\n      <inherit name=\"eastdirection\" />\r\n      <locked />\r\n    </exit>\r\n    <object name=\"door1AB\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"openable\" />\r\n      <inherit name=\"container_lockable\" />\r\n      <feature_container />\r\n      <openscript type=\"script\">\r\n        if (this.locked) {\r\n          if (this.autounlock and AllKeysAvailable(this)) {\r\n            do (this, \"unlock\")\r\n            if (not this.isopen) {\r\n              OpenObject (this)\r\n            }\r\n          }\r\n          else {\r\n            msg (DynamicTemplate(\"LockedObject\", this))\r\n          }\r\n        }\r\n        else {\r\n          OpenObject (this)\r\n          UnlockExit (Exit1AB)\r\n          HelperOpenObject (door2AB)\r\n          door2AB.locked = false\r\n          UnlockExit (Exit2AB)\r\n        }\r\n      </openscript>\r\n      <closescript type=\"script\">\r\n        if (this.locked) {\r\n          msg (DynamicTemplate(\"LockedObject\", this))\r\n        }\r\n        else {\r\n          CloseObject (this)\r\n          LockExit (Exit1AB)\r\n          HelperCloseObject (door2AB)\r\n          door2AB.locked = true\r\n          LockExit (Exit2AB)\r\n        }\r\n      </closescript>\r\n      <keycount type=\"int\">1</keycount>\r\n      <key type=\"object\">key1</key>\r\n      <autounlock type=\"boolean\">false</autounlock>\r\n      <autoopen type=\"boolean\">false</autoopen>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Take</value>\r\n        <value>Open</value>\r\n        <value>Close</value>\r\n        <value>Unlock</value>\r\n        <value>Lock</value>\r\n      </displayverbs>\r\n    </object>\r\n    <object name=\"door1AC\">\r\n      <inherit name=\"editor_object\" />\r\n    </object>\r\n    <object name=\"key1\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n    </object>\r\n    <command>\r\n      <pattern>open door1AC</pattern>\r\n      <script>\r\n        if (not Got(key1)) {\r\n          msg (\"You need a key. DOH!!!\")\r\n        }\r\n        else if (Got(key1)) {\r\n          if (door1AC.isopen) {\r\n            msg (\"The door is already open. What is wrong with you today! You just opened it!!!\")\r\n          }\r\n          else {\r\n            msg (\"You unlock and open door1AC\")\r\n            HelperOpenObject (door1AC)\r\n            HelperOpenObject (door2AC)\r\n            UnlockExit (Exit1AC)\r\n            UnlockExit (Exit2AC)\r\n          }\r\n        }\r\n      </script>\r\n    </command>\r\n  </object>\r\n  <object name=\"roomC\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit name=\"Exit2AC\" alias=\"west\" to=\"roomB\">\r\n      <inherit name=\"westdirection\" />\r\n      <locked />\r\n    </exit>\r\n    <object name=\"door2AC\">\r\n      <inherit name=\"editor_object\" />\r\n    </object>\r\n  </object>\r\n  <object name=\"roomA\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit name=\"Exit2AB\" alias=\"south\" to=\"roomB\">\r\n      <inherit name=\"southdirection\" />\r\n      <locked />\r\n    </exit>\r\n    <object name=\"door2AB\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"openable\" />\r\n      <inherit name=\"container_lockable\" />\r\n      <feature_container />\r\n      <openscript type=\"script\"><![CDATA[\r\n        if (this.locked) {\r\n          if (this.autounlock and AllKeysAvailable(this)) {\r\n            do (this, \"unlock\")\r\n            if (not this.isopen) {\r\n              OpenObject (this)\r\n            }\r\n          }\r\n          else {\r\n            msg (DynamicTemplate(\"LockedObject\", this))\r\n          }\r\n        }\r\n        else {\r\n          OpenObject (this)\r\n          UnlockExit (Exit2AB)\r\n          HelperOpenObject (door1AB)\r\n          door1AB.locked = false\r\n          UnlockExit (Exit1AB)\r\n          // The above 4 lines open the door connecting rooms A&B. doors 1AB & 2AB, are essentially the same door but in two rooms.\r\n        }\r\n      ]]></openscript>\r\n      <closescript type=\"script\">\r\n        if (this.locked) {\r\n          msg (DynamicTemplate(\"LockedObject\", this))\r\n        }\r\n        else {\r\n          CloseObject (this)\r\n          LockExit (Exit2AB)\r\n          HelperCloseObject (door1AB)\r\n          door1AB.locked = true\r\n          LockExit (Exit1AB)\r\n        }\r\n      </closescript>\r\n      <keycount type=\"int\">1</keycount>\r\n      <key type=\"object\">key1</key>\r\n      <autounlock type=\"boolean\">false</autounlock>\r\n      <autoopen type=\"boolean\">false</autoopen>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Take</value>\r\n        <value>Open</value>\r\n        <value>Close</value>\r\n        <value>Unlock</value>\r\n        <value>Lock</value>\r\n      </displayverbs>\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi. Apologies. NinjaNin, there is a way to do your custom open message, without altering the dynamic template. It involves setting up a room specific command for that object. The following code is for 2 doors, across 3 rooms. Rooms A&amp;B use Quests built in open/close/unlock/lock features together with the built in lock-key feature. Rooms B&amp;C use the customised room command 'open'. I've only put the open room command on for now for room B to C, so you can see what it does. If you need me to finish it off, let me know.</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Test - Open-Close-Unlock-Lock\"&gt;\n    &lt;gameid&gt;4eff0bb7-9dfc-4d39-ad67-1c48c12e34f2&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"roomB\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit name=\"Exit1AB\" alias=\"north\" to=\"roomA\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n      &lt;locked /&gt;\n    &lt;/exit&gt;\n    &lt;exit name=\"Exit1AC\" alias=\"east\" to=\"roomC\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n      &lt;locked /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"door1AB\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"openable\" /&gt;\n      &lt;inherit name=\"container_lockable\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;openscript type=\"script\"&gt;\n        if (this.locked) {\n          if (this.autounlock and AllKeysAvailable(this)) {\n            do (this, \"unlock\")\n            if (not this.isopen) {\n              OpenObject (this)\n            }\n          }\n          else {\n            msg (DynamicTemplate(\"LockedObject\", this))\n          }\n        }\n        else {\n          OpenObject (this)\n          UnlockExit (Exit1AB)\n          HelperOpenObject (door2AB)\n          door2AB.locked = false\n          UnlockExit (Exit2AB)\n        }\n      &lt;/openscript&gt;\n      &lt;closescript type=\"script\"&gt;\n        if (this.locked) {\n          msg (DynamicTemplate(\"LockedObject\", this))\n        }\n        else {\n          CloseObject (this)\n          LockExit (Exit1AB)\n          HelperCloseObject (door2AB)\n          door2AB.locked = true\n          LockExit (Exit2AB)\n        }\n      &lt;/closescript&gt;\n      &lt;keycount type=\"int\"&gt;1&lt;/keycount&gt;\n      &lt;key type=\"object\"&gt;key1&lt;/key&gt;\n      &lt;autounlock type=\"boolean\"&gt;false&lt;/autounlock&gt;\n      &lt;autoopen type=\"boolean\"&gt;false&lt;/autoopen&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Take&lt;/value&gt;\n        &lt;value&gt;Open&lt;/value&gt;\n        &lt;value&gt;Close&lt;/value&gt;\n        &lt;value&gt;Unlock&lt;/value&gt;\n        &lt;value&gt;Lock&lt;/value&gt;\n      &lt;/displayverbs&gt;\n    &lt;/object&gt;\n    &lt;object name=\"door1AC\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"key1\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n    &lt;/object&gt;\n    &lt;command&gt;\n      &lt;pattern&gt;open door1AC&lt;/pattern&gt;\n      &lt;script&gt;\n        if (not Got(key1)) {\n          msg (\"You need a key. DOH!!!\")\n        }\n        else if (Got(key1)) {\n          if (door1AC.isopen) {\n            msg (\"The door is already open. What is wrong with you today! You just opened it!!!\")\n          }\n          else {\n            msg (\"You unlock and open door1AC\")\n            HelperOpenObject (door1AC)\n            HelperOpenObject (door2AC)\n            UnlockExit (Exit1AC)\n            UnlockExit (Exit2AC)\n          }\n        }\n      &lt;/script&gt;\n    &lt;/command&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomC\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit name=\"Exit2AC\" alias=\"west\" to=\"roomB\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n      &lt;locked /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"door2AC\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomA\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit name=\"Exit2AB\" alias=\"south\" to=\"roomB\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n      &lt;locked /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"door2AB\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"openable\" /&gt;\n      &lt;inherit name=\"container_lockable\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;openscript type=\"script\"&gt;&lt;![CDATA[\n        if (this.locked) {\n          if (this.autounlock and AllKeysAvailable(this)) {\n            do (this, \"unlock\")\n            if (not this.isopen) {\n              OpenObject (this)\n            }\n          }\n          else {\n            msg (DynamicTemplate(\"LockedObject\", this))\n          }\n        }\n        else {\n          OpenObject (this)\n          UnlockExit (Exit2AB)\n          HelperOpenObject (door1AB)\n          door1AB.locked = false\n          UnlockExit (Exit1AB)\n          // The above 4 lines open the door connecting rooms A&amp;B. doors 1AB &amp; 2AB, are essentially the same door but in two rooms.\n        }\n      ]]&gt;&lt;/openscript&gt;\n      &lt;closescript type=\"script\"&gt;\n        if (this.locked) {\n          msg (DynamicTemplate(\"LockedObject\", this))\n        }\n        else {\n          CloseObject (this)\n          LockExit (Exit2AB)\n          HelperCloseObject (door1AB)\n          door1AB.locked = true\n          LockExit (Exit1AB)\n        }\n      &lt;/closescript&gt;\n      &lt;keycount type=\"int\"&gt;1&lt;/keycount&gt;\n      &lt;key type=\"object\"&gt;key1&lt;/key&gt;\n      &lt;autounlock type=\"boolean\"&gt;false&lt;/autounlock&gt;\n      &lt;autoopen type=\"boolean\"&gt;false&lt;/autoopen&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Take&lt;/value&gt;\n        &lt;value&gt;Open&lt;/value&gt;\n        &lt;value&gt;Close&lt;/value&gt;\n        &lt;value&gt;Unlock&lt;/value&gt;\n        &lt;value&gt;Lock&lt;/value&gt;\n      &lt;/displayverbs&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2017-08-12T19:34:50.9150958Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
