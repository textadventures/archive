{
  "Topic": {
    "TopicId": "b2mjxcdtu0yldjhmji7wxa",
    "ForumId": "10",
    "Title": "Concerning the Disambiguator",
    "LastUpdated": "2021-05-07T00:04:54.2962552Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "1a0c14e6-5c3d-4278-a8ae-4528ab94518d",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\\> GET FROB\r\nWhich do you mean?\r\n1. the scenery frob\r\n2. the red herring frob\r\n3. the big blue frob\r\n\r\n---\r\nIn Inform 7, we could put:\r\n\r\n```\r\nDoes the player mean the big blue frob: it is very likely.\r\n```\r\n\r\n---\r\nWhat if we used an optional attribute with a specific name which targets an object in Quest?\r\n\r\nIn ZIL, they used the ```generic``` tag.\r\n\r\nSo, if we put a \"generic\" attribute on the scenery frob and the red herring frob, each targeting the big blue frob object, the disambiguation script could say, \"hey! I have 3 candidates! 2 of them have ```generic```, and both of those target the 3rd candidate. That's it, then. Case closed. Going with with candidate 3!\"\r\n\r\n---\r\nThoughts? Suggestions?",
      "EditableFormat": "markdown",
      "HTML": "<p>&gt; GET FROB<br>\nWhich do you mean?</p>\n<ol>\n<li>the scenery frob</li>\n<li>the red herring frob</li>\n<li>the big blue frob</li>\n</ol>\n<hr>\n<p>In Inform 7, we could put:</p>\n<pre><code>Does the player mean the big blue frob: it is very likely.\n</code></pre>\n<hr>\n<p>What if we used an optional attribute with a specific name which targets an object in Quest?</p>\n<p>In ZIL, they used the <code>generic</code> tag.</p>\n<p>So, if we put a \"generic\" attribute on the scenery frob and the red herring frob, each targeting the big blue frob object, the disambiguation script could say, \"hey! I have 3 candidates! 2 of them have <code>generic</code>, and both of those target the 3rd candidate. That's it, then. Case closed. Going with with candidate 3!\"</p>\n<hr>\n<p>Thoughts? Suggestions?</p>\n\n",
      "PostDate": "2021-05-07T00:04:54.2962552Z",
      "LastEditDate": "2021-05-07T00:07:09.4128332Z",
      "link": null
    },
    {
      "PostId": "c2eded48-123e-4869-b7ec-e6dbc1329447",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think I can see how that works. But it might be simpler just to  put \"frob\" in the `alt` attribute for the big blue one. That way it's a complete match and overrides partial ones.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think I can see how that works. But it might be simpler just to  put \"frob\" in the <code>alt</code> attribute for the big blue one. That way it's a complete match and overrides partial ones.</p>\n\n",
      "PostDate": "2021-05-07T08:24:39.8706102Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4eccfd3c-59c8-499a-a79d-fb45e8d2fa96",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> it might be simpler just to put \"frob\" in the alt attribute for the big blue one. That way it's a complete match and overrides partial ones.\r\n\r\nThat would probably handle things most of the time, but I've got the game I was messing with set up so that the ```alt``` attribute is the only thing checked to find the object from the player's input. All the frobs have \"frob\" in the ```alt``` somewhere.\r\n\r\n---\r\nAlso, I figured out that I can just set the ```generic``` attribute on the target object, with ```generic``` set to the object itself.\r\n\r\n---\r\nThis is not the game I was messing with. It's just a working example game. This example does not require the ```alt``` attributes, although I've added the \"alternate\" names anyway. (It's a habit.)\r\n\r\n```\r\n<!--Saved by Quest 5.8.7753.35184-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"generic\">\r\n    <gameid>fa0a429f-a214-4559-bcbc-b419e81c6c5b</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"old frob\">\r\n      <inherit name=\"editor_object\" />\r\n      <take type=\"boolean\">false</take>\r\n      <takemsg>It's too old and fragile to move.</takemsg>\r\n      <alt type=\"stringlist\">\r\n        <value>frob</value>\r\n        <value>old frob</value>\r\n      </alt>\r\n    </object>\r\n    <object name=\"tiny frob\">\r\n      <inherit name=\"editor_object\" />\r\n      <takemsg>It's too small to get hold of.</takemsg>\r\n      <alt type=\"stringlist\">\r\n        <value>frob</value>\r\n        <value>tiny frob</value>\r\n      </alt>\r\n    </object>\r\n    <object name=\"blue frob\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <generic type=\"object\">blue frob</generic>\r\n      <alt type=\"stringlist\">\r\n        <value>frob</value>\r\n        <value>blue frob</value>\r\n      </alt>\r\n    </object>\r\n  </object>\r\n  <function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"><![CDATA[\r\n    value = Trim(LCase(value))\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt <> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // allow referring to objects from the previous command by gender or article\r\n    if (objtype = \"object\" and game.lastobjects <> null) {\r\n      foreach (obj, game.lastobjects) {\r\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n      }\r\n    }\r\n    // Also check the secondary scope, but only if we have not found anything yet\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\r\n      foreach (obj, secondaryscope) {\r\n        name = LCase(GetDisplayAlias(obj))\r\n        CompareNames (name, value, obj, fullmatches, partialmatches)\r\n        if (obj.alt <> null) {\r\n          foreach (altname, obj.alt) {\r\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (ListCount(fullmatches) = 1) {\r\n      return (ListItem(fullmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\r\n      return (ListItem(partialmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\r\n      return (null)\r\n    }\r\n    else {\r\n      game.disambiguating = true\r\n      candidates = ListCompact(ListCombine(fullmatches, partialmatches))\r\n      generic = false\r\n      // msg(candidates)\r\n      foreach (o, candidates) {\r\n        if (HasAttribute(o,\"generic\")) {\r\n          if (ListContains(ScopeVisible(),o.generic)) {\r\n            generic = true\r\n            generic_object = o.generic\r\n          }\r\n        }\r\n      }\r\n      // Added this line to resolve issue with new FinishTurn setup in 580\r\n      // game.disambiguating = true\r\n      if (LengthOf(variable) > 0) {\r\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\r\n        if (generic) {\r\n          return (generic_object)\r\n        }\r\n        else {\r\n          game.disambiguating = true\r\n          game.pov.currentcommandpendingvariable = variable\r\n          ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n            varname = game.pov.currentcommandpendingvariable\r\n            game.pov.currentcommandpendingvariable = null\r\n            if (result <> null) {\r\n              AddToResolvedNames (varname, GetObject(result))\r\n            }\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // multi-object command, so after showing the menu, add the object to the list\r\n        game.pov.currentcommandmultiobjectpending = true\r\n        if (generic) {\r\n          list add (game.pov.currentcommandpendingobjectlist, generic_object)\r\n          ResolveNextNameListItem\r\n        }\r\n        else {\r\n          game.disambiguating = true\r\n          ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n            if (result <> null) {\r\n              list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\r\n              ResolveNextNameListItem\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return (null)\r\n    }\r\n  ]]></function>\r\n</asl>\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/120020780-cd54c980-bfaf-11eb-883c-14745360c311.png)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>it might be simpler just to put \"frob\" in the alt attribute for the big blue one. That way it's a complete match and overrides partial ones.</p>\n</blockquote>\n<p>That would probably handle things most of the time, but I've got the game I was messing with set up so that the <code>alt</code> attribute is the only thing checked to find the object from the player's input. All the frobs have \"frob\" in the <code>alt</code> somewhere.</p>\n<hr>\n<p>Also, I figured out that I can just set the <code>generic</code> attribute on the target object, with <code>generic</code> set to the object itself.</p>\n<hr>\n<p>This is not the game I was messing with. It's just a working example game. This example does not require the <code>alt</code> attributes, although I've added the \"alternate\" names anyway. (It's a habit.)</p>\n<pre><code>&lt;!--Saved by Quest 5.8.7753.35184--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"generic\"&gt;\n    &lt;gameid&gt;fa0a429f-a214-4559-bcbc-b419e81c6c5b&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"old frob\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take type=\"boolean\"&gt;false&lt;/take&gt;\n      &lt;takemsg&gt;It's too old and fragile to move.&lt;/takemsg&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;frob&lt;/value&gt;\n        &lt;value&gt;old frob&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n    &lt;object name=\"tiny frob\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;takemsg&gt;It's too small to get hold of.&lt;/takemsg&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;frob&lt;/value&gt;\n        &lt;value&gt;tiny frob&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n    &lt;object name=\"blue frob\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;generic type=\"object\"&gt;blue frob&lt;/generic&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;frob&lt;/value&gt;\n        &lt;value&gt;blue frob&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"&gt;&lt;![CDATA[\n    value = Trim(LCase(value))\n    fullmatches = NewObjectList()\n    partialmatches = NewObjectList()\n    foreach (obj, scope) {\n      name = LCase(GetDisplayAlias(obj))\n      CompareNames (name, value, obj, fullmatches, partialmatches)\n      if (obj.alt &lt;&gt; null) {\n        foreach (altname, obj.alt) {\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // allow referring to objects from the previous command by gender or article\n    if (objtype = \"object\" and game.lastobjects &lt;&gt; null) {\n      foreach (obj, game.lastobjects) {\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n      }\n    }\n    // Also check the secondary scope, but only if we have not found anything yet\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\n      foreach (obj, secondaryscope) {\n        name = LCase(GetDisplayAlias(obj))\n        CompareNames (name, value, obj, fullmatches, partialmatches)\n        if (obj.alt &lt;&gt; null) {\n          foreach (altname, obj.alt) {\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n          }\n        }\n      }\n    }\n    if (ListCount(fullmatches) = 1) {\n      return (ListItem(fullmatches, 0))\n    }\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\n      return (ListItem(partialmatches, 0))\n    }\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\n      return (null)\n    }\n    else {\n      game.disambiguating = true\n      candidates = ListCompact(ListCombine(fullmatches, partialmatches))\n      generic = false\n      // msg(candidates)\n      foreach (o, candidates) {\n        if (HasAttribute(o,\"generic\")) {\n          if (ListContains(ScopeVisible(),o.generic)) {\n            generic = true\n            generic_object = o.generic\n          }\n        }\n      }\n      // Added this line to resolve issue with new FinishTurn setup in 580\n      // game.disambiguating = true\n      if (LengthOf(variable) &gt; 0) {\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\n        if (generic) {\n          return (generic_object)\n        }\n        else {\n          game.disambiguating = true\n          game.pov.currentcommandpendingvariable = variable\n          ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n            varname = game.pov.currentcommandpendingvariable\n            game.pov.currentcommandpendingvariable = null\n            if (result &lt;&gt; null) {\n              AddToResolvedNames (varname, GetObject(result))\n            }\n          }\n        }\n      }\n      else {\n        // multi-object command, so after showing the menu, add the object to the list\n        game.pov.currentcommandmultiobjectpending = true\n        if (generic) {\n          list add (game.pov.currentcommandpendingobjectlist, generic_object)\n          ResolveNextNameListItem\n        }\n        else {\n          game.disambiguating = true\n          ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n            if (result &lt;&gt; null) {\n              list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\n              ResolveNextNameListItem\n            }\n          }\n        }\n      }\n      return (null)\n    }\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/120020780-cd54c980-bfaf-11eb-883c-14745360c311.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2021-05-28T17:28:31.9400845Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
