{
  "Topic": {
    "TopicId": "x__wdrhqjemnfoig0jm5vq",
    "ForumId": "10",
    "Title": "Stackable items please!",
    "LastUpdated": "2017-06-06T19:18:28.4758576Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "b1a7ba04-0f7f-4fa6-b628-89207ace9a83",
      "UserId": 255368,
      "Username": "DarkBlueMonkey",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to make an RPG with health packs and so forth.  Unfortunately, if the player \"hordes\" the packs, the UI gets VERY cluttered.\r\n\r\nSelect which pack to use:\r\n1. Health Pack\r\n2. Health Pack\r\n3. Health Pack\r\n4. Health Pack\r\n.\r\n.\r\n.\r\n\r\nAnd you can imagine what the Inventory looks like if you have four or five of these, like Ammo and stuff....\r\n\r\nI've tried to use the 3rd party \"stackable\" library, but it doesn't seem to work properly.   Please please please could you include the capabilities of the stackable library into the stock product?  It seems like such a useful thing, I'm not sure why it's not more widely requested :)\r\n\r\nMany thanks in advance!\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to make an RPG with health packs and so forth.  Unfortunately, if the player \"hordes\" the packs, the UI gets VERY cluttered.</p>\n<p>Select which pack to use:</p>\n<ol>\n<li>Health Pack</li>\n<li>Health Pack</li>\n<li>Health Pack</li>\n<li>Health Pack<br>\n.<br>\n.<br>\n.</li>\n</ol>\n<p>And you can imagine what the Inventory looks like if you have four or five of these, like Ammo and stuff....</p>\n<p>I've tried to use the 3rd party \"stackable\" library, but it doesn't seem to work properly.   Please please please could you include the capabilities of the stackable library into the stock product?  It seems like such a useful thing, I'm not sure why it's not more widely requested :)</p>\n<p>Many thanks in advance!</p>\n\n",
      "PostDate": "2017-06-06T19:18:28.4758576Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b76b2846-3b05-46da-99f5-aba2e76060b6",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sora's 'stackable' library is old (quest has changed some of its scripting syntax, mainly List/Dictionary Attributes' scripting, from older versions), but I thought someone had updated it... (can't remember who did it or where it is found). It is quite advanced (maybe I could understand it now as I've been learning more in coding, but in the past, it was beyond my ability/understanding), but you can try to understand it, and update it yourself (if there's no updating of it by someone else and/or just can't find it, though I'm pretty sure it was updated by someone) and/or create your own 'item stacking' system.\r\n\r\nAlso, on top of a 'item stacking' system, you also would want to have a 'storage' system too: you don't use the 'player' Player Object as your 'inventory', but rather a bunch of Objects, creating a storage system (literally using these Objects as like folders on your computer, to organize and hold your 'item' Objects, as many games do/have, hidden and unseen by the person playing the game, but you can access these storage Objects, do various actions with them: sorting, viewing the storage/list of the 'item' Objects, viewing the individual 'item' Objects: their stats/attributes/info/etc, moving/getting these 'items' out from the 'storage' Objects and into some other Object or the 'player' Player Object for the person playing the game to be able to see and directly do stuff with those 'item' Objects, moving/putting/storing your 'item' Objects into the correct 'storage' Objects of your 'storage' system, and whatever other actions I might be missing that you'd want to do able to do...",
      "EditableFormat": "markdown",
      "HTML": "<p>Sora's 'stackable' library is old (quest has changed some of its scripting syntax, mainly List/Dictionary Attributes' scripting, from older versions), but I thought someone had updated it... (can't remember who did it or where it is found). It is quite advanced (maybe I could understand it now as I've been learning more in coding, but in the past, it was beyond my ability/understanding), but you can try to understand it, and update it yourself (if there's no updating of it by someone else and/or just can't find it, though I'm pretty sure it was updated by someone) and/or create your own 'item stacking' system.</p>\n<p>Also, on top of a 'item stacking' system, you also would want to have a 'storage' system too: you don't use the 'player' Player Object as your 'inventory', but rather a bunch of Objects, creating a storage system (literally using these Objects as like folders on your computer, to organize and hold your 'item' Objects, as many games do/have, hidden and unseen by the person playing the game, but you can access these storage Objects, do various actions with them: sorting, viewing the storage/list of the 'item' Objects, viewing the individual 'item' Objects: their stats/attributes/info/etc, moving/getting these 'items' out from the 'storage' Objects and into some other Object or the 'player' Player Object for the person playing the game to be able to see and directly do stuff with those 'item' Objects, moving/putting/storing your 'item' Objects into the correct 'storage' Objects of your 'storage' system, and whatever other actions I might be missing that you'd want to do able to do...</p>\n\n",
      "PostDate": "2017-06-06T23:44:07.9228785Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "94a8bb7d-6452-461a-8aa6-313257ad546d",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There was a thread like this a while ago. I seem to have lost it.\r\nWhat I did is turn certain items into a variable, in this case potions.\r\n\r\nplayer.potion = 1\r\nplayer.hyper_potion = 0\r\nplayer.gold = 500\r\nplayer.statusattributes = NewStringDictionary()\r\nblah....\r\ndictionary add (player.statusattributes, \"potion\", \"Potions: !\")\r\ndictionary add (player.statusattributes, \"hyper_potion\", \"Hyper Potions: !\")\r\ndictionary add (player.statusattributes, \"gold\", \"Gold: !\")\r\n\r\nEdit: Here's the thread.\r\nhttp://textadventures.co.uk/forum/quest/edit/etfvbtpxbkk_iakwvkridw/3400b7b0-976a-4a42-91ec-a298226d8fd4",
      "EditableFormat": "markdown",
      "HTML": "<p>There was a thread like this a while ago. I seem to have lost it.<br>\nWhat I did is turn certain items into a variable, in this case potions.</p>\n<p>player.potion = 1<br>\nplayer.hyper_potion = 0<br>\nplayer.gold = 500<br>\nplayer.statusattributes = NewStringDictionary()<br>\nblah....<br>\ndictionary add (player.statusattributes, \"potion\", \"Potions: !\")<br>\ndictionary add (player.statusattributes, \"hyper_potion\", \"Hyper Potions: !\")<br>\ndictionary add (player.statusattributes, \"gold\", \"Gold: !\")</p>\n<p>Edit: Here's the thread.<br>\nhttp://textadventures.co.uk/forum/quest/edit/etfvbtpxbkk_iakwvkridw/3400b7b0-976a-4a42-91ec-a298226d8fd4</p>\n\n",
      "PostDate": "2017-06-07T00:19:07.3731809Z",
      "LastEditDate": "2017-06-07T01:11:28.3175085Z",
      "link": null
    },
    {
      "PostId": "46f31d65-9797-4751-9a9b-a1bad26e48af",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "for a quick incomplete example of this:\r\n\r\n```\r\n<object name=\"storage_object\">\r\n  <object name=\"sword_storage_object\">\r\n  </object>\r\n  <object name=\"axe_storage_object\">\r\n  </object>\r\n</object>\r\n\r\n<object name=\"katana_object\">\r\n  <inherit name=\"sword_type\" />\r\n  <attr name=\"alias\" type=\"string\">katana</attr>\r\n  <attr name=\"parent\" type=\"object\">player</attr> // for this example, it's currently/initially in your 'inventory' (currently/initially contained within your 'player' Player Object)\r\n  <attr name=\"stat_info_script_attribute\" type=\"script\">\r\n    ClearScreen\r\n    // blah scripting to display all of your weapon's stats/info\r\n    wait {\r\n      ClearScreen\r\n    }\r\n  </attr>\r\n</object>\r\n\r\n<type name=\"sword_type\">\r\n</type>\r\n\r\n<object name=\"battle_axe_object\">\r\n  <inherit name=\"axe_type\" />\r\n  <attr name=\"alias\" type=\"string\">battle axe</attr>\r\n  <attr name=\"parent\" type=\"object\">player</attr> // for this example, it's currently/initially in your 'inventory' (currently/initially contained within your 'player' Player Object)\r\n  <attr name=\"stat_info_script_attribute\" type=\"script\">\r\n    ClearScreen\r\n    // blah scripting to display all of your weapon's stats/info\r\n    wait {\r\n      ClearScreen\r\n    }\r\n  </attr>\r\n</object>\r\n\r\n<type name=\"axe_type\">\r\n</type>\r\n\r\n<object name=\"player\">\r\n</object>\r\n\r\n// this will always be an Object/button inside of the 'player' Player Object (due to disabled 'take and drop' and its 'parent' set to the 'player' Player Object) --- it's the same as if you had nested this inside of the 'player' Player Object (but I have it separated, as I don't like having this clutter up the 'player' Player Object and I like it to be separated for organization and it'seasier to edit it as well, in code):\r\n<object name=\"storage_button_object\">\r\n  <attr name=\"alias\" type=\"string\">storage</attr>\r\n  <attr name=\"parent\" type=\"object\">player</attr>\r\n  <attr name=\"take\" type=\"boolean\">false</attr>\r\n  <attr name=\"drop\" type=\"boolean\">false</attr>\r\n  // since this Object is always contained within the 'player' Player Object, we don't need to handle the built-in 'displayverbs' Stringlist Attribute, but if you'd rather have this Object not be contained within the 'player' Player Object, such as having it be contained within (implying we're constantly moving/setting it to ---> ) the parent Object of the 'player' Player Object (aka the Room Object that the player is within/at), then we'd need to use the 'displayverbs' instead of the 'inventoryverbs'.\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">deposit_script_attribute;withdrawal_script_attribute;audit_script_attribute</attr>\r\n  <attr name=\"deposit_script_attribute\" type=\"script\">\r\n    <![CDATA[\r\n      msg (\"Deposit which item?\")\r\n      inventory_objectlist_variable = ScopeInventory ()\r\n      DisplayList (inventory_objectlist_variable, true) // or maybe it's: DisplayList (inventory_objectlist_variable, 0) // or maybe it's: DisplayList (inventory_objectlist_variable, 1) // whatever it needs to make it be a numbered list... meh (as can be seen, I'm not clear on exactly what it needs for its second Argument and I've not tried/tested.used it yet myself)\r\n      get input (\r\n        if (IsInt (result) and ToInt (result) > 0 and ToInt (result) <= ListCount (inventory_objectlist_variable)) {\r\n          selected_inventory_object_variable = ObjectListItem (inventory_objectlist_variable, result) // or maybe it's (it's been awhile since I've done quest scripting / been some time since I've used quest, lol): selected_inventory_object_variable = ObjectListItem (inventory_objectlist_variable, ToInt (result))\r\n          // you can make this more efficient (less work/typing for you) if you got a lot of types of items to check, but for this simple example of only having 2 types to check (sword vs axe), I'm doing it in this simple but inefficient way (ask if you want/need better handling/efficiency for having lots of types of items and/or whatever else for an advanced/complex design you want/got/need)\r\n          if (DoesInherit (selected_inventory_object_variable, \"sword_type\")) {\r\n            selected_inventory_object_variable.parent = sword_storage_object // or you can do this too: MoveObject (selected_inventory_object_variable, sword_storage_object)\r\n          } else if (DoesInherit (selected_inventory_object_variable, \"axe_type\")) {\r\n            selected_inventory_object_variable.parent = axe_storage_object // or you can do this too: MoveObject (selected_inventory_object_variable, axe_storage_object)\r\n          } else {\r\n            msg (\"THIS IS JUST A SIMPLE INCOMPLETE EXAMPLE, SO NO HANDLING OF THIS ISSUE, ASIDE FROM THIS MESSAGE\")\r\n          }\r\n        }\r\n      }\r\n    ]]>\r\n  </attr>\r\n  <attr name=\"withdrawal_script_attribute\" type=\"script\">\r\n    // again, this is very simple/inefficient as it's just an example for you (ask and we can make this more efficient):\r\n    msg (\"Withdraw which item?\")\r\n    msg (\"1. sword\")\r\n    msg (\"2. axe\")\r\n    get input {\r\n      if (result = \"1\") {\r\n        show menu (\"Which sword to withdraw?\", GetDirectChildren (sword_storage_object), false) {\r\n          result.parent = player // or: MoveObject (result, player)\r\n        }\r\n      } else if (result = \"2\") {\r\n        show menu (\"Which axe to withdraw?\", GetDirectChildren (axe_storage_object), false) {\r\n          result.parent = player // or: MoveObject (result, player)\r\n        }\r\n      }\r\n    }\r\n  </attr>\r\n  <attr name=\"audit_script_attribute\" type=\"script\">\r\n     // again, this is very simple/inefficient as it's just an example for you (ask and we can make this more efficient):\r\n    msg (\"Audit which storage?\")\r\n    msg (\"1. sword\")\r\n    msg (\"2. axe\")\r\n    get input {\r\n      weapon_type_input_selection_string_variable = result\r\n      if (weapon_type_input_selection_string_variable = \"1\") {\r\n        sword_storage_objectlist_variable = GetDirectChildren (sword_storage_object)\r\n        DisplayList (sword_storage_objectlist_variable, true) // or: DisplayList (sword_storage_objectlist_variable, 0) // or: DisplayList (sword_storage_objectlist_variable, 1) // or: DisplayList (sword_storage_objectlist_variable, false)\r\n        ask (\"Do you want to Audit a specific sword?\") {\r\n          ask_boolean_variable = result\r\n          if (ask_boolean_variable) { \r\n            show menu (\"Which sword to audit?\", sword_storage_objectlist_variable, false) {\r\n            selected_sword_object_variable = result\r\n            do (selected_sword_object_variable, \"stat_info_script_attribute\")\r\n          }\r\n        }\r\n      } else if (weapon_type_input_selection_string_variable = \"2\") {\r\n        axe_storage_objectlist_variable = GetDirectChildren (axe_storage_object)\r\n        DisplayList (axe_storage_objectlist_variable, true) // or: DisplayList (axe_storage_objectlist_variable, 0) // or: DisplayList (axe_storage_objectlist_variable, 1) // or: DisplayList (axe_storage_objectlist_variable, false)\r\n        ask (\"Do you want to Audit a specific axe?\") {\r\n          ask_boolean_variable = result\r\n          if (ask_boolean_variable) { \r\n            show menu (\"Which axe to audit?\", axe_storage_objectlist_variable, false) {\r\n            selected_axe_object_variable = result\r\n            do (selected_axe_object_variable, \"stat_info_script_attribute\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  </attr>\r\n</object>\r\n\r\n<verb name=\"deposit_script_attribute\">\r\n  <property>desposit</property>\r\n  <pattern>deposit</pattern>\r\n  <defaultexpression>You can't deposit that!</defaultexpression>\r\n</verb>\r\n\r\n<verb name=\"withdrawal_script_attribute\">\r\n  <property>withdrawal</property>\r\n  <pattern>withdrawal</pattern>\r\n  <defaultexpression>You can't withdraw that!</defaultexpression>\r\n</verb>\r\n\r\n<verb name=\"audit_script_attribute\">\r\n  <property>audit</property>\r\n  <pattern>audit</pattern>\r\n  <defaultexpression>You can't audit that!</defaultexpression>\r\n</verb>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>for a quick incomplete example of this:</p>\n<pre><code>&lt;object name=\"storage_object\"&gt;\n  &lt;object name=\"sword_storage_object\"&gt;\n  &lt;/object&gt;\n  &lt;object name=\"axe_storage_object\"&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n\n&lt;object name=\"katana_object\"&gt;\n  &lt;inherit name=\"sword_type\" /&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;katana&lt;/attr&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt; // for this example, it's currently/initially in your 'inventory' (currently/initially contained within your 'player' Player Object)\n  &lt;attr name=\"stat_info_script_attribute\" type=\"script\"&gt;\n    ClearScreen\n    // blah scripting to display all of your weapon's stats/info\n    wait {\n      ClearScreen\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=\"sword_type\"&gt;\n&lt;/type&gt;\n\n&lt;object name=\"battle_axe_object\"&gt;\n  &lt;inherit name=\"axe_type\" /&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;battle axe&lt;/attr&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt; // for this example, it's currently/initially in your 'inventory' (currently/initially contained within your 'player' Player Object)\n  &lt;attr name=\"stat_info_script_attribute\" type=\"script\"&gt;\n    ClearScreen\n    // blah scripting to display all of your weapon's stats/info\n    wait {\n      ClearScreen\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=\"axe_type\"&gt;\n&lt;/type&gt;\n\n&lt;object name=\"player\"&gt;\n&lt;/object&gt;\n\n// this will always be an Object/button inside of the 'player' Player Object (due to disabled 'take and drop' and its 'parent' set to the 'player' Player Object) --- it's the same as if you had nested this inside of the 'player' Player Object (but I have it separated, as I don't like having this clutter up the 'player' Player Object and I like it to be separated for organization and it'seasier to edit it as well, in code):\n&lt;object name=\"storage_button_object\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;storage&lt;/attr&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  // since this Object is always contained within the 'player' Player Object, we don't need to handle the built-in 'displayverbs' Stringlist Attribute, but if you'd rather have this Object not be contained within the 'player' Player Object, such as having it be contained within (implying we're constantly moving/setting it to ---&gt; ) the parent Object of the 'player' Player Object (aka the Room Object that the player is within/at), then we'd need to use the 'displayverbs' instead of the 'inventoryverbs'.\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;deposit_script_attribute;withdrawal_script_attribute;audit_script_attribute&lt;/attr&gt;\n  &lt;attr name=\"deposit_script_attribute\" type=\"script\"&gt;\n    &lt;![CDATA[\n      msg (\"Deposit which item?\")\n      inventory_objectlist_variable = ScopeInventory ()\n      DisplayList (inventory_objectlist_variable, true) // or maybe it's: DisplayList (inventory_objectlist_variable, 0) // or maybe it's: DisplayList (inventory_objectlist_variable, 1) // whatever it needs to make it be a numbered list... meh (as can be seen, I'm not clear on exactly what it needs for its second Argument and I've not tried/tested.used it yet myself)\n      get input (\n        if (IsInt (result) and ToInt (result) &gt; 0 and ToInt (result) &lt;= ListCount (inventory_objectlist_variable)) {\n          selected_inventory_object_variable = ObjectListItem (inventory_objectlist_variable, result) // or maybe it's (it's been awhile since I've done quest scripting / been some time since I've used quest, lol): selected_inventory_object_variable = ObjectListItem (inventory_objectlist_variable, ToInt (result))\n          // you can make this more efficient (less work/typing for you) if you got a lot of types of items to check, but for this simple example of only having 2 types to check (sword vs axe), I'm doing it in this simple but inefficient way (ask if you want/need better handling/efficiency for having lots of types of items and/or whatever else for an advanced/complex design you want/got/need)\n          if (DoesInherit (selected_inventory_object_variable, \"sword_type\")) {\n            selected_inventory_object_variable.parent = sword_storage_object // or you can do this too: MoveObject (selected_inventory_object_variable, sword_storage_object)\n          } else if (DoesInherit (selected_inventory_object_variable, \"axe_type\")) {\n            selected_inventory_object_variable.parent = axe_storage_object // or you can do this too: MoveObject (selected_inventory_object_variable, axe_storage_object)\n          } else {\n            msg (\"THIS IS JUST A SIMPLE INCOMPLETE EXAMPLE, SO NO HANDLING OF THIS ISSUE, ASIDE FROM THIS MESSAGE\")\n          }\n        }\n      }\n    ]]&gt;\n  &lt;/attr&gt;\n  &lt;attr name=\"withdrawal_script_attribute\" type=\"script\"&gt;\n    // again, this is very simple/inefficient as it's just an example for you (ask and we can make this more efficient):\n    msg (\"Withdraw which item?\")\n    msg (\"1. sword\")\n    msg (\"2. axe\")\n    get input {\n      if (result = \"1\") {\n        show menu (\"Which sword to withdraw?\", GetDirectChildren (sword_storage_object), false) {\n          result.parent = player // or: MoveObject (result, player)\n        }\n      } else if (result = \"2\") {\n        show menu (\"Which axe to withdraw?\", GetDirectChildren (axe_storage_object), false) {\n          result.parent = player // or: MoveObject (result, player)\n        }\n      }\n    }\n  &lt;/attr&gt;\n  &lt;attr name=\"audit_script_attribute\" type=\"script\"&gt;\n     // again, this is very simple/inefficient as it's just an example for you (ask and we can make this more efficient):\n    msg (\"Audit which storage?\")\n    msg (\"1. sword\")\n    msg (\"2. axe\")\n    get input {\n      weapon_type_input_selection_string_variable = result\n      if (weapon_type_input_selection_string_variable = \"1\") {\n        sword_storage_objectlist_variable = GetDirectChildren (sword_storage_object)\n        DisplayList (sword_storage_objectlist_variable, true) // or: DisplayList (sword_storage_objectlist_variable, 0) // or: DisplayList (sword_storage_objectlist_variable, 1) // or: DisplayList (sword_storage_objectlist_variable, false)\n        ask (\"Do you want to Audit a specific sword?\") {\n          ask_boolean_variable = result\n          if (ask_boolean_variable) { \n            show menu (\"Which sword to audit?\", sword_storage_objectlist_variable, false) {\n            selected_sword_object_variable = result\n            do (selected_sword_object_variable, \"stat_info_script_attribute\")\n          }\n        }\n      } else if (weapon_type_input_selection_string_variable = \"2\") {\n        axe_storage_objectlist_variable = GetDirectChildren (axe_storage_object)\n        DisplayList (axe_storage_objectlist_variable, true) // or: DisplayList (axe_storage_objectlist_variable, 0) // or: DisplayList (axe_storage_objectlist_variable, 1) // or: DisplayList (axe_storage_objectlist_variable, false)\n        ask (\"Do you want to Audit a specific axe?\") {\n          ask_boolean_variable = result\n          if (ask_boolean_variable) { \n            show menu (\"Which axe to audit?\", axe_storage_objectlist_variable, false) {\n            selected_axe_object_variable = result\n            do (selected_axe_object_variable, \"stat_info_script_attribute\")\n          }\n        }\n      }\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb name=\"deposit_script_attribute\"&gt;\n  &lt;property&gt;desposit&lt;/property&gt;\n  &lt;pattern&gt;deposit&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't deposit that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb name=\"withdrawal_script_attribute\"&gt;\n  &lt;property&gt;withdrawal&lt;/property&gt;\n  &lt;pattern&gt;withdrawal&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't withdraw that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb name=\"audit_script_attribute\"&gt;\n  &lt;property&gt;audit&lt;/property&gt;\n  &lt;pattern&gt;audit&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't audit that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n\n",
      "PostDate": "2017-06-07T01:07:46.7881004Z",
      "LastEditDate": "2017-06-07T01:15:10.7797048Z",
      "link": null
    },
    {
      "PostId": "1a0a937c-48fe-46d0-b226-816553bfc2d1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nand if you got/need/want a really advancd/complex system (you got lots of items and types of items):\r\n\r\nthen, you should do Data Structure Management designs (linked lists, dictionaries - not to be confused with quest's 'Dictionary' Attribute, maps/mapping, stacks/queries, pointer/reference iterator, etc etc etc), for efficiency, which I failed at... still trying to learn this stuff and pass the school class next time I take it, sighs.",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>and if you got/need/want a really advancd/complex system (you got lots of items and types of items):</p>\n<p>then, you should do Data Structure Management designs (linked lists, dictionaries - not to be confused with quest's 'Dictionary' Attribute, maps/mapping, stacks/queries, pointer/reference iterator, etc etc etc), for efficiency, which I failed at... still trying to learn this stuff and pass the school class next time I take it, sighs.</p>\n\n",
      "PostDate": "2017-06-07T01:22:02.1519527Z",
      "LastEditDate": "2017-06-07T01:23:01.2682142Z",
      "link": null
    },
    {
      "PostId": "b32d52df-e5b4-4548-8ced-6a67e6740484",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I wrote a new version of Sora's library some time ago. I have just uploaded it, it should work better and (IMO) be easier to use.\r\n\r\nhttps://github.com/ThePix/quest/wiki/StackLib",
      "EditableFormat": "markdown",
      "HTML": "<p>I wrote a new version of Sora's library some time ago. I have just uploaded it, it should work better and (IMO) be easier to use.</p>\n<p>https://github.com/ThePix/quest/wiki/StackLib</p>\n\n",
      "PostDate": "2017-06-07T09:07:32.6251714Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8556e8ea-6f3c-4169-bf30-6aaec7af8d4e",
      "UserId": 255368,
      "Username": "DarkBlueMonkey",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you  so much for uploading a new version of the Sora library.  I'll import it and see if it compiles with my game now.\r\n\r\nI guess my trepidation to using user-libraries is for this exact reason, and partly the reason why I stopped playing Kerbal Space Program for a long time;  Every time there's an update, any user-mods run the substantial risk of becoming broken.  If the online app then breaks, that means your game won't work any more...\r\n\r\nConsidering the functionality added by Sora's (now The Pixie's?) library seems so fundamental to RPG games, I would have expected it to be added by now.  \r\n\r\nThanks to the others for the suggestions about using variables etc, but things just started getting horrifically complicated.  I have  lots of buffs, ammo types, weapons, consumables, junk, etc, all sorts of stuff that the player can pick up.  Having bespoke rules for each one, and essentially duplicate the rules engine of Quest for 30 to 40+ objects (minimum) became such an overwhelming task, that I gave up (eventually the Quest UI started having problems displaying the scripts!\r\n\r\nOnce again, thank you for updating and uploading Sora's library, however I'd like to extend a formal feature request to the devs to put this functionality as standard, so that it can never be 'deprecated' or 'break' in a future release :-)\r\n\r\nThanks all!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you  so much for uploading a new version of the Sora library.  I'll import it and see if it compiles with my game now.</p>\n<p>I guess my trepidation to using user-libraries is for this exact reason, and partly the reason why I stopped playing Kerbal Space Program for a long time;  Every time there's an update, any user-mods run the substantial risk of becoming broken.  If the online app then breaks, that means your game won't work any more...</p>\n<p>Considering the functionality added by Sora's (now The Pixie's?) library seems so fundamental to RPG games, I would have expected it to be added by now.</p>\n<p>Thanks to the others for the suggestions about using variables etc, but things just started getting horrifically complicated.  I have  lots of buffs, ammo types, weapons, consumables, junk, etc, all sorts of stuff that the player can pick up.  Having bespoke rules for each one, and essentially duplicate the rules engine of Quest for 30 to 40+ objects (minimum) became such an overwhelming task, that I gave up (eventually the Quest UI started having problems displaying the scripts!</p>\n<p>Once again, thank you for updating and uploading Sora's library, however I'd like to extend a formal feature request to the devs to put this functionality as standard, so that it can never be 'deprecated' or 'break' in a future release :-)</p>\n<p>Thanks all!</p>\n\n",
      "PostDate": "2017-06-09T12:57:45.5305344Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "93c61818-da0d-4720-b295-1a6ce0b2c0b8",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Once your game is published and uploaded, it should be immune to changes in Quest. The web player is certainly capable of player game created in Quest 4 and possibly earlier versions. And the way the publishing process works is that it builds a single file from all the library files, including the built-in ones, so if Quest is updated, your game will still work as it is still using the original.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Once your game is published and uploaded, it should be immune to changes in Quest. The web player is certainly capable of player game created in Quest 4 and possibly earlier versions. And the way the publishing process works is that it builds a single file from all the library files, including the built-in ones, so if Quest is updated, your game will still work as it is still using the original.</p>\n\n",
      "PostDate": "2017-06-09T13:28:43.2901022Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f118c78e-e11b-4aeb-9bbe-d914777b0538",
      "UserId": 255368,
      "Username": "DarkBlueMonkey",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just read your explanation on the Git site.. That's cool that it won't \"die\" when an update occurs...    From reading the method, it does seem a lot simpler than Sora's...   However in its current form the library helps a LOT, but doesn't do /quite/ what I need... I guess I need to look into doing some coding...\r\n * I don't really want te user to still have to pick which object from the stacks when doing something.. when I say \"use battery\", they're all clones, so whichever is 'top' I suppose :)\r\n\r\nTBH at the moment, it's not quite working....  I made a room \"Stack Objects\",  made a stack object \"stack_batteries\" and added the stackable thingummy to the battery object pointing at the \"stack_batteries\" object... but when I pick up the batteries, I'm getting two batteries still. :-(    I'll keep playing with it!  I tried with the stack being \"stack_itself\" and \"not stackable\"...  :(\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I just read your explanation on the Git site.. That's cool that it won't \"die\" when an update occurs...    From reading the method, it does seem a lot simpler than Sora's...   However in its current form the library helps a LOT, but doesn't do /quite/ what I need... I guess I need to look into doing some coding...</p>\n<ul>\n<li>I don't really want te user to still have to pick which object from the stacks when doing something.. when I say \"use battery\", they're all clones, so whichever is 'top' I suppose :)</li>\n</ul>\n<p>TBH at the moment, it's not quite working....  I made a room \"Stack Objects\",  made a stack object \"stack_batteries\" and added the stackable thingummy to the battery object pointing at the \"stack_batteries\" object... but when I pick up the batteries, I'm getting two batteries still. :-(    I'll keep playing with it!  I tried with the stack being \"stack_itself\" and \"not stackable\"...  :(</p>\n\n",
      "PostDate": "2017-06-09T14:01:50.118765Z",
      "LastEditDate": "2017-06-09T14:03:21.3154331Z",
      "link": null
    },
    {
      "PostId": "3e6d4cac-84c2-4369-bdab-117f3835fa2d",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was going to post a link to a thread here, but it seems  either someone deleted it or it got knocked back.\r\nOh well.\r\nNice to see you have made progress, anyways.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was going to post a link to a thread here, but it seems  either someone deleted it or it got knocked back.<br>\nOh well.<br>\nNice to see you have made progress, anyways.</p>\n\n",
      "PostDate": "2017-06-10T04:04:16.0991164Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bc920d94-ba66-4d52-9bad-733311302609",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you can wait a few days, I will see if I can update the library. An option on the stack object so if the player selects it, it automatically picks the first object in the stack, instead of asking the player would work, I guess.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you can wait a few days, I will see if I can update the library. An option on the stack object so if the player selects it, it automatically picks the first object in the stack, instead of asking the player would work, I guess.</p>\n\n",
      "PostDate": "2017-06-10T07:40:07.7637109Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5815227b-8b81-445e-9380-4b56f6c65066",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have uploaded a new version, 1.1, which supports homogeneous stack as well as heterogeneous (same link as above). I also added piles of cash! Let me know of any issues.",
      "EditableFormat": "markdown",
      "HTML": "<p>I have uploaded a new version, 1.1, which supports homogeneous stack as well as heterogeneous (same link as above). I also added piles of cash! Let me know of any issues.</p>\n\n",
      "PostDate": "2017-06-12T07:53:41.3150041Z",
      "LastEditDate": "2017-06-12T07:54:10.5557719Z",
      "link": null
    },
    {
      "PostId": "a769aac9-8b7d-465c-a17b-38f6c24c1b23",
      "UserId": 255368,
      "Username": "DarkBlueMonkey",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks!  Will download later and have a play.   I had a good bash at it last night, and created a couple of dozen stack objects for my weapons and ammo types.    Works nicely in the latest Quest UI, thanks!   I ended up getting it to work by editing the code in the .aslx.  My (poor) understanding of it seemed to indicate that if I just commented out the \"If there's more than one\" check, then it would always assume there was one, and would take the first one :)    .  as soon as I did that, the battery got used, and the count decremented exactly!  :)  I suspect your solution will be far neater, so will have a look at that! :)\r\n\r\nTonight's puzzle:  At the moment I have to say \"get battery\" then \"use batteries\" because the stack's called \"batteries\", so I might try to tweak the code a little to show an alternate description (listdescription?) in the inventory pane, so that the stack can respond to \"use battery\", but still show \"batteries: 2\" ...  might have to create a special verb other than use, so that the stack and floor objects don't pop up in the same \"use which?\" list, but custom verbs are a tad beyond my skill level just now :D    I'm completely shooting in the dark here, and (to be honest) was a little shocked when Quest parsed my hacked-about  stack-library .aslx   :D\r\n\r\nThank you so much for updating this library, and your help.  It's completely un-jammed me from a problem that stalled for  months cos my quest coding skill wasn't up to it :)\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks!  Will download later and have a play.   I had a good bash at it last night, and created a couple of dozen stack objects for my weapons and ammo types.    Works nicely in the latest Quest UI, thanks!   I ended up getting it to work by editing the code in the .aslx.  My (poor) understanding of it seemed to indicate that if I just commented out the \"If there's more than one\" check, then it would always assume there was one, and would take the first one :)    .  as soon as I did that, the battery got used, and the count decremented exactly!  :)  I suspect your solution will be far neater, so will have a look at that! :)</p>\n<p>Tonight's puzzle:  At the moment I have to say \"get battery\" then \"use batteries\" because the stack's called \"batteries\", so I might try to tweak the code a little to show an alternate description (listdescription?) in the inventory pane, so that the stack can respond to \"use battery\", but still show \"batteries: 2\" ...  might have to create a special verb other than use, so that the stack and floor objects don't pop up in the same \"use which?\" list, but custom verbs are a tad beyond my skill level just now :D    I'm completely shooting in the dark here, and (to be honest) was a little shocked when Quest parsed my hacked-about  stack-library .aslx   :D</p>\n<p>Thank you so much for updating this library, and your help.  It's completely un-jammed me from a problem that stalled for  months cos my quest coding skill wasn't up to it :)</p>\n\n",
      "PostDate": "2017-06-12T10:17:04.6435009Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "10686fc6-e18f-4b15-96b9-70feef9f6442",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just trying out the stackable items, not sure if it's working for me.\r\n\r\nGot an item, Drink and an item Banana Thickshake. Both of them are set to be members of the stack Potion Stack, which is locked in a room and marked as a heterogenous stack.\r\n\r\nInventory still seems to treat them as normal. I've noticed that the was something that happened before and filled the inventory tab with scripts. Seems to happen now when I make a new item , but I get the error\r\n\r\n```Error running script: Error compiling expression 'container.parent = Stack Containers': Unknown object or variable 'Stack Containers'```",
      "EditableFormat": "markdown",
      "HTML": "<p>Just trying out the stackable items, not sure if it's working for me.</p>\n<p>Got an item, Drink and an item Banana Thickshake. Both of them are set to be members of the stack Potion Stack, which is locked in a room and marked as a heterogenous stack.</p>\n<p>Inventory still seems to treat them as normal. I've noticed that the was something that happened before and filled the inventory tab with scripts. Seems to happen now when I make a new item , but I get the error</p>\n<p><code>Error running script: Error compiling expression 'container.parent = Stack Containers': Unknown object or variable 'Stack Containers'</code></p>\n\n",
      "PostDate": "2017-06-30T19:05:03.2813441Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d3688eee-0b1b-4992-b6a4-fab66f700300",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I realise the documentation is wrong. You need to put all the stack containers (i.e., Potion Stack) in a room called \"Stack Containers\".",
      "EditableFormat": "markdown",
      "HTML": "<p>I realise the documentation is wrong. You need to put all the stack containers (i.e., Potion Stack) in a room called \"Stack Containers\".</p>\n\n",
      "PostDate": "2017-06-30T20:01:07.3640124Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "051ac02e-a612-4d31-845d-f7774a00ecde",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A couple of questions...\r\n\r\nFirstly I'm trying to create an encumbrance system that totals the weight of all the objects in a player's inventory. Is there a way to retrieve how many items there are in a stack as an integer? Or reference an attribute of all of the items in that stack?\r\n\r\nSecondly,  how can I get this system to work with clones? For example, say I had a fountain in my game that the player can retrieve water from.  The way that I'm currently attempting to do this is to have a water object and a water stack object. When the player retrieves some water from the fountain, it clones the water object to the player's inventory. At the moment this just adds more copies of the water object to the player's inventory. What I'd like to be able to do is add the stack to the player's inventory, then just increase the count of objects in that stack (i.e. Water: 1, Water: 2 etc...). Is there any way to do this?",
      "EditableFormat": "markdown",
      "HTML": "<p>A couple of questions...</p>\n<p>Firstly I'm trying to create an encumbrance system that totals the weight of all the objects in a player's inventory. Is there a way to retrieve how many items there are in a stack as an integer? Or reference an attribute of all of the items in that stack?</p>\n<p>Secondly,  how can I get this system to work with clones? For example, say I had a fountain in my game that the player can retrieve water from.  The way that I'm currently attempting to do this is to have a water object and a water stack object. When the player retrieves some water from the fountain, it clones the water object to the player's inventory. At the moment this just adds more copies of the water object to the player's inventory. What I'd like to be able to do is add the stack to the player's inventory, then just increase the count of objects in that stack (i.e. Water: 1, Water: 2 etc...). Is there any way to do this?</p>\n\n",
      "PostDate": "2017-07-04T10:20:13.2460521Z",
      "LastEditDate": "2017-07-04T10:36:50.0338865Z",
      "link": null
    },
    {
      "PostId": "d0d7656f-53c8-45d3-8bb5-f2ff82b6dc19",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If your stack container is called \"Potion Stack\", then `GetDirectChildren(Potion Stack)` will get a list of items in the stack, and `ListCount(GetDirectChildren(Potion Stack))` will get the number of items in the stack.\r\n\r\nTo total the weights, try (might be `volume` rather than `weight`?):\r\n\r\n```\r\ntotal = 0\r\nforeach (o, GetDirectChildren(Potion Stack)) {\r\n  total = total + o.weight\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>If your stack container is called \"Potion Stack\", then <code>GetDirectChildren(Potion Stack)</code> will get a list of items in the stack, and <code>ListCount(GetDirectChildren(Potion Stack))</code> will get the number of items in the stack.</p>\n<p>To total the weights, try (might be <code>volume</code> rather than <code>weight</code>?):</p>\n<pre><code>total = 0\nforeach (o, GetDirectChildren(Potion Stack)) {\n  total = total + o.weight\n}\n</code></pre>\n\n",
      "PostDate": "2017-07-04T10:41:14.8393676Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b8ec44ff-5a1a-4978-a494-12ec66280b43",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(if you want/need to do so) how to store the Value from Pixie's example of 'ListCount'\r\n\r\ngive your container stack an Integer Attribute, for example name: 'quantity'\r\n\r\nPotion Stack.quantity = ListCount (GetDirectChildren (Potion Stack))\r\n\r\n-------\r\n\r\nalso note that you can use the 'foreach' iteration Pixie showed, for additional layers (up or down)\r\n\r\nfor example, you can have a potion container stack  for all of the different types of individual potion containers:\r\n\r\npotion_stack\r\n-> life_potion_stack\r\n->-> life_potion_1\r\n->-> life_potion_2\r\n-> mana_potion_stack\r\n->-> mana_potion_1\r\n->-> mana_potion_2\r\n\r\nelixir_stack\r\n-> strength_elixir_stack\r\n->-> strength_elixir_1\r\n->-> strength_elixir_2\r\n-> endurance_elixir_stack\r\n->-> endurance_elixir_1\r\n->-> endurance_elixir_2\r\n\r\n-------\r\n\r\nbut this (if using lots of data/variables/objects/items/etc) gets into performance/speed of code designs (analyzing code designs: steps/operations/combinations and thus its speed/performance):\r\n\r\nhttps://en.wikipedia.org/wiki/Computational_complexity_theory\r\nhttps://en.wikipedia.org/wiki/Time_complexity#Table_of_common_time_complexities\r\n\r\nhttps://en.wikipedia.org/wiki/Data_structure\r\nhttps://en.wikipedia.org/wiki/Abstract_data_type\r\nhttps://en.wikipedia.org/wiki/List_of_data_structures\r\n\r\n---------\r\n\r\nI had a hard time with this college programming class, totally failed it... sighs, hopefully I can learn this stuff and pass it next time. Not easy stuff for your brain, as it's dealing with structures/designs, something, at least my brain wasn't capable/ready for, sighs.",
      "EditableFormat": "markdown",
      "HTML": "<p>(if you want/need to do so) how to store the Value from Pixie's example of 'ListCount'</p>\n<p>give your container stack an Integer Attribute, for example name: 'quantity'</p>\n<p>Potion Stack.quantity = ListCount (GetDirectChildren (Potion Stack))</p>\n<hr>\n<p>also note that you can use the 'foreach' iteration Pixie showed, for additional layers (up or down)</p>\n<p>for example, you can have a potion container stack  for all of the different types of individual potion containers:</p>\n<p>potion_stack<br>\n-&gt; life_potion_stack<br>\n-&gt;-&gt; life_potion_1<br>\n-&gt;-&gt; life_potion_2<br>\n-&gt; mana_potion_stack<br>\n-&gt;-&gt; mana_potion_1<br>\n-&gt;-&gt; mana_potion_2</p>\n<p>elixir_stack<br>\n-&gt; strength_elixir_stack<br>\n-&gt;-&gt; strength_elixir_1<br>\n-&gt;-&gt; strength_elixir_2<br>\n-&gt; endurance_elixir_stack<br>\n-&gt;-&gt; endurance_elixir_1<br>\n-&gt;-&gt; endurance_elixir_2</p>\n<hr>\n<p>but this (if using lots of data/variables/objects/items/etc) gets into performance/speed of code designs (analyzing code designs: steps/operations/combinations and thus its speed/performance):</p>\n<p>https://en.wikipedia.org/wiki/Computational_complexity_theory<br>\nhttps://en.wikipedia.org/wiki/Time_complexity#Table_of_common_time_complexities</p>\n<p>https://en.wikipedia.org/wiki/Data_structure<br>\nhttps://en.wikipedia.org/wiki/Abstract_data_type<br>\nhttps://en.wikipedia.org/wiki/List_of_data_structures</p>\n<hr>\n<p>I had a hard time with this college programming class, totally failed it... sighs, hopefully I can learn this stuff and pass it next time. Not easy stuff for your brain, as it's dealing with structures/designs, something, at least my brain wasn't capable/ready for, sighs.</p>\n\n",
      "PostDate": "2017-07-04T18:51:35.1010457Z",
      "LastEditDate": "2017-07-04T19:11:48.0729244Z",
      "link": null
    },
    {
      "PostId": "e44050a3-65a5-4fff-a19c-0842451588e0",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> (if you want/need to do so) how to store the Value from Pixie's example of 'ListCount'\r\n\r\n> give your container stack an Integer Attribute, for example name: 'quantity'\r\n\r\nI would actually advise against that. Better to get the value with ListCount whenyou need it, because you can be confident that is right, rather than rely on an attribute getting updated everytime. This is why Quest does not have a list of inventory items as an attribute of the player - and in fact very rarely (if ever) uses object lists as attributes.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>(if you want/need to do so) how to store the Value from Pixie's example of 'ListCount'</p>\n</blockquote>\n<blockquote>\n<p>give your container stack an Integer Attribute, for example name: 'quantity'</p>\n</blockquote>\n<p>I would actually advise against that. Better to get the value with ListCount whenyou need it, because you can be confident that is right, rather than rely on an attribute getting updated everytime. This is why Quest does not have a list of inventory items as an attribute of the player - and in fact very rarely (if ever) uses object lists as attributes.</p>\n\n",
      "PostDate": "2017-07-04T19:22:26.8153917Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "057ba227-86c4-42cb-ad26-4a7e6ab8d907",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "true, good points, I never would have, thought-of or realized, them.\r\n\r\nAs Pixie pointed out:\r\n\r\nif you were to decide to store the quantity count into an Attribute of your container Object, you got to know what you're doing, as there's a lot of issues with it, if you're not careful.",
      "EditableFormat": "markdown",
      "HTML": "<p>true, good points, I never would have, thought-of or realized, them.</p>\n<p>As Pixie pointed out:</p>\n<p>if you were to decide to store the quantity count into an Attribute of your container Object, you got to know what you're doing, as there's a lot of issues with it, if you're not careful.</p>\n\n",
      "PostDate": "2017-07-05T01:00:45.5081387Z",
      "LastEditDate": "2017-07-05T01:02:57.931232Z",
      "link": null
    },
    {
      "PostId": "3e7d2519-31a1-4fb8-bc35-87a3eff9c5d5",
      "UserId": 285980,
      "Username": "Marzseaz",
      "AvatarUrl": "https://secure.gravatar.com/avatar/01769e2fb22e5fc6a3d142e51acf0b9f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm using a second inventory in my game.  By default the stacks always appear in the player's primary inventory, but _sometimes_ (not always) I would like the stacks to appear in the player's second inventory instead. Is there any way to determine which stacks go where?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm using a second inventory in my game.  By default the stacks always appear in the player's primary inventory, but <em>sometimes</em> (not always) I would like the stacks to appear in the player's second inventory instead. Is there any way to determine which stacks go where?</p>\n\n",
      "PostDate": "2017-07-05T09:33:49.9013713Z",
      "LastEditDate": "2017-07-05T09:35:05.6089845Z",
      "link": null
    },
    {
      "PostId": "6a4215ee-468f-47c9-acb7-49ea3d4c176b",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"_Secondly, how can I get this system to work with clones? For example, say I had a fountain in my game that the player can retrieve water from. The way that I'm currently attempting to do this is to have a water object and a water stack object. When the player retrieves some water from the fountain, it clones the water object to the player's inventory. At the moment this just adds more copies of the water object to the player's inventory. What I'd like to be able to do is add the stack to the player's inventory, then just increase the count of objects in that stack (i.e. Water: 1, Water: 2 etc...). Is there any way to do this?_\"\r\n\r\nPersonally, I'd make a clone, I'm pretty sure they'd stack, but I'm not totally sure myself how m to put them in the inventory straight away. I'd put Water in a safe room the player can't get to. Then I'd have a turn script to check if there is Water in the fountain room. If no, then clone water and move to fountain room, so it's an object the player can pick up constantly. Clones are stackable, so. I think there'd probably be better ways to do this.",
      "EditableFormat": "markdown",
      "HTML": "<p>\"<em>Secondly, how can I get this system to work with clones? For example, say I had a fountain in my game that the player can retrieve water from. The way that I'm currently attempting to do this is to have a water object and a water stack object. When the player retrieves some water from the fountain, it clones the water object to the player's inventory. At the moment this just adds more copies of the water object to the player's inventory. What I'd like to be able to do is add the stack to the player's inventory, then just increase the count of objects in that stack (i.e. Water: 1, Water: 2 etc...). Is there any way to do this?</em>\"</p>\n<p>Personally, I'd make a clone, I'm pretty sure they'd stack, but I'm not totally sure myself how m to put them in the inventory straight away. I'd put Water in a safe room the player can't get to. Then I'd have a turn script to check if there is Water in the fountain room. If no, then clone water and move to fountain room, so it's an object the player can pick up constantly. Clones are stackable, so. I think there'd probably be better ways to do this.</p>\n\n",
      "PostDate": "2017-07-05T10:48:16.2698473Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "767d2b72-318d-4049-9967-983dd83b1461",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm okay, I'll see if I can get that method to work.  Thanks for the help everyone!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm okay, I'll see if I can get that method to work.  Thanks for the help everyone!</p>\n\n",
      "PostDate": "2017-07-08T14:14:27.3244554Z",
      "LastEditDate": "2017-07-08T14:15:07.0839811Z",
      "link": null
    },
    {
      "PostId": "d00adca8-6ee8-4818-8893-d83072423b46",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Kinda what Jennifer was saying use a clone, but pick up actual item and increase the items volume by +1. Then when you use item -1 from the items volume then. So this is what you do, first add script to on enter room, clone and add heath pack to room. Then on the item health pack add this script to inventory on Take \r\n```\r\nif (Got(health)) {\r\n  IncreaseObjectCounter (health, \"volume\")\r\n  RemoveObject (this)\r\n}\r\nelse if (not Got(health)) {\r\n    RemoveObject (this)\r\n    AddToInventory (health)\r\n    IncreaseObjectCounter (health, \"volume\")\r\n  }\r\n\r\n\r\n```\r\n\r\nand add this script to on Drop\r\n```\r\nif (Got(health)) {\r\n  if (GetInt(health, \"volume\") >= 2) {\r\n    DecreaseObjectCounter (health, \"volume\")\r\n    CloneObjectAndMove (health, player.parent)\r\n  }\r\n  else if (GetInt(health, \"volume\") = 1) {\r\n    DecreaseObjectCounter (health, \"volume\")\r\n    MoveObject (health, Items*)\r\n    CloneObjectAndMove (health, player.parent)\r\n  }\r\n}\r\n```\r\n*Pay attention to this by items, this is a room i made to hold items when their not in play.\r\n\r\nThis should give you the results without having to do much. Also to show how many you have of something either make a verb or add this to the Look At script as a print expression \r\n```\r\n\"You have  \" +health.volume+ \"health packs available\" \r\n```\r\nThe +health.volume+ will print the number that is in stack so you know how many you have.",
      "EditableFormat": "markdown",
      "HTML": "<p>Kinda what Jennifer was saying use a clone, but pick up actual item and increase the items volume by +1. Then when you use item -1 from the items volume then. So this is what you do, first add script to on enter room, clone and add heath pack to room. Then on the item health pack add this script to inventory on Take</p>\n<pre><code>if (Got(health)) {\n  IncreaseObjectCounter (health, \"volume\")\n  RemoveObject (this)\n}\nelse if (not Got(health)) {\n    RemoveObject (this)\n    AddToInventory (health)\n    IncreaseObjectCounter (health, \"volume\")\n  }\n\n\n</code></pre>\n<p>and add this script to on Drop</p>\n<pre><code>if (Got(health)) {\n  if (GetInt(health, \"volume\") &gt;= 2) {\n    DecreaseObjectCounter (health, \"volume\")\n    CloneObjectAndMove (health, player.parent)\n  }\n  else if (GetInt(health, \"volume\") = 1) {\n    DecreaseObjectCounter (health, \"volume\")\n    MoveObject (health, Items*)\n    CloneObjectAndMove (health, player.parent)\n  }\n}\n</code></pre>\n<p>*Pay attention to this by items, this is a room i made to hold items when their not in play.</p>\n<p>This should give you the results without having to do much. Also to show how many you have of something either make a verb or add this to the Look At script as a print expression</p>\n<pre><code>\"You have  \" +health.volume+ \"health packs available\" \n</code></pre>\n<p>The +health.volume+ will print the number that is in stack so you know how many you have.</p>\n\n",
      "PostDate": "2017-07-17T02:46:39.5793227Z",
      "LastEditDate": "2017-07-17T12:15:43.2305342Z",
      "link": null
    },
    {
      "PostId": "d5fd8e61-db23-4dbe-8096-a4dbf0b36fce",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Marzseaz wrote:\r\n**I'm using a second inventory in my game. By default the stacks always appear in the player's primary inventory, but sometimes (not always) I would like the stacks to appear in the player's second inventory instead. Is there any way to determine which stacks go where?**\r\n\r\nTo use the second inventory pane you have to set the attribute manually every time. So best option to use that pane is use it for magic or skills so you only need to update it when you gain a new skill, but remember you have to also add any old skills that you had on there before or they will disappear from the second inv pane. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Marzseaz wrote:<br>\n<strong>I'm using a second inventory in my game. By default the stacks always appear in the player's primary inventory, but sometimes (not always) I would like the stacks to appear in the player's second inventory instead. Is there any way to determine which stacks go where?</strong></p>\n<p>To use the second inventory pane you have to set the attribute manually every time. So best option to use that pane is use it for magic or skills so you only need to update it when you gain a new skill, but remember you have to also add any old skills that you had on there before or they will disappear from the second inv pane.</p>\n\n",
      "PostDate": "2017-07-17T12:08:40.0614399Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
