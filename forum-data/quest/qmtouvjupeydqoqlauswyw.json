{
  "Topic": {
    "TopicId": "qmtouvjupeydqoqlauswyw",
    "ForumId": "10",
    "Title": "How to make RPG status effects?",
    "LastUpdated": "2017-01-06T02:11:14.4917439Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4e050a79-124c-487f-949f-1ed74def2e1f",
      "UserId": 285479,
      "Username": "MrOrangeHorseman",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4d2afcdbbfc5e1fd1319a336bcc6d38c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to include status effects(such as Poison and Burning) in my text adventure game. How do I do this? Could I make \"tiers\" (eg: Sleep I, Poison II, Burning III) of status effects?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to include status effects(such as Poison and Burning) in my text adventure game. How do I do this? Could I make \"tiers\" (eg: Sleep I, Poison II, Burning III) of status effects?</p>\n\n",
      "PostDate": "2017-01-06T02:11:14.4917439Z",
      "LastEditDate": null
    },
    {
      "PostId": "6792d1cb-3714-4af6-a05f-558832cb9a7b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's a link that might help:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/scfqhpml7u_c1ptmsl4mlg/programming-diseases-on-web-version (it's a bit of a ways down for specifically doing conditions, but you might want to start from the beginning of the thread anyways)\r\n\r\notherwise, you can try to jump into learning Attributes and the 'if' Script, to understand well on how to do this stuff:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk\r\n\r\n------\r\n\r\nthere's a few different ways of doing this (explained already in the top/first link, but oh well):\r\n\r\n1. using Boolean Attributes:\r\n\r\ncumbersome (negative/con): you have a Boolean Attribute for every status-effect / condition, for examples (using scripting and just the 'player' Player Object):\r\n\r\n(their initial/starting states):\r\nplayer.normal = true\r\nplayer.poisoned = false\r\nplayer.petrified = false\r\nplayer.paralyzed = false\r\nplayer.asleep = false\r\nplayer.dead = false\r\nplayer.unconscious = false\r\nplayer.silenced = false\r\nplayer.confused = false\r\nplayer.stunned = false\r\netc etc etc\r\n\r\nable to have multiple effects/states (status effects / conditions) at the same time (positive/pro):\r\n\r\nplayer.normal = false\r\nplayer.poisoned = true\r\nplayer.petrified = false\r\nplayer.paralyzed = false\r\nplayer.asleep = true\r\nplayer.dead = false\r\nplayer.unconscious = false\r\nplayer.silenced = true\r\nplayer.confused = false\r\nplayer.stunned = false\r\n\r\nsimplistic (most people easily grasp the concept of Boolean Attribute usage, 'true' or 'false', whereas they struggle a bit more with String Attributes and their use of 'string matching') (positive/pro)\r\n\r\n```\r\nBoolean Attribute usage:\r\n\r\nif (player.flying) { // this shorthand syntax is understood by quest as being: if (player.flying = true) {\r\n  msg (\"you're flying, you're flying! Weee! you're flying like superman!\")\r\n} else { // since this is Booleans (dualism of choices / only 2 choices), you don't need to use an 'else if'. but conceptually you're doing this: else if (player.flying = false) {\r\n  msg (\"you can't fly, you silly, it's impossible! People can't fly like superman.\")\r\n}\r\n\r\nvs\r\n\r\nString Attribute usage:\r\n\r\n// player.action = \"flying\"\r\nif (player.action = \"flying\") {\r\n  msg (\"you're flying!\")\r\n} else if (player.action = \"falling\") {\r\n  msg (\"you're falling!\")\r\n} else if (player.action = \"swimming\") {\r\n  msg (\"you're swimming!\")\r\n} else if (player.action = \"walking\") {\r\n  msg (\"you're walking!\")\r\n} else if (player.action = \"running\") {\r\n  msg (\"you're running!\")\r\n} else {\r\n  msg (\"blah blah blah\")\r\n}\r\n// what is going on:\r\n// player.action = \"flying\"\r\n// if (player.action = \"flying\") {\r\n// if (\"flying\" = \"flying\")\r\n// if (\"f\" = \"f\")\r\n// if (\"l\" = \"l\")\r\n// if (\"y\" = \"y\")\r\n// etc etc ifs until all the letters are compared or there's a mismatch (a failed letter to letter comparison)\r\n// if ALL of the letter matching succeeds, which in this case it does (\"flying\" = \"flying\"), then the condition is TRUE: if (\"flying\" = \"flying) ---> TRUE\r\n// and thus it does its nested scripting for being TRUE, which would be the 'msg (\"you're flying\")', all following 'else ifs' and/or 'else' (of THAT/THIS 'if' block) is skipped over, as the 'if' block has executed one of its conditions\r\n\r\nbut let's take a look at this:\r\n\r\n// player.action = \"walking\"\r\nif (player.action = \"flying\") {\r\n  msg (\"you're flying!\")\r\n} else if (player.action = \"falling\") {\r\n  msg (\"you're falling!\")\r\n} else if (player.action = \"swimming\") {\r\n  msg (\"you're swimming!\")\r\n} else if (player.action = \"walking\") {\r\n  msg (\"you're walking!\")\r\n} else if (player.action = \"running\") {\r\n  msg (\"you're running!\")\r\n} else {\r\n  msg (\"blah blah blah\")\r\n}\r\n// what is going on:\r\n// player.action = \"walking\"\r\n// if (player.action = \"flying\") {\r\n// if (\"walking\" = \"flying\")\r\n// if (\"w\" = \"f\")\r\n// FAILURE, move to the next condition (the first 'else if'):\r\n// else if (player.action = \"falling\")\r\n// else if (\"walking\" = \"falling\")\r\n// if (\"w\" = \"f\")\r\n// FAILURE, move to the next condition (the second 'else if'):\r\n// else if (player.action = \"swimming\") {\r\n// else if (\"walking\" = \"swimming\") {\r\n// if (\"w\" = \"s\")\r\n// FAILURE, move to the next condition (the third 'else if'):\r\n// else if (player.action = \"walking\") {\r\n// else if (\"walking\" = \"walking\") {\r\n// if (each of the letters: if w=w if a=a if l=l etc etc etc, which is a full match)\r\n// SUCCESS, run its nested scripting, which is 'msg (\"you're walking\")\r\n// all following 'else ifs' and/or 'else' (of THAT/THIS 'if' block) is skipped over, as the 'if' block has executed one of its conditions\r\n\r\nand one last example:\r\n\r\n// player.action = \"reading\"\r\nif (player.action = \"flying\") {\r\n  msg (\"you're flying!\")\r\n} else if (player.action = \"falling\") {\r\n  msg (\"you're falling!\")\r\n} else if (player.action = \"swimming\") {\r\n  msg (\"you're swimming!\")\r\n} else if (player.action = \"walking\") {\r\n  msg (\"you're walking!\")\r\n} else if (player.action = \"running\") {\r\n  msg (\"you're running!\")\r\n} else {\r\n  msg (\"blah blah blah\")\r\n}\r\n// all conditions (the 'if' and all 'else ifs') fail, except the catch-all/default 'else' condition, and thus its nested scripting is done, which is 'msg (\"blah blah blah\")\r\n// for the 'running' condition, the 'if (\"r\" = \"r\") succeeds, but the next letter fails: if (\"e\" = \"u\"), and so it moves to the next/last condition, the 'else' condition\r\n```\r\n\r\n2. using String Attributes:\r\n\r\nnon-cumbersome (only a single String Attribute is needed) (positive/pro):\r\n\r\n(initial/starting state)\r\nplayer.status_effects_or_condition = \"normal\"\r\n\r\nUN-able to have multiple states/effects (well with using a single String Attribute, anyways, though using multiple String Attributes, ie 'player.status_effect_or_condition_1 = \"sleep\", player.status_effect_or_condition_2 = \"poisoned\", etc etc etc' would be a bit logically weird as well as can be seen) (negative/con):\r\n\r\nplayer.status_effects_or_condition = \"normal\"\r\nor\r\nplayer.status_effects_or_condition = \"poisoned\"\r\nor\r\nplayer.status_effects_or_condition = \"confused\"\r\nor\r\netc etc etc\r\n\r\nlimited to only a single state/effect at a time\r\n\r\n3. using String List Attributes\r\n\r\nmore overhead, but for large scale and/or complexity, more efficient and easier to implement (though learning List Attributes is more advanced than the basic Attributes of: String Attributes, Boolean Attributes, Object Attributes, Integer:int:non-decimal-numbers Attributes, and Double/Floats/Floating-Points/decimal-numbers Attributes) and non-cumbersome and able to have multiple effects/states at the same time (net positive/pro, especially at the larger scale and/or greater complexity)\r\n\r\n(initial/starting effects/states)\r\nplayer.status_effects_or_conditions = NewStringList () // creates a String List (and thus it's empty of items)\r\nlist add (player.status_effects_or_condition, \"normal\")\r\n\r\nmanipulation methods:\r\n\r\nlist add / list remove (NAME_OF_OBJECT.NAME_OF_LIST_ATTRIBUTE, \"NAME_OF_LIST_ITEM\")\r\n\r\nor (this over-rides/writes/re-writes your old list (the 'split' is also a quick way of creating a list too), so at a technical level it's different from merely removing/adding the list's items via 'list add / list remove', but are otherwise the same thing)\r\n\r\nplayer.status_effects_or_condition = split (\"item1;item2;item3;etc etc etc\", \";\")\r\n\r\n-------------\r\n\r\nas for then using them:\r\n\r\nyou'd use the 'if' Script, for example (using String Attributes):\r\n\r\n```\r\n<turnscript name=\"global_turnscript\">\r\n  <enabled />\r\n  <script>\r\n    if (player.status_effects_or_condition = \"poisoned\") {\r\n      player.current_life_integer_attribute = player.current_life_integer_attribute - 50\r\n    } else if (player.status_effects_or_condition = \"dead\") {\r\n      msg (\"You died or were killed.\")\r\n      msg (\"GAME OVER\")\r\n      finish\r\n    }\r\n    // etc 'else ifs' for your various effects/states/status-effects/conditions\r\n  </script>\r\n</turnscript>\r\n\r\nor you can use the special 'changed' Script Attribute too, for example (using the 'game' Game Settings/Etc Object and a custom 'game.turns_integer_attribute' counter Integer Attribute):\r\n\r\n<turnscript name=\"global_turnscript\">\r\n  <enabled />\r\n  <script>\r\n    game.turns_integer_attribute = game.turns_integer_attribute + 1\r\n  </script>\r\n</turnscript>\r\n\r\n<game name=\"xxx\">\r\n  <attr name=\"statusattributes\" type=\"simplestringdictionary\">turns_integer_attribute = Turns: !</attr> // this will display them during game play on the 'whatever it is called' pane on the right side\r\n  <attr name=\"turns_integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"changedturns_integer_attribute\" type=\"script\">\r\n     if (player.status_effects_or_condition = \"poisoned\") {\r\n      player.current_life_integer_attribute = player.current_life_integer_attribute - 50\r\n    } else if (player.status_effects_or_condition = \"dead\") {\r\n      msg (\"You died or were killed.\")\r\n      msg (\"GAME OVER\")\r\n      finish\r\n    }\r\n    // etc 'else ifs' for your various effects/states/status-effects/conditions\r\n  </attr>\r\n</game>\r\n\r\n--------\r\n\r\nfor more detailed explanation see my 'attributes and if script' link/guide\r\n\r\nask if you got any questions or need any help with any of this stuff\r\n\r\n(using String List Attributes is a different beast, if you want to use them, let me know, and I'll make a post on using them)",
      "EditableFormat": "markdown",
      "HTML": "<p>here's a link that might help:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/scfqhpml7u_c1ptmsl4mlg/programming-diseases-on-web-version (it's a bit of a ways down for specifically doing conditions, but you might want to start from the beginning of the thread anyways)</p>\n<p>otherwise, you can try to jump into learning Attributes and the 'if' Script, to understand well on how to do this stuff:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk</p>\n<hr>\n<p>there's a few different ways of doing this (explained already in the top/first link, but oh well):</p>\n<ol>\n<li>using Boolean Attributes:</li>\n</ol>\n<p>cumbersome (negative/con): you have a Boolean Attribute for every status-effect / condition, for examples (using scripting and just the 'player' Player Object):</p>\n<p>(their initial/starting states):<br>\nplayer.normal = true<br>\nplayer.poisoned = false<br>\nplayer.petrified = false<br>\nplayer.paralyzed = false<br>\nplayer.asleep = false<br>\nplayer.dead = false<br>\nplayer.unconscious = false<br>\nplayer.silenced = false<br>\nplayer.confused = false<br>\nplayer.stunned = false<br>\netc etc etc</p>\n<p>able to have multiple effects/states (status effects / conditions) at the same time (positive/pro):</p>\n<p>player.normal = false<br>\nplayer.poisoned = true<br>\nplayer.petrified = false<br>\nplayer.paralyzed = false<br>\nplayer.asleep = true<br>\nplayer.dead = false<br>\nplayer.unconscious = false<br>\nplayer.silenced = true<br>\nplayer.confused = false<br>\nplayer.stunned = false</p>\n<p>simplistic (most people easily grasp the concept of Boolean Attribute usage, 'true' or 'false', whereas they struggle a bit more with String Attributes and their use of 'string matching') (positive/pro)</p>\n<pre><code>Boolean Attribute usage:\n\nif (player.flying) { // this shorthand syntax is understood by quest as being: if (player.flying = true) {\n  msg (\"you're flying, you're flying! Weee! you're flying like superman!\")\n} else { // since this is Booleans (dualism of choices / only 2 choices), you don't need to use an 'else if'. but conceptually you're doing this: else if (player.flying = false) {\n  msg (\"you can't fly, you silly, it's impossible! People can't fly like superman.\")\n}\n\nvs\n\nString Attribute usage:\n\n// player.action = \"flying\"\nif (player.action = \"flying\") {\n  msg (\"you're flying!\")\n} else if (player.action = \"falling\") {\n  msg (\"you're falling!\")\n} else if (player.action = \"swimming\") {\n  msg (\"you're swimming!\")\n} else if (player.action = \"walking\") {\n  msg (\"you're walking!\")\n} else if (player.action = \"running\") {\n  msg (\"you're running!\")\n} else {\n  msg (\"blah blah blah\")\n}\n// what is going on:\n// player.action = \"flying\"\n// if (player.action = \"flying\") {\n// if (\"flying\" = \"flying\")\n// if (\"f\" = \"f\")\n// if (\"l\" = \"l\")\n// if (\"y\" = \"y\")\n// etc etc ifs until all the letters are compared or there's a mismatch (a failed letter to letter comparison)\n// if ALL of the letter matching succeeds, which in this case it does (\"flying\" = \"flying\"), then the condition is TRUE: if (\"flying\" = \"flying) ---&gt; TRUE\n// and thus it does its nested scripting for being TRUE, which would be the 'msg (\"you're flying\")', all following 'else ifs' and/or 'else' (of THAT/THIS 'if' block) is skipped over, as the 'if' block has executed one of its conditions\n\nbut let's take a look at this:\n\n// player.action = \"walking\"\nif (player.action = \"flying\") {\n  msg (\"you're flying!\")\n} else if (player.action = \"falling\") {\n  msg (\"you're falling!\")\n} else if (player.action = \"swimming\") {\n  msg (\"you're swimming!\")\n} else if (player.action = \"walking\") {\n  msg (\"you're walking!\")\n} else if (player.action = \"running\") {\n  msg (\"you're running!\")\n} else {\n  msg (\"blah blah blah\")\n}\n// what is going on:\n// player.action = \"walking\"\n// if (player.action = \"flying\") {\n// if (\"walking\" = \"flying\")\n// if (\"w\" = \"f\")\n// FAILURE, move to the next condition (the first 'else if'):\n// else if (player.action = \"falling\")\n// else if (\"walking\" = \"falling\")\n// if (\"w\" = \"f\")\n// FAILURE, move to the next condition (the second 'else if'):\n// else if (player.action = \"swimming\") {\n// else if (\"walking\" = \"swimming\") {\n// if (\"w\" = \"s\")\n// FAILURE, move to the next condition (the third 'else if'):\n// else if (player.action = \"walking\") {\n// else if (\"walking\" = \"walking\") {\n// if (each of the letters: if w=w if a=a if l=l etc etc etc, which is a full match)\n// SUCCESS, run its nested scripting, which is 'msg (\"you're walking\")\n// all following 'else ifs' and/or 'else' (of THAT/THIS 'if' block) is skipped over, as the 'if' block has executed one of its conditions\n\nand one last example:\n\n// player.action = \"reading\"\nif (player.action = \"flying\") {\n  msg (\"you're flying!\")\n} else if (player.action = \"falling\") {\n  msg (\"you're falling!\")\n} else if (player.action = \"swimming\") {\n  msg (\"you're swimming!\")\n} else if (player.action = \"walking\") {\n  msg (\"you're walking!\")\n} else if (player.action = \"running\") {\n  msg (\"you're running!\")\n} else {\n  msg (\"blah blah blah\")\n}\n// all conditions (the 'if' and all 'else ifs') fail, except the catch-all/default 'else' condition, and thus its nested scripting is done, which is 'msg (\"blah blah blah\")\n// for the 'running' condition, the 'if (\"r\" = \"r\") succeeds, but the next letter fails: if (\"e\" = \"u\"), and so it moves to the next/last condition, the 'else' condition\n</code></pre>\n<ol start=\"2\">\n<li>using String Attributes:</li>\n</ol>\n<p>non-cumbersome (only a single String Attribute is needed) (positive/pro):</p>\n<p>(initial/starting state)<br>\nplayer.status_effects_or_condition = \"normal\"</p>\n<p>UN-able to have multiple states/effects (well with using a single String Attribute, anyways, though using multiple String Attributes, ie 'player.status_effect_or_condition_1 = \"sleep\", player.status_effect_or_condition_2 = \"poisoned\", etc etc etc' would be a bit logically weird as well as can be seen) (negative/con):</p>\n<p>player.status_effects_or_condition = \"normal\"<br>\nor<br>\nplayer.status_effects_or_condition = \"poisoned\"<br>\nor<br>\nplayer.status_effects_or_condition = \"confused\"<br>\nor<br>\netc etc etc</p>\n<p>limited to only a single state/effect at a time</p>\n<ol start=\"3\">\n<li>using String List Attributes</li>\n</ol>\n<p>more overhead, but for large scale and/or complexity, more efficient and easier to implement (though learning List Attributes is more advanced than the basic Attributes of: String Attributes, Boolean Attributes, Object Attributes, Integer:int:non-decimal-numbers Attributes, and Double/Floats/Floating-Points/decimal-numbers Attributes) and non-cumbersome and able to have multiple effects/states at the same time (net positive/pro, especially at the larger scale and/or greater complexity)</p>\n<p>(initial/starting effects/states)<br>\nplayer.status_effects_or_conditions = NewStringList () // creates a String List (and thus it's empty of items)<br>\nlist add (player.status_effects_or_condition, \"normal\")</p>\n<p>manipulation methods:</p>\n<p>list add / list remove (NAME_OF_OBJECT.NAME_OF_LIST_ATTRIBUTE, \"NAME_OF_LIST_ITEM\")</p>\n<p>or (this over-rides/writes/re-writes your old list (the 'split' is also a quick way of creating a list too), so at a technical level it's different from merely removing/adding the list's items via 'list add / list remove', but are otherwise the same thing)</p>\n<p>player.status_effects_or_condition = split (\"item1;item2;item3;etc etc etc\", \";\")</p>\n<hr>\n<p>as for then using them:</p>\n<p>you'd use the 'if' Script, for example (using String Attributes):</p>\n<pre><code>&lt;turnscript name=\"global_turnscript\"&gt;\n  &lt;enabled /&gt;\n  &lt;script&gt;\n    if (player.status_effects_or_condition = \"poisoned\") {\n      player.current_life_integer_attribute = player.current_life_integer_attribute - 50\n    } else if (player.status_effects_or_condition = \"dead\") {\n      msg (\"You died or were killed.\")\n      msg (\"GAME OVER\")\n      finish\n    }\n    // etc 'else ifs' for your various effects/states/status-effects/conditions\n  &lt;/script&gt;\n&lt;/turnscript&gt;\n\nor you can use the special 'changed' Script Attribute too, for example (using the 'game' Game Settings/Etc Object and a custom 'game.turns_integer_attribute' counter Integer Attribute):\n\n&lt;turnscript name=\"global_turnscript\"&gt;\n  &lt;enabled /&gt;\n  &lt;script&gt;\n    game.turns_integer_attribute = game.turns_integer_attribute + 1\n  &lt;/script&gt;\n&lt;/turnscript&gt;\n\n&lt;game name=\"xxx\"&gt;\n  &lt;attr name=\"statusattributes\" type=\"simplestringdictionary\"&gt;turns_integer_attribute = Turns: !&lt;/attr&gt; // this will display them during game play on the 'whatever it is called' pane on the right side\n  &lt;attr name=\"turns_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"changedturns_integer_attribute\" type=\"script\"&gt;\n     if (player.status_effects_or_condition = \"poisoned\") {\n      player.current_life_integer_attribute = player.current_life_integer_attribute - 50\n    } else if (player.status_effects_or_condition = \"dead\") {\n      msg (\"You died or were killed.\")\n      msg (\"GAME OVER\")\n      finish\n    }\n    // etc 'else ifs' for your various effects/states/status-effects/conditions\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n--------\n\nfor more detailed explanation see my 'attributes and if script' link/guide\n\nask if you got any questions or need any help with any of this stuff\n\n(using String List Attributes is a different beast, if you want to use them, let me know, and I'll make a post on using them)\n</code></pre>\n\n",
      "PostDate": "2017-01-06T04:29:49.2884743Z",
      "LastEditDate": "2017-01-06T05:38:14.5272039Z"
    },
    {
      "PostId": "5f1e554b-f951-4ad8-93e3-b9d4ee0fb41c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "yes, you can make tiers, for example (using String Attributes again):\r\n\r\n```\r\nplayer.status_effect = \"normal\"\r\nor\r\nplayer.status_effect = \"poisoned_1\"\r\nor\r\nplayer.status_effect = \"poisoned_2\"\r\nor\r\nplayer.status_effect = \"poisoned_3\"\r\nor\r\nplayer.status_effect = \"rust_1\"\r\nor\r\nplayer.status_effect = \"rust_2\"\r\nor\r\nplayer.status_effect = \"rust_3\"\r\n\r\n// and then using them (just quick simple scripting example):\r\n\r\nif (player.status_effect = \"normal\") {\r\n  msg (\"You're healthy\")\r\n} else if (player.status_effect = \"poisoned_1\") {\r\n  player.current_life_integer_attribute = player.current_life_integer_attribute - 50\r\n} else if (player.status_effect = \"poisoned_2\") {\r\n  player.current_life_integer_attribute = player.current_life_integer_attribute - 100\r\n} else if (player.status_effect = \"poisoned_3\") {\r\n  player.current_life_integer_attribute = player.current_life_integer_attribute - 500\r\n} else if (player.status_effect = \"rust_1\") {\r\n  player.weapon.durability = player.weapon.durability - 50\r\n} else if (player.status_effect = \"rust_2\") {\r\n  player.weapon.durability = player.weapon.durability - 100\r\n} else if (player.status_effect = \"rust_3\") {\r\n  player.weapon.durability = player.weapon.durability - 500\r\n}  \r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>yes, you can make tiers, for example (using String Attributes again):</p>\n<pre><code>player.status_effect = \"normal\"\nor\nplayer.status_effect = \"poisoned_1\"\nor\nplayer.status_effect = \"poisoned_2\"\nor\nplayer.status_effect = \"poisoned_3\"\nor\nplayer.status_effect = \"rust_1\"\nor\nplayer.status_effect = \"rust_2\"\nor\nplayer.status_effect = \"rust_3\"\n\n// and then using them (just quick simple scripting example):\n\nif (player.status_effect = \"normal\") {\n  msg (\"You're healthy\")\n} else if (player.status_effect = \"poisoned_1\") {\n  player.current_life_integer_attribute = player.current_life_integer_attribute - 50\n} else if (player.status_effect = \"poisoned_2\") {\n  player.current_life_integer_attribute = player.current_life_integer_attribute - 100\n} else if (player.status_effect = \"poisoned_3\") {\n  player.current_life_integer_attribute = player.current_life_integer_attribute - 500\n} else if (player.status_effect = \"rust_1\") {\n  player.weapon.durability = player.weapon.durability - 50\n} else if (player.status_effect = \"rust_2\") {\n  player.weapon.durability = player.weapon.durability - 100\n} else if (player.status_effect = \"rust_3\") {\n  player.weapon.durability = player.weapon.durability - 500\n}  \n</code></pre>\n\n",
      "PostDate": "2017-01-06T05:36:47.7436569Z",
      "LastEditDate": "2017-01-06T05:48:25.3033299Z"
    },
    {
      "PostId": "55fab3f2-3976-4801-83ab-9e012235b74a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I love RPGs! I too am forever slowly trying to learn/make a TES (skyrim, oblivion, morrowind, etc) like RPG with quest... far too ambitious and beyond my coding ability, but oh well, lol.\r\n\r\nif interested, I can give a lot of RPGs for ideas for you, as I've played a lot of RPGs...\r\n\r\nif you don't know about this epic fan-made mod for Civ4/BtS, you should take a look at it, as they got some really cool ideas/mechanics/features:\r\n\r\nFall from Heaven II\r\n\r\nhttps://forums.civfanatics.com/threads/mod-fall-from-heaven-ii.171398/\r\nhttps://forums.civfanatics.com/forums/civ4-fall-from-heaven.190/\r\nhttp://kael.civfanatics.ne.t/\r\nhttps://forums.civfanatics.com/resources/ffh-2-manual.8635/ (if you don't mind downloading this manual, it shows a lot of FFH2's features)\r\n\r\nmove the dot/period from the between the 'e' and 't' in the '.net'\r\n\r\nthe links aren't allowed... so just google search it... nvm (only the '.net' is blocked)",
      "EditableFormat": "markdown",
      "HTML": "<p>I love RPGs! I too am forever slowly trying to learn/make a TES (skyrim, oblivion, morrowind, etc) like RPG with quest... far too ambitious and beyond my coding ability, but oh well, lol.</p>\n<p>if interested, I can give a lot of RPGs for ideas for you, as I've played a lot of RPGs...</p>\n<p>if you don't know about this epic fan-made mod for Civ4/BtS, you should take a look at it, as they got some really cool ideas/mechanics/features:</p>\n<p>Fall from Heaven II</p>\n<p>https://forums.civfanatics.com/threads/mod-fall-from-heaven-ii.171398/<br>\nhttps://forums.civfanatics.com/forums/civ4-fall-from-heaven.190/<br>\nhttp://kael.civfanatics.ne.t/<br>\nhttps://forums.civfanatics.com/resources/ffh-2-manual.8635/ (if you don't mind downloading this manual, it shows a lot of FFH2's features)</p>\n<p>move the dot/period from the between the 'e' and 't' in the '.net'</p>\n<p>the links aren't allowed... so just google search it... nvm (only the '.net' is blocked)</p>\n\n",
      "PostDate": "2017-01-06T05:53:00.2459916Z",
      "LastEditDate": "2017-01-06T06:02:16.5469663Z"
    },
    {
      "PostId": "ed81b136-f397-430a-ac83-5dbd3e65e544",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would handle these as integer attributes, and to set the status to Poison II, for example, do:\r\n```\r\nplayer.poison = 2\r\n```\r\nRPGs are very complex; keep it simple where you can. If you are interested, I have a library and a set of tutorials on how to use, which might help in general, though not this specific issue:\r\nhttps://github.com/ThePix/quest/wiki/CombatLib",
      "EditableFormat": "markdown",
      "HTML": "<p>I would handle these as integer attributes, and to set the status to Poison II, for example, do:</p>\n<pre><code>player.poison = 2\n</code></pre>\n<p>RPGs are very complex; keep it simple where you can. If you are interested, I have a library and a set of tutorials on how to use, which might help in general, though not this specific issue:<br>\nhttps://github.com/ThePix/quest/wiki/CombatLib</p>\n\n",
      "PostDate": "2017-01-06T09:20:04.5113226Z",
      "LastEditDate": null
    }
  ]
}
