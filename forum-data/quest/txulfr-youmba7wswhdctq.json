{
  "Topic": {
    "TopicId": "txulfr-youmba7wswhdctq",
    "ForumId": "10",
    "Title": "I'm trying to find a way to add an synonym",
    "LastUpdated": "2020-01-08T04:20:37.6097905Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d8b388ca-2a22-4e0d-8546-99512b167cfd",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In my adventure when the player open or reads a certain book a key falls out of the book\r\nI have a script for the verb read but need to have \"open\" as an alternative word so the the same script is run if the player types \"read book\" or \"open book\".\r\nThe only way I've found to do this is to make the book an openable/closed object but I feel there must be a better way to do this.\r\n\r\nFor example if I wanted to add the synonyms 'polish' and 'rub' to the verb 'clean' for the object 'oil lamp' and have the same script running, how would I do this?\r\nMaybe Quest is different than other text adventure creators I've used and I need to use functions instead and call the same function for each synonym used on an object. ",
      "EditableFormat": "markdown",
      "HTML": "<p>In my adventure when the player open or reads a certain book a key falls out of the book<br>\nI have a script for the verb read but need to have \"open\" as an alternative word so the the same script is run if the player types \"read book\" or \"open book\".<br>\nThe only way I've found to do this is to make the book an openable/closed object but I feel there must be a better way to do this.</p>\n<p>For example if I wanted to add the synonyms 'polish' and 'rub' to the verb 'clean' for the object 'oil lamp' and have the same script running, how would I do this?<br>\nMaybe Quest is different than other text adventure creators I've used and I need to use functions instead and call the same function for each synonym used on an object.</p>\n\n",
      "PostDate": "2020-01-08T04:20:37.6097905Z",
      "LastEditDate": "2020-01-08T04:22:54.3187665Z",
      "link": null
    },
    {
      "PostId": "4065cf7d-33ac-48e7-87d6-5fd7db7f9d85",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For the polish/rub/clean example, I believe it's possible in the desktop editor. You can open the verb and change its pattern. I think that verbs appear in the object tree to the left just like custom commands do, but there might be something you have to do to show it.\r\nThe attribute you want to change is called `pattern`. For example, the built in \"wear\" verb has the pattern `put #object# on; wear; put on; don; wear`.\r\n\r\nI could be wrong about some of that; the web editor doesn't show verbs in the editor, so it's harder to do for me.\r\n\r\n<hr />\r\n\r\nHowever, as far as making `open` and `read` the same, it's a bit less simple. This is because \"open\" is a built-in command, and so Quest won't let you use it as a verb.\r\n(verbs have a script for each object they can be used on; commands have a script as part of the command. If two commands match what the player typed, the rules to determine which one happens are complex, but commands normally beat verbs)\r\n\r\nYou don't need to write the script out twice, because it's already there. A verb is saved as a script attribute on the object.\r\nSo if you have a \"read\" verb, the object probably has an attribute named `read` which contains the script. You can run that script yourself. (The attribute name is *normally* the same as the verb, but not always. If in doubt, you can look on the object's Attributes tab for it, or look at the verb to see what its \"property\" is)\r\n\r\nSo, if you make the book openable using the core command, you could give it the following script for its \"When object is opened\" script:\r\n```\r\nthis.isopen = false\r\ndo (this, \"read\")\r\n```\r\nThe first line closes it again, so that attempting to open a book twice won't say \"It's already open\". And the second like tells it to run the script attribute named 'read'.\r\n\r\n(and in case you haven't come across it yet, any time a script is run using `do`, it sets a special variable `this` to be the current object. So in verbs or in most of the other scripts which you can edit in an object's tabs, you can use `this` as a shorthand for the name of the object)",
      "EditableFormat": "markdown",
      "HTML": "<p>For the polish/rub/clean example, I believe it's possible in the desktop editor. You can open the verb and change its pattern. I think that verbs appear in the object tree to the left just like custom commands do, but there might be something you have to do to show it.<br>\nThe attribute you want to change is called <code>pattern</code>. For example, the built in \"wear\" verb has the pattern <code>put #object# on; wear; put on; don; wear</code>.</p>\n<p>I could be wrong about some of that; the web editor doesn't show verbs in the editor, so it's harder to do for me.</p>\n<hr>\n<p>However, as far as making <code>open</code> and <code>read</code> the same, it's a bit less simple. This is because \"open\" is a built-in command, and so Quest won't let you use it as a verb.<br>\n(verbs have a script for each object they can be used on; commands have a script as part of the command. If two commands match what the player typed, the rules to determine which one happens are complex, but commands normally beat verbs)</p>\n<p>You don't need to write the script out twice, because it's already there. A verb is saved as a script attribute on the object.<br>\nSo if you have a \"read\" verb, the object probably has an attribute named <code>read</code> which contains the script. You can run that script yourself. (The attribute name is <em>normally</em> the same as the verb, but not always. If in doubt, you can look on the object's Attributes tab for it, or look at the verb to see what its \"property\" is)</p>\n<p>So, if you make the book openable using the core command, you could give it the following script for its \"When object is opened\" script:</p>\n<pre><code>this.isopen = false\ndo (this, \"read\")\n</code></pre>\n<p>The first line closes it again, so that attempting to open a book twice won't say \"It's already open\". And the second like tells it to run the script attribute named 'read'.</p>\n<p>(and in case you haven't come across it yet, any time a script is run using <code>do</code>, it sets a special variable <code>this</code> to be the current object. So in verbs or in most of the other scripts which you can edit in an object's tabs, you can use <code>this</code> as a shorthand for the name of the object)</p>\n\n",
      "PostDate": "2020-01-08T09:19:06.9285785Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "529d5e9c-3e37-478c-ba7a-b78c0a0a3b9f",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel, I'll try what you have suggested.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel, I'll try what you have suggested.</p>\n\n",
      "PostDate": "2020-01-08T10:04:57.3492902Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
