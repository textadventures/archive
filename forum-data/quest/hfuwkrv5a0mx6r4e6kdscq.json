{
  "Topic": {
    "TopicId": "hfuwkrv5a0mx6r4e6kdscq",
    "ForumId": "10",
    "Title": "Custom movements for vehicle?",
    "LastUpdated": "2019-11-16T12:36:56.3290016Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6fc8c40e-84fa-494c-980a-96fa6e3d3936",
      "UserId": 77575,
      "Username": "Juniper200",
      "AvatarUrl": "https://i.imgur.com/ps2US7Cb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I had a question a few weeks back about <a href=\"http://textadventures.co.uk/forum/quest/topic/6vje0rh-v0sbxdlikeduta/using-a-vehicle\">using a vehicle</a>. Everyone was really helpful, and I'd like to ask for a little more help now that I've had some time to ruminate on what we talked about there.\r\n\r\nI created a `drive` verb that works when the player is inside the car. It works, but it's kind of clunky - you have to get in the car and then input`drive car` to move the car to the next location. I could make `drive` apply if the player is outside the car and wants to go somewhere. That's a natural way of doing things; I wouldn't say \"I'm going to get in my car and drive to the store\" in my real life. I'd say \"I'm going to drive to the store.\" \r\n\r\nBut there are things inside the car the player has to solve and find outside of using it as a vehicle, so it would be good for it to be clear that this is a place you can perform all the usual `look` and `take` actions by allowing the player to enter and leave the car without taking it anywhere. I'd also like them to be able to get in the car, `look` and `take` and then go somewhere without leaving the car.\r\n\r\nWhat I really want is this: The player gets in the car. They see the description of the interior and find the objects hidden inside. Then they think, \"I'd really like to go southeast.\" The car doesn't have a southeast exit, but the street the car is on does. The player inputs `se` and the car and its children are moved to the street to the southeast. \r\n\r\nI have some pseudocode around this, a variation on the `drive` verb that already works:\r\n\r\n```\r\nstreet1 has exits E and SE. \r\ncar.parent = street1\r\n\r\n-----\r\n\r\nif game.pov.parent = car and car.parent = street1 \r\n\r\nget input\r\n\r\n  if here = street1\r\n\r\n      if (IsRegexMatch (\"(east|e)\", LCase (result))) {\r\n        MoveObject (car, street2)\r\n        }\r\n\r\n      else if (IsRegexMatch (\"(southeast|se)\", LCase (result))) {\r\n        MoveObject (car, street3)\r\n        }\r\n```\r\nI guess my real problem that I've taken all the words to say is that I don't know where to put this code. I could make it a script on the street exits, but the player isn't on the street - they're in the car and don't have access to those exits. Does it need to be a modification on the whole idea of movement? That seems excessive. Is there anyone who has a minute to point me in the right direction? ",
      "EditableFormat": "markdown",
      "HTML": "<p>I had a question a few weeks back about <a href=\"http://textadventures.co.uk/forum/quest/topic/6vje0rh-v0sbxdlikeduta/using-a-vehicle\">using a vehicle</a>. Everyone was really helpful, and I'd like to ask for a little more help now that I've had some time to ruminate on what we talked about there.</p>\n<p>I created a <code>drive</code> verb that works when the player is inside the car. It works, but it's kind of clunky - you have to get in the car and then input<code>drive car</code> to move the car to the next location. I could make <code>drive</code> apply if the player is outside the car and wants to go somewhere. That's a natural way of doing things; I wouldn't say \"I'm going to get in my car and drive to the store\" in my real life. I'd say \"I'm going to drive to the store.\"</p>\n<p>But there are things inside the car the player has to solve and find outside of using it as a vehicle, so it would be good for it to be clear that this is a place you can perform all the usual <code>look</code> and <code>take</code> actions by allowing the player to enter and leave the car without taking it anywhere. I'd also like them to be able to get in the car, <code>look</code> and <code>take</code> and then go somewhere without leaving the car.</p>\n<p>What I really want is this: The player gets in the car. They see the description of the interior and find the objects hidden inside. Then they think, \"I'd really like to go southeast.\" The car doesn't have a southeast exit, but the street the car is on does. The player inputs <code>se</code> and the car and its children are moved to the street to the southeast.</p>\n<p>I have some pseudocode around this, a variation on the <code>drive</code> verb that already works:</p>\n<pre><code>street1 has exits E and SE. \ncar.parent = street1\n\n-----\n\nif game.pov.parent = car and car.parent = street1 \n\nget input\n\n  if here = street1\n\n      if (IsRegexMatch (\"(east|e)\", LCase (result))) {\n        MoveObject (car, street2)\n        }\n\n      else if (IsRegexMatch (\"(southeast|se)\", LCase (result))) {\n        MoveObject (car, street3)\n        }\n</code></pre>\n<p>I guess my real problem that I've taken all the words to say is that I don't know where to put this code. I could make it a script on the street exits, but the player isn't on the street - they're in the car and don't have access to those exits. Does it need to be a modification on the whole idea of movement? That seems excessive. Is there anyone who has a minute to point me in the right direction?</p>\n\n",
      "PostDate": "2019-11-16T12:36:56.3290016Z",
      "LastEditDate": "2019-11-16T12:38:17.5249719Z",
      "link": null
    },
    {
      "PostId": "ed53168b-bb14-4003-8412-9b9d03637bd3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> What I really want is this: The player gets in the car. They see the description of the interior and find the objects hidden inside. Then they think, \"I'd really like to go southeast.\" The car doesn't have a southeast exit, but the street the car is on does.\r\n\r\nI suggested a way to do this in the previous thread; but slightly more complex than it needs to be because you had a \"drive\" verb which would output some nice flavour text depending on the current character as well as moving the car. I suggested a \"drive\" verb to start the car, after which the normal \"go north\" or \"north\" or \"se\" would change to moving the car.\r\n\r\nNow I've thought about it again, the driving system I'd use is:\r\n* When player uses the commands \"drive\" or \"drive car\"\r\n    * If the player is outside the car, they get in (displaying flavour text if appropriate)\r\n    * If the car isn't started, start the car (displaying flavour text if appropriate)\r\n    * If the car was already running, display a message telling the player to specify a direction\r\n* When player uses the commands \"drive northwest\" or similar\r\n    * If the player is standing next to the car, then get in (displaying flavour text if appropriate)\r\n    * If the player is in the car and it isn't started, start it (displaying flavour text if appropriate)\r\n    * Move the car in the specified direction\r\n* When the player uses commands \"go northwest\", \"northwest\", or \"nw\"\r\n    * If the player is outside the car, they're walking\r\n    * If the player is in the car but it isn't started, start it (displaying appropriate flavour text)\r\n    * Move the car in the specified direction\r\n* When the player types \"leave car\" or \"go out\"\r\n    * Stop the car if it's started (displaying a message if appropriate)\r\n    * Move the player outside the car\r\n* When the player types \"stop car\"\r\n    * Stop the car if it's started (displaying a message if appropriate)\r\n\r\nThat should allow the player to enter commands quickly (such as just typing \"se\" while in the car), but still allows the display of messages like your \"You settle behind the wheel, and Aziraphale nervously takes his place in the passenger seat.\" to add to the atmosphere. Really, these messages are the only reason we need to track if the car is started, but I think they will add a lot to the feel of the game.\r\n\r\nThere's quite a few options there, but that's how I would normally drive such a system; because it works intuitively with whatever commands the player is likely to try.\r\nI'm thinking that rather than having a list of directions in the code, you would have exits with an attribute `driving` to  indicate where the car can go. Those exits could be made invisible if the player can't also walk in that direction.\r\n\r\nWould you like me to try putting together the actual code to do that? I think it's mostly pretty simple.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>What I really want is this: The player gets in the car. They see the description of the interior and find the objects hidden inside. Then they think, \"I'd really like to go southeast.\" The car doesn't have a southeast exit, but the street the car is on does.</p>\n</blockquote>\n<p>I suggested a way to do this in the previous thread; but slightly more complex than it needs to be because you had a \"drive\" verb which would output some nice flavour text depending on the current character as well as moving the car. I suggested a \"drive\" verb to start the car, after which the normal \"go north\" or \"north\" or \"se\" would change to moving the car.</p>\n<p>Now I've thought about it again, the driving system I'd use is:</p>\n<ul>\n<li>When player uses the commands \"drive\" or \"drive car\"\n<ul>\n<li>If the player is outside the car, they get in (displaying flavour text if appropriate)</li>\n<li>If the car isn't started, start the car (displaying flavour text if appropriate)</li>\n<li>If the car was already running, display a message telling the player to specify a direction</li>\n</ul>\n</li>\n<li>When player uses the commands \"drive northwest\" or similar\n<ul>\n<li>If the player is standing next to the car, then get in (displaying flavour text if appropriate)</li>\n<li>If the player is in the car and it isn't started, start it (displaying flavour text if appropriate)</li>\n<li>Move the car in the specified direction</li>\n</ul>\n</li>\n<li>When the player uses commands \"go northwest\", \"northwest\", or \"nw\"\n<ul>\n<li>If the player is outside the car, they're walking</li>\n<li>If the player is in the car but it isn't started, start it (displaying appropriate flavour text)</li>\n<li>Move the car in the specified direction</li>\n</ul>\n</li>\n<li>When the player types \"leave car\" or \"go out\"\n<ul>\n<li>Stop the car if it's started (displaying a message if appropriate)</li>\n<li>Move the player outside the car</li>\n</ul>\n</li>\n<li>When the player types \"stop car\"\n<ul>\n<li>Stop the car if it's started (displaying a message if appropriate)</li>\n</ul>\n</li>\n</ul>\n<p>That should allow the player to enter commands quickly (such as just typing \"se\" while in the car), but still allows the display of messages like your \"You settle behind the wheel, and Aziraphale nervously takes his place in the passenger seat.\" to add to the atmosphere. Really, these messages are the only reason we need to track if the car is started, but I think they will add a lot to the feel of the game.</p>\n<p>There's quite a few options there, but that's how I would normally drive such a system; because it works intuitively with whatever commands the player is likely to try.<br>\nI'm thinking that rather than having a list of directions in the code, you would have exits with an attribute <code>driving</code> to  indicate where the car can go. Those exits could be made invisible if the player can't also walk in that direction.</p>\n<p>Would you like me to try putting together the actual code to do that? I think it's mostly pretty simple.</p>\n\n",
      "PostDate": "2019-11-16T13:07:40.7082126Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "84b31452-cd01-4892-afd5-b1fc1b323ca0",
      "UserId": 77575,
      "Username": "Juniper200",
      "AvatarUrl": "https://i.imgur.com/ps2US7Cb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, yes. I was planning on keeping the flavor text in. This was just the gist of what I was trying to do with the relevant movement. \r\n\r\nThe system you outlined makes sense, and it looks like something I could implement. I just don't know where to implement it. I'd love to see your take on it if you have time - that's very kind of you.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, yes. I was planning on keeping the flavor text in. This was just the gist of what I was trying to do with the relevant movement.</p>\n<p>The system you outlined makes sense, and it looks like something I could implement. I just don't know where to implement it. I'd love to see your take on it if you have time - that's very kind of you.</p>\n\n",
      "PostDate": "2019-11-16T20:57:02.5637116Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9ae78971-ee9f-4f15-b1cf-d20e7ba3d353",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK. First up, I'd give the car a script attribute to regenerate its exit list.\r\nThis handles the custom behaviour of the \"go\" verb. Basically, if the street the car is in contains a northward exit that goes to Brock Street, this will create a northward exit inside the car, with a script attribute that runs the \"drive\" verb.\r\n```\r\n<attr name=\"refresh_driving_exits\" type=\"script\">\r\n  foreach (exit, AllExits()) {\r\n    if (exit.parent = this and HasObject (exit, \"driving_clone_of\")) {\r\n      destroy (exit.name)\r\n    }\r\n    else if (exit.parent = this.parent and GetBoolean (exit, \"driving\")) {\r\n      newclone = CloneObjectAndMove (exit, this)\r\n      newclone.visible = true\r\n      newclone.driving_clone_of = exit\r\n      newclone.script => {\r\n        do (drive, \"script\", QuickParams (\"object\", this.driving_clone_of))\r\n      }\r\n    }\r\n  }\r\n</attr>\r\n```\r\nThen we have another script attribute for the car, forcing the description to be shown when you drive somewhere, even though the player's parent hasn't changed. I don't know if your game allows the car to move without the player inside it, but I'll provide messages for that just in case:\r\n```\r\n<attr name=\"changedparent\" type=\"script\">\r\n  switch (game.pov.parent) {\r\n    case (this) {\r\n      // if you want a message to say \"You drive carefully\" or whatever, you can put it here.\r\n      ShowRoomDescription()\r\n    }\r\n    case (this.parent) {\r\n      // The car has just moved into the room where the player is\r\n      msg (GetDisplayName (this) + \" pulls up at the kerb beside you.\")\r\n    }\r\n    case (oldvalue) {\r\n      // The car has just left the room where the player is\r\n      msg (GetDisplayName (this) + \" drives off into the distance.\")\r\n    }\r\n  }\r\n</attr>\r\n```\r\nThen we have the car's `description` script; which needs to both display the description of the car, and describe where the car is. As this is called whenever the car moves and when the player gets into the car, we can also call `refresh_driving_exits` from here to ensure they are up to date:\r\n```\r\ndo (this, \"refresh_driving_exits\")\r\nif (GetBoolean (drive, \"isactive\")) {\r\n  // If the player has just driven somewhere, it's redundant to display the detailed description of the car again, so we include a short one.\r\n  msg (\"You are in the car.\")\r\n}\r\nelse {\r\n  msg (\"Here's a proper description of the car, which will be displayed if the player types 'look' while in the car, or when they've just got in.\")\r\n}\r\nmsg (\"The car is in \"+GetDisplayName (this.parent) + \".\")\r\n// If the player types \"drive north\" when they're standing next to the car, we don't want to show the full\r\n//   description of their current location again before driving off.\r\nif (not GetBoolean (drive, \"isentering\")) {\r\n  // If you've just driven to a new location, describe what's outside the car.\r\n  // In the room descriptions, I'm providing a variable \"vehicle\" which can be accessed to get the car object.\r\n  // So that in the description for a street, you could do something like\r\n  //               As you {either IsDefined(\"vehicle\"):drive:walk} closer, you can see...\r\n  game.text_processor_variables = QuickParams (\"vehicle\", this)\r\n  if (HasString (this.parent, \"description\")) {\r\n    msg (this.parent.description)\r\n  }\r\n  else if (HasScript (this.parent, \"description\")) {\r\n    do (this.parent, \"description\", game.text_processor_variables)\r\n  }\r\n}\r\ndrive.isactive = false\r\ndrive.isentering = false\r\n```\r\nAnd then the drive command itself.\r\nI don't know if you have one car or many in your game; I've assumed the car has a boolean attribute `is_car` to let us find it.\r\nI've also used the special `changecommandscope` script, so that the object in `drive #object#` can be either an exit or a car.\r\n```\r\n<command name=\"drive\">\r\n  <pattern type=\"string\"><![CDATA[^drive( (?<object>.+?)( (?<object2>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d))?)?$]]></pattern>\r\n  <scope>none</scope>\r\n  <changecommandscope type=\"script\">\r\n    vehicle = null\r\n    if (variable = \"object1\") {\r\n      if (DictionaryContains (matched, \"object\")) {\r\n        vehicle = DictionaryItem (matched, \"object\")\r\n        if (GetBoolean (vehicle, \"is_car\")) {\r\n          list add (items, vehicle)\r\n        }\r\n        else {\r\n          vehicle = null\r\n        }\r\n      }\r\n    }\r\n    if (vehicle = null) {\r\n      if (GetBoolean (game.pov.parent, \"is_car\")) {\r\n        // If the player is in the car, allow \"drive car\"\r\n        vehicle = game.pov.parent\r\n      }\r\n      else if (variable = \"matched\") {\r\n        // If the player isn't in a car, look for cars in the same room as them\r\n        vehicles = FilterByAttribute (ScopeReachable(), \"is_car\", true)\r\n        // If there's a car here, look for exits\r\n        if (ListCount (vehicles) = 1) {\r\n          vehicle = ListItem (vehicles, 0)\r\n        }\r\n        else {\r\n          // if there's more than one car in sight, use the player for scope so that \"drive north\"\r\n          //    will result in \"Which car do you want to drive?\" rather than \"I can't see a north\"\r\n          vehicle = game.pov\r\n          foreach (car, vehicles) {\r\n            list add (items, car)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    foreach (exit, AllExits()) {\r\n      if (GetBoolean (exit, \"driving\") or GetBoolean (exit, \"driving\")) {\r\n        if (exit.parent = vehicle.parent) {\r\n          list add (items, exit)\r\n        }\r\n      }\r\n    }\r\n  </changecommandscope>\r\n  <script>\r\n    vehicle = null\r\n    exit = null\r\n    done = false\r\n    if (IsDefined (\"object\")) {\r\n      if (GetBoolean (object, \"is_car\")) {\r\n        vehicle = object\r\n      }\r\n      else if (DoesInherit (object, \"defaultexit\")) {\r\n        exit = object\r\n      }\r\n      else {\r\n        // player attempted to drive an object other than a car\r\n        msg (\"You can't drive \" + object.article + \".\")\r\n        done = true\r\n      }\r\n    }\r\n    // allow 2 objects so the player can \"drive car north\"\r\n    if (IsDefined (\"object2\")) {\r\n      if (exit = null) {\r\n        exit = object2\r\n      }\r\n      else {\r\n        msg (\"You can't drive in two directions at once.\")\r\n        done = true\r\n      }\r\n    }\r\n    if (vehicle = null and not done) {\r\n      if (GetBoolean (game.pov.parent, \"is_car\")) {\r\n        vehicle = game.pov.parent\r\n      }\r\n      else {\r\n        cars = FilterByAttribute (ScopeReachableNotHeld(), \"is_car\", true)\r\n        if (ListCount (cars) = 0) {\r\n          msg (\"You haven't got a car!\")\r\n          done = true\r\n        }\r\n        else if (ListCount (cars) = 1) {\r\n          vehicle = ListItem (cars, 0)\r\n        }\r\n        else {\r\n          // There's more than one car here, and the player entered \"drive <direction>\" or just \"drive\"\r\n          msg (\"Which car do you want to drive?\")\r\n          done = true\r\n        }\r\n      }\r\n    }\r\n    if (not (done or vehicle = game.pov.parent)) {\r\n      // player isn't in the car\r\n      // if they've specified a destination, don't spill the full description of the car on entering\r\n      // if they need to find a car key or something, include checks for that here\r\n      this.isentering = true\r\n      this.isactive = not (exit = null)\r\n      game.pov.parent = vehicle\r\n    }\r\n    if (game.pov.parent = vehicle) {\r\n      // You can use the \"changedstarted\" script to display flavour text for this\r\n      vehicle.started = true\r\n\r\n      // check for \"started\" again, in case the \"changedstarted\" script prevents the car from starting\r\n      if (not done and GetBoolean (vehicle, \"started\")) {\r\n        if (exit = null) {\r\n          msg (\"Which way do you want to drive?\")\r\n        }\r\n        else if (not GetBoolean (exit, \"driving\")) {\r\n          // Using the \"driving\" boolean to indicate that an exit is suitable for cars\r\n          msg (\"You can't drive that way.\")\r\n        }\r\n        else {\r\n          // successfully driving!\r\n          this.isactive = true\r\n          if (HasScript (exit, \"drivescript\")) {\r\n            do (exit, \"drivescript\", QuickParams (\"vehicle\", vehicle))\r\n          }\r\n          else {\r\n            vehicle.parent = exit.to\r\n          }\r\n          this.isactive = false\r\n        }\r\n    }\r\n  </script>\r\n</command>\r\n```\r\n(not 100% sure on the XML there; don't know if the `<![CDATA[` inside the `<pattern>` element is necessary)\r\n\r\nThen there's a few little things.\r\n\r\nThe car's \"before enter\" script:\r\n```\r\n  msg (\"You get into the car\")\r\n```\r\n(you could also include a check that the car isn't locked or whatever, and move the player out again. The \"drive\" command checks that the player is in the car after moving them into it, so if they're ejected it won't display anything else)\r\n\r\nThe car's \"after leaving\" script:\r\n```\r\n  this.started = false\r\n  // can also include flavour text if you want\r\n```\r\n\r\nFlavour text for starting/stopping the car can go in the car's `changedstarted` script.\r\n```\r\nif (this.started) {\r\n  msg (\"You get behind the wheel and the car roars into life.\")\r\n}\r\nelse if (game.pov.parent = this) {\r\n  msg (\"You stop the engine and some flavour text happens.\")\r\n}\r\nelse {\r\n  msg (\"You remember to stop the engine before getting out of \"+GetDisplayNameLink (this) + \".\")\r\n}\r\n```\r\n\r\nA stop verb for the car would probably be nice; but not essential. Always good to account for things the player might try, though.\r\n\r\nThis took way longer than I thought to type out. Ooops :S\r\nWill polish it up a bit tomorrow\r\n\r\nUsing this script will respond to the following attributes:\r\n* `driving` - an exit with this attribute set to true can be driven through\r\n* `visible` - an exit with this attribute set to true can be walked through (or attempted)\r\n* `drivescript` - If set, driving through an exit will run this script instead of moving the car to the destination.\r\n    * Within this script, you will have access to a variable `vehicle` referencing the car\r\n    * The script should either do `MoveObject (vehicle, this.to)` or explain to the player why they failed to drive that way\r\n    * Or move the car somewhere else if the exit doesn't always go the same way\r\n* `is_car` - a boolean attribute saying whether or not a given object is a car\r\n    * If this was an actual library, you'd probably change `GetBoolean (obj, \"is_car\")` to `DoesInherit (obj, \"cartype\")`\r\n* `started` - a boolean which will be set to true when the car is started",
      "EditableFormat": "markdown",
      "HTML": "<p>OK. First up, I'd give the car a script attribute to regenerate its exit list.<br>\nThis handles the custom behaviour of the \"go\" verb. Basically, if the street the car is in contains a northward exit that goes to Brock Street, this will create a northward exit inside the car, with a script attribute that runs the \"drive\" verb.</p>\n<pre><code>&lt;attr name=\"refresh_driving_exits\" type=\"script\"&gt;\n  foreach (exit, AllExits()) {\n    if (exit.parent = this and HasObject (exit, \"driving_clone_of\")) {\n      destroy (exit.name)\n    }\n    else if (exit.parent = this.parent and GetBoolean (exit, \"driving\")) {\n      newclone = CloneObjectAndMove (exit, this)\n      newclone.visible = true\n      newclone.driving_clone_of = exit\n      newclone.script =&gt; {\n        do (drive, \"script\", QuickParams (\"object\", this.driving_clone_of))\n      }\n    }\n  }\n&lt;/attr&gt;\n</code></pre>\n<p>Then we have another script attribute for the car, forcing the description to be shown when you drive somewhere, even though the player's parent hasn't changed. I don't know if your game allows the car to move without the player inside it, but I'll provide messages for that just in case:</p>\n<pre><code>&lt;attr name=\"changedparent\" type=\"script\"&gt;\n  switch (game.pov.parent) {\n    case (this) {\n      // if you want a message to say \"You drive carefully\" or whatever, you can put it here.\n      ShowRoomDescription()\n    }\n    case (this.parent) {\n      // The car has just moved into the room where the player is\n      msg (GetDisplayName (this) + \" pulls up at the kerb beside you.\")\n    }\n    case (oldvalue) {\n      // The car has just left the room where the player is\n      msg (GetDisplayName (this) + \" drives off into the distance.\")\n    }\n  }\n&lt;/attr&gt;\n</code></pre>\n<p>Then we have the car's <code>description</code> script; which needs to both display the description of the car, and describe where the car is. As this is called whenever the car moves and when the player gets into the car, we can also call <code>refresh_driving_exits</code> from here to ensure they are up to date:</p>\n<pre><code>do (this, \"refresh_driving_exits\")\nif (GetBoolean (drive, \"isactive\")) {\n  // If the player has just driven somewhere, it's redundant to display the detailed description of the car again, so we include a short one.\n  msg (\"You are in the car.\")\n}\nelse {\n  msg (\"Here's a proper description of the car, which will be displayed if the player types 'look' while in the car, or when they've just got in.\")\n}\nmsg (\"The car is in \"+GetDisplayName (this.parent) + \".\")\n// If the player types \"drive north\" when they're standing next to the car, we don't want to show the full\n//   description of their current location again before driving off.\nif (not GetBoolean (drive, \"isentering\")) {\n  // If you've just driven to a new location, describe what's outside the car.\n  // In the room descriptions, I'm providing a variable \"vehicle\" which can be accessed to get the car object.\n  // So that in the description for a street, you could do something like\n  //               As you {either IsDefined(\"vehicle\"):drive:walk} closer, you can see...\n  game.text_processor_variables = QuickParams (\"vehicle\", this)\n  if (HasString (this.parent, \"description\")) {\n    msg (this.parent.description)\n  }\n  else if (HasScript (this.parent, \"description\")) {\n    do (this.parent, \"description\", game.text_processor_variables)\n  }\n}\ndrive.isactive = false\ndrive.isentering = false\n</code></pre>\n<p>And then the drive command itself.<br>\nI don't know if you have one car or many in your game; I've assumed the car has a boolean attribute <code>is_car</code> to let us find it.<br>\nI've also used the special <code>changecommandscope</code> script, so that the object in <code>drive #object#</code> can be either an exit or a car.</p>\n<pre><code>&lt;command name=\"drive\"&gt;\n  &lt;pattern type=\"string\"&gt;&lt;![CDATA[^drive( (?&lt;object&gt;.+?)( (?&lt;object2&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d))?)?$]]&gt;&lt;/pattern&gt;\n  &lt;scope&gt;none&lt;/scope&gt;\n  &lt;changecommandscope type=\"script\"&gt;\n    vehicle = null\n    if (variable = \"object1\") {\n      if (DictionaryContains (matched, \"object\")) {\n        vehicle = DictionaryItem (matched, \"object\")\n        if (GetBoolean (vehicle, \"is_car\")) {\n          list add (items, vehicle)\n        }\n        else {\n          vehicle = null\n        }\n      }\n    }\n    if (vehicle = null) {\n      if (GetBoolean (game.pov.parent, \"is_car\")) {\n        // If the player is in the car, allow \"drive car\"\n        vehicle = game.pov.parent\n      }\n      else if (variable = \"matched\") {\n        // If the player isn't in a car, look for cars in the same room as them\n        vehicles = FilterByAttribute (ScopeReachable(), \"is_car\", true)\n        // If there's a car here, look for exits\n        if (ListCount (vehicles) = 1) {\n          vehicle = ListItem (vehicles, 0)\n        }\n        else {\n          // if there's more than one car in sight, use the player for scope so that \"drive north\"\n          //    will result in \"Which car do you want to drive?\" rather than \"I can't see a north\"\n          vehicle = game.pov\n          foreach (car, vehicles) {\n            list add (items, car)\n          }\n        }\n      }\n    }\n    foreach (exit, AllExits()) {\n      if (GetBoolean (exit, \"driving\") or GetBoolean (exit, \"driving\")) {\n        if (exit.parent = vehicle.parent) {\n          list add (items, exit)\n        }\n      }\n    }\n  &lt;/changecommandscope&gt;\n  &lt;script&gt;\n    vehicle = null\n    exit = null\n    done = false\n    if (IsDefined (\"object\")) {\n      if (GetBoolean (object, \"is_car\")) {\n        vehicle = object\n      }\n      else if (DoesInherit (object, \"defaultexit\")) {\n        exit = object\n      }\n      else {\n        // player attempted to drive an object other than a car\n        msg (\"You can't drive \" + object.article + \".\")\n        done = true\n      }\n    }\n    // allow 2 objects so the player can \"drive car north\"\n    if (IsDefined (\"object2\")) {\n      if (exit = null) {\n        exit = object2\n      }\n      else {\n        msg (\"You can't drive in two directions at once.\")\n        done = true\n      }\n    }\n    if (vehicle = null and not done) {\n      if (GetBoolean (game.pov.parent, \"is_car\")) {\n        vehicle = game.pov.parent\n      }\n      else {\n        cars = FilterByAttribute (ScopeReachableNotHeld(), \"is_car\", true)\n        if (ListCount (cars) = 0) {\n          msg (\"You haven't got a car!\")\n          done = true\n        }\n        else if (ListCount (cars) = 1) {\n          vehicle = ListItem (cars, 0)\n        }\n        else {\n          // There's more than one car here, and the player entered \"drive &lt;direction&gt;\" or just \"drive\"\n          msg (\"Which car do you want to drive?\")\n          done = true\n        }\n      }\n    }\n    if (not (done or vehicle = game.pov.parent)) {\n      // player isn't in the car\n      // if they've specified a destination, don't spill the full description of the car on entering\n      // if they need to find a car key or something, include checks for that here\n      this.isentering = true\n      this.isactive = not (exit = null)\n      game.pov.parent = vehicle\n    }\n    if (game.pov.parent = vehicle) {\n      // You can use the \"changedstarted\" script to display flavour text for this\n      vehicle.started = true\n\n      // check for \"started\" again, in case the \"changedstarted\" script prevents the car from starting\n      if (not done and GetBoolean (vehicle, \"started\")) {\n        if (exit = null) {\n          msg (\"Which way do you want to drive?\")\n        }\n        else if (not GetBoolean (exit, \"driving\")) {\n          // Using the \"driving\" boolean to indicate that an exit is suitable for cars\n          msg (\"You can't drive that way.\")\n        }\n        else {\n          // successfully driving!\n          this.isactive = true\n          if (HasScript (exit, \"drivescript\")) {\n            do (exit, \"drivescript\", QuickParams (\"vehicle\", vehicle))\n          }\n          else {\n            vehicle.parent = exit.to\n          }\n          this.isactive = false\n        }\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n<p>(not 100% sure on the XML there; don't know if the <code>&lt;![CDATA[</code> inside the <code>&lt;pattern&gt;</code> element is necessary)</p>\n<p>Then there's a few little things.</p>\n<p>The car's \"before enter\" script:</p>\n<pre><code>  msg (\"You get into the car\")\n</code></pre>\n<p>(you could also include a check that the car isn't locked or whatever, and move the player out again. The \"drive\" command checks that the player is in the car after moving them into it, so if they're ejected it won't display anything else)</p>\n<p>The car's \"after leaving\" script:</p>\n<pre><code>  this.started = false\n  // can also include flavour text if you want\n</code></pre>\n<p>Flavour text for starting/stopping the car can go in the car's <code>changedstarted</code> script.</p>\n<pre><code>if (this.started) {\n  msg (\"You get behind the wheel and the car roars into life.\")\n}\nelse if (game.pov.parent = this) {\n  msg (\"You stop the engine and some flavour text happens.\")\n}\nelse {\n  msg (\"You remember to stop the engine before getting out of \"+GetDisplayNameLink (this) + \".\")\n}\n</code></pre>\n<p>A stop verb for the car would probably be nice; but not essential. Always good to account for things the player might try, though.</p>\n<p>This took way longer than I thought to type out. Ooops :S<br>\nWill polish it up a bit tomorrow</p>\n<p>Using this script will respond to the following attributes:</p>\n<ul>\n<li><code>driving</code> - an exit with this attribute set to true can be driven through</li>\n<li><code>visible</code> - an exit with this attribute set to true can be walked through (or attempted)</li>\n<li><code>drivescript</code> - If set, driving through an exit will run this script instead of moving the car to the destination.\n<ul>\n<li>Within this script, you will have access to a variable <code>vehicle</code> referencing the car</li>\n<li>The script should either do <code>MoveObject (vehicle, this.to)</code> or explain to the player why they failed to drive that way</li>\n<li>Or move the car somewhere else if the exit doesn't always go the same way</li>\n</ul>\n</li>\n<li><code>is_car</code> - a boolean attribute saying whether or not a given object is a car\n<ul>\n<li>If this was an actual library, you'd probably change <code>GetBoolean (obj, \"is_car\")</code> to <code>DoesInherit (obj, \"cartype\")</code></li>\n</ul>\n</li>\n<li><code>started</code> - a boolean which will be set to true when the car is started</li>\n</ul>\n\n",
      "PostDate": "2019-11-17T00:04:46.2521819Z",
      "LastEditDate": "2019-11-17T10:20:56.2739162Z",
      "link": null
    },
    {
      "PostId": "f144a59c-28f7-4715-afa2-0a8b16b077e3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another thought pops into my head.\r\n\r\nYou could give the car a script attribute:\r\n```\r\n<changecommandscope type=\"script\">\r\n  list add (items, this)\r\n</changecommandscope>\r\n```\r\nThis means that the car is in scope when you're inside it; so you can do \"look car\" or any other verbs it has while inside it.\r\n\r\nThen you could modify the scripts:\r\n```\r\n<onexit>\r\n  this.started = false\r\n  this.displayverbs = Split (\"Look at;Drive;Enter\")\r\n</onexit>\r\n\r\n<beforeenter>\r\n  this.displayverbs = Split (\"Look at;Drive;Leave\")\r\n</beforeenter>\r\n\r\n<changedstarted type=\"script\">\r\n  if (this.started) {\r\n    msg (\"You get behind the wheel and the car roars into life.\")\r\n    this.displayverbs = Split(\"Look at;Stop;Leave\")\r\n  }\r\n  else if (game.pov.parent = this) {\r\n    this.displayverbs = Split(\"Look at;Drive;Leave\")\r\n  }\r\n  else {\r\n    msg (\"You remember to stop the engine before getting out of \"+GetDisplayNameLink (this) + \".\")\r\n  }\r\n</changedstarted>\r\n```\r\n\"Enter\" verb:\r\n```\r\nif (game.pov.parent = this) {\r\n  msg (\"You're already in it.\")\r\n}\r\nelse {\r\n  game.pov.parent = this\r\n}\r\n```\r\n\"Leave\" verb:\r\n```\r\nif (game.pov.parent = this) {\r\n  game.pov.parent = this.parent\r\n}\r\nelse {\r\n  msg (\"You're not in the car.\")\r\n}\r\n```\r\n\"Stop\" verb:\r\n```\r\nif (GetBoolean (this, \"started\")) {\r\n  msg (\"You stop the engine and some flavour text happens.\")\r\n  this.started = false\r\n}\r\nelse {\r\n  msg (\"The engine isn't running.\")\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Another thought pops into my head.</p>\n<p>You could give the car a script attribute:</p>\n<pre><code>&lt;changecommandscope type=\"script\"&gt;\n  list add (items, this)\n&lt;/changecommandscope&gt;\n</code></pre>\n<p>This means that the car is in scope when you're inside it; so you can do \"look car\" or any other verbs it has while inside it.</p>\n<p>Then you could modify the scripts:</p>\n<pre><code>&lt;onexit&gt;\n  this.started = false\n  this.displayverbs = Split (\"Look at;Drive;Enter\")\n&lt;/onexit&gt;\n\n&lt;beforeenter&gt;\n  this.displayverbs = Split (\"Look at;Drive;Leave\")\n&lt;/beforeenter&gt;\n\n&lt;changedstarted type=\"script\"&gt;\n  if (this.started) {\n    msg (\"You get behind the wheel and the car roars into life.\")\n    this.displayverbs = Split(\"Look at;Stop;Leave\")\n  }\n  else if (game.pov.parent = this) {\n    this.displayverbs = Split(\"Look at;Drive;Leave\")\n  }\n  else {\n    msg (\"You remember to stop the engine before getting out of \"+GetDisplayNameLink (this) + \".\")\n  }\n&lt;/changedstarted&gt;\n</code></pre>\n<p>\"Enter\" verb:</p>\n<pre><code>if (game.pov.parent = this) {\n  msg (\"You're already in it.\")\n}\nelse {\n  game.pov.parent = this\n}\n</code></pre>\n<p>\"Leave\" verb:</p>\n<pre><code>if (game.pov.parent = this) {\n  game.pov.parent = this.parent\n}\nelse {\n  msg (\"You're not in the car.\")\n}\n</code></pre>\n<p>\"Stop\" verb:</p>\n<pre><code>if (GetBoolean (this, \"started\")) {\n  msg (\"You stop the engine and some flavour text happens.\")\n  this.started = false\n}\nelse {\n  msg (\"The engine isn't running.\")\n}\n</code></pre>\n\n",
      "PostDate": "2019-11-17T10:41:41.2041585Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8a7d1632-955c-4b91-80b1-fb8cbc5a9b34",
      "UserId": 77575,
      "Username": "Juniper200",
      "AvatarUrl": "https://i.imgur.com/ps2US7Cb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow! That's a lot of work - thank you for looking at the problem for me. I'm going to take some time to study this and learn from it - I may be back with questions! - and then I'll try to work it into what I have. Thanks again!\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow! That's a lot of work - thank you for looking at the problem for me. I'm going to take some time to study this and learn from it - I may be back with questions! - and then I'll try to work it into what I have. Thanks again!</p>\n\n",
      "PostDate": "2019-11-17T19:10:02.7237097Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
