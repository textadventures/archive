{
  "Topic": {
    "TopicId": "qmhc4lh2cemxwjbrjsiz3w",
    "ForumId": "10",
    "Title": "Setting an attribute from an ASLEvent",
    "LastUpdated": "2017-11-24T01:31:29.6513464Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "bf6bf4f0-7c88-4233-8111-adac074ca73f",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I want to set attributes from JS.\r\n\r\nThis works perfectly, but does anyone see (or know of) a better approach than this?\r\n\r\n```\r\n  <function name=\"SetFromAsl\" parameters=\"paramToSplit\"><![CDATA[\r\n    params = Split(paramToSplit, \";\")\r\n    if (not ListCount(params) = 3) {\r\n      error (\"Syntax error.\")\r\n    }\r\n    obj = params[0]\r\n    object = GetObject(obj)\r\n    att = params[1]\r\n    value = params[2]\r\n    if (value = \"true\") {\r\n      value = true\r\n    }\r\n    else if (value = \"false\") {\r\n      value = false\r\n    }\r\n    else if (IsInt(value)) {\r\n      value = ToInt (value)\r\n    }\r\n    else {\r\n      if (StartsWith(value, \"object\")) {\r\n        value = Split(value, \":\")[1]\r\n        foreach (o, AllObjects()) {\r\n          if (o.name = value) {\r\n            value = o\r\n          }\r\n        }\r\n      }\r\n      else if (StartsWith(value, \"script\")) {\r\n        msg (\"<br/>Error: You can't set a script this way.<br/>\")\r\n        return (true)\r\n      }\r\n    }\r\n    set (object, att, value)\r\n    msg (object.name+\".\"+att+\" = \"+value)\r\n    msg (\"Done.<br/>\")\r\n  ]]></function>\r\n```\r\n\r\n---\r\nMy start script to test it out:\r\n\r\n```\r\nSetFromAsl (\"player;froody;true\")\r\nSetFromAsl (\"player;parent;object:second room\")\r\nSetFromAsl (\"thingy;pull;script:msg(\\\"You pull it.\\\")\")\r\nSetFromAsl (\"player;insecondroomcount;0\")\r\n```\r\n\r\n\r\n---\r\nRevised.\r\n\r\nThanks Pixie and mrangel!",
      "EditableFormat": "markdown",
      "HTML": "<p>I want to set attributes from JS.</p>\n<p>This works perfectly, but does anyone see (or know of) a better approach than this?</p>\n<pre><code>  &lt;function name=\"SetFromAsl\" parameters=\"paramToSplit\"&gt;&lt;![CDATA[\n    params = Split(paramToSplit, \";\")\n    if (not ListCount(params) = 3) {\n      error (\"Syntax error.\")\n    }\n    obj = params[0]\n    object = GetObject(obj)\n    att = params[1]\n    value = params[2]\n    if (value = \"true\") {\n      value = true\n    }\n    else if (value = \"false\") {\n      value = false\n    }\n    else if (IsInt(value)) {\n      value = ToInt (value)\n    }\n    else {\n      if (StartsWith(value, \"object\")) {\n        value = Split(value, \":\")[1]\n        foreach (o, AllObjects()) {\n          if (o.name = value) {\n            value = o\n          }\n        }\n      }\n      else if (StartsWith(value, \"script\")) {\n        msg (\"&lt;br/&gt;Error: You can't set a script this way.&lt;br/&gt;\")\n        return (true)\n      }\n    }\n    set (object, att, value)\n    msg (object.name+\".\"+att+\" = \"+value)\n    msg (\"Done.&lt;br/&gt;\")\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<hr>\n<p>My start script to test it out:</p>\n<pre><code>SetFromAsl (\"player;froody;true\")\nSetFromAsl (\"player;parent;object:second room\")\nSetFromAsl (\"thingy;pull;script:msg(\\\"You pull it.\\\")\")\nSetFromAsl (\"player;insecondroomcount;0\")\n</code></pre>\n<hr>\n<p>Revised.</p>\n<p>Thanks Pixie and mrangel!</p>\n\n",
      "PostDate": "2017-11-24T01:31:29.6513464Z",
      "LastEditDate": "2017-11-24T12:49:37.9836209Z",
      "link": null
    },
    {
      "PostId": "702c275b-0d2b-4d8f-aedd-c0e48ee30478",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Minor tweaks, but I would set value to an int instead of creating the new variable valueAsInt, then you last if/else is not required, just set to the value.\r\n\r\nYou could also set it to split on the first full stop and equals, rather than semi-colons, so it would accept \"player.money=49\" ...",
      "EditableFormat": "markdown",
      "HTML": "<p>Minor tweaks, but I would set value to an int instead of creating the new variable valueAsInt, then you last if/else is not required, just set to the value.</p>\n<p>You could also set it to split on the first full stop and equals, rather than semi-colons, so it would accept \"player.money=49\" ...</p>\n\n",
      "PostDate": "2017-11-24T08:40:39.3437888Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0530ca66-60e6-4b38-ad64-1a7585365edc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For the object part, it seems rather inefficient to loop over all objects, and then call GetObject anyway. You could skip one of those steps. Either:\r\n```\r\nforeach (o, AllObjects()) {\r\n  if (o.name = value) {\r\n    value = o\r\n  }\r\n}\r\n```\r\nor:\r\n```\r\no = GetObject(value)\r\nif (not o = null) {\r\n  value = o\r\n}\r\n```\r\n\r\nBut I'd be a little nervous about that; can you be sure you'll never want to set an attribute to a string that is also the name of an object? If I was writing this, I'd probably have some initial character. Maybe 'value' starts with a `@` or something, to indicate that it's an object name.\r\n\r\nI posted code fairly recently that does pretty much the same thing, setting variables from a string. I'll see if I can find it.",
      "EditableFormat": "markdown",
      "HTML": "<p>For the object part, it seems rather inefficient to loop over all objects, and then call GetObject anyway. You could skip one of those steps. Either:</p>\n<pre><code>foreach (o, AllObjects()) {\n  if (o.name = value) {\n    value = o\n  }\n}\n</code></pre>\n<p>or:</p>\n<pre><code>o = GetObject(value)\nif (not o = null) {\n  value = o\n}\n</code></pre>\n<p>But I'd be a little nervous about that; can you be sure you'll never want to set an attribute to a string that is also the name of an object? If I was writing this, I'd probably have some initial character. Maybe 'value' starts with a <code>@</code> or something, to indicate that it's an object name.</p>\n<p>I posted code fairly recently that does pretty much the same thing, setting variables from a string. I'll see if I can find it.</p>\n\n",
      "PostDate": "2017-11-24T11:32:05.062953Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "82bb3be0-c7d7-4c5a-8988-566eba93de0c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(edit. Silly error)\r\n\r\nMy 'HandleCharacterCreationResult' function, trimmed down so it could be used in other circumstances. Single parameter, 'result':\r\n```\r\npattern = \"^\\\\s*((?<object>[^-=+.]+)\\\\s*\\\\.)?(?<attribute>.+?)=?(?<operator>[-=+])\\\\s*(?<value>\\\\S.*?)\\\\s*$\"\r\nif (IsDefined(\"result\")) {\r\n  if (TypeOf(result) = \"string\") {\r\n    foreach (part, Split(result, \";\")) {\r\n      if (StartsWith(part, \":\")) {\r\n        msg (Right(part, LengthOf(part)-1))\r\n      }\r\n      else if (not StartsWith(part, \"#\")) {\r\n        error (\"I don't know what to do with: \"+result)\r\n      }\r\n      else if (IsRegexMatch(pattern, part, \"hairyregex\")) {\r\n        result_parts = Populate(pattern, part, \"hairyregex\")\r\n        resultobject = game.pov\r\n        if (DictionaryContains(result_parts, \"object\")) {\r\n          objectname = StringDictionaryItem(result_parts, \"object\")\r\n          if (LengthOf(objectname) > 0) {\r\n            resultobject = GetObject(objectname)\r\n            if (resultobject = null) {\r\n              error (DictionaryItem(result_parts, \"object\")+\" is not an object\")\r\n            }\r\n          }\r\n        }\r\n        oldvalue = \"\"\r\n        value = DictionaryItem(result_parts, \"value\")\r\n        if (StartsWith(value, \"'\")) {\r\n          value = Right (value, LengthOf(value)-1)\r\n        }\r\n        else {\r\n          if (StartsWith(value, \"{\")) {\r\n              value = ProcessText(value)\r\n              if (StartsWith(value, \"{\")) {\r\n                  value = Right (value, LengthOf(value)-1)\r\n                }\r\n                if (EndsWith(value, \"}\")) {\r\n                value = Left (value, LengthOf(value)-1)\r\n              }\r\n            }\r\n            if (StartsWith(value, \"'\")) {\r\n              value = Right (value, LengthOf(value)-1)\r\n            }\r\n            else if (LCase(value) = \"true\") {\r\n              value = true\r\n            }\r\n            else if (LCase(value) = \"false\") {\r\n              value = false\r\n            }\r\n            else if (IsInt(value)) {\r\n              value = ToInt(value)\r\n              oldvalue = 0\r\n            }\r\n          }\r\n          else if (StartsWith (value, \"@\")) {\r\n            assign = Split(Right(value, LengthOf(value)-1), \".\")\r\n            oname = assign[0]\r\n            forceobject = false\r\n            while (StartsWith(oname, \"@\")) {\r\n              forceobject = true\r\n              oname = Right (oname, LengthOf(oname)-1)\r\n            }\r\n            list remove (assign, oname)\r\n            GetObject(Trim(oname))\r\n            if (o = null) {\r\n              if (HasAttribute (resultobject, oname)) {\r\n                o = GetAttribute (resultobject, oname)\r\n              }\r\n            }\r\n            foreach (element, assign) {\r\n              if (not o = null) {\r\n                if (TypeOf(o) = \"object\") {\r\n                  o = GetAttribute(o, element)\r\n                }\r\n              }\r\n            }\r\n            if (forceobject or not o = null) {\r\n              value = o\r\n            }\r\n          }\r\n          attrname = StringDictionaryItem(result_parts, \"attribute\")\r\n          if (HasAttribute(resultobject, attrname)) {\r\n            oldvalue = GetAttribute(resultobject, attrname)\r\n          }\r\n          switch (DictionaryItem(result_parts, \"operator\")) {\r\n            case (\"+\") {\r\n              value = oldvalue + value\r\n            }\r\n            case (\"-\") {\r\n              value = oldvalue - value\r\n            }\r\n          }\r\n          set (resultobject, attrname, value)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nresult can be a semicolon-separated list of instructions, each of which is one of:\r\n* `:Some string to print` (I could have removed this, but figured there might be some use for it in debugging. As it's printed, you could use this if you want to print a JS string containing text processor directives)\r\n* `#` (does nothing; could have removed this but I figured there might be some use for it)\r\n* `object.attribute=value`\r\n* `object.attr1=@attr2`\r\n* `object.attr=@objectname`\r\n* `object.attr=@object2.attribute.attribute`\r\n* `object.attr=@@object2.attribute2.attribute3` - If one of the attributes doesn't exist, this version sets null . The single-@ version sets it to the string.\r\n* `object.attr={random:foo:bar:baz}`\r\n* `object.attr='{this has brackets in it, but a single quote to tell it not to run the text processor}`\r\n* `object.attribute+value` and `object.attribute-value` - add a value to or subtract it from an existing attribute; use with strings, lists, or ints, but it will probably error if used on a type that doesn't have a `+` or `-` operator\r\n\r\n(in all these cases, the object is assumed to be the player if not specified)",
      "EditableFormat": "markdown",
      "HTML": "<p>(edit. Silly error)</p>\n<p>My 'HandleCharacterCreationResult' function, trimmed down so it could be used in other circumstances. Single parameter, 'result':</p>\n<pre><code>pattern = \"^\\\\s*((?&lt;object&gt;[^-=+.]+)\\\\s*\\\\.)?(?&lt;attribute&gt;.+?)=?(?&lt;operator&gt;[-=+])\\\\s*(?&lt;value&gt;\\\\S.*?)\\\\s*$\"\nif (IsDefined(\"result\")) {\n  if (TypeOf(result) = \"string\") {\n    foreach (part, Split(result, \";\")) {\n      if (StartsWith(part, \":\")) {\n        msg (Right(part, LengthOf(part)-1))\n      }\n      else if (not StartsWith(part, \"#\")) {\n        error (\"I don't know what to do with: \"+result)\n      }\n      else if (IsRegexMatch(pattern, part, \"hairyregex\")) {\n        result_parts = Populate(pattern, part, \"hairyregex\")\n        resultobject = game.pov\n        if (DictionaryContains(result_parts, \"object\")) {\n          objectname = StringDictionaryItem(result_parts, \"object\")\n          if (LengthOf(objectname) &gt; 0) {\n            resultobject = GetObject(objectname)\n            if (resultobject = null) {\n              error (DictionaryItem(result_parts, \"object\")+\" is not an object\")\n            }\n          }\n        }\n        oldvalue = \"\"\n        value = DictionaryItem(result_parts, \"value\")\n        if (StartsWith(value, \"'\")) {\n          value = Right (value, LengthOf(value)-1)\n        }\n        else {\n          if (StartsWith(value, \"{\")) {\n              value = ProcessText(value)\n              if (StartsWith(value, \"{\")) {\n                  value = Right (value, LengthOf(value)-1)\n                }\n                if (EndsWith(value, \"}\")) {\n                value = Left (value, LengthOf(value)-1)\n              }\n            }\n            if (StartsWith(value, \"'\")) {\n              value = Right (value, LengthOf(value)-1)\n            }\n            else if (LCase(value) = \"true\") {\n              value = true\n            }\n            else if (LCase(value) = \"false\") {\n              value = false\n            }\n            else if (IsInt(value)) {\n              value = ToInt(value)\n              oldvalue = 0\n            }\n          }\n          else if (StartsWith (value, \"@\")) {\n            assign = Split(Right(value, LengthOf(value)-1), \".\")\n            oname = assign[0]\n            forceobject = false\n            while (StartsWith(oname, \"@\")) {\n              forceobject = true\n              oname = Right (oname, LengthOf(oname)-1)\n            }\n            list remove (assign, oname)\n            GetObject(Trim(oname))\n            if (o = null) {\n              if (HasAttribute (resultobject, oname)) {\n                o = GetAttribute (resultobject, oname)\n              }\n            }\n            foreach (element, assign) {\n              if (not o = null) {\n                if (TypeOf(o) = \"object\") {\n                  o = GetAttribute(o, element)\n                }\n              }\n            }\n            if (forceobject or not o = null) {\n              value = o\n            }\n          }\n          attrname = StringDictionaryItem(result_parts, \"attribute\")\n          if (HasAttribute(resultobject, attrname)) {\n            oldvalue = GetAttribute(resultobject, attrname)\n          }\n          switch (DictionaryItem(result_parts, \"operator\")) {\n            case (\"+\") {\n              value = oldvalue + value\n            }\n            case (\"-\") {\n              value = oldvalue - value\n            }\n          }\n          set (resultobject, attrname, value)\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>result can be a semicolon-separated list of instructions, each of which is one of:</p>\n<ul>\n<li><code>:Some string to print</code> (I could have removed this, but figured there might be some use for it in debugging. As it's printed, you could use this if you want to print a JS string containing text processor directives)</li>\n<li><code>#</code> (does nothing; could have removed this but I figured there might be some use for it)</li>\n<li><code>object.attribute=value</code></li>\n<li><code>object.attr1=@attr2</code></li>\n<li><code>object.attr=@objectname</code></li>\n<li><code>object.attr=@object2.attribute.attribute</code></li>\n<li><code>object.attr=@@object2.attribute2.attribute3</code> - If one of the attributes doesn't exist, this version sets null . The single-@ version sets it to the string.</li>\n<li><code>object.attr={random:foo:bar:baz}</code></li>\n<li><code>object.attr='{this has brackets in it, but a single quote to tell it not to run the text processor}</code></li>\n<li><code>object.attribute+value</code> and <code>object.attribute-value</code> - add a value to or subtract it from an existing attribute; use with strings, lists, or ints, but it will probably error if used on a type that doesn't have a <code>+</code> or <code>-</code> operator</li>\n</ul>\n<p>(in all these cases, the object is assumed to be the player if not specified)</p>\n\n",
      "PostDate": "2017-11-24T12:01:44.0136707Z",
      "LastEditDate": "2017-11-24T17:27:44.5450101Z",
      "link": null
    },
    {
      "PostId": "c5d26e8a-2200-4f03-b711-07554b8fc8f0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@Pix\r\n\r\n**\\> I would set value to an int instead of creating the new variable valueAsInt**\r\n\r\nI had it that way in the beginning.\r\n\r\nAt first, I was doing this:\r\n```\r\nSetFromAsl (player;insecondroomcount;0)\r\n```\r\n\r\nIf you don't use the quotes, the integer is passed as a string.  Then, it will not convert that 'integer as a string' to an integer inside of that function. \r\n\r\nAt one point (before I figured out to use the quotation marks when calling it without JS), I had this:\r\n\r\n```\r\nelse if (IsInt(value)) {\r\n      value = ToInt (value)\r\n      valueAsInt = ToInt(value)\r\n     set(object, att, ToInt(value))\r\n  }\r\n```\r\n\r\n...and guess what?\r\n\r\nIt still set it up as a string: \"0\".\r\n\r\nTruthfully, I don't know what I had going on, and I wish I'd have saved a backup of that crazy scipt!\r\n\r\n---\r\nNow, I've been playing with what I've got now (which is what is currently in the first post in this thread), and I was initially calling ```SetFromAsl``` without using JS.\r\n\r\nThat worked perfectly fine.\r\n\r\nSo, I switched it up to this:\r\n\r\n```\r\n    <start type=\"script\">\r\n      JS.eval (\"ASLEvent('SetFromAsl', 'player;froody;true');\")\r\n      JS.eval (\"ASLEvent('SetFromAsl', 'player;insecondroomcount;0');ASLEvent('SetFromAsl', 'player;parent;object:secondroom');\")\r\n      JS.eval (\"ASLEvent('SetFromAsl', 'thingy;pull;script:msg(\\\"You pull it.\\\")');\")\r\n    </start>\r\n\r\n    <enter type=\"script\">\r\n      JS.ASLEvent(\"SetFromAsl\", \"thingy;look;It is blue.\")\r\n    </enter>\r\n```\r\n\r\n...and it finishes a turn each time an ```ASLEvent``` is called.  (Hehehe.  I knew something had to be off because the script appeared to work after only two tweaks.)\r\n\r\nIf I had been thinking, I'd have just used the script from Pixie's CHEAT commands to set things up with ```object.attribute=value```, like he suggested here...\r\n\r\n...but I'd still be cursing the ASLEvent for finishing the turn.\r\n\r\n```\r\nfunction ASLEvent(event, parameter) {\r\n    UIEvent(\"ASLEvent\", event + \";\" + parameter);\r\n}\r\n\r\nfunction UIEvent(cmd, parameter) {\r\n    questCefInterop.uiEvent(cmd, parameter);\r\n}\r\n\r\n```\r\n\r\n---\r\n```\r\nPS C:\\Program Files (x86)\\Quest 5> grep -r questCefInterop *\r\ndesktopplayer.js:    questCefInterop.uiEvent(cmd, parameter);\r\nPS C:\\Program Files (x86)\\Quest 5>\r\n```\r\n\r\n\r\n---\r\nI'm looking at your code next, mrangel.  (My mind is moving slowly today.  It's an 'only think about one thing at a time' day.)",
      "EditableFormat": "markdown",
      "HTML": "<p>@Pix</p>\n<p><strong>&gt; I would set value to an int instead of creating the new variable valueAsInt</strong></p>\n<p>I had it that way in the beginning.</p>\n<p>At first, I was doing this:</p>\n<pre><code>SetFromAsl (player;insecondroomcount;0)\n</code></pre>\n<p>If you don't use the quotes, the integer is passed as a string.  Then, it will not convert that 'integer as a string' to an integer inside of that function.</p>\n<p>At one point (before I figured out to use the quotation marks when calling it without JS), I had this:</p>\n<pre><code>else if (IsInt(value)) {\n      value = ToInt (value)\n      valueAsInt = ToInt(value)\n     set(object, att, ToInt(value))\n  }\n</code></pre>\n<p>...and guess what?</p>\n<p>It still set it up as a string: \"0\".</p>\n<p>Truthfully, I don't know what I had going on, and I wish I'd have saved a backup of that crazy scipt!</p>\n<hr>\n<p>Now, I've been playing with what I've got now (which is what is currently in the first post in this thread), and I was initially calling <code>SetFromAsl</code> without using JS.</p>\n<p>That worked perfectly fine.</p>\n<p>So, I switched it up to this:</p>\n<pre><code>    &lt;start type=\"script\"&gt;\n      JS.eval (\"ASLEvent('SetFromAsl', 'player;froody;true');\")\n      JS.eval (\"ASLEvent('SetFromAsl', 'player;insecondroomcount;0');ASLEvent('SetFromAsl', 'player;parent;object:secondroom');\")\n      JS.eval (\"ASLEvent('SetFromAsl', 'thingy;pull;script:msg(\\\"You pull it.\\\")');\")\n    &lt;/start&gt;\n\n    &lt;enter type=\"script\"&gt;\n      JS.ASLEvent(\"SetFromAsl\", \"thingy;look;It is blue.\")\n    &lt;/enter&gt;\n</code></pre>\n<p>...and it finishes a turn each time an <code>ASLEvent</code> is called.  (Hehehe.  I knew something had to be off because the script appeared to work after only two tweaks.)</p>\n<p>If I had been thinking, I'd have just used the script from Pixie's CHEAT commands to set things up with <code>object.attribute=value</code>, like he suggested here...</p>\n<p>...but I'd still be cursing the ASLEvent for finishing the turn.</p>\n<pre><code>function ASLEvent(event, parameter) {\n    UIEvent(\"ASLEvent\", event + \";\" + parameter);\n}\n\nfunction UIEvent(cmd, parameter) {\n    questCefInterop.uiEvent(cmd, parameter);\n}\n\n</code></pre>\n<hr>\n<pre><code>PS C:\\Program Files (x86)\\Quest 5&gt; grep -r questCefInterop *\ndesktopplayer.js:    questCefInterop.uiEvent(cmd, parameter);\nPS C:\\Program Files (x86)\\Quest 5&gt;\n</code></pre>\n<hr>\n<p>I'm looking at your code next, mrangel.  (My mind is moving slowly today.  It's an 'only think about one thing at a time' day.)</p>\n\n",
      "PostDate": "2017-11-24T13:53:51.9479593Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7e1ce5f0-3c2d-4514-8cb9-d6593c93ed1e",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could set the value by using `Eval`:\r\n```params = Split(paramToSplit, \";\")\r\nif (not ListCount(params) = 3) {\r\n  error (\"Syntax error.\")\r\n}\r\nobj = params[0]\r\nobject = GetObject(obj)\r\natt = params[1]\r\nvalue = params[2]\r\nset (object, att, Eval(value))\r\nmsg (object.name+\".\"+att+\" = \"+value)\r\nmsg (TypeOf(object, att))\r\nmsg (\"Done.<br/>\")\r\n```\r\nYou would have to put your strings in double quotes, but that would then differentiate from objects.",
      "EditableFormat": "markdown",
      "HTML": "<p>You could set the value by using <code>Eval</code>:</p>\n<pre><code>if (not ListCount(params) = 3) {\n  error (\"Syntax error.\")\n}\nobj = params[0]\nobject = GetObject(obj)\natt = params[1]\nvalue = params[2]\nset (object, att, Eval(value))\nmsg (object.name+\".\"+att+\" = \"+value)\nmsg (TypeOf(object, att))\nmsg (\"Done.&lt;br/&gt;\")\n</code></pre>\n<p>You would have to put your strings in double quotes, but that would then differentiate from objects.</p>\n\n",
      "PostDate": "2017-11-24T16:53:48.1635263Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9da6773c-87bc-44a8-8ec5-2a385b3ba893",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">You would have to put your strings in double quotes\r\n\r\nLike this?\r\n\r\n```\r\nJS.ASLEvent(\"SetFromAsl\", \"thingy;look;\\\"It is blue.\\\"\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>You would have to put your strings in double quotes</p>\n</blockquote>\n<p>Like this?</p>\n<pre><code>JS.ASLEvent(\"SetFromAsl\", \"thingy;look;\\\"It is blue.\\\"\")\n</code></pre>\n\n",
      "PostDate": "2017-11-24T17:22:18.110224Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4a0961fb-64ad-45b9-8e14-e7d3b5bd8c54",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nparams = Split(params, \";\")\r\nif (not ListCount(params) = 3) {\r\n  error (\"Syntax error.\")\r\n}\r\nobj = params[0]\r\n//If...Else added by KV\r\nif (obj = \"game.pov\") {\r\n  object = game.pov\r\n}\r\nelse {\r\n  object = GetObject(obj)\r\n}\r\natt = params[1]\r\nvalue = params[2]\r\nset (object, att, Eval(value))\r\nmsg (object.name+\".\"+att+\" = \"+value)\r\nmsg (TypeOf(object, att))\r\nmsg (\"Done.<br/>\")\r\n```\r\n\r\n```\r\nJS.ASLEvent (\"AslSet\", \"player;froody_dude;\\\"Yes you are.\\\"\")\r\nJS.ASLEvent (\"AslSet\", \"player;look;\\\"You look down at yourself.  You see nothing abnormal.\\\"\")\r\nJS.ASLEvent (\"AslSet\", \"game.pov;froody;true\")\r\nJS.ASLEvent (\"AslSet\", \"player;parent;room2\")\r\nJS.ASLEvent (\"AslSet\", \"player;damage_multiplier;9\")\r\n```\r\n```\r\n    <turnscript name=\"turns\">\r\n      <enabled />\r\n      <script>\r\n        msg (\"One turn!\")\r\n      </script>\r\n    </turnscript>\r\n  </game>\r\n```\r\n---\r\n<samp>\r\n\r\nplayer.froody_dude = \"Yes you are.\"\r\nstring\r\nDone.\r\n\r\nOne turn!\r\nplayer.look = \"You look down at yourself. You see nothing abnormal.\"\r\nstring\r\nDone.\r\n\r\nOne turn!\r\nplayer.froody = true\r\nboolean\r\nDone.\r\n\r\nOne turn!\r\n\r\nYou are in a room2.\r\nplayer.parent = room2\r\nobject\r\nDone.\r\n\r\nOne turn!\r\nplayer.damage_multiplier = 9\r\nint\r\nDone.\r\n\r\nOne turn!\r\n</samp>",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>params = Split(params, \";\")\nif (not ListCount(params) = 3) {\n  error (\"Syntax error.\")\n}\nobj = params[0]\n//If...Else added by KV\nif (obj = \"game.pov\") {\n  object = game.pov\n}\nelse {\n  object = GetObject(obj)\n}\natt = params[1]\nvalue = params[2]\nset (object, att, Eval(value))\nmsg (object.name+\".\"+att+\" = \"+value)\nmsg (TypeOf(object, att))\nmsg (\"Done.&lt;br/&gt;\")\n</code></pre>\n<pre><code>JS.ASLEvent (\"AslSet\", \"player;froody_dude;\\\"Yes you are.\\\"\")\nJS.ASLEvent (\"AslSet\", \"player;look;\\\"You look down at yourself.  You see nothing abnormal.\\\"\")\nJS.ASLEvent (\"AslSet\", \"game.pov;froody;true\")\nJS.ASLEvent (\"AslSet\", \"player;parent;room2\")\nJS.ASLEvent (\"AslSet\", \"player;damage_multiplier;9\")\n</code></pre>\n<pre><code>    &lt;turnscript name=\"turns\"&gt;\n      &lt;enabled /&gt;\n      &lt;script&gt;\n        msg (\"One turn!\")\n      &lt;/script&gt;\n    &lt;/turnscript&gt;\n  &lt;/game&gt;\n</code></pre>\n<hr>\n<samp>\n<p>player.froody_dude = \"Yes you are.\"<br>\nstring<br>\nDone.</p>\n<p>One turn!<br>\nplayer.look = \"You look down at yourself. You see nothing abnormal.\"<br>\nstring<br>\nDone.</p>\n<p>One turn!<br>\nplayer.froody = true<br>\nboolean<br>\nDone.</p>\n<p>One turn!</p>\n<p>You are in a room2.<br>\nplayer.parent = room2<br>\nobject<br>\nDone.</p>\n<p>One turn!<br>\nplayer.damage_multiplier = 9<br>\nint<br>\nDone.</p>\n<p>One turn!<br>\n</p>\n\n</samp>",
      "PostDate": "2017-11-24T17:50:08.4834201Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6e9a2ab6-6dbd-4442-8a6e-ca0b96abde9c",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's ```ASLEvent``` that's cranking up the turn count.  Definitely.\r\n\r\nHere it is just running the new function:\r\n\r\n```\r\nAslSet(\"player;froody_dude;\\\"Yes you are.\\\"\")\r\nAslSet(\"player;look;\\\"You look down at yourself.  You see nothing abnormal.\\\"\")\r\nAslSet(\"game.pov;froody;true\")\r\nAslSet(\"player;parent;room2\")\r\nAslSet(\"player;damage_multiplier;9\")\r\n\r\n```\r\n\r\n---\r\n\r\n\r\n\r\nYou are in a room.\r\nplayer.froody_dude = \"Yes you are.\"\r\nstring\r\nDone.\r\n\r\nplayer.look = \"You look down at yourself. You see nothing abnormal.\"\r\nstring\r\nDone.\r\n\r\nplayer.froody = true\r\nboolean\r\nDone.\r\n\r\n\r\nYou are in a room2.\r\nplayer.parent = room2\r\nobject\r\nDone.\r\n\r\nplayer.damage_multiplier = 9\r\nint\r\nDone.\r\n\r\n\\> jump\r\nYou jump, but nothing happens.\r\nOne turn!\r\n\r\n\r\n\r\n---\r\nThat code works very well, though!\r\n\r\nI just need to figure out how chromium is telling the game to finish the turn, or not use JS to set attributes.",
      "EditableFormat": "markdown",
      "HTML": "<p>It's <code>ASLEvent</code> that's cranking up the turn count.  Definitely.</p>\n<p>Here it is just running the new function:</p>\n<pre><code>AslSet(\"player;froody_dude;\\\"Yes you are.\\\"\")\nAslSet(\"player;look;\\\"You look down at yourself.  You see nothing abnormal.\\\"\")\nAslSet(\"game.pov;froody;true\")\nAslSet(\"player;parent;room2\")\nAslSet(\"player;damage_multiplier;9\")\n\n</code></pre>\n<hr>\n<p>You are in a room.<br>\nplayer.froody_dude = \"Yes you are.\"<br>\nstring<br>\nDone.</p>\n<p>player.look = \"You look down at yourself. You see nothing abnormal.\"<br>\nstring<br>\nDone.</p>\n<p>player.froody = true<br>\nboolean<br>\nDone.</p>\n<p>You are in a room2.<br>\nplayer.parent = room2<br>\nobject<br>\nDone.</p>\n<p>player.damage_multiplier = 9<br>\nint<br>\nDone.</p>\n<p>&gt; jump<br>\nYou jump, but nothing happens.<br>\nOne turn!</p>\n<hr>\n<p>That code works very well, though!</p>\n<p>I just need to figure out how chromium is telling the game to finish the turn, or not use JS to set attributes.</p>\n\n",
      "PostDate": "2017-11-24T17:53:15.7483437Z",
      "LastEditDate": "2017-11-24T17:56:05.4440239Z",
      "link": null
    },
    {
      "PostId": "23e5604e-353f-4d5a-84e1-1bec72fe4e2b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's interesting.\r\n\r\nI guess if you were doing that, you'd have to make your turnscript check if each turn was a response to a real command. (Thinking of which, is there any documentation on how the equality operator works with lists/dictionaries? Is it like Java?)",
      "EditableFormat": "markdown",
      "HTML": "<p>That's interesting.</p>\n<p>I guess if you were doing that, you'd have to make your turnscript check if each turn was a response to a real command. (Thinking of which, is there any documentation on how the equality operator works with lists/dictionaries? Is it like Java?)</p>\n\n",
      "PostDate": "2017-11-24T21:08:18.5533753Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
