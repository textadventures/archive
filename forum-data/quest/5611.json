{
  "Topic": {
    "TopicId": "5611",
    "ForumId": "10",
    "Title": "Copying String Lists",
    "LastUpdated": "2015-11-14T09:44:06+00:00",
    "ReplyCount": 15
  },
  "Posts": [
    {
      "PostId": "38624",
      "UserId": 0,
      "Username": "afrotoast",
      "UserAvatar": null,
      "UserGravatar": "d8f5f23dfb4df278f3499835fb600b7a",
      "EditableText": "Hi guys, I've gotten very far just by searching the forums but I have an ease-of-use question to ask.\n\nIn my arguably primitive game I set up a system where you can hold on to an item and wear it, but over time (through turn scripts) the item evolves. I did this by making the turn script change out the actual object for a different one that behaves the same way. i.e. (object_level1, object_level2).\n\nSo... because the item is a core part of the game, I needed to make many different alt names for it so that the player can refer to it really easily without breaking immersion. But because I have quite a few levels it can be in, I need to use the same alt name list for each object. I've been keying it in manually using the Quest UI, but its slow and tedious - is there actually a way for me to force all of them to refer to one master string list? or a way for me to copy all the entries across each version of the object?\n\nFinally, if a mod reads this, I accidentally my name. ): Idk why I thought the username field was asking for my email address. Can this be fixed?",
      "EditableFormat": "bbcode",
      "HTML": "Hi guys, I've gotten very far just by searching the forums but I have an ease-of-use question to ask.<br/><br/>In my arguably primitive game I set up a system where you can hold on to an item and wear it, but over time (through turn scripts) the item evolves. I did this by making the turn script change out the actual object for a different one that behaves the same way. i.e. (object_level1, object_level2).<br/><br/>So... because the item is a core part of the game, I needed to make many different alt names for it so that the player can refer to it really easily without breaking immersion. But because I have quite a few levels it can be in, I need to use the same alt name list for each object. I've been keying it in manually using the Quest UI, but its slow and tedious - is there actually a way for me to force all of them to refer to one master string list? or a way for me to copy all the entries across each version of the object?<br/><br/>Finally, if a mod reads this, I accidentally my name. ): Idk why I thought the username field was asking for my email address. Can this be fixed?",
      "PostDate": "2015-11-10T12:53:03+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38625",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "I updated your username for you.",
      "EditableFormat": "bbcode",
      "HTML": "I updated your username for you.",
      "PostDate": "2015-11-10T12:57:43+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38626",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "The best way would be to do it on the fly, when the object upgrades.\n[code:3q28wwwk]object_level2&#46;alt = object_level1&#46;alt[/code:3q28wwwk]",
      "EditableFormat": "bbcode",
      "HTML": "The best way would be to do it on the fly, when the object upgrades.<br/><pre><code>object_level2&#46;alt = object_level1&#46;alt</code></pre>",
      "PostDate": "2015-11-10T13:57:07+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38627",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "My code-nooby fix would simply be to create however many items you need equal to the number of times it updates.  When an event triggers an update (or timer or turn script), simply swap out the old item and replace it with a new item from a &quot;storage room&quot;.  That way you don't need to update any alt names at all.  Just my thought, but if you understand Pixie's post, do it that way - I'm sure it is simpler and more logical.  Who knows... maybe that is what you did and I don't understand you either? <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->\n\nGood luck!\n\nXanMag",
      "EditableFormat": "bbcode",
      "HTML": "My code-nooby fix would simply be to create however many items you need equal to the number of times it updates.  When an event triggers an update (or timer or turn script), simply swap out the old item and replace it with a new item from a &quot;storage room&quot;.  That way you don't need to update any alt names at all.  Just my thought, but if you understand Pixie's post, do it that way - I'm sure it is simpler and more logical.  Who knows... maybe that is what you did and I don't understand you either? <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --><br/><br/>Good luck!<br/><br/>XanMag",
      "PostDate": "2015-11-10T14:18:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38631",
      "UserId": 0,
      "Username": "afrotoast",
      "UserAvatar": null,
      "UserGravatar": "d8f5f23dfb4df278f3499835fb600b7a",
      "EditableText": "@Alex - Thanks! I noticed when I couldn't get in using my email address anymore, haha.\n\n@The Pixie: Thank you! I'll give it a shot, but I'm still really new to all this. Where should I go to put in actual code? So far I've only been using the Quest GUI.\n\n@XanMag: Yeah the system right now uses a turnscript to decide when the object should &quot;level up&quot;, then swaps it out for the other one. The problem comes because this swap is invisible to the player, and they have to be able to use the same alternate names to refer to it.\n\nIt's just an ease of use issue for me: I need to manually &quot;add&quot; entries to the string list one by one for each object through the Quest UI, so I was hoping there was a way I could either:\n\n[list:3qzrcrh2]A: Copy-paste the string list between each object.\nB: Have each object refer to one singular master string list.[/list:u:3qzrcrh2]\n\nI haven't been able to find anything on the forums /: either I'm not searching the right terms or its not been talked about before.",
      "EditableFormat": "bbcode",
      "HTML": "@Alex - Thanks! I noticed when I couldn't get in using my email address anymore, haha.<br/><br/>@The Pixie: Thank you! I'll give it a shot, but I'm still really new to all this. Where should I go to put in actual code? So far I've only been using the Quest GUI.<br/><br/>@XanMag: Yeah the system right now uses a turnscript to decide when the object should &quot;level up&quot;, then swaps it out for the other one. The problem comes because this swap is invisible to the player, and they have to be able to use the same alternate names to refer to it.<br/><br/>It's just an ease of use issue for me: I need to manually &quot;add&quot; entries to the string list one by one for each object through the Quest UI, so I was hoping there was a way I could either:<br/><br/>[list]A: Copy-paste the string list between each object.<br/>B: Have each object refer to one singular master string list.[/list:u]<br/><br/>I haven't been able to find anything on the forums /: either I'm not searching the right terms or its not been talked about before.",
      "PostDate": "2015-11-11T06:36:29+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38632",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "You need to put it in your turn script. It is hard to describe for the GUI, so I will try to explain for the code view. Go to the turn scipt. Above the scripts you added there will be a row of icons, with the word &quot;Script&quot; at the left. The seventh icon will take you to the code view for this script only. Click it.\n\nEvery line of GUI script corresponds exactly to a line of code, so if you look through the code, you should see a line like this:\n[code:3lboddy4]MoveObject (object_level2, player)[/code:3lboddy4]\nThis is where the level 2 object is moved to the player. That is when you need to copy the list across.\n[code:3lboddy4]MoveObject (object_level2, player)\nobject_level2&#46;alt = object_level1&#46;alt[/code:3lboddy4]\nYou will also need to do that for all the other level ups, so:\n[code:3lboddy4]MoveObject (object_level3, player)\nobject_level3&#46;alt = object_level2&#46;alt[/code:3lboddy4]\n... and so on.\n\nNow you only have to create the alt list on the first object, and Quest will sort the rest out.\n\nIf you are still struggling, copy all the code for your turnscript into your post, and we will look at it.",
      "EditableFormat": "bbcode",
      "HTML": "You need to put it in your turn script. It is hard to describe for the GUI, so I will try to explain for the code view. Go to the turn scipt. Above the scripts you added there will be a row of icons, with the word &quot;Script&quot; at the left. The seventh icon will take you to the code view for this script only. Click it.<br/><br/>Every line of GUI script corresponds exactly to a line of code, so if you look through the code, you should see a line like this:<br/><pre><code>MoveObject (object_level2, player)</code></pre><br/>This is where the level 2 object is moved to the player. That is when you need to copy the list across.<br/><pre><code>MoveObject (object_level2, player)<br/>object_level2&#46;alt = object_level1&#46;alt</code></pre><br/>You will also need to do that for all the other level ups, so:<br/><pre><code>MoveObject (object_level3, player)<br/>object_level3&#46;alt = object_level2&#46;alt</code></pre><br/>... and so on.<br/><br/>Now you only have to create the alt list on the first object, and Quest will sort the rest out.<br/><br/>If you are still struggling, copy all the code for your turnscript into your post, and we will look at it.",
      "PostDate": "2015-11-11T07:49:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38635",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "here's Pixie's detailed guides on coding in quest (if you're interested in learning):\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=5422\">viewtopic.php?f=18&amp;t=5422</a><!-- l -->\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=4953\">viewtopic.php?f=18&amp;t=4953</a><!-- l -->\n\nand here's some of mine, which *may* (I'm not as clear-concise as Pixie and others, lol) help too:\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=5559\">viewtopic.php?f=18&amp;t=5559</a><!-- l --> (game making basics: Attributes and the 'if' Script)",
      "EditableFormat": "bbcode",
      "HTML": "here's Pixie's detailed guides on coding in quest (if you're interested in learning):<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=5422\">viewtopic.php?f=18&amp;t=5422</a><!-- l --><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=4953\">viewtopic.php?f=18&amp;t=4953</a><!-- l --><br/><br/>and here's some of mine, which *may* (I'm not as clear-concise as Pixie and others, lol) help too:<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=5559\">viewtopic.php?f=18&amp;t=5559</a><!-- l --> (game making basics: Attributes and the 'if' Script)",
      "PostDate": "2015-11-11T08:18:36+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38636",
      "UserId": 0,
      "Username": "afrotoast",
      "UserAvatar": null,
      "UserGravatar": "d8f5f23dfb4df278f3499835fb600b7a",
      "EditableText": "@The Pixie:\n\nAwesome! It successfully translated the code as &quot;Set Variable (object_level2.alt) = expression (objectlevel1.alt)&quot; in the GUI as well, I will have to test it to make sure it works. Thank you!\n\nI noticed that my code for swapping the objects out was:\n\n[code:3kc8pu6s]RemoveObject (object_level1)\nAddToInventory (object_level2)[/code:3kc8pu6s]\n\nWhereas you suggested MoveObject instead. Is there any reason to use one over the other, or is it just many ways to get the same thing done?\n\n@HK:\n\nIt's HK! One of your replies to someone else helped me figure out a weird bug in my project! Come to think of it, I recognize a lot of usernames here hahaha I'm going to guess its a pretty small but active community =p\n\nThanks for the link! I'll have a read through it soon!",
      "EditableFormat": "bbcode",
      "HTML": "@The Pixie:<br/><br/>Awesome! It successfully translated the code as &quot;Set Variable (object_level2.alt) = expression (objectlevel1.alt)&quot; in the GUI as well, I will have to test it to make sure it works. Thank you!<br/><br/>I noticed that my code for swapping the objects out was:<br/><br/><pre><code>RemoveObject (object_level1)<br/>AddToInventory (object_level2)</code></pre><br/><br/>Whereas you suggested MoveObject instead. Is there any reason to use one over the other, or is it just many ways to get the same thing done?<br/><br/>@HK:<br/><br/>It's HK! One of your replies to someone else helped me figure out a weird bug in my project! Come to think of it, I recognize a lot of usernames here hahaha I'm going to guess its a pretty small but active community =p<br/><br/>Thanks for the link! I'll have a read through it soon!",
      "PostDate": "2015-11-11T08:22:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38638",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[quote=&quot;afrotoast&quot;:59lpuplk]Awesome! It successfully translated the code as &quot;Set Variable (object_level2.alt) = expression (objectlevel1.alt)&quot; in the GUI as well, I will have to test it to make sure it works. Thank you![/quote:59lpuplk]\nGreat. You can use that as a guide to doing it with the GUI rather than code for the next time if you prefer that way.\n[quote:59lpuplk]I noticed that my code for swapping the objects out was:\n\n[code:59lpuplk]RemoveObject (object_level1)\nAddToInventory (object_level2)[/code:59lpuplk]\n\nWhereas you suggested MoveObject instead. Is there any reason to use one over the other, or is it just many ways to get the same thing done?[/quote:59lpuplk]\nI was trying to guess what you would have used. Your way is better just because it is more obvious what is happening.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>afrotoast wrote:</cite>Awesome! It successfully translated the code as &quot;Set Variable (object_level2.alt) = expression (objectlevel1.alt)&quot; in the GUI as well, I will have to test it to make sure it works. Thank you!</blockquote><br/>Great. You can use that as a guide to doing it with the GUI rather than code for the next time if you prefer that way.<br/><blockquote><p>I noticed that my code for swapping the objects out was:<br/><br/><pre><code>RemoveObject (object_level1)<br/>AddToInventory (object_level2)</code></pre><br/><br/>Whereas you suggested MoveObject instead. Is there any reason to use one over the other, or is it just many ways to get the same thing done?</p></blockquote><br/>I was trying to guess what you would have used. Your way is better just because it is more obvious what is happening.",
      "PostDate": "2015-11-11T09:07:57+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38639",
      "UserId": 0,
      "Username": "afrotoast",
      "UserAvatar": null,
      "UserGravatar": "d8f5f23dfb4df278f3499835fb600b7a",
      "EditableText": "@The Pixie:\n\nUsing code makes me feel like I know what I'm doing, but really I don't, hahaha. But thanks to you I've learnt a little bit about the interactions between the GUI and actual code, so in the future I know where to look to pay attention to how the GUI works under the hood. I think it'll slowly give me more freedom in the software as I go along.",
      "EditableFormat": "bbcode",
      "HTML": "@The Pixie:<br/><br/>Using code makes me feel like I know what I'm doing, but really I don't, hahaha. But thanks to you I've learnt a little bit about the interactions between the GUI and actual code, so in the future I know where to look to pay attention to how the GUI works under the hood. I think it'll slowly give me more freedom in the software as I go along.",
      "PostDate": "2015-11-11T15:32:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38640",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "you're coding <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->, even if you don't understand it that well right now, you've done coding, hehe <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\n--------\n\nif you interested:\n\ncreate a new game, and in your new game's GUI~Editor, at the top of the screen, in the horizontal bar at the top, between the 'play' and and 'help' buttons, is a notepaper--like button. This notepaper-like button is a toggle to go back and forth between the GUI~Editor mode, and Code View mode (this shows you, your *ENTIRE* game code). Just look at the code for a bit. It should look for the most part, like this:\n\n[code:1s72avf9]&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;blah&quot;&gt;\n    &lt;gameid&gt;blah&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;[/code:1s72avf9]\n\nthis is your entire game code (think of these as 'blocks' of code):\n\n[code:1s72avf9]&lt;asl version=&quot;550&quot;&gt;\n  // your entire game's content~code, must be between the upper-starting '&lt;asl&gt;' tag and the lower-ending '&lt;/asl&gt;' tag\n&lt;/asl&gt;[/code:1s72avf9]\n\nthe, version=&quot;550&quot;, is the version of the quest that you downloaded. So, your code of, version=&quot;###&quot;, must match up with the actual software version of quest that you're downloaded and using. Fro example, say I'm still using an earlier version of quest, say version=&quot;520&quot;, and I want my game to work on your current version of quest, version=&quot;550&quot;. I would simply have to change my game's code from: &lt;asl version=&quot;520&quot;&gt;, to, &lt;asl version=&quot;550&quot;&gt;, ignoring some other code line's form-syntax that got changed between some versions of quest, for my game to work for your current quest that you downloaded.\n\nthe 2 'include refs' code lines are library files (extra code) that is added to your game. Quest is actually very customizable, the default quest engine is made up of lots of library files, the 'English.aslx' file and the 'Core.aslx' file (this is actually a collection of a bunch of files). So, if you're a very good programmer, you could write own library files, creating your own entirely new game engine for quest! Library files can be very simple 'patches' (like with game-software patches) of code, that you want to add to your game (such as something as simple as an Object or a Verb), they don't have to be code that creates an entire game engine, but thay can be, lol.\n\nnext is the Game Object block:\n\n[code:1s72avf9]&lt;game name=&quot;blah&quot;&gt;\n  &lt;gameid&gt;blah&lt;/gameid&gt;\n  &lt;version&gt;1&#46;0&lt;/version&gt;\n&lt;/game&gt;[/code:1s72avf9]\n\nNow, go back into the GUI~Editor mode (press that notepaper like button at the top), and on the left side, click on 'game', so it is highlighted, then click on one of the Tabs on the right side and put in some setting (for example: the 'author' or 'category' or whatever). Now, go back into Code View, and see if you can find the additional code line~s (Attribute tag lines~blocks) to your Game Object.\n\nthus, you can compare doing something in the GUI~Editor, to what it really is (as code) in code, and vice versa.\n\nafter the special Game Object (it holds all the global game-wide settings and options), you've got the default 'room' Room Object block:\n\n[code:1s72avf9]&lt;object name=&quot;room&quot;&gt;\n  // blah stuff for now\n&lt;/object&gt;[/code:1s72avf9]\n\nand within the default 'room' Room Object is the default 'player' Player Object:\n\n[code:1s72avf9]// the default 'player' Player Object tag block&#58;\n\n&lt;object name=&quot;player&quot;&gt;\n  // blah\n&lt;/object&gt;\n\n// and as can be seen, the 'player' Player Object is (placed) inside (see how its indented over) of the default 'room' Room Object&#58;\n\n&lt;object name=&quot;room&quot;&gt;\n  // blah\n  &lt;object name=&quot;player&quot;&gt;\n    // blah\n  &lt;/object&gt;\n&lt;/object&gt;\n\n--------------------------------------------------------------------\n\n// or, instead of (1) &quot;physically&quot; placing the player into the room as seen above, we can do it, this way too&#58;\n\n&lt;object name=&quot;room&quot;&gt;\n  // blah Attributes\n&lt;/object&gt;\n\n&lt;object name=&quot;player&quot;&gt;\n  // blah Attributes\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n// the (2) 'parent' Attribute does the same thing as the GUI~Editor's add new script&#058; (3) 'MoveObject(moving_Object, destination_Object)' Script\n// these 3 ways, are all ways of determining-setting-assigning an Object's current location (such as being inside of another Object)[/code:1s72avf9]\n\nare you starting to see~understand how the code is structured a little bit?",
      "EditableFormat": "bbcode",
      "HTML": "you're coding <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->, even if you don't understand it that well right now, you've done coding, hehe <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>--------<br/><br/>if you interested:<br/><br/>create a new game, and in your new game's GUI~Editor, at the top of the screen, in the horizontal bar at the top, between the 'play' and and 'help' buttons, is a notepaper--like button. This notepaper-like button is a toggle to go back and forth between the GUI~Editor mode, and Code View mode (this shows you, your *ENTIRE* game code). Just look at the code for a bit. It should look for the most part, like this:<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;blah&quot;&gt;<br/>    &lt;gameid&gt;blah&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/asl&gt;</code></pre><br/><br/>this is your entire game code (think of these as 'blocks' of code):<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>  // your entire game's content~code, must be between the upper-starting '&lt;asl&gt;' tag and the lower-ending '&lt;/asl&gt;' tag<br/>&lt;/asl&gt;</code></pre><br/><br/>the, version=&quot;550&quot;, is the version of the quest that you downloaded. So, your code of, version=&quot;###&quot;, must match up with the actual software version of quest that you're downloaded and using. Fro example, say I'm still using an earlier version of quest, say version=&quot;520&quot;, and I want my game to work on your current version of quest, version=&quot;550&quot;. I would simply have to change my game's code from: &lt;asl version=&quot;520&quot;&gt;, to, &lt;asl version=&quot;550&quot;&gt;, ignoring some other code line's form-syntax that got changed between some versions of quest, for my game to work for your current quest that you downloaded.<br/><br/>the 2 'include refs' code lines are library files (extra code) that is added to your game. Quest is actually very customizable, the default quest engine is made up of lots of library files, the 'English.aslx' file and the 'Core.aslx' file (this is actually a collection of a bunch of files). So, if you're a very good programmer, you could write own library files, creating your own entirely new game engine for quest! Library files can be very simple 'patches' (like with game-software patches) of code, that you want to add to your game (such as something as simple as an Object or a Verb), they don't have to be code that creates an entire game engine, but thay can be, lol.<br/><br/>next is the Game Object block:<br/><br/><pre><code>&lt;game name=&quot;blah&quot;&gt;<br/>  &lt;gameid&gt;blah&lt;/gameid&gt;<br/>  &lt;version&gt;1&#46;0&lt;/version&gt;<br/>&lt;/game&gt;</code></pre><br/><br/>Now, go back into the GUI~Editor mode (press that notepaper like button at the top), and on the left side, click on 'game', so it is highlighted, then click on one of the Tabs on the right side and put in some setting (for example: the 'author' or 'category' or whatever). Now, go back into Code View, and see if you can find the additional code line~s (Attribute tag lines~blocks) to your Game Object.<br/><br/>thus, you can compare doing something in the GUI~Editor, to what it really is (as code) in code, and vice versa.<br/><br/>after the special Game Object (it holds all the global game-wide settings and options), you've got the default 'room' Room Object block:<br/><br/><pre><code>&lt;object name=&quot;room&quot;&gt;<br/>  // blah stuff for now<br/>&lt;/object&gt;</code></pre><br/><br/>and within the default 'room' Room Object is the default 'player' Player Object:<br/><br/><pre><code>// the default 'player' Player Object tag block&#58;<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>  // blah<br/>&lt;/object&gt;<br/><br/>// and as can be seen, the 'player' Player Object is (placed) inside (see how its indented over) of the default 'room' Room Object&#58;<br/><br/>&lt;object name=&quot;room&quot;&gt;<br/>  // blah<br/>  &lt;object name=&quot;player&quot;&gt;<br/>    // blah<br/>  &lt;/object&gt;<br/>&lt;/object&gt;<br/><br/>--------------------------------------------------------------------<br/><br/>// or, instead of (1) &quot;physically&quot; placing the player into the room as seen above, we can do it, this way too&#58;<br/><br/>&lt;object name=&quot;room&quot;&gt;<br/>  // blah Attributes<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>  // blah Attributes<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>// the (2) 'parent' Attribute does the same thing as the GUI~Editor's add new script&#058; (3) 'MoveObject(moving_Object, destination_Object)' Script<br/>// these 3 ways, are all ways of determining-setting-assigning an Object's current location (such as being inside of another Object)</code></pre><br/><br/>are you starting to see~understand how the code is structured a little bit?",
      "PostDate": "2015-11-11T17:59:15+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38662",
      "UserId": 0,
      "Username": "afrotoast",
      "UserAvatar": null,
      "UserGravatar": "d8f5f23dfb4df278f3499835fb600b7a",
      "EditableText": "@HK\n\nThat's really fascinating, I was actually under the impression that my ability to look at the game's code was limited to only the little windows within each object, but being able to see the whole game as nothing but letters and symbols on a screen is pretty mind-blowing: coding is something I've always regretted not getting into when choosing my post secondary-education and all this is really exciting. Is this a language unique to quest? Or will I be able to take what I learn here into more complex environments as well?\n\nThe idea of customizing and making my own engines sounds super exciting but I think I have a lot more to learn before I can think about unpacking all that =p",
      "EditableFormat": "bbcode",
      "HTML": "@HK<br/><br/>That's really fascinating, I was actually under the impression that my ability to look at the game's code was limited to only the little windows within each object, but being able to see the whole game as nothing but letters and symbols on a screen is pretty mind-blowing: coding is something I've always regretted not getting into when choosing my post secondary-education and all this is really exciting. Is this a language unique to quest? Or will I be able to take what I learn here into more complex environments as well?<br/><br/>The idea of customizing and making my own engines sounds super exciting but I think I have a lot more to learn before I can think about unpacking all that =p",
      "PostDate": "2015-11-13T16:11:20+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38663",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Quest uses several laguages. When you go Tools - Code view, you are looking at the XML that holds the data. You do not usually need to worry about that, though it is probably the easioer to understand. The code that actually does stuff, what I was using, is unique to Quest, and is worth getting familar with. Text is displayed with HTML (almost the same as XML), and manipulated with JavaScript.",
      "EditableFormat": "bbcode",
      "HTML": "Quest uses several laguages. When you go Tools - Code view, you are looking at the XML that holds the data. You do not usually need to worry about that, though it is probably the easioer to understand. The code that actually does stuff, what I was using, is unique to Quest, and is worth getting familar with. Text is displayed with HTML (almost the same as XML), and manipulated with JavaScript.",
      "PostDate": "2015-11-13T17:19:22+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38667",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I actually used quest to learn to program (I found quest, ~ 2-3 years ago, not knowing anything at all about programming)! And now I'm currently (right now) taking my very first programming classes in C++, Java, and Python, and I've been shocked at how well I know and am doing in these 3 programming language classes. The only thing that quest hasn't covered (fully or not at all) is: (not fully) encapsulation (Classes-Objects), (not fully) inheritance (quest's user level: Object Types, aren't quite the same level of complexity, as quest makes it easier, lol), and polymorphism (too hard to explain this, lol), and designing your own somewhat large-complex program, at least so far with what I've learned~done from using quest.\n\nAlso, now that I'm taking programming language classes, I can say with experience, that quest is a great way to learn the basics of programming. It is so much easier to learn the basics of programming (well, scripting, anyways) through quest than the actual programming languages, lol.\n\n-----------\n\naside from learning to program from quest, there's also:\n\ncodecademy.com\nudemy.com\n\nand of course numerous websites~forums on computers~programming\n\nand youtube videos too, for example, the MIT programming 101 videos (the Professors suck though at teaching progrmaming, lol)\n\n------\n\nyou can see the quest engine game coding, I'd recommend doing it through the GUI~Editor though (lower left corner: Filter -&gt; Show Library Elements -&gt; toggle-check it so that it is toggled-checked 'on' -&gt; now in the 'tree of stuff' is light grey text, this is all the built-in code), so you don't accidentally mess up the actual quest files (&quot;core~blah.aslx&quot; files), and have to re-download quest. But, if you can be careful, you can go into the quest folder, and look at all of its engine files, just open them up with a text software like notepad, wordpad, notepad++ (if you want to learn~do programming, I recommend you DL this), Apple: text editor, etc, and look at quest's code.\n\n---------\n\nNotepad++\n\n<!-- m --><a class=\"postlink\" href=\"https://notepad-plus-plus.org/\">https://notepad-plus-plus.org/</a><!-- m -->\n\nthis has a lot of great features that I need to learn about and use, lol.\n\nbut the main reason to DL it, is that it has a lot (~most) programming languages, and it color codes the lines for you, making it easier to read, write, and troubleshoot code.\n\nonce you DL'ed, installed, and started-opened up and are in notepad++, at the top of the screen in the horizontal bar at the top, is 'languages', click on it, and then select the programming language you need. For quest, choose 'XML' (eXtensible Markup Langauge).\n\n--------\n\njust learned a bit more from Pixe's post above, laughs.\n\nhere's how I would describe what Pixie said (if I understand correctly):\n\n'XML' is (at least like) a web-browser language similar to 'HTTP', and in quest, the 'XML', is what I call the 'creation' tags (conceptually, this code is~gives the &quot;physical form ~ existence&quot; of stuff, its your &quot;physical&quot; things in your game~code):\n\nall the stuff with the (showing it horizontal, but usually it's vertical): '&lt;xxx&gt;xxx&lt;/xxx&gt;' or '&lt;xxx /&gt;'\n\nthe computer doesn't care whether you write vertically or horizontally, but humans have a very hard time reading horizontal code.\n\n[code:3gsh7soa]&lt;asl version=&quot;550&quot;&gt;\n&lt;/asl&gt;\n\n&lt;game name=&quot;xxx&quot;&gt;\n&lt;/game&gt;\n\n&lt;object name=&quot;room&quot;&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;HK&quot;&gt;\n  &lt;attr name=&quot;strength&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n  &lt;attr name=&quot;endurance&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n  &lt;attr name=&quot;dexterity&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n  &lt;attr name=&quot;agility&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n  // etc Attributes\n&lt;/object&gt;\n\n&lt;function name=&quot;xxx&quot;&gt;\n&lt;/function&gt;\n\n// etc etc etc[/code:3gsh7soa]\n\n-------\n\nthen there's the all the scripting (the action~event coding), which is unique to quest, but similar to many~some languages (Quest is similar in design structure to Python, as Alex~Quest is European~U.K., and Python is more popular in Europe than in the U.S. currently):\n\n(there's no 'creation' tags, '&lt;xxx&gt;xxx&lt;/xxx' or '&lt;xxx /&gt;', on any of this code)\n\n[code:3gsh7soa]HK&#46;strength = 100\nHK&#46;strength = HK&#46;strength * 10000000\n\nHK&#46;damage = 100000000\n\norc&#46;dead = false\norc&#46;current_life = 100\n\na 'fight' Verb's scripting added to the 'orc' Object&#58;\n\nif (orc&#46;dead = false) {\n  orc&#46;current_life = orc&#46;current_life - HK&#46;damage\n  msg (&quot;You attack the orc&#46;&quot;)\n  if (orc&#46;current_life &lt;= 0) {\n    orc&#46;dead = true\n    msg (&quot;You killed the orc&#46;&quot;)\n  } else {\n    // the orc attacks you, code lines, (I'm lazy)\n  }\n} else {\n  msg (&quot;The orc is already dead, silly&#46;&quot;)\n}\n\n// etc etc etc examples of scripting code lines~blocks[/code:3gsh7soa]\n\n--------\n\nand lastly, JS (JavaScript) can be used too, for doing whatever, with quest.\n\n--------------------------\n\nhere's mostly vertical code format:\n\n(very easy to read and understand, once you get its structure, of course)\n\n[code:3gsh7soa]&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;blah&quot;&gt;\n    &lt;gameid&gt;blah&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;[/code:3gsh7soa]\n\nhere's horizontal code format:\n\n(we humans hate it, as we can't read it easily like a computer can)\n\n[code:3gsh7soa]&lt;asl version=&quot;550&quot;&gt;&lt;include ref=&quot;English&#46;aslx&quot; /&gt;&lt;include ref=&quot;Core&#46;aslx&quot; /&gt;&lt;game name=&quot;blah&quot;&gt;&lt;gameid&gt;blah&lt;/gameid&gt;&lt;version&gt;1&#46;0&lt;/version&gt;&lt;/game&gt;&lt;object name=&quot;room&quot;&gt;&lt;inherit name=&quot;editor_room&quot; /&gt;&lt;object name=&quot;player&quot;&gt;&lt;inherit name=&quot;editor_object&quot; /&gt;&lt;inherit name=&quot;editor_player&quot; /&gt;&lt;/object&gt;&lt;/object&gt;&lt;/asl&gt;[/code:3gsh7soa]",
      "EditableFormat": "bbcode",
      "HTML": "I actually used quest to learn to program (I found quest, ~ 2-3 years ago, not knowing anything at all about programming)! And now I'm currently (right now) taking my very first programming classes in C++, Java, and Python, and I've been shocked at how well I know and am doing in these 3 programming language classes. The only thing that quest hasn't covered (fully or not at all) is: (not fully) encapsulation (Classes-Objects), (not fully) inheritance (quest's user level: Object Types, aren't quite the same level of complexity, as quest makes it easier, lol), and polymorphism (too hard to explain this, lol), and designing your own somewhat large-complex program, at least so far with what I've learned~done from using quest.<br/><br/>Also, now that I'm taking programming language classes, I can say with experience, that quest is a great way to learn the basics of programming. It is so much easier to learn the basics of programming (well, scripting, anyways) through quest than the actual programming languages, lol.<br/><br/>-----------<br/><br/>aside from learning to program from quest, there's also:<br/><br/>codecademy.com<br/>udemy.com<br/><br/>and of course numerous websites~forums on computers~programming<br/><br/>and youtube videos too, for example, the MIT programming 101 videos (the Professors suck though at teaching progrmaming, lol)<br/><br/>------<br/><br/>you can see the quest engine game coding, I'd recommend doing it through the GUI~Editor though (lower left corner: Filter -&gt; Show Library Elements -&gt; toggle-check it so that it is toggled-checked 'on' -&gt; now in the 'tree of stuff' is light grey text, this is all the built-in code), so you don't accidentally mess up the actual quest files (&quot;core~blah.aslx&quot; files), and have to re-download quest. But, if you can be careful, you can go into the quest folder, and look at all of its engine files, just open them up with a text software like notepad, wordpad, notepad++ (if you want to learn~do programming, I recommend you DL this), Apple: text editor, etc, and look at quest's code.<br/><br/>---------<br/><br/>Notepad++<br/><br/><!-- m --><a class=\"postlink\" href=\"https://notepad-plus-plus.org/\">https://notepad-plus-plus.org/</a><!-- m --><br/><br/>this has a lot of great features that I need to learn about and use, lol.<br/><br/>but the main reason to DL it, is that it has a lot (~most) programming languages, and it color codes the lines for you, making it easier to read, write, and troubleshoot code.<br/><br/>once you DL'ed, installed, and started-opened up and are in notepad++, at the top of the screen in the horizontal bar at the top, is 'languages', click on it, and then select the programming language you need. For quest, choose 'XML' (eXtensible Markup Langauge).<br/><br/>--------<br/><br/>just learned a bit more from Pixe's post above, laughs.<br/><br/>here's how I would describe what Pixie said (if I understand correctly):<br/><br/>'XML' is (at least like) a web-browser language similar to 'HTTP', and in quest, the 'XML', is what I call the 'creation' tags (conceptually, this code is~gives the &quot;physical form ~ existence&quot; of stuff, its your &quot;physical&quot; things in your game~code):<br/><br/>all the stuff with the (showing it horizontal, but usually it's vertical): '&lt;xxx&gt;xxx&lt;/xxx&gt;' or '&lt;xxx /&gt;'<br/><br/>the computer doesn't care whether you write vertically or horizontally, but humans have a very hard time reading horizontal code.<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>&lt;/asl&gt;<br/><br/>&lt;game name=&quot;xxx&quot;&gt;<br/>&lt;/game&gt;<br/><br/>&lt;object name=&quot;room&quot;&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;HK&quot;&gt;<br/>  &lt;attr name=&quot;strength&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>  &lt;attr name=&quot;endurance&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>  &lt;attr name=&quot;dexterity&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>  &lt;attr name=&quot;agility&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>  // etc Attributes<br/>&lt;/object&gt;<br/><br/>&lt;function name=&quot;xxx&quot;&gt;<br/>&lt;/function&gt;<br/><br/>// etc etc etc</code></pre><br/><br/>-------<br/><br/>then there's the all the scripting (the action~event coding), which is unique to quest, but similar to many~some languages (Quest is similar in design structure to Python, as Alex~Quest is European~U.K., and Python is more popular in Europe than in the U.S. currently):<br/><br/>(there's no 'creation' tags, '&lt;xxx&gt;xxx&lt;/xxx' or '&lt;xxx /&gt;', on any of this code)<br/><br/><pre><code>HK&#46;strength = 100<br/>HK&#46;strength = HK&#46;strength * 10000000<br/><br/>HK&#46;damage = 100000000<br/><br/>orc&#46;dead = false<br/>orc&#46;current_life = 100<br/><br/>a 'fight' Verb's scripting added to the 'orc' Object&#58;<br/><br/>if (orc&#46;dead = false) {<br/>  orc&#46;current_life = orc&#46;current_life - HK&#46;damage<br/>  msg (&quot;You attack the orc&#46;&quot;)<br/>  if (orc&#46;current_life &lt;= 0) {<br/>    orc&#46;dead = true<br/>    msg (&quot;You killed the orc&#46;&quot;)<br/>  } else {<br/>    // the orc attacks you, code lines, (I'm lazy)<br/>  }<br/>} else {<br/>  msg (&quot;The orc is already dead, silly&#46;&quot;)<br/>}<br/><br/>// etc etc etc examples of scripting code lines~blocks</code></pre><br/><br/>--------<br/><br/>and lastly, JS (JavaScript) can be used too, for doing whatever, with quest.<br/><br/>--------------------------<br/><br/>here's mostly vertical code format:<br/><br/>(very easy to read and understand, once you get its structure, of course)<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;blah&quot;&gt;<br/>    &lt;gameid&gt;blah&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/asl&gt;</code></pre><br/><br/>here's horizontal code format:<br/><br/>(we humans hate it, as we can't read it easily like a computer can)<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;&lt;include ref=&quot;English&#46;aslx&quot; /&gt;&lt;include ref=&quot;Core&#46;aslx&quot; /&gt;&lt;game name=&quot;blah&quot;&gt;&lt;gameid&gt;blah&lt;/gameid&gt;&lt;version&gt;1&#46;0&lt;/version&gt;&lt;/game&gt;&lt;object name=&quot;room&quot;&gt;&lt;inherit name=&quot;editor_room&quot; /&gt;&lt;object name=&quot;player&quot;&gt;&lt;inherit name=&quot;editor_object&quot; /&gt;&lt;inherit name=&quot;editor_player&quot; /&gt;&lt;/object&gt;&lt;/object&gt;&lt;/asl&gt;</code></pre>",
      "PostDate": "2015-11-13T18:19:57+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38683",
      "UserId": 0,
      "Username": "afrotoast",
      "UserAvatar": null,
      "UserGravatar": "d8f5f23dfb4df278f3499835fb600b7a",
      "EditableText": "@HK &amp; The Pixie\n\nWow, thanks for taking the time to explain all this to me. So I guess I can understand it as - the &lt;XML&gt; tags define what exists, and the scripting defines how the things that exist interact?\n\nI didn't actually know that code would work horizontally as well - I thought that the indents and spacings were important to the way code worked hahaha, like the computer read that information in certain orders because of how far tabbed they are.\n\nThe most fascinating thing is how logical everything is - if you want to implement a certain function, you just need to think logically about how it would work and you can translate it into a rough system/mechanic. Then you just have to use some words to smooth over what's happening under the hood and it creates an illusion of reality.\n\nLike, it's so counter intuitive, that when you &quot;wear&quot; an item in this game i'm working on, the game actually removes &quot;item&quot; from your inventory, and places a &quot;item_worn&quot; in your inventory, but I can use flavor text to make it seem like your character is actually putting something on.\n\nRight now the biggest obstacle is that when the interactions get more complex, and I need certain things I've added early on while fumbling with the basics to also interact with the newer things, I lose track of what code means what, and sometimes find that i need to completely rewrite the interactions of the older objects.\n\nI take it as a good sign that I'm learning as I move forward, hahaha.",
      "EditableFormat": "bbcode",
      "HTML": "@HK &amp; The Pixie<br/><br/>Wow, thanks for taking the time to explain all this to me. So I guess I can understand it as - the &lt;XML&gt; tags define what exists, and the scripting defines how the things that exist interact?<br/><br/>I didn't actually know that code would work horizontally as well - I thought that the indents and spacings were important to the way code worked hahaha, like the computer read that information in certain orders because of how far tabbed they are.<br/><br/>The most fascinating thing is how logical everything is - if you want to implement a certain function, you just need to think logically about how it would work and you can translate it into a rough system/mechanic. Then you just have to use some words to smooth over what's happening under the hood and it creates an illusion of reality.<br/><br/>Like, it's so counter intuitive, that when you &quot;wear&quot; an item in this game i'm working on, the game actually removes &quot;item&quot; from your inventory, and places a &quot;item_worn&quot; in your inventory, but I can use flavor text to make it seem like your character is actually putting something on.<br/><br/>Right now the biggest obstacle is that when the interactions get more complex, and I need certain things I've added early on while fumbling with the basics to also interact with the newer things, I lose track of what code means what, and sometimes find that i need to completely rewrite the interactions of the older objects.<br/><br/>I take it as a good sign that I'm learning as I move forward, hahaha.",
      "PostDate": "2015-11-14T08:11:22+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38693",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "in some languages, the indenting matters (such as Python, I think), but some other languages it doesn't ~~~ it depends if the language has statement-ending symbols (usually it's a semicolon) or not, and~or if it's otherwise programmed in, to understand where endings and begginings occur.\n\n----------\n\noh definately... it is SOOOOOOO OVER-WHELMING at first... if you want a laugh, you can see me when I first found quest (~ 2 to 3 years ago), laughs:\n\n(I went through the tutorial, understanding most of it, but when got done, I was so confused by all of the terms, when I tried to do stuff on my own, I was at a total lost, lol)\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=3348\">viewtopic.php?f=10&amp;t=3348</a><!-- l -->",
      "EditableFormat": "bbcode",
      "HTML": "in some languages, the indenting matters (such as Python, I think), but some other languages it doesn't ~~~ it depends if the language has statement-ending symbols (usually it's a semicolon) or not, and~or if it's otherwise programmed in, to understand where endings and begginings occur.<br/><br/>----------<br/><br/>oh definately... it is SOOOOOOO OVER-WHELMING at first... if you want a laugh, you can see me when I first found quest (~ 2 to 3 years ago), laughs:<br/><br/>(I went through the tutorial, understanding most of it, but when got done, I was so confused by all of the terms, when I tried to do stuff on my own, I was at a total lost, lol)<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=3348\">viewtopic.php?f=10&amp;t=3348</a><!-- l -->",
      "PostDate": "2015-11-14T09:44:06+00:00",
      "LastEditDate": null
    }
  ]
}
