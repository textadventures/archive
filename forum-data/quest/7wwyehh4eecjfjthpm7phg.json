{
  "Topic": {
    "TopicId": "7wwyehh4eecjfjthpm7phg",
    "ForumId": "10",
    "Title": "How to print an Object's Alias in a message",
    "LastUpdated": "2022-02-23T08:50:35.723927Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c5e29edb-fc48-41ce-8a0c-8bf89c0522e3",
      "UserId": 580122,
      "Username": "YiKwang",
      "AvatarUrl": "https://i.imgur.com/wHILBBmb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How would I write the following printed message as an expression?\r\n\r\n> eat [Object Alias]\r\n\"You have eaten the \" [Object Alias] \"{Random message from list \"X\"}\"\r\n\r\nwhere list \"X\" would be:\r\n- High quality food\r\n- low quality food\r\n- raw / rotten food\"\r\n\r\nFor the sake of things like {It was delicious!:It is very filling!} vs {It's not so tasty...: but it makes you feel a little unwell...}\r\n\r\nAlthough tbh I may just have attributes for 'Good/poor/raw' and handle the list inside the 'eat' Command with\r\n If HasAttribute [quality_stipulation]\r\n   then\r\n   msg {random:etc:}\r\n\r\nfollowing that with the code for reading health and satiation gains completely independant of the 'If [quality] then [message category]'\r\n\r\nI mainly want to know how to express [Object.Alias] inside a print message expression.",
      "EditableFormat": "markdown",
      "HTML": "<p>How would I write the following printed message as an expression?</p>\n<blockquote>\n<p>eat [Object Alias]<br>\n\"You have eaten the \" [Object Alias] \"{Random message from list \"X\"}\"</p>\n</blockquote>\n<p>where list \"X\" would be:</p>\n<ul>\n<li>High quality food</li>\n<li>low quality food</li>\n<li>raw / rotten food\"</li>\n</ul>\n<p>For the sake of things like {It was delicious!:It is very filling!} vs {It's not so tasty...: but it makes you feel a little unwell...}</p>\n<p>Although tbh I may just have attributes for 'Good/poor/raw' and handle the list inside the 'eat' Command with<br>\nIf HasAttribute [quality_stipulation]<br>\nthen<br>\nmsg {random:etc:}</p>\n<p>following that with the code for reading health and satiation gains completely independant of the 'If [quality] then [message category]'</p>\n<p>I mainly want to know how to express [Object.Alias] inside a print message expression.</p>\n\n",
      "PostDate": "2022-02-23T08:50:35.723927Z",
      "LastEditDate": "2022-02-23T08:52:08.7443899Z",
      "link": null
    },
    {
      "PostId": "9fb15192-b495-43ee-bbf4-6a6cd59427a8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can either use the `+` operator to join two strings together:\r\n```\r\nmsg (\"You eat \" + GetDefiniteName(object) + \".\")\r\n```\r\nThe functions available are:\r\n* `GetDisplayAlias (object)` - gets the object's alias if it has one, or its name otherwise\r\n* `GetDisplayName (object)` - gets the object's alias and article (usually adding \"a\" or \"an\")\r\n* `GetDefiniteName (object)` - gets the object's alias and adds the definite article (\"the\") unless the object is a named NPC\r\n\r\nA common way to do stuff like this is to use the text processor; but the text processor doesn't have access to variables outside it. So you would need to use a little kludge to make it work:\r\n```\r\ngame.text_processor_this = object\r\nmsg (\"You eat the {this.alias}.\")\r\n```\r\nYou can put `{objectname.attribute}` in any text you print, and it will display the value. But the only variables it allows are `this` (which is whatever object `game.text_processor_this` is set to) or any keys in the dictionary `game.text_processor_variables`.\r\n\r\nOr you could use the `{object:` text processor command:\r\n```\r\ngame.text_processor_this = object\r\nmsg (\"You eat the {object:this}.\")\r\n```\r\n(Probably doesn't make a difference in the case of an object you're eating; but for an object that still exists at the end of the turn, this method creates a link that the player can click on)\r\n\r\nIf there are multiple variables in the command (such as a `throw #object1# at #object2#` command), one useful trick it:\r\n```\r\ngame.text_processor_variables = game.pov.currentcommandresolvedelements\r\nmsg (\"You lob the {object:object1}, but it just bounces off the {object:object2}. {object2.gender} isn't affected.\")\r\n```\r\n\r\n(`game.text_processor_variables` is a dictionary of variables which are accessible to the text processor; and `game.pov.currentcommandresolvedelements` is a dictionary of variables passed to the current command, so this is a quick way to pass all of them across)",
      "EditableFormat": "markdown",
      "HTML": "<p>You can either use the <code>+</code> operator to join two strings together:</p>\n<pre><code>msg (\"You eat \" + GetDefiniteName(object) + \".\")\n</code></pre>\n<p>The functions available are:</p>\n<ul>\n<li><code>GetDisplayAlias (object)</code> - gets the object's alias if it has one, or its name otherwise</li>\n<li><code>GetDisplayName (object)</code> - gets the object's alias and article (usually adding \"a\" or \"an\")</li>\n<li><code>GetDefiniteName (object)</code> - gets the object's alias and adds the definite article (\"the\") unless the object is a named NPC</li>\n</ul>\n<p>A common way to do stuff like this is to use the text processor; but the text processor doesn't have access to variables outside it. So you would need to use a little kludge to make it work:</p>\n<pre><code>game.text_processor_this = object\nmsg (\"You eat the {this.alias}.\")\n</code></pre>\n<p>You can put <code>{objectname.attribute}</code> in any text you print, and it will display the value. But the only variables it allows are <code>this</code> (which is whatever object <code>game.text_processor_this</code> is set to) or any keys in the dictionary <code>game.text_processor_variables</code>.</p>\n<p>Or you could use the <code>{object:</code> text processor command:</p>\n<pre><code>game.text_processor_this = object\nmsg (\"You eat the {object:this}.\")\n</code></pre>\n<p>(Probably doesn't make a difference in the case of an object you're eating; but for an object that still exists at the end of the turn, this method creates a link that the player can click on)</p>\n<p>If there are multiple variables in the command (such as a <code>throw #object1# at #object2#</code> command), one useful trick it:</p>\n<pre><code>game.text_processor_variables = game.pov.currentcommandresolvedelements\nmsg (\"You lob the {object:object1}, but it just bounces off the {object:object2}. {object2.gender} isn't affected.\")\n</code></pre>\n<p>(<code>game.text_processor_variables</code> is a dictionary of variables which are accessible to the text processor; and <code>game.pov.currentcommandresolvedelements</code> is a dictionary of variables passed to the current command, so this is a quick way to pass all of them across)</p>\n\n",
      "PostDate": "2022-02-23T09:56:47.2851496Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
