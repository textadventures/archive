{
  "Topic": {
    "TopicId": "orfveupwq0iibmbxlxvzog",
    "ForumId": "10",
    "Title": "[SOLVED] Change string attribute?",
    "LastUpdated": "2017-01-04T22:44:22.7503012Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "bead41eb-6fdd-43e2-abce-2d4198a26af7",
      "UserId": 208856,
      "Username": "Groctel",
      "AvatarUrl": "http://i.imgur.com/hoKlmU5b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I got a few attributes that equal to text strings and want to change them in the middle of a script to change them so they return a different text string. It is a basic dialogue script which works like this:\r\n\r\nFirst, we have the ```talk to woman```script:\r\n```\r\nmsg (\"Hello, how are you?<br>\")\r\nWoman.answer1 = \"Fine, and you?\"\r\nWoman.answer2 = \"Well, it's been a horrible day!\"\r\nWoman.answer3 = \"Meeeeh, could be better.\"\r\nWoman.answer4 = \"Doing good, I guess.\"\r\nmsg (<b>1- #Woman.answer1#<br>2- #Woman.answer2#<br>3- #Woman.answer3#<br>4- #Woman.answer4#</b>)\r\nget input {\r\n  if (result = \"1\") {\r\n    ZZZ.Dialogueprint = Woman.answer1\r\n    Dialogue\r\n    msg (\"I'm fine too, thanks!\")\r\n  }\r\n  else if (result = \"2\") {\r\n    ZZZ.Dialogueprint = Woman.answer2\r\n    Dialogue\r\n    msg (\"Oh! I'm sorry about that.\")\r\n  }\r\n  else if (result = \"3\") {\r\n    ZZZ.Dialogueprint = Woman.answer3\r\n    Dialogue\r\n    msg (\"At least it cannot be worse!\")\r\n  }\r\n  else if (result = \"4\") {\r\n    ZZZ.Dialogueprint = Woman.answer4\r\n    Dialogue\r\n    msg (\"Me too!\")\r\n  }\r\n  else {\r\n    msg (\"If you can read this, you have just found a bug and should tell the dev about it.\")\r\n  }\r\n}\r\n```\r\n\r\nThen the ```Dialogue``` function that simply prints what the player says:\r\n```\r\nZZZ.Dialogue = StartNewOutputSection ()\r\nmsg (\"{ZZZ.Dialogueprint}\")\r\nEndOutputSection (ZZZ.Dialogue)\r\nJS.eval (\"$('.\"+PCSystem_Login.title+\"').css('text-align', 'right').css('font-weight', 'bold');\")\r\n```\r\n\r\nThat's basically it. The point is that when it comes the the ```Woman.answer1 = \"Fine, and you?\"``` and the other three, the string is not changed. What am I doing wrong?\r\n\r\nBtw: I'm running the desktop version, so the ```.answerx``` attributes are set beforehand.",
      "EditableFormat": "markdown",
      "HTML": "<p>I got a few attributes that equal to text strings and want to change them in the middle of a script to change them so they return a different text string. It is a basic dialogue script which works like this:</p>\n<p>First, we have the <code>talk to woman</code>script:</p>\n<pre><code>msg (\"Hello, how are you?&lt;br&gt;\")\nWoman.answer1 = \"Fine, and you?\"\nWoman.answer2 = \"Well, it's been a horrible day!\"\nWoman.answer3 = \"Meeeeh, could be better.\"\nWoman.answer4 = \"Doing good, I guess.\"\nmsg (&lt;b&gt;1- #Woman.answer1#&lt;br&gt;2- #Woman.answer2#&lt;br&gt;3- #Woman.answer3#&lt;br&gt;4- #Woman.answer4#&lt;/b&gt;)\nget input {\n  if (result = \"1\") {\n    ZZZ.Dialogueprint = Woman.answer1\n    Dialogue\n    msg (\"I'm fine too, thanks!\")\n  }\n  else if (result = \"2\") {\n    ZZZ.Dialogueprint = Woman.answer2\n    Dialogue\n    msg (\"Oh! I'm sorry about that.\")\n  }\n  else if (result = \"3\") {\n    ZZZ.Dialogueprint = Woman.answer3\n    Dialogue\n    msg (\"At least it cannot be worse!\")\n  }\n  else if (result = \"4\") {\n    ZZZ.Dialogueprint = Woman.answer4\n    Dialogue\n    msg (\"Me too!\")\n  }\n  else {\n    msg (\"If you can read this, you have just found a bug and should tell the dev about it.\")\n  }\n}\n</code></pre>\n<p>Then the <code>Dialogue</code> function that simply prints what the player says:</p>\n<pre><code>ZZZ.Dialogue = StartNewOutputSection ()\nmsg (\"{ZZZ.Dialogueprint}\")\nEndOutputSection (ZZZ.Dialogue)\nJS.eval (\"$('.\"+PCSystem_Login.title+\"').css('text-align', 'right').css('font-weight', 'bold');\")\n</code></pre>\n<p>That's basically it. The point is that when it comes the the <code>Woman.answer1 = \"Fine, and you?\"</code> and the other three, the string is not changed. What am I doing wrong?</p>\n<p>Btw: I'm running the desktop version, so the <code>.answerx</code> attributes are set beforehand.</p>\n\n",
      "PostDate": "2017-01-04T22:44:22.7503012Z",
      "LastEditDate": "2017-01-17T22:37:23.3386246Z"
    },
    {
      "PostId": "085a8ad2-93c0-414a-97d1-44afd69edf3d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I am not sure what the problem is, but have a couple of suggestions that might make the code simpler.  Firstly, use `ShowMenu`, which does what you are trying to do with `get input`, but will be more reliable (what if the player types \"5\"?).\r\nhttp://docs.textadventures.co.uk/quest/functions/showmenu.html\r\n\r\nSecondly, send the result as a parameter to your `Dialogue` function, rather than setting it as an attribute.",
      "EditableFormat": "markdown",
      "HTML": "<p>I am not sure what the problem is, but have a couple of suggestions that might make the code simpler.  Firstly, use <code>ShowMenu</code>, which does what you are trying to do with <code>get input</code>, but will be more reliable (what if the player types \"5\"?).<br>\nhttp://docs.textadventures.co.uk/quest/functions/showmenu.html</p>\n<p>Secondly, send the result as a parameter to your <code>Dialogue</code> function, rather than setting it as an attribute.</p>\n\n",
      "PostDate": "2017-01-04T23:04:11.769086Z",
      "LastEditDate": null
    },
    {
      "PostId": "52e55d01-296d-4025-a998-a8b45d09d428",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "it might have something to do with the 'StartNewOutputSection()/EndOutputSection()' stuff (I wasn't even aware this stuff existed, lol).\r\n\r\nAll Attributes can be set, re-set, changed, altered, manipulated, and etc through scripting:\r\n\r\nplayer. strength = 100\r\n// quest is able to parse the Value as to what type of Value it is, to what Type of Attribute it is/needs to be (so our 'player.strength' Attribute is an 'int/integer' Attribute, as it's Value, 100, is an Integer/int Value\r\nmsg (player.strength)\r\n// outputs: 100\r\n\r\nbut, now let's have it be different:\r\n\r\nplayer.strength = 50\r\nmsg (player.strength)\r\n// outputs: 50\r\n\r\nwe can do this with all of the Attribute Types:\r\n\r\norc.dead = false\r\nmsg (orc.dead)\r\n// outputs: false\r\norc.dead = true\r\nmsg (orc.dead)\r\n// outputs: true\r\n\r\nplayer.alias = \"HK\"\r\nmsg (player.alias)\r\n// outputs: HK\r\nplayer.alias = \"Groctel\"\r\nmsg (player.alias)\r\n// outputs: Groctel\r\n\r\netc etc etc\r\n\r\nand for Strings, we can do concatenation too:\r\n\r\ngame.x = \"mama\"\r\nmsg (game.x)\r\noutputs: mama\r\ngame.x = game.x + \"mia\"\r\nmsg (game.x)\r\noutputs: mamamia",
      "EditableFormat": "markdown",
      "HTML": "<p>it might have something to do with the 'StartNewOutputSection()/EndOutputSection()' stuff (I wasn't even aware this stuff existed, lol).</p>\n<p>All Attributes can be set, re-set, changed, altered, manipulated, and etc through scripting:</p>\n<p>player. strength = 100<br>\n// quest is able to parse the Value as to what type of Value it is, to what Type of Attribute it is/needs to be (so our 'player.strength' Attribute is an 'int/integer' Attribute, as it's Value, 100, is an Integer/int Value<br>\nmsg (player.strength)<br>\n// outputs: 100</p>\n<p>but, now let's have it be different:</p>\n<p>player.strength = 50<br>\nmsg (player.strength)<br>\n// outputs: 50</p>\n<p>we can do this with all of the Attribute Types:</p>\n<p>orc.dead = false<br>\nmsg (orc.dead)<br>\n// outputs: false<br>\norc.dead = true<br>\nmsg (orc.dead)<br>\n// outputs: true</p>\n<p>player.alias = \"HK\"<br>\nmsg (player.alias)<br>\n// outputs: HK<br>\nplayer.alias = \"Groctel\"<br>\nmsg (player.alias)<br>\n// outputs: Groctel</p>\n<p>etc etc etc</p>\n<p>and for Strings, we can do concatenation too:</p>\n<p>game.x = \"mama\"<br>\nmsg (game.x)<br>\noutputs: mama<br>\ngame.x = game.x + \"mia\"<br>\nmsg (game.x)<br>\noutputs: mamamia</p>\n\n",
      "PostDate": "2017-01-05T19:32:52.5628957Z",
      "LastEditDate": null
    },
    {
      "PostId": "3ac268c2-f288-4671-84d2-d225bdc2e3fd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can take a look at some of this code for examples/ideas at what some things you can do:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/4988/character-creation-crude-code-and-sample-game\r\n\r\n-----\r\n\r\nif you want to use a numbering input system, look into using Dictionary Attributes (a 'Dictionary' is just an 'input--->output' Function, or if you rather think of them this way, as a 'conversion' Function)\r\n\r\nfor example:\r\n\r\n```\r\n<object name=\"global_data_object\">\r\n  <attr name=\"color_list\" type=\"simplestringlist\">red; blue; yellow</attr>\r\n  <attr name=\"color_dict\" type=\"simplestringdictionary\">1 = red; 2 = blue; 3 = yellow</attr> // (number to color only)\r\n  // <attr name=\"color_dict\" type=\"simplestringdictionary\">red = 1; blue = 2; yellow = 3</attr> // (color to number only)\r\n  // if you want to be able to go both ways (number to color or color to number), then you need to do this:\r\n  // (remember, the value to the left of the '=' sign is the input value, and the value to the right of the '=' sign is the output value)\r\n  // <attr name=\"color_dict\" type=\"simplestringdictionary\">1 = red; red = 1; 2 = blue; blue = 2; 3 = yellow; yellow = 3</attr>\r\n</object>\r\n\r\n// scripting:\r\n\r\nmsg (\"Choose a color (Type in the number of your choice)\")\r\nDisplayList (global_data_object.color_list)\r\n// the 'DisplayList' outputs for you (you can also manually code in such displayment too instead of using this built-in Function):\r\n// 1. red\r\n// 2. blue\r\n// 3. yellow\r\nget input {\r\n  if (IsInt (result) and ToInt (result) > 0 and ToInt (result) <= ListCount (global_data_object.color_list) {\r\n    player.color_selection = StringDictionaryItem (global_data_object.color_dictionary, result)\r\n    // if you inputted '1', then: player.color_selection = \"red\"\r\n    // if you inputted '2', then: player.color_selection = \"blue\"\r\n    // if you inputted '3', then: player.color_selection = \"yellow\"\r\n  } else {\r\n    msg (Wrong input, try again\")\r\n    wait {\r\n      ClearScreen\r\n      // loop/call/do/invoke Script Attribute/Function/scripting again\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n-------------\r\n\r\nPixie ingeniously uses both way String Dictionary Attributes to handle RPG's 'elemental damages' (especially the handling of opposing elemental damage, ie your water damage spell used on a fire elemental monster, doing extra damage to it), as you can't do this (pseudocode):\r\n\r\nif (monster.elemental:fire = spell.elemental:water or monster.elemental:water = spellelemental:fire), then monster.life = monster.life - spell.damage * 2 // (or 1.5 or whatever, meh)\r\n\r\nas, if (fire = water ---> FALSE), this may seem like you can use this design, but not so, as it allows for any other elemental to be used for extra damage, and not specifically opposing elementals only.\r\n\r\nbut Pixie's ingenious-ness realized you can do this:\r\n\r\nif (monster.elemental:fire = StringDictionaryItem (input: spell.elemental:water): outputs: fire)\r\n\r\nwhich now works, as indeed, if (fire = water ---> fire, --->, fire = fire, --->, TRUE), and they're indeed opposite elementals, so it is correctly doing the extra damage.\r\n\r\nand indeed works only for opposing elementals, as can be seen:\r\n\r\nif (fire = air ---> earth, --->, fire = earth, --->, FALSE), and they're NOT opposite elementals, so it is correctly NOT doing the extra damage.\r\nif (fire = fire ---> water, --->, fire = water, --->, FALSE), and they're NOT opposite elementals, so it is correctly NOT doing the extra damage.\r\nif (fire = earth ---> air, --->, fire = air, --->, FALSE), and they're NOT opposite elementals, so it is correctly NOT doing the extra damage.",
      "EditableFormat": "markdown",
      "HTML": "<p>you can take a look at some of this code for examples/ideas at what some things you can do:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/4988/character-creation-crude-code-and-sample-game</p>\n<hr>\n<p>if you want to use a numbering input system, look into using Dictionary Attributes (a 'Dictionary' is just an 'input---&gt;output' Function, or if you rather think of them this way, as a 'conversion' Function)</p>\n<p>for example:</p>\n<pre><code>&lt;object name=\"global_data_object\"&gt;\n  &lt;attr name=\"color_list\" type=\"simplestringlist\"&gt;red; blue; yellow&lt;/attr&gt;\n  &lt;attr name=\"color_dict\" type=\"simplestringdictionary\"&gt;1 = red; 2 = blue; 3 = yellow&lt;/attr&gt; // (number to color only)\n  // &lt;attr name=\"color_dict\" type=\"simplestringdictionary\"&gt;red = 1; blue = 2; yellow = 3&lt;/attr&gt; // (color to number only)\n  // if you want to be able to go both ways (number to color or color to number), then you need to do this:\n  // (remember, the value to the left of the '=' sign is the input value, and the value to the right of the '=' sign is the output value)\n  // &lt;attr name=\"color_dict\" type=\"simplestringdictionary\"&gt;1 = red; red = 1; 2 = blue; blue = 2; 3 = yellow; yellow = 3&lt;/attr&gt;\n&lt;/object&gt;\n\n// scripting:\n\nmsg (\"Choose a color (Type in the number of your choice)\")\nDisplayList (global_data_object.color_list)\n// the 'DisplayList' outputs for you (you can also manually code in such displayment too instead of using this built-in Function):\n// 1. red\n// 2. blue\n// 3. yellow\nget input {\n  if (IsInt (result) and ToInt (result) &gt; 0 and ToInt (result) &lt;= ListCount (global_data_object.color_list) {\n    player.color_selection = StringDictionaryItem (global_data_object.color_dictionary, result)\n    // if you inputted '1', then: player.color_selection = \"red\"\n    // if you inputted '2', then: player.color_selection = \"blue\"\n    // if you inputted '3', then: player.color_selection = \"yellow\"\n  } else {\n    msg (Wrong input, try again\")\n    wait {\n      ClearScreen\n      // loop/call/do/invoke Script Attribute/Function/scripting again\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>Pixie ingeniously uses both way String Dictionary Attributes to handle RPG's 'elemental damages' (especially the handling of opposing elemental damage, ie your water damage spell used on a fire elemental monster, doing extra damage to it), as you can't do this (pseudocode):</p>\n<p>if (monster.elemental:fire = spell.elemental:water or monster.elemental:water = spellelemental:fire), then monster.life = monster.life - spell.damage * 2 // (or 1.5 or whatever, meh)</p>\n<p>as, if (fire = water ---&gt; FALSE), this may seem like you can use this design, but not so, as it allows for any other elemental to be used for extra damage, and not specifically opposing elementals only.</p>\n<p>but Pixie's ingenious-ness realized you can do this:</p>\n<p>if (monster.elemental:fire = StringDictionaryItem (input: spell.elemental:water): outputs: fire)</p>\n<p>which now works, as indeed, if (fire = water ---&gt; fire, ---&gt;, fire = fire, ---&gt;, TRUE), and they're indeed opposite elementals, so it is correctly doing the extra damage.</p>\n<p>and indeed works only for opposing elementals, as can be seen:</p>\n<p>if (fire = air ---&gt; earth, ---&gt;, fire = earth, ---&gt;, FALSE), and they're NOT opposite elementals, so it is correctly NOT doing the extra damage.<br>\nif (fire = fire ---&gt; water, ---&gt;, fire = water, ---&gt;, FALSE), and they're NOT opposite elementals, so it is correctly NOT doing the extra damage.<br>\nif (fire = earth ---&gt; air, ---&gt;, fire = air, ---&gt;, FALSE), and they're NOT opposite elementals, so it is correctly NOT doing the extra damage.</p>\n\n",
      "PostDate": "2017-01-05T19:44:42.8744313Z",
      "LastEditDate": "2017-01-05T20:17:48.7619132Z"
    },
    {
      "PostId": "c55045f4-f073-4a7d-9438-286a234ed0e2",
      "UserId": 208856,
      "Username": "Groctel",
      "AvatarUrl": "http://i.imgur.com/hoKlmU5b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi! Sorry for the super super late response. I need to keep a habit on checking and posting my threads :(\r\n\r\nI tried the `ShowMenu` command, but I don't want the game to leave its interface and move to a new window for a second, so that option was not valid at all, sorry :<\r\n\r\nAlso, most of the code I originally submitted was horribly bad done, like calling different variables and not respecting upper and lower cases.\r\n\r\nAfter some coding, a found a way of creating a simple and effective conversation engine. I'll explain it here for anyone who wants to copycat it into their game ^^\r\n\r\n-------\r\n\r\n**You will see the attributes are set to an object called `zzz`. I use it to dump the vars I don't want to store in any specific object so it is easier for me to control it.**\r\n\r\nFirst of all, I like to move the conversation into a new room and clear the screen. It's my personal style, but hey, it works for me.\r\n\r\nSo here is the `woman` we are going to talk to:\r\n\r\n```\r\n<object name=\"woman\">\r\n  <inherit name=\"editor_object\" />\r\n  <scenery />\r\n  <alias>Woman</alias>\r\n  <gender>she</gender>\r\n  <article>her</article>\r\n  <speak type=\"script\">\r\n    ClearScreen\r\n    MoveObject (player, woman_dialogue)\r\n  </speak>\r\n</object>\r\n```\r\n\r\nAnd here is the `dialogue room`: \r\n\r\n```\r\n<object name=\"woman_dialogue\">\r\n  <inherit name=\"editor_room\" />\r\n  <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n  <alias>DIALOGUE: Woman</alias>\r\n  <description type=\"script\">\r\n    convwoman\r\n  </description>\r\n</object>\r\n```\r\n\r\nThe description calls a function called `convwoman`. For each dialogue I want the player to engage in I create a conversation function instead of just dropping it into the room description script. This is useful if you want to create a looping rpg-like conversation. You can just call the function when you reach the end and want to move back again to the top.\r\n\r\nThe `convwoman` covers as much as it can without entering another loop. In that case, it would call another function and start a loop there. Return points other than the function first message should also be included as separate functions.\r\n\r\nHere's a simple two steps `convwoman` tree:\r\n\r\n```\r\n    msg (\"Hi! How are you finding the testing room?\")\r\n    zzz.response1 = \"Here goes response 1.\"\r\n    zzz.response2 = \"Here goes response 2\"\r\n    zzz.response3 = \"Here goes response 3\"\r\n    zzz.response4 = \"Here goes response 4\"\r\n    zzz.responsecount = 4\r\n    on ready {\r\n      convoptions\r\n      convinput\r\n      on ready {\r\n        if (zzz.convnext = 1) {\r\n          msg (\"Here goes the answer to response 1\")\r\n        }\r\n        else if (zzz.convnext = 2) {\r\n          msg (\"Here goes the answer to response 2\")\r\n          zzz.response1 = \"Here goes response 1.1\"\r\n          zzz.response2 = \"Here goes response 2.1\"\r\n          zzz.response3 = \"Here goes response 3.1\"\r\n          zzz.responsecount = 3\r\n          on ready {\r\n            convoptions\r\n            convinput\r\n            on ready {\r\n              if (zzz.convnext = 1) {\r\n                msg (\"Here goes the answer to response 1.1\")\r\n              }\r\n              else if (zzz.convnext = 2) {\r\n                msg (\"Here goes the answer to response 2.1\")\r\n                convwoman22\r\n              }\r\n              else if (zzz.convnext = 3) {\r\n                msg (\"Here goes the answer to response 3.1\")\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else if (zzz.convnext = 3) {\r\n          msg (\"Here goes the answer to response 3\")\r\n        }\r\n        else if (zzz.convnext = 4) {\r\n          msg (\"Here goes the answer to response 4\")\r\n        }\r\n      }\r\n    }\r\n// and so on\r\n```\r\n\r\nThen we have the three functions that make the engine work:\r\n\r\n`convoptions`:\r\n\r\n```\r\nzzz.convmenu = StartNewOutputSection ()\r\nmsg (\"\")\r\nif (zzz.responsecount > 0) {\r\n  msg (\"1. \" + zzz.response1 + \" \")\r\n  if (zzz.responsecount > 1) {\r\n    msg (\"2. \" + zzz.response2 + \" \")\r\n    if (zzz.responsecount > 2) {\r\n      msg (\"3. \" + zzz.response3 + \" \")\r\n      if (zzz.responsecount > 3) {\r\n        msg (\"4. \" + zzz.response4 + \" \")\r\n        if (zzz.responsecount > 4) {\r\n          msg (\"5. \" + zzz.response5 + \" \")\r\n          if (zzz.responsecount > 5) {\r\n            msg (\"6. \" + zzz.response6 + \" \")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\nelse {\r\n  msg (\"You just encountered a bug and should tell the dev about it.\")\r\n}\r\nEndOutputSection (zzz.convmenu)\r\nJS.eval (\"$('.\"+zzz.convmenu+\"').css('font-weight', 'bold');\")\r\n```\r\n\r\n`convinput`:\r\n\r\n```\r\nget input {\r\n  if (IsInt (result)) {\r\n    result = ToInt (result)\r\n  }\r\n  else {\r\n    convinput\r\n  }\r\n  on ready {\r\n    if (result > zzz.responsecount) {\r\n      convinput\r\n    }\r\n    else if (result < zzz.responsecount) {\r\n      if (result = 1) {\r\n        zzz.convnext = 1\r\n        zzz.convresponse = zzz.response1\r\n        convresponseprint\r\n      }\r\n      else if (result = 2) {\r\n        zzz.convnext = 2\r\n        zzz.convresponse = zzz.response2\r\n        convresponseprint\r\n      }\r\n      else if (result = 3) {\r\n        zzz.convnext = 3\r\n        zzz.convresponse = zzz.response3\r\n        convresponseprint\r\n      }\r\n      else if (result = 4) {\r\n        zzz.convnext = 4\r\n        zzz.convresponse = zzz.response4\r\n        convresponseprint\r\n      }\r\n      else if (result = 5) {\r\n        zzz.convnext = 5\r\n        zzz.convresponse = zzz.response5\r\n        convresponseprint\r\n      }\r\n      else if (result = 6) {\r\n        zzz.convnext = 6\r\n        zzz.convresponse = zzz.response6\r\n        convresponseprint\r\n      }\r\n      else {\r\n        convinput\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd `convresponseprint`:\r\n\r\n```\r\nHideOutputSectionNow (zzz.convmenu)\r\non ready {\r\n  SetAlignment (\"right\")\r\n  msg (\"<b>{zzz.convresponse}</b>\")\r\n  SetAlignment (\"left\")\r\n}\r\n```\r\n\r\nAlso, the `HideOutputSectionNow` function is used here:\r\n\r\n```\r\nJS.eval (\"$('.\" + name+\"').hide(0, function () { $(this).remove(); });\")\r\n```\r\n\r\nBasically, the game first creates the responses by the `zzz.response[x] = \"String.\"` lines. Then uses the `on ready {}` to make sure the responses are set before showing them by the `convoptions` function, which evaluates the number of possible responses it has to give the player up to six (you can make it as high as you want) and prints them inside a `section`.  This way, you can control all the format with the `JS.eval` line and can make it disappear with `HideOutputSectionNow`.\r\n\r\nAfter printing them, the program starts a `get input {}` loop with the function `convinput`, which checks if the input entered by the player can be transformed into an int. If it can, it checks if the int is between one and the maximum number of responses possible, then finds the response the player is referring to and copies both the number and the text to different variables, then runs `convresponseprint`. Every other case restarts the loop and asks for the input again.\r\n\r\n`Convresponseprint` reads the text and displays it in bold and aligned to the right, so it can be easily read by the player. Right after it, the second `on ready{}` line checks at the main conversational tree and the correct branch is selected and displayed using `zzz.convnext`.\r\n\r\nI hope you find it useful :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi! Sorry for the super super late response. I need to keep a habit on checking and posting my threads :(</p>\n<p>I tried the <code>ShowMenu</code> command, but I don't want the game to leave its interface and move to a new window for a second, so that option was not valid at all, sorry :&lt;</p>\n<p>Also, most of the code I originally submitted was horribly bad done, like calling different variables and not respecting upper and lower cases.</p>\n<p>After some coding, a found a way of creating a simple and effective conversation engine. I'll explain it here for anyone who wants to copycat it into their game ^^</p>\n<hr>\n<p><strong>You will see the attributes are set to an object called <code>zzz</code>. I use it to dump the vars I don't want to store in any specific object so it is easier for me to control it.</strong></p>\n<p>First of all, I like to move the conversation into a new room and clear the screen. It's my personal style, but hey, it works for me.</p>\n<p>So here is the <code>woman</code> we are going to talk to:</p>\n<pre><code>&lt;object name=\"woman\"&gt;\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;scenery /&gt;\n  &lt;alias&gt;Woman&lt;/alias&gt;\n  &lt;gender&gt;she&lt;/gender&gt;\n  &lt;article&gt;her&lt;/article&gt;\n  &lt;speak type=\"script\"&gt;\n    ClearScreen\n    MoveObject (player, woman_dialogue)\n  &lt;/speak&gt;\n&lt;/object&gt;\n</code></pre>\n<p>And here is the <code>dialogue room</code>:</p>\n<pre><code>&lt;object name=\"woman_dialogue\"&gt;\n  &lt;inherit name=\"editor_room\" /&gt;\n  &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n  &lt;alias&gt;DIALOGUE: Woman&lt;/alias&gt;\n  &lt;description type=\"script\"&gt;\n    convwoman\n  &lt;/description&gt;\n&lt;/object&gt;\n</code></pre>\n<p>The description calls a function called <code>convwoman</code>. For each dialogue I want the player to engage in I create a conversation function instead of just dropping it into the room description script. This is useful if you want to create a looping rpg-like conversation. You can just call the function when you reach the end and want to move back again to the top.</p>\n<p>The <code>convwoman</code> covers as much as it can without entering another loop. In that case, it would call another function and start a loop there. Return points other than the function first message should also be included as separate functions.</p>\n<p>Here's a simple two steps <code>convwoman</code> tree:</p>\n<pre><code>    msg (\"Hi! How are you finding the testing room?\")\n    zzz.response1 = \"Here goes response 1.\"\n    zzz.response2 = \"Here goes response 2\"\n    zzz.response3 = \"Here goes response 3\"\n    zzz.response4 = \"Here goes response 4\"\n    zzz.responsecount = 4\n    on ready {\n      convoptions\n      convinput\n      on ready {\n        if (zzz.convnext = 1) {\n          msg (\"Here goes the answer to response 1\")\n        }\n        else if (zzz.convnext = 2) {\n          msg (\"Here goes the answer to response 2\")\n          zzz.response1 = \"Here goes response 1.1\"\n          zzz.response2 = \"Here goes response 2.1\"\n          zzz.response3 = \"Here goes response 3.1\"\n          zzz.responsecount = 3\n          on ready {\n            convoptions\n            convinput\n            on ready {\n              if (zzz.convnext = 1) {\n                msg (\"Here goes the answer to response 1.1\")\n              }\n              else if (zzz.convnext = 2) {\n                msg (\"Here goes the answer to response 2.1\")\n                convwoman22\n              }\n              else if (zzz.convnext = 3) {\n                msg (\"Here goes the answer to response 3.1\")\n              }\n            }\n          }\n        }\n        else if (zzz.convnext = 3) {\n          msg (\"Here goes the answer to response 3\")\n        }\n        else if (zzz.convnext = 4) {\n          msg (\"Here goes the answer to response 4\")\n        }\n      }\n    }\n// and so on\n</code></pre>\n<p>Then we have the three functions that make the engine work:</p>\n<p><code>convoptions</code>:</p>\n<pre><code>zzz.convmenu = StartNewOutputSection ()\nmsg (\"\")\nif (zzz.responsecount &gt; 0) {\n  msg (\"1. \" + zzz.response1 + \" \")\n  if (zzz.responsecount &gt; 1) {\n    msg (\"2. \" + zzz.response2 + \" \")\n    if (zzz.responsecount &gt; 2) {\n      msg (\"3. \" + zzz.response3 + \" \")\n      if (zzz.responsecount &gt; 3) {\n        msg (\"4. \" + zzz.response4 + \" \")\n        if (zzz.responsecount &gt; 4) {\n          msg (\"5. \" + zzz.response5 + \" \")\n          if (zzz.responsecount &gt; 5) {\n            msg (\"6. \" + zzz.response6 + \" \")\n          }\n        }\n      }\n    }\n  }\n}\nelse {\n  msg (\"You just encountered a bug and should tell the dev about it.\")\n}\nEndOutputSection (zzz.convmenu)\nJS.eval (\"$('.\"+zzz.convmenu+\"').css('font-weight', 'bold');\")\n</code></pre>\n<p><code>convinput</code>:</p>\n<pre><code>get input {\n  if (IsInt (result)) {\n    result = ToInt (result)\n  }\n  else {\n    convinput\n  }\n  on ready {\n    if (result &gt; zzz.responsecount) {\n      convinput\n    }\n    else if (result &lt; zzz.responsecount) {\n      if (result = 1) {\n        zzz.convnext = 1\n        zzz.convresponse = zzz.response1\n        convresponseprint\n      }\n      else if (result = 2) {\n        zzz.convnext = 2\n        zzz.convresponse = zzz.response2\n        convresponseprint\n      }\n      else if (result = 3) {\n        zzz.convnext = 3\n        zzz.convresponse = zzz.response3\n        convresponseprint\n      }\n      else if (result = 4) {\n        zzz.convnext = 4\n        zzz.convresponse = zzz.response4\n        convresponseprint\n      }\n      else if (result = 5) {\n        zzz.convnext = 5\n        zzz.convresponse = zzz.response5\n        convresponseprint\n      }\n      else if (result = 6) {\n        zzz.convnext = 6\n        zzz.convresponse = zzz.response6\n        convresponseprint\n      }\n      else {\n        convinput\n      }\n    }\n  }\n}\n</code></pre>\n<p>And <code>convresponseprint</code>:</p>\n<pre><code>HideOutputSectionNow (zzz.convmenu)\non ready {\n  SetAlignment (\"right\")\n  msg (\"&lt;b&gt;{zzz.convresponse}&lt;/b&gt;\")\n  SetAlignment (\"left\")\n}\n</code></pre>\n<p>Also, the <code>HideOutputSectionNow</code> function is used here:</p>\n<pre><code>JS.eval (\"$('.\" + name+\"').hide(0, function () { $(this).remove(); });\")\n</code></pre>\n<p>Basically, the game first creates the responses by the <code>zzz.response[x] = \"String.\"</code> lines. Then uses the <code>on ready {}</code> to make sure the responses are set before showing them by the <code>convoptions</code> function, which evaluates the number of possible responses it has to give the player up to six (you can make it as high as you want) and prints them inside a <code>section</code>.  This way, you can control all the format with the <code>JS.eval</code> line and can make it disappear with <code>HideOutputSectionNow</code>.</p>\n<p>After printing them, the program starts a <code>get input {}</code> loop with the function <code>convinput</code>, which checks if the input entered by the player can be transformed into an int. If it can, it checks if the int is between one and the maximum number of responses possible, then finds the response the player is referring to and copies both the number and the text to different variables, then runs <code>convresponseprint</code>. Every other case restarts the loop and asks for the input again.</p>\n<p><code>Convresponseprint</code> reads the text and displays it in bold and aligned to the right, so it can be easily read by the player. Right after it, the second <code>on ready{}</code> line checks at the main conversational tree and the correct branch is selected and displayed using <code>zzz.convnext</code>.</p>\n<p>I hope you find it useful :)</p>\n\n",
      "PostDate": "2017-01-17T22:33:28.3181018Z",
      "LastEditDate": "2017-01-18T10:43:26.8022591Z"
    },
    {
      "PostId": "124b2703-d104-42bc-b9db-f5995d21636f",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ShowMenu doesn't go to another window. It shows the menu inline in the main text body. There is an obsolete variant that does use a popup window (unless it's been removed), but that's not the default one you get from the editor.",
      "EditableFormat": "markdown",
      "HTML": "<p>ShowMenu doesn't go to another window. It shows the menu inline in the main text body. There is an obsolete variant that does use a popup window (unless it's been removed), but that's not the default one you get from the editor.</p>\n\n",
      "PostDate": "2017-01-22T22:25:00.9826943Z",
      "LastEditDate": null
    }
  ]
}
