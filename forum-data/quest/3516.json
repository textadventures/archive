{
  "Topic": {
    "TopicId": "3516",
    "ForumId": "10",
    "Title": "Assigning a type on the fly",
    "LastUpdated": "2013-03-10T22:25:53+00:00",
    "ReplyCount": 14
  },
  "Posts": [
    {
      "PostId": "23181",
      "UserId": 0,
      "Username": "homeeman",
      "UserAvatar": null,
      "UserGravatar": "4c7b0e689de0b974bfe447478a40fb60",
      "EditableText": "It this something you can do?  I can't figure out a quick way to create a new &lt;inherit&gt; tag.\nIf it helps, I'm trying to give a player and their companions classes based on choice.  If I can't assign types on the fly I can cope pretty easily, I just think it'll look cleaner if I employ type definitions.\nAm I grossly misusing types?",
      "EditableFormat": "bbcode",
      "HTML": "It this something you can do?  I can't figure out a quick way to create a new &lt;inherit&gt; tag.<br/>If it helps, I'm trying to give a player and their companions classes based on choice.  If I can't assign types on the fly I can cope pretty easily, I just think it'll look cleaner if I employ type definitions.<br/>Am I grossly misusing types?",
      "PostDate": "2013-03-08T16:54:59+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23188",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "With current quest implementation of player object (auto-creation in the first room [b:hwgqwgrm]before[/b:hwgqwgrm] running start script), I am not sure what you want is possible, unless your &quot;player&quot; object inherits from all classes and then has a variable which tells you which class is active so you can handle skills and status attributes properly.\n\nCheck out this small demo of what I had in mind:\n[attachment=0:hwgqwgrm]<!-- ia0 -->Player.aslx<!-- ia0 -->[/attachment:hwgqwgrm]\n\nNote that I don't claim that is the best way to handle things, maybe someone has a better idea.",
      "EditableFormat": "bbcode",
      "HTML": "With current quest implementation of player object (auto-creation in the first room <span style=\"font-weight:bold;\">before</span> running start script), I am not sure what you want is possible, unless your &quot;player&quot; object inherits from all classes and then has a variable which tells you which class is active so you can handle skills and status attributes properly.<br/><br/>Check out this small demo of what I had in mind:<br/><div><a href=\"/attachment/536\">Player.aslx</a></div><br/><br/>Note that I don't claim that is the best way to handle things, maybe someone has a better idea.",
      "PostDate": "2013-03-08T17:42:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23212",
      "UserId": 0,
      "Username": "homeeman",
      "UserAvatar": null,
      "UserGravatar": "4c7b0e689de0b974bfe447478a40fb60",
      "EditableText": "Thanks for the quick response!  I ended up going with using the POV switching.  I predefined a separate object for every choose-able class (since there are only four) and switch to whichever class they choose when they choose it.  As for the other NPCs, I'll probably do something similar, and simply move the created class objects as they're chosen, changing the alias to give them their given name (in case anyone else every stumbles across this post).",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for the quick response!  I ended up going with using the POV switching.  I predefined a separate object for every choose-able class (since there are only four) and switch to whichever class they choose when they choose it.  As for the other NPCs, I'll probably do something similar, and simply move the created class objects as they're chosen, changing the alias to give them their given name (in case anyone else every stumbles across this post).",
      "PostDate": "2013-03-08T22:49:27+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23225",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "[quote=&quot;homeeman&quot;:3kffmhv8]Thanks for the quick response!  I ended up going with using the POV switching.  I predefined a separate object for every choose-able class (since there are only four) and switch to whichever class they choose when they choose it.  As for the other NPCs, I'll probably do something similar, and simply move the created class objects as they're chosen, changing the alias to give them their given name (in case anyone else every stumbles across this post).[/quote:3kffmhv8]\n\nYou are welcome, I hope you did try my demo game, at least for lolz? <!-- s;-) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";-)\" title=\"Wink\" /><!-- s;-) -->",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>homeeman wrote:</cite>Thanks for the quick response!  I ended up going with using the POV switching.  I predefined a separate object for every choose-able class (since there are only four) and switch to whichever class they choose when they choose it.  As for the other NPCs, I'll probably do something similar, and simply move the created class objects as they're chosen, changing the alias to give them their given name (in case anyone else every stumbles across this post).</blockquote><br/><br/>You are welcome, I hope you did try my demo game, at least for lolz? <!-- s;-) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";-)\" title=\"Wink\" /><!-- s;-) -->",
      "PostDate": "2013-03-09T03:31:51+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23227",
      "UserId": 0,
      "Username": "homeeman",
      "UserAvatar": null,
      "UserGravatar": "4c7b0e689de0b974bfe447478a40fb60",
      "EditableText": "I did, sir.  And I got a laugh out of it.  I appreciated the Star Wars reference.  I feel like I haven't seen much of that, of all the references you get out of here!",
      "EditableFormat": "bbcode",
      "HTML": "I did, sir.  And I got a laugh out of it.  I appreciated the Star Wars reference.  I feel like I haven't seen much of that, of all the references you get out of here!",
      "PostDate": "2013-03-09T06:01:31+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23231",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "that is interesting, that there's no way to set (or nor add) an inherited attribute ??\n\nthough for an alternative, couldn't you simply make an &quot;If&quot; script to add all the attributes you want, as a substitution method of an inherited attribute? use a script to give the same attributes as the inherited attribute would?\n\nfor example:\n\n&lt;turnscript name=&quot;game_turns_turnscript&quot;&gt;\nif (player.bear = true) {\n  player.strength = player.strength * 2\n  etc attributes\n}\n&lt;/turnscript&gt;\n\nwhich would be the same thing as using an inherited attribute:\n\n&lt;type name=&quot;bear&quot;&gt;\n  player.strength = player.strength *2\n  etc attributes\n&lt;/type&gt;",
      "EditableFormat": "bbcode",
      "HTML": "that is interesting, that there's no way to set (or nor add) an inherited attribute ??<br/><br/>though for an alternative, couldn't you simply make an &quot;If&quot; script to add all the attributes you want, as a substitution method of an inherited attribute? use a script to give the same attributes as the inherited attribute would?<br/><br/>for example:<br/><br/>&lt;turnscript name=&quot;game_turns_turnscript&quot;&gt;<br/>if (player.bear = true) {<br/>  player.strength = player.strength * 2<br/>  etc attributes<br/>}<br/>&lt;/turnscript&gt;<br/><br/>which would be the same thing as using an inherited attribute:<br/><br/>&lt;type name=&quot;bear&quot;&gt;<br/>  player.strength = player.strength *2<br/>  etc attributes<br/>&lt;/type&gt;",
      "PostDate": "2013-03-09T08:41:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23232",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Another alternative (depending on exactly on what you're doing) is to have the classes broken out as objects, one per class, and then have a &quot;class&quot; attribute on the player which points to the one selected.\n\nIt does mean you have to reference the class stuff as &quot;player.class.&quot; instead of &quot;player.&quot; but it is another approach.\n\nI have done this, and it worked well for me.",
      "EditableFormat": "bbcode",
      "HTML": "Another alternative (depending on exactly on what you're doing) is to have the classes broken out as objects, one per class, and then have a &quot;class&quot; attribute on the player which points to the one selected.<br/><br/>It does mean you have to reference the class stuff as &quot;player.class.&quot; instead of &quot;player.&quot; but it is another approach.<br/><br/>I have done this, and it worked well for me.",
      "PostDate": "2013-03-09T11:07:10+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23254",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "just echoing (and concuring~supporting) Jaynebonne's method:\n\nobjects (used as &quot;object structures&quot; or &quot;data storages&quot; as I think Pixie calls them) are really useful, as inside of the object, you can put whatever you want (like scripts, lists, dictionaries, attributes, and etc), it's like a super container+more, as it lets you to &quot;call upon&quot; ANYTHING, I love using them! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\nI think this is how quest is built, everything is an object, and that's why making+using objects are so powerful, hehe\n\na very poor example, and probably incorrect, but it's just for show of what you can do with objects used to hold whatever you want:\n\n[code:3pi5jdmw]&lt;object name=&quot;spell_storage_structure&quot;&gt;\n  &lt;fire_spells_list type=&quot;objectlist&quot;&gt;fireball;inferno;heat;etc&lt;/fire_spells_list&gt;\n  &lt;water_spells_list type=&quot;objectlist&quot;&gt;tidalwave;rain;drench;etc&lt;/water_spells_list&gt;\n&lt;/object&gt;\n\n&lt;cast type=&quot;script&quot;&gt;\n  if (HasObject (player&#46;spell_structure&#46;fire_spells_list = fireball) {\n    monster&#46;hp = monster&#46;hp - fireball&#46;damage\n  } else {\n    msg (&quot;You can't cast that spell&#46;&quot;)\n  }\n&lt;/cast&gt;[/code:3pi5jdmw]",
      "EditableFormat": "bbcode",
      "HTML": "just echoing (and concuring~supporting) Jaynebonne's method:<br/><br/>objects (used as &quot;object structures&quot; or &quot;data storages&quot; as I think Pixie calls them) are really useful, as inside of the object, you can put whatever you want (like scripts, lists, dictionaries, attributes, and etc), it's like a super container+more, as it lets you to &quot;call upon&quot; ANYTHING, I love using them! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>I think this is how quest is built, everything is an object, and that's why making+using objects are so powerful, hehe<br/><br/>a very poor example, and probably incorrect, but it's just for show of what you can do with objects used to hold whatever you want:<br/><br/><pre><code>&lt;object name=&quot;spell_storage_structure&quot;&gt;<br/>  &lt;fire_spells_list type=&quot;objectlist&quot;&gt;fireball;inferno;heat;etc&lt;/fire_spells_list&gt;<br/>  &lt;water_spells_list type=&quot;objectlist&quot;&gt;tidalwave;rain;drench;etc&lt;/water_spells_list&gt;<br/>&lt;/object&gt;<br/><br/>&lt;cast type=&quot;script&quot;&gt;<br/>  if (HasObject (player&#46;spell_structure&#46;fire_spells_list = fireball) {<br/>    monster&#46;hp = monster&#46;hp - fireball&#46;damage<br/>  } else {<br/>    msg (&quot;You can't cast that spell&#46;&quot;)<br/>  }<br/>&lt;/cast&gt;</code></pre>",
      "PostDate": "2013-03-09T22:40:46+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23256",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "HK, I think you mean:\n\nif (ListContains(player.spell_structure.fire_spells_list, fireball))\n\n<!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "HK, I think you mean:<br/><br/>if (ListContains(player.spell_structure.fire_spells_list, fireball))<br/><br/><!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-03-09T22:57:29+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23257",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thanks for the correction! (I just added in a comment to my previous post as you wrote yours too)\n\nUnfortunately, I don't know coding well enough to write whatever coding correctly from the top of my head, laughs.\n\nalso, my setup of it is wrong too:\n\nit should be something like:\n\nif (player.fireball = spell_storage_structure.fire_spell_list.fireball) {\n\nin the context of what I was trying to write as code, lol.\n\nas if the object is a child of the player, it's not really being used as the &quot;object structure&quot; or &quot;data storage&quot;, but merely instead as a &quot;storage object&quot;.\n\n---------\n\nokay, I think this would be more closely to correct setup (as now my mind is thinking hard, lol):\n\n[code:2qmlx52i]&lt;command name=&quot;cast_command&quot;&gt;\n  &lt;pattern&gt;cast #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    cast_function (text)\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;function name=&quot;cast_function&quot; parameters=&quot;text&quot;&gt;\n  if (text = spell_structure&#46;fire_spells_list&#46;fireball&#46;name) {\n    if (GetObject (player&#46;text) {\n      monster&#46;hp = monster&#46;hp - fireball&#46;damage\n    } else {\n      msg (&quot;You don't have this spell&#46;&quot;)\n    }\n  } else {\n    msg (&quot;You can't cast this, as it's not a spell&quot;)\n  }\n&lt;/function&gt;\n\n&lt;object name=&quot;spell_structure&quot;&gt;\n  &lt;fire_spells_list type=&quot;list&quot;&gt;fireball;inferno;melt;hellfire;etc&lt;/fire_spells_list&gt;\n&lt;/object&gt;[/code:2qmlx52i]",
      "EditableFormat": "bbcode",
      "HTML": "thanks for the correction! (I just added in a comment to my previous post as you wrote yours too)<br/><br/>Unfortunately, I don't know coding well enough to write whatever coding correctly from the top of my head, laughs.<br/><br/>also, my setup of it is wrong too:<br/><br/>it should be something like:<br/><br/>if (player.fireball = spell_storage_structure.fire_spell_list.fireball) {<br/><br/>in the context of what I was trying to write as code, lol.<br/><br/>as if the object is a child of the player, it's not really being used as the &quot;object structure&quot; or &quot;data storage&quot;, but merely instead as a &quot;storage object&quot;.<br/><br/>---------<br/><br/>okay, I think this would be more closely to correct setup (as now my mind is thinking hard, lol):<br/><br/><pre><code>&lt;command name=&quot;cast_command&quot;&gt;<br/>  &lt;pattern&gt;cast #text#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    cast_function (text)<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>&lt;function name=&quot;cast_function&quot; parameters=&quot;text&quot;&gt;<br/>  if (text = spell_structure&#46;fire_spells_list&#46;fireball&#46;name) {<br/>    if (GetObject (player&#46;text) {<br/>      monster&#46;hp = monster&#46;hp - fireball&#46;damage<br/>    } else {<br/>      msg (&quot;You don't have this spell&#46;&quot;)<br/>    }<br/>  } else {<br/>    msg (&quot;You can't cast this, as it's not a spell&quot;)<br/>  }<br/>&lt;/function&gt;<br/><br/>&lt;object name=&quot;spell_structure&quot;&gt;<br/>  &lt;fire_spells_list type=&quot;list&quot;&gt;fireball;inferno;melt;hellfire;etc&lt;/fire_spells_list&gt;<br/>&lt;/object&gt;</code></pre>",
      "PostDate": "2013-03-09T23:00:08+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23265",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "[quote=&quot;HegemonKhan&quot;:330m4nai]that is interesting, that there's no way to set (or nor add) an inherited attribute ??[/quote:330m4nai]\n\nI am afraid that you have misunderstood both his question and my answer.\n\nHe asked if he could change [b:330m4nai]from what [u:330m4nai]type[/u:330m4nai] an object inherits after it was already created[/b:330m4nai].\n\nIf you look at the code in any game you will see something like this:\n[code:330m4nai]\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n      &lt;inherit name=&quot;female_elf&quot; /&gt;\n[/code:330m4nai]\nWhat he asked was whether it is possible to, for example, dynamically replace inherit &quot;female_elf&quot; with say &quot;male_golem&quot; based on player's class choice. As far as I know that is currently not possible.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>HegemonKhan wrote:</cite>that is interesting, that there's no way to set (or nor add) an inherited attribute ??</blockquote><br/><br/>I am afraid that you have misunderstood both his question and my answer.<br/><br/>He asked if he could change <span style=\"font-weight:bold;\">from what <span style=\"text-decoration:underline;\">type</span> an object inherits after it was already created</span>.<br/><br/>If you look at the code in any game you will see something like this:<br/><pre><code><br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>      &lt;inherit name=&quot;female_elf&quot; /&gt;<br/></code></pre><br/>What he asked was whether it is possible to, for example, dynamically replace inherit &quot;female_elf&quot; with say &quot;male_golem&quot; based on player's class choice. As far as I know that is currently not possible.",
      "PostDate": "2013-03-10T13:49:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23272",
      "UserId": 0,
      "Username": "homeeman",
      "UserAvatar": null,
      "UserGravatar": "4c7b0e689de0b974bfe447478a40fb60",
      "EditableText": "levicki, I'm pretty sure that they understood what was being asked, they were merely suggesting alternative ways to deal with the situation since you already pointed out that there is no way to assign a type after play has begun.\nAs it happens, jaynabonne, what I ended up doing very nearly resembles your suggestion, except that I utilized the POV switching (very largely because I hadn't used it before and wanted to try it) to make the object that represents the class choice be used as the player (that is, I'll refer to things as &quot;class.attribute&quot;).  Thanks to everyone for their suggestions!\nI probably would have used HK's on my first game (had the issue come up) but I just hate how difficult it is to find things like attributes and abilities the player [i:37zfc3bv]may[/i:37zfc3bv] have when they're buried in code.  This is the first thing I'm writing for the game, and I just don't want to bother with that.",
      "EditableFormat": "bbcode",
      "HTML": "levicki, I'm pretty sure that they understood what was being asked, they were merely suggesting alternative ways to deal with the situation since you already pointed out that there is no way to assign a type after play has begun.<br/>As it happens, jaynabonne, what I ended up doing very nearly resembles your suggestion, except that I utilized the POV switching (very largely because I hadn't used it before and wanted to try it) to make the object that represents the class choice be used as the player (that is, I'll refer to things as &quot;class.attribute&quot;).  Thanks to everyone for their suggestions!<br/>I probably would have used HK's on my first game (had the issue come up) but I just hate how difficult it is to find things like attributes and abilities the player <span style=\"font-style:italic;\">may</span> have when they're buried in code.  This is the first thing I'm writing for the game, and I just don't want to bother with that.",
      "PostDate": "2013-03-10T18:09:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23275",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thanks for the clarification, Levicki, my apologies for not understanding homeeman's question correctly.\n\nI don't know how easy it would be to implement, but maybe we should send a request to Alex for some kind of wat to add, remove, or other way of changing the inherited types (or the object types) during the game (after character~player~npc objects are created).\n\nUntil than, it'd probably be better to have a script that adds all the attributes you want, as that can be called upon, and would be able to switched (called upon again) with another function with its attributes.\n\n&lt;script&gt;\nif character_object = warrior\nwarrior_function\n&lt;/script&gt;\n\n&lt;script&gt;\nif character_object = wizzard\nwizzard_function\n&lt;/script&gt;\n\n&lt;function name=&quot;warrior_class&quot;&gt;\n  character_object.attribute\n  character_object.attribute\n  character_object.attribute\n&lt;/function&gt;\n\n&lt;function name=&quot;wizzard_class&quot;&gt;\n  character_object.attribute\n  character_object.attribute\n  character_object.attribute\n&lt;/function&gt;\n\nnow... can a function be made to remove the attributes (so you don't ahve a huge list of attributes on your character_objects, lol (nvm, forgot about simply setting them to null, though I'm not sure if this actually removes the attributes' coding or not. still coming up with a function that is able to turn off all your old attributes may not be easy or possible to make, can this be done, as I'm still a noob and am learning coding, with many mistakes and misunderstandings, but I like to participate in things or code stuff beyond me, as it helps me learn, and see how much or little I know about stuff)",
      "EditableFormat": "bbcode",
      "HTML": "thanks for the clarification, Levicki, my apologies for not understanding homeeman's question correctly.<br/><br/>I don't know how easy it would be to implement, but maybe we should send a request to Alex for some kind of wat to add, remove, or other way of changing the inherited types (or the object types) during the game (after character~player~npc objects are created).<br/><br/>Until than, it'd probably be better to have a script that adds all the attributes you want, as that can be called upon, and would be able to switched (called upon again) with another function with its attributes.<br/><br/>&lt;script&gt;<br/>if character_object = warrior<br/>warrior_function<br/>&lt;/script&gt;<br/><br/>&lt;script&gt;<br/>if character_object = wizzard<br/>wizzard_function<br/>&lt;/script&gt;<br/><br/>&lt;function name=&quot;warrior_class&quot;&gt;<br/>  character_object.attribute<br/>  character_object.attribute<br/>  character_object.attribute<br/>&lt;/function&gt;<br/><br/>&lt;function name=&quot;wizzard_class&quot;&gt;<br/>  character_object.attribute<br/>  character_object.attribute<br/>  character_object.attribute<br/>&lt;/function&gt;<br/><br/>now... can a function be made to remove the attributes (so you don't ahve a huge list of attributes on your character_objects, lol (nvm, forgot about simply setting them to null, though I'm not sure if this actually removes the attributes' coding or not. still coming up with a function that is able to turn off all your old attributes may not be easy or possible to make, can this be done, as I'm still a noob and am learning coding, with many mistakes and misunderstandings, but I like to participate in things or code stuff beyond me, as it helps me learn, and see how much or little I know about stuff)",
      "PostDate": "2013-03-10T20:22:45+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23278",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "My two cents: I personally wouldn't &quot;go there&quot; as far as even suggesting a feature for changing types like that. No computer language that I have used has ever allowed runtime switching of object types, and there are plenty of software design patterns for handling what people need to do (e.g. what I had proposed before is a basic &quot;pimpl&quot; design pattern).\n\nBut let's say that it was determined that changing an object's inheritance tree at runtime was desired, as opposed to the more typical composition that is supported with Quest (or switching of POV/object references in this case, which is a way to defer object creation/selection until a type is known). Consider the challenges involved with that, due to the multiple inheritance involved, especially as far as common attributes defined in multiple base types. \n\nConsider this case:\n\n[code:2hslsvkf]  &lt;type name=&quot;BaseA&quot;&gt;\n  \t&lt;color&gt;Red&lt;/color&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;BaseB&quot;&gt;\n  \t&lt;color&gt;Blue&lt;/color&gt;\n  &lt;/type&gt;\n  &lt;object name=&quot;Derived&quot;&gt;\n  \t&lt;inherit name=&quot;BaseA&quot;/&gt;\n  \t&lt;inherit name=&quot;BaseB&quot;/&gt;\n  &lt;/object&gt;  [/code:2hslsvkf]\n\nWhat is Derived.color? It turns out it's &quot;Blue&quot;. So, at least empirically, it seems that the effective attribute for an object is in the latest &lt;inherit'ed&gt; type where it appears. \n\nNow let's say someone wanted to *change* a base type. We would need methods to, perhaps, remove a base type, insert a base type, replace a base type? Would we want the ability to remove all inherited types and add new ones? Would we want to be able to remove BaseA and replace it with BaseC, or perhaps have BaseC be inserted into the inheritance list *after* BaseB?\n\nAnd, in the end, it would be quite a complex undertaking to implement something that a) will actually rarely be used, and b) is really not needed, as there are plenty of ways of implementing software that don't need such a feature. There might even be objections from a purist software design point of view as well.\n\nI'd say define your objects to be the types you want, statically. If you need dynamic, runtime selection of objects of different types, then use a contained object that you can redefine on the fly (POV is just such an indirect object pointer/reference).",
      "EditableFormat": "bbcode",
      "HTML": "My two cents: I personally wouldn't &quot;go there&quot; as far as even suggesting a feature for changing types like that. No computer language that I have used has ever allowed runtime switching of object types, and there are plenty of software design patterns for handling what people need to do (e.g. what I had proposed before is a basic &quot;pimpl&quot; design pattern).<br/><br/>But let's say that it was determined that changing an object's inheritance tree at runtime was desired, as opposed to the more typical composition that is supported with Quest (or switching of POV/object references in this case, which is a way to defer object creation/selection until a type is known). Consider the challenges involved with that, due to the multiple inheritance involved, especially as far as common attributes defined in multiple base types. <br/><br/>Consider this case:<br/><br/><pre><code>  &lt;type name=&quot;BaseA&quot;&gt;<br/>  \t&lt;color&gt;Red&lt;/color&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;BaseB&quot;&gt;<br/>  \t&lt;color&gt;Blue&lt;/color&gt;<br/>  &lt;/type&gt;<br/>  &lt;object name=&quot;Derived&quot;&gt;<br/>  \t&lt;inherit name=&quot;BaseA&quot;/&gt;<br/>  \t&lt;inherit name=&quot;BaseB&quot;/&gt;<br/>  &lt;/object&gt;  </code></pre><br/><br/>What is Derived.color? It turns out it's &quot;Blue&quot;. So, at least empirically, it seems that the effective attribute for an object is in the latest &lt;inherit'ed&gt; type where it appears. <br/><br/>Now let's say someone wanted to *change* a base type. We would need methods to, perhaps, remove a base type, insert a base type, replace a base type? Would we want the ability to remove all inherited types and add new ones? Would we want to be able to remove BaseA and replace it with BaseC, or perhaps have BaseC be inserted into the inheritance list *after* BaseB?<br/><br/>And, in the end, it would be quite a complex undertaking to implement something that a) will actually rarely be used, and b) is really not needed, as there are plenty of ways of implementing software that don't need such a feature. There might even be objections from a purist software design point of view as well.<br/><br/>I'd say define your objects to be the types you want, statically. If you need dynamic, runtime selection of objects of different types, then use a contained object that you can redefine on the fly (POV is just such an indirect object pointer/reference).",
      "PostDate": "2013-03-10T22:09:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23279",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Another note: with the ability to loop over object attributes now, you could also quite easily have archetype/prototype objects that you simply copy attributes from.\n\nHere is a sample function:\n\n[code:38qvmetu]  &lt;function name=&quot;CopyAttributes&quot; parameters=&quot;source,target,copyInherited&quot;&gt;\n  &lt;!&#91;CDATA&#91;\n  \tforeach (attribute, GetAttributeNames(source, copyInherited)) {\n  \t\tif (attribute &lt;&gt; &quot;name&quot;) {\n  \t\t\tset (target, attribute, GetAttribute(source, attribute))\n  \t\t}\n  \t}\n  &#93;&#93;&gt;\n  &lt;/function&gt;[/code:38qvmetu]\n\nThis will set into &quot;target&quot; all the attributes from &quot;source&quot;. If you don't want all inherited attributes (e.g. from types), then set &quot;copyInherited&quot; to false. Otherwise, set it to true. \n\nSo now you can define objects as holders for basic attribute sets and then just copy them to the player object once the type is determined. And note that it will copy all attributes, even script, dictionaries, etc. (The only one it doesn't is &quot;name&quot;, which is unique per object.)\n\n[code:38qvmetu]  &lt;object name=&quot;HumanPrototype&quot;&gt;\n  \t&lt;classname&gt;Human&lt;/classname&gt;\n  \t&lt;strength type=&quot;int&quot;&gt;5&lt;/strength&gt;\n  \t&lt;speed type=&quot;int&quot;&gt;4&lt;/speed&gt;\n  \t&lt;agility type=&quot;int&quot;&gt;7&lt;/agility&gt;\n  \t&lt;attack type=&quot;script&quot;&gt;\n  \t\tmsg(&quot;This is a human attacking&#46;&#46;&#46;&quot;)\n  \t&lt;/attack&gt;\n  &lt;/object&gt;\n\n   &#46;&#46;&#46;\n      CopyAttributes(HumanPrototype, player,false)[/code:38qvmetu]",
      "EditableFormat": "bbcode",
      "HTML": "Another note: with the ability to loop over object attributes now, you could also quite easily have archetype/prototype objects that you simply copy attributes from.<br/><br/>Here is a sample function:<br/><br/><pre><code>  &lt;function name=&quot;CopyAttributes&quot; parameters=&quot;source,target,copyInherited&quot;&gt;<br/>  &lt;!&#91;CDATA&#91;<br/>  \tforeach (attribute, GetAttributeNames(source, copyInherited)) {<br/>  \t\tif (attribute &lt;&gt; &quot;name&quot;) {<br/>  \t\t\tset (target, attribute, GetAttribute(source, attribute))<br/>  \t\t}<br/>  \t}<br/>  &#93;&#93;&gt;<br/>  &lt;/function&gt;</code></pre><br/><br/>This will set into &quot;target&quot; all the attributes from &quot;source&quot;. If you don't want all inherited attributes (e.g. from types), then set &quot;copyInherited&quot; to false. Otherwise, set it to true. <br/><br/>So now you can define objects as holders for basic attribute sets and then just copy them to the player object once the type is determined. And note that it will copy all attributes, even script, dictionaries, etc. (The only one it doesn't is &quot;name&quot;, which is unique per object.)<br/><br/><pre><code>  &lt;object name=&quot;HumanPrototype&quot;&gt;<br/>  \t&lt;classname&gt;Human&lt;/classname&gt;<br/>  \t&lt;strength type=&quot;int&quot;&gt;5&lt;/strength&gt;<br/>  \t&lt;speed type=&quot;int&quot;&gt;4&lt;/speed&gt;<br/>  \t&lt;agility type=&quot;int&quot;&gt;7&lt;/agility&gt;<br/>  \t&lt;attack type=&quot;script&quot;&gt;<br/>  \t\tmsg(&quot;This is a human attacking&#46;&#46;&#46;&quot;)<br/>  \t&lt;/attack&gt;<br/>  &lt;/object&gt;<br/><br/>   &#46;&#46;&#46;<br/>      CopyAttributes(HumanPrototype, player,false)</code></pre>",
      "PostDate": "2013-03-10T22:25:53+00:00",
      "LastEditDate": null
    }
  ]
}
