{
  "Topic": {
    "TopicId": "wahirop5hkgpoihxumr2pg",
    "ForumId": "10",
    "Title": "Room Enter",
    "LastUpdated": "2021-09-29T12:42:24.8611086Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "da6da2ec-5425-42fc-9e7d-92df814e3377",
      "UserId": 554565,
      "Username": "Local_Redditor",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d399e24d4df00712ccd605ca2550624d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Can I make multiple (universal) copies of 'Script when entering a room'? (So that I can...sort them...again...)",
      "EditableFormat": "markdown",
      "HTML": "<p>Can I make multiple (universal) copies of 'Script when entering a room'? (So that I can...sort them...again...)</p>\n\n",
      "PostDate": "2021-09-29T12:42:24.8611086Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d32780a0-b969-479e-a336-a89cef73342b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not easily. But there's nothing to stop you making multiple script attributes, or multiple functions, and having the main roomenter script just run all of them.\r\n\r\n\r\nBut this time, I'm wondering why you would want more than one. A request like this makes me wonder what you're putting in there that's complex enough to need splitting up. In most of the cases that come to mind, there might be a simpler way to do it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not easily. But there's nothing to stop you making multiple script attributes, or multiple functions, and having the main roomenter script just run all of them.</p>\n<p>But this time, I'm wondering why you would want more than one. A request like this makes me wonder what you're putting in there that's complex enough to need splitting up. In most of the cases that come to mind, there might be a simpler way to do it.</p>\n\n",
      "PostDate": "2021-09-29T13:09:07.3640885Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "736b2778-7e1f-4567-b7df-a46b5c240a5b",
      "UserId": 554565,
      "Username": "Local_Redditor",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d399e24d4df00712ccd605ca2550624d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Was just searching for some alternative for universal scripts. I didn't end up needing them in the end.",
      "EditableFormat": "markdown",
      "HTML": "<p>Was just searching for some alternative for universal scripts. I didn't end up needing them in the end.</p>\n\n",
      "PostDate": "2021-09-30T03:47:45.633003Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cd5f3419-8def-4184-9177-39bc850edb99",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just noticed this thread recently, and it helped me solve a problem with my game -- I wanted to randomly select one of my game's many rooms, and then <i>add to</i> (rather than simply replace) that room's ```enter``` script.  The problem was that many of my rooms already had their own customized ```enter``` scripts, while other rooms simply had an empty ```enter``` script.  So just replacing the random room's ```enter``` script wouldn't work, as I would lose the original scripting, if any.\r\n\r\nMrAngel's comment was enlightening:\r\n> But there's nothing to stop you making multiple script attributes, or multiple functions, and having the main roomenter script just run all of them.\r\n\r\nThe answer, then, was to first copy the room's ```enter``` script attribute to a new (backup) script attribute:\r\n```\r\nRandomRoom.EnterBackup = RandomRoom.enter\r\n```\r\nThen I replaced the room's ```enter``` script by setting that attribute to a new script, one that calls a function that I created:\r\n```\r\nRandomRoom.enter => {\r\n  NewFunction\r\n}\r\n```\r\nThe function then runs the backup script attribute, plus whatever additional scripting that I wanted:\r\n```\r\ndo (RandomRoom, \"EnterBackup\")\r\n// additional scripting follows\r\n```\r\nSo, in effect, the function runs the room's original ```enter``` script, plus my added scripting.  The only wrinkle is that the new function has to check to see if the backup script attribute is ```null```, and then only run it if it isn't ```null``` (otherwise Quest will print an error message if it is ```null```):\r\n```\r\nif (RandomRoom.EnterBackup <> null) {\r\n  do (RandomRoom, \"EnterBackup\")\r\n}\r\n```\r\nSeems simple in hindsight, but I couldn't think of this solution at the time!  Thank you again MrAngel!",
      "EditableFormat": "markdown",
      "HTML": "<p>Just noticed this thread recently, and it helped me solve a problem with my game -- I wanted to randomly select one of my game's many rooms, and then <i>add to</i> (rather than simply replace) that room's <code>enter</code> script.  The problem was that many of my rooms already had their own customized <code>enter</code> scripts, while other rooms simply had an empty <code>enter</code> script.  So just replacing the random room's <code>enter</code> script wouldn't work, as I would lose the original scripting, if any.</p>\n<p>MrAngel's comment was enlightening:</p>\n<blockquote>\n<p>But there's nothing to stop you making multiple script attributes, or multiple functions, and having the main roomenter script just run all of them.</p>\n</blockquote>\n<p>The answer, then, was to first copy the room's <code>enter</code> script attribute to a new (backup) script attribute:</p>\n<pre><code>RandomRoom.EnterBackup = RandomRoom.enter\n</code></pre>\n<p>Then I replaced the room's <code>enter</code> script by setting that attribute to a new script, one that calls a function that I created:</p>\n<pre><code>RandomRoom.enter =&gt; {\n  NewFunction\n}\n</code></pre>\n<p>The function then runs the backup script attribute, plus whatever additional scripting that I wanted:</p>\n<pre><code>do (RandomRoom, \"EnterBackup\")\n// additional scripting follows\n</code></pre>\n<p>So, in effect, the function runs the room's original <code>enter</code> script, plus my added scripting.  The only wrinkle is that the new function has to check to see if the backup script attribute is <code>null</code>, and then only run it if it isn't <code>null</code> (otherwise Quest will print an error message if it is <code>null</code>):</p>\n<pre><code>if (RandomRoom.EnterBackup &lt;&gt; null) {\n  do (RandomRoom, \"EnterBackup\")\n}\n</code></pre>\n<p>Seems simple in hindsight, but I couldn't think of this solution at the time!  Thank you again MrAngel!</p>\n\n",
      "PostDate": "2021-11-13T10:11:24.5486928Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d5a7f484-98d8-4024-9f98-032246248d3c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That seems like quite a complex way to do it.\r\n\r\nIf there's only one script you're adding to a room in this way, you could just use a flag:\r\n```\r\nRandomRoom.RunNewFunctionOnEnter = true\r\n```\r\nAnd then in your `game.roomenter` script, put:\r\n```\r\nif (GetBoolean (game.pov.parent, \"RunNewFunctionOnEnter\")) {\r\n  NewFunction ()\r\n}\r\n```\r\nNo need to change the `enter` script.\r\n\r\nIf you've got several functions that might be added, you can just add a separate flag for each; and you don't need to check if a `EnterBackup` already exists.\r\n\r\nIf you have multiple scripts that a random room could be set to, but you don't want it to run more than one, it's probably good adding a script attribute. But it seems simpler to just add a new `ExtraEnter` script and run it from `roomenter`, rather than changing the existing `enter`:\r\n```\r\nif (HasScript (game.pov.parent, \"ExtraEnter\")) {\r\n  do (game.pov.parent, \"ExtraEnter\")\r\n}\r\n```\r\n\r\nAlthough I have in the past used a method like this, which allows you to add multiple different scripts to a room, and control which order they run in, by making the room's `enter` attribute a *list* of scripts:\r\n1. To add a new function *after* the existing `enter` script:\r\n```\r\nenters = NewList ()\r\nswitch (TypeOf (RandomRoom, \"enter\")) {\r\n  case (\"list\") {\r\n    enters = RandomRoom.enter\r\n  }\r\n  case (\"script\") {\r\n    list add (enters, RandomRoom.enter)\r\n  }\r\n}\r\nnewscript => {\r\n  NewFunction ()\r\n}\r\nlist add (enters, newscript)\r\nRandomRoom.enter = enters\r\n```\r\n2. To add a new function *before* the existing `enter` script:\r\n```\r\nenters = NewList ()\r\nnewscript => {\r\n  NewFunction ()\r\n}\r\nlist add (enters, newscript)\r\nswitch (TypeOf (RandomRoom, \"enter\")) {\r\n  case (\"list\") {\r\n    enters = ListCombine (enters, RandomRoom.enter)\r\n  }\r\n  case (\"script\") {\r\n    list add (enters, RandomRoom.enter)\r\n  }\r\n}\r\nRandomRoom.enter = enters\r\n```\r\n3. The `game.roomenter` script to make it work:\r\n```\r\nif (TypeOf (game.pov.parent, \"enter\") = \"list\") {\r\n  foreach (script, game.pov.parent.enter) {\r\n    game.pov.parent.tempenter = script\r\n    do (game.pov.parent, \"tempenter\")\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>That seems like quite a complex way to do it.</p>\n<p>If there's only one script you're adding to a room in this way, you could just use a flag:</p>\n<pre><code>RandomRoom.RunNewFunctionOnEnter = true\n</code></pre>\n<p>And then in your <code>game.roomenter</code> script, put:</p>\n<pre><code>if (GetBoolean (game.pov.parent, \"RunNewFunctionOnEnter\")) {\n  NewFunction ()\n}\n</code></pre>\n<p>No need to change the <code>enter</code> script.</p>\n<p>If you've got several functions that might be added, you can just add a separate flag for each; and you don't need to check if a <code>EnterBackup</code> already exists.</p>\n<p>If you have multiple scripts that a random room could be set to, but you don't want it to run more than one, it's probably good adding a script attribute. But it seems simpler to just add a new <code>ExtraEnter</code> script and run it from <code>roomenter</code>, rather than changing the existing <code>enter</code>:</p>\n<pre><code>if (HasScript (game.pov.parent, \"ExtraEnter\")) {\n  do (game.pov.parent, \"ExtraEnter\")\n}\n</code></pre>\n<p>Although I have in the past used a method like this, which allows you to add multiple different scripts to a room, and control which order they run in, by making the room's <code>enter</code> attribute a <em>list</em> of scripts:</p>\n<ol>\n<li>To add a new function <em>after</em> the existing <code>enter</code> script:</li>\n</ol>\n<pre><code>enters = NewList ()\nswitch (TypeOf (RandomRoom, \"enter\")) {\n  case (\"list\") {\n    enters = RandomRoom.enter\n  }\n  case (\"script\") {\n    list add (enters, RandomRoom.enter)\n  }\n}\nnewscript =&gt; {\n  NewFunction ()\n}\nlist add (enters, newscript)\nRandomRoom.enter = enters\n</code></pre>\n<ol start=\"2\">\n<li>To add a new function <em>before</em> the existing <code>enter</code> script:</li>\n</ol>\n<pre><code>enters = NewList ()\nnewscript =&gt; {\n  NewFunction ()\n}\nlist add (enters, newscript)\nswitch (TypeOf (RandomRoom, \"enter\")) {\n  case (\"list\") {\n    enters = ListCombine (enters, RandomRoom.enter)\n  }\n  case (\"script\") {\n    list add (enters, RandomRoom.enter)\n  }\n}\nRandomRoom.enter = enters\n</code></pre>\n<ol start=\"3\">\n<li>The <code>game.roomenter</code> script to make it work:</li>\n</ol>\n<pre><code>if (TypeOf (game.pov.parent, \"enter\") = \"list\") {\n  foreach (script, game.pov.parent.enter) {\n    game.pov.parent.tempenter = script\n    do (game.pov.parent, \"tempenter\")\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2021-11-13T12:10:43.4280563Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e91bfdf1-c559-4fb9-aa26-f648fdfff9d8",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The reason I didn't use ```roomenter``` was because I did not want to add to the turn-by-turn \"overhead\" of my game.  But it would be more straightforward to do it that way.\r\n\r\nAs for making an attribute a <i>list of scripts</i>, I didn't even know that could be done!  I thought that lists had to be either string or object lists.  Thanks for sharing something new (at least, to me)!",
      "EditableFormat": "markdown",
      "HTML": "<p>The reason I didn't use <code>roomenter</code> was because I did not want to add to the turn-by-turn \"overhead\" of my game.  But it would be more straightforward to do it that way.</p>\n<p>As for making an attribute a <i>list of scripts</i>, I didn't even know that could be done!  I thought that lists had to be either string or object lists.  Thanks for sharing something new (at least, to me)!</p>\n\n",
      "PostDate": "2021-11-14T03:51:42.8952017Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "457be9e3-0620-4b59-a7f6-d9e529cf34f9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I do like efficient code; but I think that a singe `HasScript` call is simple enough to make little difference (especially compared to some of the code that's already in the core).\r\n\r\nIf you wanted to use the list method without checking for it every turn, you could have a separate attribute for a list of scripts. Something like:\r\n```\r\nnewscript => {\r\n  Whatever()\r\n}\r\nif (HasAttribute (room, \"multienter\")) {\r\n  list add (room.multienter, newscript)\r\n}\r\nelse if (HasScript (room, \"enter\")) {\r\n  room.multienter = NewList()\r\n  list add (room.multienter, room.enter)\r\n  list add (room.multienter, newscript)\r\n  room.enter => {\r\n    foreach (script, this.multienter) {\r\n      invoke (script, QuickParams (\"this\", this))\r\n    }\r\n  }\r\n}\r\nelse {\r\n  room.enter = newscript\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I do like efficient code; but I think that a singe <code>HasScript</code> call is simple enough to make little difference (especially compared to some of the code that's already in the core).</p>\n<p>If you wanted to use the list method without checking for it every turn, you could have a separate attribute for a list of scripts. Something like:</p>\n<pre><code>newscript =&gt; {\n  Whatever()\n}\nif (HasAttribute (room, \"multienter\")) {\n  list add (room.multienter, newscript)\n}\nelse if (HasScript (room, \"enter\")) {\n  room.multienter = NewList()\n  list add (room.multienter, room.enter)\n  list add (room.multienter, newscript)\n  room.enter =&gt; {\n    foreach (script, this.multienter) {\n      invoke (script, QuickParams (\"this\", this))\n    }\n  }\n}\nelse {\n  room.enter = newscript\n}\n</code></pre>\n\n",
      "PostDate": "2021-11-14T10:22:01.7990084Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
