{
  "Topic": {
    "TopicId": "4230",
    "ForumId": "10",
    "Title": "sorting string keys of dictionaries",
    "LastUpdated": "2014-03-14T12:03:33+00:00",
    "ReplyCount": 6
  },
  "Posts": [
    {
      "PostId": "28136",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "So in another thread I rather blithely assumed sorting a dictionary in pure Quest (not JS), while maybe tedious, wouldn't be that hard to do. However I was playing around with it and there seems to be a couple of stumbling blocks, the main one is that you can't cast a string to a char.\n\nSince you can't compare strings as far as I can tell, comparing chars is the next best thing. But while you can compare chars, I don't see a way to cast strings to chars, so if you start with a string key from a dictionary, is it possible to compare those string keys in order to sort them?\n\nUsing the FLEE cast() didn't work, and even if it did work it wouldn't be a great solution anyway since it won't convert to JS. \n\nIs JS the best option here?\n\nThe only pure Quest solution I can think of at the moment is to maintain a mapping of numbers to chars, and strings to numbers, such that given a string like &quot;s&quot;, you could find a number (say 20) which is mapped to the char 's'. Then you could get the char 's' that way. But it's quite roundabout.",
      "EditableFormat": "bbcode",
      "HTML": "So in another thread I rather blithely assumed sorting a dictionary in pure Quest (not JS), while maybe tedious, wouldn't be that hard to do. However I was playing around with it and there seems to be a couple of stumbling blocks, the main one is that you can't cast a string to a char.<br/><br/>Since you can't compare strings as far as I can tell, comparing chars is the next best thing. But while you can compare chars, I don't see a way to cast strings to chars, so if you start with a string key from a dictionary, is it possible to compare those string keys in order to sort them?<br/><br/>Using the FLEE cast() didn't work, and even if it did work it wouldn't be a great solution anyway since it won't convert to JS. <br/><br/>Is JS the best option here?<br/><br/>The only pure Quest solution I can think of at the moment is to maintain a mapping of numbers to chars, and strings to numbers, such that given a string like &quot;s&quot;, you could find a number (say 20) which is mapped to the char 's'. Then you could get the char 's' that way. But it's quite roundabout.",
      "PostDate": "2014-03-13T04:48:39+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "28137",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "Perhaps you could use StringListSort\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/StringListSort\">http://quest5.net/wiki/StringListSort</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "Perhaps you could use StringListSort<br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/StringListSort\">http://quest5.net/wiki/StringListSort</a><!-- m -->",
      "PostDate": "2014-03-13T07:50:44+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "28139",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "You have the Asc function at your disposal. Here is a quick and dirty and rather ugly quick implementation of a &quot;string less than&quot; function.\n\n[code:1cw721y4]&lt;!--Saved by Quest 5&#46;5&#46;5173&#46;27901--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;SortTest&quot;&gt;\n    &lt;gameid&gt;235470e7-3e53-4464-ada0-28904679c835&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2014&lt;/firstpublished&gt;\n    &lt;start type=&quot;script&quot;&gt;\n     &lt;!&#91;CDATA&#91;\n      msg(StringIsLessThan(&quot;a&quot;, &quot;b&quot;))\n      msg(StringIsLessThan(&quot;B&quot;, &quot;D&quot;))\n      msg(StringIsLessThan(&quot;ab&quot;, &quot;adc&quot;))\n      msg(StringIsLessThan(&quot;z&quot;, &quot;abc&quot;))\n      &#93;&#93;&gt;\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;function name=&quot;StringIsLessThan&quot; parameters=&quot;s1, s2&quot; type=&quot;boolean&quot;&gt;\n  &lt;!&#91;CDATA&#91;\n  \tlen1 = LengthOf(s1)\n  \tlen2 = LengthOf(s2)\n  \tlen = len1\n  \tif (len &gt; len2) {\n  \t\tlen = len2\n  \t}\n  \ti = 1\n  \tdone = false\n  \twhile (i &lt;= len and not done) {\n  \t\tc1 = Asc(Mid(s1, i, 1)) \n  \t\tc2 = Asc(Mid(s2, i, 1)) \n  \t\tif (c1 &lt; c2) {\n  \t\t\tdone = true\n  \t\t\tret = true\n  \t\t} else if (c1 &gt; c2) {\n  \t\t\tdone = true\n  \t\t\tret = false\n  \t\t}\n  \t\ti = i + 1\n  \t}\n  \tif (not done) {\n  \t\tret = len1 &lt; len2\n  \t}\n  \treturn (ret)\n  \t&#93;&#93;&gt;\n  &lt;/function&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;[/code:1cw721y4]\n\nIt might be helpful as well to explain why you want to sort the keys. There might be a different solution to the same problem. (BTW, I was surprised that direct string comparison doesn't work. I would have bet money on it.)",
      "EditableFormat": "bbcode",
      "HTML": "You have the Asc function at your disposal. Here is a quick and dirty and rather ugly quick implementation of a &quot;string less than&quot; function.<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;5&#46;5173&#46;27901--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;SortTest&quot;&gt;<br/>    &lt;gameid&gt;235470e7-3e53-4464-ada0-28904679c835&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2014&lt;/firstpublished&gt;<br/>    &lt;start type=&quot;script&quot;&gt;<br/>     &lt;!&#91;CDATA&#91;<br/>      msg(StringIsLessThan(&quot;a&quot;, &quot;b&quot;))<br/>      msg(StringIsLessThan(&quot;B&quot;, &quot;D&quot;))<br/>      msg(StringIsLessThan(&quot;ab&quot;, &quot;adc&quot;))<br/>      msg(StringIsLessThan(&quot;z&quot;, &quot;abc&quot;))<br/>      &#93;&#93;&gt;<br/>    &lt;/start&gt;<br/>  &lt;/game&gt;<br/>  &lt;function name=&quot;StringIsLessThan&quot; parameters=&quot;s1, s2&quot; type=&quot;boolean&quot;&gt;<br/>  &lt;!&#91;CDATA&#91;<br/>  \tlen1 = LengthOf(s1)<br/>  \tlen2 = LengthOf(s2)<br/>  \tlen = len1<br/>  \tif (len &gt; len2) {<br/>  \t\tlen = len2<br/>  \t}<br/>  \ti = 1<br/>  \tdone = false<br/>  \twhile (i &lt;= len and not done) {<br/>  \t\tc1 = Asc(Mid(s1, i, 1)) <br/>  \t\tc2 = Asc(Mid(s2, i, 1)) <br/>  \t\tif (c1 &lt; c2) {<br/>  \t\t\tdone = true<br/>  \t\t\tret = true<br/>  \t\t} else if (c1 &gt; c2) {<br/>  \t\t\tdone = true<br/>  \t\t\tret = false<br/>  \t\t}<br/>  \t\ti = i + 1<br/>  \t}<br/>  \tif (not done) {<br/>  \t\tret = len1 &lt; len2<br/>  \t}<br/>  \treturn (ret)<br/>  \t&#93;&#93;&gt;<br/>  &lt;/function&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/asl&gt;</code></pre><br/><br/>It might be helpful as well to explain why you want to sort the keys. There might be a different solution to the same problem. (BTW, I was surprised that direct string comparison doesn't work. I would have bet money on it.)",
      "PostDate": "2014-03-13T08:05:28+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "28140",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Pertex, how in the world did you find that? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (That's a bit of a rhetorical question.) I did a search on the Wiki for &quot;sort&quot; and the only link from the List page was for ObjectListSort. That's definitely the solution to the question.",
      "EditableFormat": "bbcode",
      "HTML": "Pertex, how in the world did you find that? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (That's a bit of a rhetorical question.) I did a search on the Wiki for &quot;sort&quot; and the only link from the List page was for ObjectListSort. That's definitely the solution to the question.",
      "PostDate": "2014-03-13T08:07:57+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "28142",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "Thanks guys, I completely missed Asc! StringListSort would certainly work too. I noticed it's one of those functions that's in the wiki but doesn't show up when you filter for library elements in Quest itself. \ns",
      "EditableFormat": "bbcode",
      "HTML": "Thanks guys, I completely missed Asc! StringListSort would certainly work too. I noticed it's one of those functions that's in the wiki but doesn't show up when you filter for library elements in Quest itself. <br/>",
      "PostDate": "2014-03-13T14:17:51+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "28143",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "It's not a core (ASLX) function but rather implemented in the expression parser (from what I can see).",
      "EditableFormat": "bbcode",
      "HTML": "It's not a core (ASLX) function but rather implemented in the expression parser (from what I can see).",
      "PostDate": "2014-03-13T15:27:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "28156",
      "UserId": 0,
      "Username": "Liam315",
      "UserAvatar": null,
      "UserGravatar": "ded290a24d340d761d42c897d08111aa",
      "EditableText": "[quote=&quot;george&quot;:jmy31bbc]I noticed it's one of those functions that's in the wiki but doesn't show up when you filter for library elements in Quest itself.[/quote:jmy31bbc]\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Category:All_Functions_and_Script_Commands\">http://quest5.net/wiki/Category:All_Fun ... t_Commands</a><!-- m -->\n\nThat is the single most helpful page of the entire wiki, you can find a lot of functions that you wouldn't have even thought to search for but come in very useful.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>george wrote:</cite>I noticed it's one of those functions that's in the wiki but doesn't show up when you filter for library elements in Quest itself.</blockquote><br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Category:All_Functions_and_Script_Commands\">http://quest5.net/wiki/Category:All_Fun ... t_Commands</a><!-- m --><br/><br/>That is the single most helpful page of the entire wiki, you can find a lot of functions that you wouldn't have even thought to search for but come in very useful.",
      "PostDate": "2014-03-14T12:03:33+00:00",
      "LastEditDate": null
    }
  ]
}
