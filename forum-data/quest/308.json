{
  "Topic": {
    "TopicId": "308",
    "ForumId": "10",
    "Title": "Planned Library Work",
    "LastUpdated": "2004-01-26T14:36:53+00:00",
    "ReplyCount": 15
  },
  "Posts": [
    {
      "PostId": "2170",
      "UserId": 0,
      "Username": "Alf",
      "UserAvatar": null,
      "UserGravatar": "df6fcdbeed91f46db8f5428ad267174e",
      "EditableText": "Hello, All\n\nJust wondering if anyone is working on any more libraries, or is planning to.\n\nI have the TypeLib library (a note of Thanks to the author), and am anxious to see what other extensions of Quest are in the works.\n\nTTFN,\n\nAlf",
      "EditableFormat": "bbcode",
      "HTML": "Hello, All<br/><br/>Just wondering if anyone is working on any more libraries, or is planning to.<br/><br/>I have the TypeLib library (a note of Thanks to the author), and am anxious to see what other extensions of Quest are in the works.<br/><br/>TTFN,<br/><br/>Alf",
      "PostDate": "2004-01-19T16:42:03+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2171",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "ITID has released a very early battle engine, while I'm also working on one (with little monster/magic/item libraries to go with it)...\n\nThing is I haven't really had time to concentrate on it... I'll finish off some other stuff and hopefully get onto it during this free week I've got coming up at the end of the month. <!-- s:D --><img src=\"{SMILIES_PATH}/icon_e_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\n... Anyay, what idea's did you have?",
      "EditableFormat": "bbcode",
      "HTML": "ITID has released a very early battle engine, while I'm also working on one (with little monster/magic/item libraries to go with it)...<br/><br/>Thing is I haven't really had time to concentrate on it... I'll finish off some other stuff and hopefully get onto it during this free week I've got coming up at the end of the month. <!-- s:D --><img src=\"{SMILIES_PATH}/icon_e_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>... Anyay, what idea's did you have?",
      "PostDate": "2004-01-19T18:29:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2173",
      "UserId": 0,
      "Username": "Alf",
      "UserAvatar": null,
      "UserGravatar": "df6fcdbeed91f46db8f5428ad267174e",
      "EditableText": "I really like the clothes/wearable, container/containable functionality added by TypeLib.  I was thinking how neat it would be to have other specialty properties like edible, drinkable, etc.\n\nHow about objects which depend upon the existence (or presence) of other objects?\n\nHow about \"turn based\" scenarios?  That is, where you can code for actions in each room to happen when the user presses the \"Done with turn\" button.  \n\nOr events that happen \"behind the scenes\".  For example, you started an activity in a room.  When you returned to the room at a later time, that activity has progressed to a certain degree.\n\nI know these can be scripted, but the libraries can really cut down on the extra coding.\n\nOnce again, I'm full of ideas, just not necessarily good ones.  Any other ideas and opinions - even if you disagree - are appreciated!\n\nAlf",
      "EditableFormat": "bbcode",
      "HTML": "I really like the clothes/wearable, container/containable functionality added by TypeLib.  I was thinking how neat it would be to have other specialty properties like edible, drinkable, etc.<br/><br/>How about objects which depend upon the existence (or presence) of other objects?<br/><br/>How about \"turn based\" scenarios?  That is, where you can code for actions in each room to happen when the user presses the \"Done with turn\" button.  <br/><br/>Or events that happen \"behind the scenes\".  For example, you started an activity in a room.  When you returned to the room at a later time, that activity has progressed to a certain degree.<br/><br/>I know these can be scripted, but the libraries can really cut down on the extra coding.<br/><br/>Once again, I'm full of ideas, just not necessarily good ones.  Any other ideas and opinions - even if you disagree - are appreciated!<br/><br/>Alf",
      "PostDate": "2004-01-19T19:03:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2174",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "[quote:5aut5p16]\nI really like the clothes/wearable, container/containable functionality added by TypeLib. I was thinking how neat it would be to have other specialty properties like edible, drinkable, etc. \n[/quote:5aut5p16]\n\nGlad you approve <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->   The new (still unreleased though) 'typelib2' extends the existing one by allowing NPC's to have layered clothing etc, but much more useful (IMHO) is the ability to ask/tell NPC's to do things - and ask questions about objects, other NPC's and rooms etc. with what I call a 'topic based' system. Combining the two functionalities it is actually possible to ask one NPC to tell another about a third NPC (or object) - meaning your player could type:\n\n[quote:5aut5p16]\nFred, tell Janice about the sports car.\n[/quote:5aut5p16] \n\nThis is particularly neat in that, prior to the above, if Fred knows about the car but Janice doesn't, after the above is made, Janice can be asked about the car and will be found to know what Fred told her - automatically <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\n(NB. You can actually have each NPC describe the same object differently to reflect their personality if you are patient enough to do so.)\n\nAlso NPC's can be asked about themselves - obviously.\n\nSimple types like edible/drinkable are not hard to add. Currently typelib adds 'readable' (for no other reason that I needed it for one of my pieces!)\nI can add edible drinkable types to typelib2 if it's thought a good idea. Any other basic types that you would like to see in there?\n\n[quote:5aut5p16]\nHow about objects which depend upon the existence (or presence) of other objects? \n[/quote:5aut5p16]\n\nYou've lost me here - an example of what you mean please?\n\n[quote:5aut5p16]\nHow about \"turn based\" scenarios? That is, where you can code for actions in each room to happen when the user presses the \"Done with turn\" button. \n[/quote:5aut5p16]\n\nYou already have that functionality in Quest - in the beforeturn &amp; afterturn scripts at global and room level.\n\n[quote:5aut5p16]\nOr events that happen \"behind the scenes\". For example, you started an activity in a room. When you returned to the room at a later time, that activity has progressed to a certain degree. \n[/quote:5aut5p16]\n\nObviously you can do this in script, back in Quest 2 I wrote a routine whereby you could schedule an event to proceed to completion once begun. I called this my 'daemon' script. I didn't library-ise it though, it would be a bit trickier to implement than it might seem but not impossible. I'll try and think through a solution for the next typelib. \n\n[quote:5aut5p16]\nI know these can be scripted, but the libraries can really cut down on the extra coding. \n[/quote:5aut5p16]\n\nThat's the idea really. I've tried to make my libraries 'plug n play' in the sense that it shouldn't be neccessary to understand the code in the libs - or even look at them - to make use of them.\n\n[quote:5aut5p16]\nOnce again, I'm full of ideas, just not necessarily good ones. Any other ideas and opinions - even if you disagree - are appreciated! \n[/quote:5aut5p16]\n\nNever apologise for making a genuine suggestion or constructive criticism. <!-- s;-) --><img src=\"{SMILIES_PATH}/icon_e_wink.gif\" alt=\";-)\" title=\"Wink\" /><!-- s;-) -->\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p><br/>I really like the clothes/wearable, container/containable functionality added by TypeLib. I was thinking how neat it would be to have other specialty properties like edible, drinkable, etc. <br/></p></blockquote><br/><br/>Glad you approve <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->   The new (still unreleased though) 'typelib2' extends the existing one by allowing NPC's to have layered clothing etc, but much more useful (IMHO) is the ability to ask/tell NPC's to do things - and ask questions about objects, other NPC's and rooms etc. with what I call a 'topic based' system. Combining the two functionalities it is actually possible to ask one NPC to tell another about a third NPC (or object) - meaning your player could type:<br/><br/><blockquote><p><br/>Fred, tell Janice about the sports car.<br/></p></blockquote> <br/><br/>This is particularly neat in that, prior to the above, if Fred knows about the car but Janice doesn't, after the above is made, Janice can be asked about the car and will be found to know what Fred told her - automatically <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>(NB. You can actually have each NPC describe the same object differently to reflect their personality if you are patient enough to do so.)<br/><br/>Also NPC's can be asked about themselves - obviously.<br/><br/>Simple types like edible/drinkable are not hard to add. Currently typelib adds 'readable' (for no other reason that I needed it for one of my pieces!)<br/>I can add edible drinkable types to typelib2 if it's thought a good idea. Any other basic types that you would like to see in there?<br/><br/><blockquote><p><br/>How about objects which depend upon the existence (or presence) of other objects? <br/></p></blockquote><br/><br/>You've lost me here - an example of what you mean please?<br/><br/><blockquote><p><br/>How about \"turn based\" scenarios? That is, where you can code for actions in each room to happen when the user presses the \"Done with turn\" button. <br/></p></blockquote><br/><br/>You already have that functionality in Quest - in the beforeturn &amp; afterturn scripts at global and room level.<br/><br/><blockquote><p><br/>Or events that happen \"behind the scenes\". For example, you started an activity in a room. When you returned to the room at a later time, that activity has progressed to a certain degree. <br/></p></blockquote><br/><br/>Obviously you can do this in script, back in Quest 2 I wrote a routine whereby you could schedule an event to proceed to completion once begun. I called this my 'daemon' script. I didn't library-ise it though, it would be a bit trickier to implement than it might seem but not impossible. I'll try and think through a solution for the next typelib. <br/><br/><blockquote><p><br/>I know these can be scripted, but the libraries can really cut down on the extra coding. <br/></p></blockquote><br/><br/>That's the idea really. I've tried to make my libraries 'plug n play' in the sense that it shouldn't be neccessary to understand the code in the libs - or even look at them - to make use of them.<br/><br/><blockquote><p><br/>Once again, I'm full of ideas, just not necessarily good ones. Any other ideas and opinions - even if you disagree - are appreciated! <br/></p></blockquote><br/><br/>Never apologise for making a genuine suggestion or constructive criticism. <!-- s;-) --><img src=\"{SMILIES_PATH}/icon_e_wink.gif\" alt=\";-)\" title=\"Wink\" /><!-- s;-) --><br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-01-19T20:22:39+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2176",
      "UserId": 0,
      "Username": "Alf",
      "UserAvatar": null,
      "UserGravatar": "df6fcdbeed91f46db8f5428ad267174e",
      "EditableText": "Hi, Al\n\nThanks for the response.  I'm anxious to see the next TypeLib!  \n\nThe NPC interaction sounds great!\n\nI'd like to see edible and drinkable.  \n\nMaybe consumable resources (kinda like our oil!) with start value, qty or percentage of depletion during gameplay.\n\nThat reminds me, earlier I had asked on the forum for help in filling a canteen from the lake.  I got some good, workable suggestions.  I tried using your scenery object, and just a regular object, but nothing quite worked without a script.  That's kinda what I'm thinking of with a resource.  Something that's there (and described), but it's only takeable in portions.\n\nThe existence or presence of other objects:\nYou can make a cake, but only if you have all the (listed) ingredients.\nThe engine object is made of the crankshaft, camshaft, pistons, etc.  Each an object in itself, but combine to make a new object.\n\nDoes your readable property set any flags?  That is:  My user can't do a certain task unless he (or an NCP) has first read the manual.  Would be nice if it does.  Could simulate the gaining of intelligence or training.\n\nI didn't know about the beforeturn and afterturn scripts.  Guess I need to read the book again!  How do we implement a \"turn based\" game?  Just have the user type in a GO command of some sort?  Do you know if any of the Quest games in the download area are turn-based?  I'd be happy to look at the code to see how it's done.\n\nFrom an earlier discussion, I would still like to see a way to pass parameters from one Quest game to another.\n\nAll of this is just brainstorming (while I should be working).  Any thoughts?\n\nAlf",
      "EditableFormat": "bbcode",
      "HTML": "Hi, Al<br/><br/>Thanks for the response.  I'm anxious to see the next TypeLib!  <br/><br/>The NPC interaction sounds great!<br/><br/>I'd like to see edible and drinkable.  <br/><br/>Maybe consumable resources (kinda like our oil!) with start value, qty or percentage of depletion during gameplay.<br/><br/>That reminds me, earlier I had asked on the forum for help in filling a canteen from the lake.  I got some good, workable suggestions.  I tried using your scenery object, and just a regular object, but nothing quite worked without a script.  That's kinda what I'm thinking of with a resource.  Something that's there (and described), but it's only takeable in portions.<br/><br/>The existence or presence of other objects:<br/>You can make a cake, but only if you have all the (listed) ingredients.<br/>The engine object is made of the crankshaft, camshaft, pistons, etc.  Each an object in itself, but combine to make a new object.<br/><br/>Does your readable property set any flags?  That is:  My user can't do a certain task unless he (or an NCP) has first read the manual.  Would be nice if it does.  Could simulate the gaining of intelligence or training.<br/><br/>I didn't know about the beforeturn and afterturn scripts.  Guess I need to read the book again!  How do we implement a \"turn based\" game?  Just have the user type in a GO command of some sort?  Do you know if any of the Quest games in the download area are turn-based?  I'd be happy to look at the code to see how it's done.<br/><br/>From an earlier discussion, I would still like to see a way to pass parameters from one Quest game to another.<br/><br/>All of this is just brainstorming (while I should be working).  Any thoughts?<br/><br/>Alf",
      "PostDate": "2004-01-19T21:30:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2190",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alf wrote;\n\n[quote:3k8bi6e4]\nThanks for the response. I'm anxious to see the next TypeLib! \n\nThe NPC interaction sounds great! \n\nI'd like to see edible and drinkable. \n[/quote:3k8bi6e4]\n\nThose two won't be too bad to implement (though I have to make it possible for the player to tell NPC's to 'eat/drink the [i:3k8bi6e4]object[/i:3k8bi6e4]' as well, just to keep the thing consistent.) \n\n\n[quote:3k8bi6e4]\nMaybe consumable resources (kinda like our oil!) with start value, qty or percentage of depletion during gameplay. \n[/quote:3k8bi6e4]\n\nIn my opinion, the status variables provided by Quest make adding a 'type' for this sort of thing not really neccessary. I might instead code a little 'example' of how to achieve the effect of depleting resources.\n\n[quote:3k8bi6e4]\nThat reminds me, earlier I had asked on the forum for help in filling a canteen from the lake. I got some good, workable suggestions. I tried using your scenery object, and just a regular object, but nothing quite worked without a script. That's kinda what I'm thinking of with a resource. Something that's there (and described), but it's only takeable in portions. \n[/quote:3k8bi6e4]\n\nYou could do the canteen filling with objects from the typelib used creatively, but I'd say this is an area where the lake (and water) don't actually need to exist as objects at all. Using a status variable and a couple of local commands would give the effect required with minimal scripting.\n\n[quote:3k8bi6e4]\nThe existence or presence of other objects: \nYou can make a cake, but only if you have all the (listed) ingredients. \nThe engine object is made of the crankshaft, camshaft, pistons, etc. Each an object in itself, but combine to make a new object. \n[/quote:3k8bi6e4]\n\nThis is a good 'type' suggestion, I'll add a 'TLTcomposite' to the next version of typelib. Basically this will allow the object to be 'made' only when the prescribed components are available to the player - at which point the components will disappear too.\n\n\n[quote:3k8bi6e4]\nDoes your readable property set any flags? That is: My user can't do a certain task unless he (or an NCP) has first read the manual. Would be nice if it does. Could simulate the gaining of intelligence or training. \n[/quote:3k8bi6e4]\n\n\"Read\" doesn't directly set a flag, but it does offer a place to write your own action that occurs as a result of reading, so you could easily use that to set a flag if that's what is needed, As a side effect of my 'topic based' conversation system it will actually be possible to do this:\n\na:  ask an NPC about an object, receive a 'I know nothing' response,\nb:  tell the NPC to read a book/manual (presumably relevant to the object)\nc:  asak the NPC about the same object and be told what they learned from the book..\n\nAs it happens, this would involve minimal scripting - cool eh?\n\n\n[quote:3k8bi6e4]\nI didn't know about the beforeturn and afterturn scripts. Guess I need to read the book again! How do we implement a \"turn based\" game? Just have the user type in a GO command of some sort? Do you know if any of the Quest games in the download area are turn-based? I'd be happy to look at the code to see how it's done.\n[/quote:3k8bi6e4]\n\nNot quite sure what you mean by 'turn based' - I'd describe Quest as 'turn based' by default!\n\n[quote:3k8bi6e4]\nFrom an earlier discussion, I would still like to see a way to pass parameters from one Quest game to another. \n[/quote:3k8bi6e4]\n\nAsk Alex nicely <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\nCheers\n\nAl (a.k.a. MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "Alf wrote;<br/><br/><blockquote><p><br/>Thanks for the response. I'm anxious to see the next TypeLib! <br/><br/>The NPC interaction sounds great! <br/><br/>I'd like to see edible and drinkable. <br/></p></blockquote><br/><br/>Those two won't be too bad to implement (though I have to make it possible for the player to tell NPC's to 'eat/drink the <span style=\"font-style:italic;\">object</span>' as well, just to keep the thing consistent.) <br/><br/><br/><blockquote><p><br/>Maybe consumable resources (kinda like our oil!) with start value, qty or percentage of depletion during gameplay. <br/></p></blockquote><br/><br/>In my opinion, the status variables provided by Quest make adding a 'type' for this sort of thing not really neccessary. I might instead code a little 'example' of how to achieve the effect of depleting resources.<br/><br/><blockquote><p><br/>That reminds me, earlier I had asked on the forum for help in filling a canteen from the lake. I got some good, workable suggestions. I tried using your scenery object, and just a regular object, but nothing quite worked without a script. That's kinda what I'm thinking of with a resource. Something that's there (and described), but it's only takeable in portions. <br/></p></blockquote><br/><br/>You could do the canteen filling with objects from the typelib used creatively, but I'd say this is an area where the lake (and water) don't actually need to exist as objects at all. Using a status variable and a couple of local commands would give the effect required with minimal scripting.<br/><br/><blockquote><p><br/>The existence or presence of other objects: <br/>You can make a cake, but only if you have all the (listed) ingredients. <br/>The engine object is made of the crankshaft, camshaft, pistons, etc. Each an object in itself, but combine to make a new object. <br/></p></blockquote><br/><br/>This is a good 'type' suggestion, I'll add a 'TLTcomposite' to the next version of typelib. Basically this will allow the object to be 'made' only when the prescribed components are available to the player - at which point the components will disappear too.<br/><br/><br/><blockquote><p><br/>Does your readable property set any flags? That is: My user can't do a certain task unless he (or an NCP) has first read the manual. Would be nice if it does. Could simulate the gaining of intelligence or training. <br/></p></blockquote><br/><br/>\"Read\" doesn't directly set a flag, but it does offer a place to write your own action that occurs as a result of reading, so you could easily use that to set a flag if that's what is needed, As a side effect of my 'topic based' conversation system it will actually be possible to do this:<br/><br/>a:  ask an NPC about an object, receive a 'I know nothing' response,<br/>b:  tell the NPC to read a book/manual (presumably relevant to the object)<br/>c:  asak the NPC about the same object and be told what they learned from the book..<br/><br/>As it happens, this would involve minimal scripting - cool eh?<br/><br/><br/><blockquote><p><br/>I didn't know about the beforeturn and afterturn scripts. Guess I need to read the book again! How do we implement a \"turn based\" game? Just have the user type in a GO command of some sort? Do you know if any of the Quest games in the download area are turn-based? I'd be happy to look at the code to see how it's done.<br/></p></blockquote><br/><br/>Not quite sure what you mean by 'turn based' - I'd describe Quest as 'turn based' by default!<br/><br/><blockquote><p><br/>From an earlier discussion, I would still like to see a way to pass parameters from one Quest game to another. <br/></p></blockquote><br/><br/>Ask Alex nicely <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>Cheers<br/><br/>Al (a.k.a. MaDbRiT)",
      "PostDate": "2004-01-21T12:11:27+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2191",
      "UserId": 0,
      "Username": "snakecharmer",
      "UserAvatar": null,
      "UserGravatar": "dfe0b6ef03deb65a5c9ea5e91e0ecb42",
      "EditableText": "Alf wrote,\n\n[quote:b05ip6ze]\nJust wondering if anyone is working on any more libraries, or is planning to.\n[/quote:b05ip6ze]\n\nAlthough this might be of more interest to ORGUN than to you, I'm working on a library of functionality for *adult* themed games.\n\nThis is an extension of MaDbRiT's [b:b05ip6ze]typelib.qlb[/b:b05ip6ze] in that it won't work in a stand-alone way. (I'd be pretty foolish to ignore all that clever clothing functionality wouldn't I?)\nI'm also one of the typelib guinea pigs, so I have a good idea where it's going. Also Al, (MaDbRiT) has been extremely helpful in providing coding know how, explaining some complicated stuff in a way I could understand (no mean achievment as I'm certainly a total beginner at programming) and generally making sure my code and his dovetail together nicely.\n\nSo, there's at least one more 'library' in the works although it is a rather specialist one.  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_e_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> \n\n[b:b05ip6ze]Snakecharmer[/b:b05ip6ze]",
      "EditableFormat": "bbcode",
      "HTML": "Alf wrote,<br/><br/><blockquote><p><br/>Just wondering if anyone is working on any more libraries, or is planning to.<br/></p></blockquote><br/><br/>Although this might be of more interest to ORGUN than to you, I'm working on a library of functionality for *adult* themed games.<br/><br/>This is an extension of MaDbRiT's <span style=\"font-weight:bold;\">typelib.qlb</span> in that it won't work in a stand-alone way. (I'd be pretty foolish to ignore all that clever clothing functionality wouldn't I?)<br/>I'm also one of the typelib guinea pigs, so I have a good idea where it's going. Also Al, (MaDbRiT) has been extremely helpful in providing coding know how, explaining some complicated stuff in a way I could understand (no mean achievment as I'm certainly a total beginner at programming) and generally making sure my code and his dovetail together nicely.<br/><br/>So, there's at least one more 'library' in the works although it is a rather specialist one.  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_e_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> <br/><br/><span style=\"font-weight:bold;\">Snakecharmer</span>",
      "PostDate": "2004-01-21T19:52:03+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2192",
      "UserId": 0,
      "Username": "Alf",
      "UserAvatar": null,
      "UserGravatar": "df6fcdbeed91f46db8f5428ad267174e",
      "EditableText": "Pretty please, Alex.  I *promise* to be good.  Or, at least register QDK.\n\nThe code sample for resource depletion would be much appreciated.  My opinion, that's one of the little things that add significant realism.\n\nNow I'm *really* anxious to see your NCP work!\n\nBy \"turn based\":  You may visit one or more locations in the scenario, maybe even enter commands for certain things to be done.  Nothing would happen in any location until you signaled the scenario to run.  That signal would step the scenario (for all the rooms/actions) only if/when the run button (or command) was signaled.  I've played a game quite a while ago which was \"turn\" based.  I'm not sure, but I think it may have been \"Outpost\".  Anyway, it was pretty neat.  On the other hand, this type of gameplay just may not be suitable to IF.  Or, it may be too specialized to waste time developing.\n\nRegardless of the takeover by graphics-based computer games, I'm one of those who still thinks that text-based games can have a place - and a market.  It just hasn't been exploited, yet.\n\nAlf",
      "EditableFormat": "bbcode",
      "HTML": "Pretty please, Alex.  I *promise* to be good.  Or, at least register QDK.<br/><br/>The code sample for resource depletion would be much appreciated.  My opinion, that's one of the little things that add significant realism.<br/><br/>Now I'm *really* anxious to see your NCP work!<br/><br/>By \"turn based\":  You may visit one or more locations in the scenario, maybe even enter commands for certain things to be done.  Nothing would happen in any location until you signaled the scenario to run.  That signal would step the scenario (for all the rooms/actions) only if/when the run button (or command) was signaled.  I've played a game quite a while ago which was \"turn\" based.  I'm not sure, but I think it may have been \"Outpost\".  Anyway, it was pretty neat.  On the other hand, this type of gameplay just may not be suitable to IF.  Or, it may be too specialized to waste time developing.<br/><br/>Regardless of the takeover by graphics-based computer games, I'm one of those who still thinks that text-based games can have a place - and a market.  It just hasn't been exploited, yet.<br/><br/>Alf",
      "PostDate": "2004-01-21T20:19:31+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2193",
      "UserId": 0,
      "Username": "recedo",
      "UserAvatar": null,
      "UserGravatar": "5006f0f22ea2a61a603c8b2173d35063",
      "EditableText": "snakecharmer,\n\nI'd be interested in your *Adult* library, although I am not making an adult game, I'm planning to build a multiplayer game and would like to have a few little things like that built in. Note that the game contains a lot of graphic (sic) violence, so will be aimed at adults anyway. \n\nSimon",
      "EditableFormat": "bbcode",
      "HTML": "snakecharmer,<br/><br/>I'd be interested in your *Adult* library, although I am not making an adult game, I'm planning to build a multiplayer game and would like to have a few little things like that built in. Note that the game contains a lot of graphic (sic) violence, so will be aimed at adults anyway. <br/><br/>Simon",
      "PostDate": "2004-01-21T21:02:14+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2194",
      "UserId": 0,
      "Username": "Farvardin",
      "UserAvatar": null,
      "UserGravatar": "b6ea46e28b64e5f7c68f80468607f022",
      "EditableText": "I've begun to gather ideas for a library to add new default commands / verbs to Quest.\n\nI started a thread here :\n\n<!-- m --><a class=\"postlink\" href=\"http://www.axeuk.com/phpBB2/viewtopic.php?t=101\">http://www.axeuk.com/phpBB2/viewtopic.php?t=101</a><!-- m -->\n\nMy final goal is to translate it into frendh for my game, but at the moment the 1st ideas / improvement can be made to the english version.\nIt's still very basic, I don't feel the energy to code a real and complicated library, but it could be useful in order to avoid the unrealistic \"I don't understand your command. Type HELP for a list of valid commands\" we can get even for some really common action verbs : listen, read, hit...",
      "EditableFormat": "bbcode",
      "HTML": "I've begun to gather ideas for a library to add new default commands / verbs to Quest.<br/><br/>I started a thread here :<br/><br/><!-- m --><a class=\"postlink\" href=\"http://www.axeuk.com/phpBB2/viewtopic.php?t=101\">http://www.axeuk.com/phpBB2/viewtopic.php?t=101</a><!-- m --><br/><br/>My final goal is to translate it into frendh for my game, but at the moment the 1st ideas / improvement can be made to the english version.<br/>It's still very basic, I don't feel the energy to code a real and complicated library, but it could be useful in order to avoid the unrealistic \"I don't understand your command. Type HELP for a list of valid commands\" we can get even for some really common action verbs : listen, read, hit...",
      "PostDate": "2004-01-22T17:28:53+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2195",
      "UserId": 0,
      "Username": "recedo",
      "UserAvatar": null,
      "UserGravatar": "5006f0f22ea2a61a603c8b2173d35063",
      "EditableText": "Thats a very good idea. It annoys me a little bit when games have an obvious thing to do, but you've got to figure out the correct word to use before you can do it!\n\nSimon",
      "EditableFormat": "bbcode",
      "HTML": "Thats a very good idea. It annoys me a little bit when games have an obvious thing to do, but you've got to figure out the correct word to use before you can do it!<br/><br/>Simon",
      "PostDate": "2004-01-22T17:39:09+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2196",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Favardin wrote:\n[quote:axkfcvza]\nI don't feel the energy to code a real and complicated library, but it could be useful in order to avoid the unrealistic \"I don't understand your command. Type HELP for a list of valid commands\" we can get even for some really common action verbs : listen, read, hit...\n[/quote:axkfcvza]\n\nI remember this thread cropping up before. I started to convert the ALAN set of 'verb stubs' to Quest, but then got sidetracked into improving typelib...\n\nWhile there is no technical reason not to have alternative default messages (that's what these are really) for some of the more obvious commands a player might try, on the other hand giving a custom response to 'hit the widget' when at no point in the game can you actually 'hit' anything might be viewed as confusing to the player. Personally I think you need to exercise some degree of selectivity in this rather than try to cover hundreds of vague possibilities.\n\nRecedo wrote:\n[quote:axkfcvza]\nIt annoys me a little bit when games have an obvious thing to do, but you've got to figure out the correct word to use before you can do it! \n[/quote:axkfcvza]\nActually this is the OPPOSITE case to the one Favardin is suggesting. Favardin is suggesting we code responses for verbs that actually do nothing, while the case here is not coding a verb that WILL do something!\n\nIn I.F. circles, this is often called a 'guess the verb' puzzle. It is uniformly (and quite rightly) considered one of the cardinal sins of Adventure writing. The puzzle should be for the player to work out what he needs to do and having done so, [i:axkfcvza]every conceivable way of expressing the required solution should work[/i:axkfcvza].\n\nI hesitate to say 'this is something I could easily tack on to the next typelib', because although it's true,  I fear that if I don't at some point 'feature freeze' it, I'm never going to be able to release the blessed thing!\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "Favardin wrote:<br/><blockquote><p><br/>I don't feel the energy to code a real and complicated library, but it could be useful in order to avoid the unrealistic \"I don't understand your command. Type HELP for a list of valid commands\" we can get even for some really common action verbs : listen, read, hit...<br/></p></blockquote><br/><br/>I remember this thread cropping up before. I started to convert the ALAN set of 'verb stubs' to Quest, but then got sidetracked into improving typelib...<br/><br/>While there is no technical reason not to have alternative default messages (that's what these are really) for some of the more obvious commands a player might try, on the other hand giving a custom response to 'hit the widget' when at no point in the game can you actually 'hit' anything might be viewed as confusing to the player. Personally I think you need to exercise some degree of selectivity in this rather than try to cover hundreds of vague possibilities.<br/><br/>Recedo wrote:<br/><blockquote><p><br/>It annoys me a little bit when games have an obvious thing to do, but you've got to figure out the correct word to use before you can do it! <br/></p></blockquote><br/>Actually this is the OPPOSITE case to the one Favardin is suggesting. Favardin is suggesting we code responses for verbs that actually do nothing, while the case here is not coding a verb that WILL do something!<br/><br/>In I.F. circles, this is often called a 'guess the verb' puzzle. It is uniformly (and quite rightly) considered one of the cardinal sins of Adventure writing. The puzzle should be for the player to work out what he needs to do and having done so, <span style=\"font-style:italic;\">every conceivable way of expressing the required solution should work</span>.<br/><br/>I hesitate to say 'this is something I could easily tack on to the next typelib', because although it's true,  I fear that if I don't at some point 'feature freeze' it, I'm never going to be able to release the blessed thing!<br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-01-22T19:55:19+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2221",
      "UserId": 0,
      "Username": "Farvardin",
      "UserAvatar": null,
      "UserGravatar": "b6ea46e28b64e5f7c68f80468607f022",
      "EditableText": "[quote:1rqlz3tf] on the other hand giving a custom response to 'hit the widget' when at no point in the game can you actually 'hit' anything might be viewed as confusing to the player.[/quote:1rqlz3tf]\n\nI don't wish to confuse the player, just give more \"immersion\" in the game, at least don't let the player feel he can't do anything at all.\nFor ex. if the player see a rabbit and want to attack it, it's better to give such an answer :\n\n&gt;attack rabbit\nviolence serves no useful purpose\n\n&gt;kiss rabbit\nbut the rabbit wouln't like that\n\nso the player will understand there is nothing to do with such commands for this character, rather than \"I don't understand your command\". If later the player meet a bad knight, he could try to use the \"attack knight\" command to defeat it. And also because generally Quest designers seem to prefer to code the command associated to the action they want to perform only in the room it should be performed (for ex. command &lt;attack knight&gt;), if the player typed \"attack rabbit\" before and got \"I don't understand your command\", then it's not really logical to type \"attack knight\" later. I've seen such a case in several Quest games.\nGenerally Inform or Tads system already have got default answers for many commands, so people will immediately understand a command is allowed, but it's not relevant in a particular situation (the rabbit example).\n\n[quote:1rqlz3tf] It annoys me a little bit when games have an obvious thing to do, but you've got to figure out the correct word to use before you can do it! [/quote:1rqlz3tf]\n[quote:1rqlz3tf] Actually this is the OPPOSITE case to the one Favardin is suggesting. Favardin is suggesting we code responses for verbs that actually do nothing, while the case here is not coding a verb that WILL do something! [/quote:1rqlz3tf]\n\nYes and no.\nthose verbs could be used later in the game (ex. \"cast\", \"carve\", \"read\", \"wear\" etc...) It's up to the designers to re-use them in the future for a particular action.\n\nand about \"you've got to figure out the correct word to use before you can do it\", that's why I think it's important to allow synonyms, so players could type \"strike\" / \"attack\" / \"hit\" / \"chop\" etc... if they want to attack ennemies, and not just one of those commands if the designer thought to only one of them. \"Attack\" command is obvious, but for some other cases, it can be difficult to find the correct syntax (\"talk to\", \"say\" or \"discuss with\" ?)",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p> on the other hand giving a custom response to 'hit the widget' when at no point in the game can you actually 'hit' anything might be viewed as confusing to the player.</p></blockquote><br/><br/>I don't wish to confuse the player, just give more \"immersion\" in the game, at least don't let the player feel he can't do anything at all.<br/>For ex. if the player see a rabbit and want to attack it, it's better to give such an answer :<br/><br/>&gt;attack rabbit<br/>violence serves no useful purpose<br/><br/>&gt;kiss rabbit<br/>but the rabbit wouln't like that<br/><br/>so the player will understand there is nothing to do with such commands for this character, rather than \"I don't understand your command\". If later the player meet a bad knight, he could try to use the \"attack knight\" command to defeat it. And also because generally Quest designers seem to prefer to code the command associated to the action they want to perform only in the room it should be performed (for ex. command &lt;attack knight&gt;), if the player typed \"attack rabbit\" before and got \"I don't understand your command\", then it's not really logical to type \"attack knight\" later. I've seen such a case in several Quest games.<br/>Generally Inform or Tads system already have got default answers for many commands, so people will immediately understand a command is allowed, but it's not relevant in a particular situation (the rabbit example).<br/><br/><blockquote><p> It annoys me a little bit when games have an obvious thing to do, but you've got to figure out the correct word to use before you can do it! </p></blockquote><br/><blockquote><p> Actually this is the OPPOSITE case to the one Favardin is suggesting. Favardin is suggesting we code responses for verbs that actually do nothing, while the case here is not coding a verb that WILL do something! </p></blockquote><br/><br/>Yes and no.<br/>those verbs could be used later in the game (ex. \"cast\", \"carve\", \"read\", \"wear\" etc...) It's up to the designers to re-use them in the future for a particular action.<br/><br/>and about \"you've got to figure out the correct word to use before you can do it\", that's why I think it's important to allow synonyms, so players could type \"strike\" / \"attack\" / \"hit\" / \"chop\" etc... if they want to attack ennemies, and not just one of those commands if the designer thought to only one of them. \"Attack\" command is obvious, but for some other cases, it can be difficult to find the correct syntax (\"talk to\", \"say\" or \"discuss with\" ?)",
      "PostDate": "2004-01-25T10:50:48+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2222",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You're quite right Favardin, there are too many Quest games in which a  command is coded only to work in a specific room, this is sloppy coding because if you tell your player that the command is 'not understood' you can't really expect him to realise that you meant 'not understood [i:mta3blk0]here[/i:mta3blk0]. <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\nWhenever a command is added locally to a room, I would consider it [b:mta3blk0]absolutely essential[/b:mta3blk0] to code a global 'catch all equivalent' command that shows that the command structure is recognized but inappropriate with other objects or in other locations. For example if your player is to be allowed to 'nurdle the grudfuttock', then you can indeed allow that by adding a command to the room the grudfuttock is located in, but you must also be sure to also add a command in the game block that responds to any attempt to nurdle anything in any other location (or anything but the grudfuttock in the prescribed location) with a response like 'You can't nurdle the [i:mta3blk0]object[/i:mta3blk0]' or something similar.\n\nPersonally, I dislike use of local commands. I think a properly written global command (and as I suggest above, you should ALWAYS have one even if you do have a local command) can and should be made to deal with both permitted and not permitted variations.\n\nThis approach neatly sidesteps the 'I don't understand - except when you're in this room' badness.\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "You're quite right Favardin, there are too many Quest games in which a  command is coded only to work in a specific room, this is sloppy coding because if you tell your player that the command is 'not understood' you can't really expect him to realise that you meant 'not understood <span style=\"font-style:italic;\">here</span>. <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>Whenever a command is added locally to a room, I would consider it <span style=\"font-weight:bold;\">absolutely essential</span> to code a global 'catch all equivalent' command that shows that the command structure is recognized but inappropriate with other objects or in other locations. For example if your player is to be allowed to 'nurdle the grudfuttock', then you can indeed allow that by adding a command to the room the grudfuttock is located in, but you must also be sure to also add a command in the game block that responds to any attempt to nurdle anything in any other location (or anything but the grudfuttock in the prescribed location) with a response like 'You can't nurdle the <span style=\"font-style:italic;\">object</span>' or something similar.<br/><br/>Personally, I dislike use of local commands. I think a properly written global command (and as I suggest above, you should ALWAYS have one even if you do have a local command) can and should be made to deal with both permitted and not permitted variations.<br/><br/>This approach neatly sidesteps the 'I don't understand - except when you're in this room' badness.<br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-01-25T20:02:08+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2225",
      "UserId": 0,
      "Username": "Alf",
      "UserAvatar": null,
      "UserGravatar": "df6fcdbeed91f46db8f5428ad267174e",
      "EditableText": "Hi, Al\n\nSounds like you've jumped a hurdle many programmers can't (or at least haven't yet).  That is, you see the program from the user's prospective.  That's one of the first steps to writing *good* software!  Case it point: you can almost always tell when it was a developer who wrote the manual/help system.  Most of the time, only another developer can understand it.  This is one of the weakest links in software development.  Anyway, back to topic...\n\nI don't know if a library is the place to put it, but some kind of \"global thesaurus\" might be a good idea.  Especially if the developer had an easy way to edit the word list to make it more compatible with the game.  Morover, make the list global by default.\n\nI like the comment about helping the player to get more immersed in the game.  When you can do this, you have given the user what they want.\n\nThis is interestin', huh?\n\nAlf",
      "EditableFormat": "bbcode",
      "HTML": "Hi, Al<br/><br/>Sounds like you've jumped a hurdle many programmers can't (or at least haven't yet).  That is, you see the program from the user's prospective.  That's one of the first steps to writing *good* software!  Case it point: you can almost always tell when it was a developer who wrote the manual/help system.  Most of the time, only another developer can understand it.  This is one of the weakest links in software development.  Anyway, back to topic...<br/><br/>I don't know if a library is the place to put it, but some kind of \"global thesaurus\" might be a good idea.  Especially if the developer had an easy way to edit the word list to make it more compatible with the game.  Morover, make the list global by default.<br/><br/>I like the comment about helping the player to get more immersed in the game.  When you can do this, you have given the user what they want.<br/><br/>This is interestin', huh?<br/><br/>Alf",
      "PostDate": "2004-01-26T13:42:28+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "2226",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alf wrote:\n[quote:3uxmem99]\nThat's one of the first steps to writing *good* software! Case it point: you can almost always tell when it was a developer who wrote the manual/help system. Most of the time, only another developer can understand it. This is one of the weakest links in software development.  \n[/quote:3uxmem99]\n\n100% agree on this. Also, *good* software isn't always the most technically elegant, nor is it always the most efficient from a programmer's point of view. Good software is the stuff your users feel comfortable with, can pick up easily, doesn't break too often <!-- s;-) --><img src=\"{SMILIES_PATH}/icon_e_wink.gif\" alt=\";-)\" title=\"Wink\" /><!-- s;-) --> and makes sense to their way of thinking. You simply HAVE to make your product suit your intended audience, it is a cardinal sin not to.\n\nAs for manuals - a very relevant comparison is the HUGO manual written by the developer, Kent Tessman. Now HUGO is a very good IF system, Kent is an accomplished and talented coder. HUGO's manual is horrible - assumes WAY too much prior knowledge of coding in general and to be honest of HUGO in particular. I think if HUGO had the manuals and tutorials that INFORM has, HUGO would be in there challenging INFORM &amp; TADS for popularity.\n\nOf your other topic - a Quest library could easily add a lot of 'stub verbs' and general synonyms and is probably quite a good way to do it as it makes usage a doddle for the end user.\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "Alf wrote:<br/><blockquote><p><br/>That's one of the first steps to writing *good* software! Case it point: you can almost always tell when it was a developer who wrote the manual/help system. Most of the time, only another developer can understand it. This is one of the weakest links in software development.  <br/></p></blockquote><br/><br/>100% agree on this. Also, *good* software isn't always the most technically elegant, nor is it always the most efficient from a programmer's point of view. Good software is the stuff your users feel comfortable with, can pick up easily, doesn't break too often <!-- s;-) --><img src=\"{SMILIES_PATH}/icon_e_wink.gif\" alt=\";-)\" title=\"Wink\" /><!-- s;-) --> and makes sense to their way of thinking. You simply HAVE to make your product suit your intended audience, it is a cardinal sin not to.<br/><br/>As for manuals - a very relevant comparison is the HUGO manual written by the developer, Kent Tessman. Now HUGO is a very good IF system, Kent is an accomplished and talented coder. HUGO's manual is horrible - assumes WAY too much prior knowledge of coding in general and to be honest of HUGO in particular. I think if HUGO had the manuals and tutorials that INFORM has, HUGO would be in there challenging INFORM &amp; TADS for popularity.<br/><br/>Of your other topic - a Quest library could easily add a lot of 'stub verbs' and general synonyms and is probably quite a good way to do it as it makes usage a doddle for the end user.<br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-01-26T14:36:53+00:00",
      "LastEditDate": null
    }
  ]
}
