{
  "Topic": {
    "TopicId": "fqdm-d4gxu_wcxobl4vlnq",
    "ForumId": "10",
    "Title": "Creating active monsters with HP and attack?",
    "LastUpdated": "2019-12-16T11:51:15.4434007Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c9e4562c-e308-479e-9080-a3d7d850e31a",
      "UserId": 445604,
      "Username": "Y4T5UR0",
      "AvatarUrl": "https://i.imgur.com/HJN9Gwwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've just started using Quest quite recently, and I want to create an RPG-like game so badly, with monsters that can attack the player and have health. Problem is, I don't really have much knowledge about coding and all. I've been visiting lots of websites just to find myself being even more puzzled with their novel-long explanation.\r\n\r\nPlease help meee!\r\nI will even post my unfinished game if that's necessary!\r\n\r\nAlso, I don't really understand how you express HP and stats such as agility in a text-based game. Tried everything I can but I'm still lost.",
      "EditableFormat": "markdown",
      "HTML": "<p>I've just started using Quest quite recently, and I want to create an RPG-like game so badly, with monsters that can attack the player and have health. Problem is, I don't really have much knowledge about coding and all. I've been visiting lots of websites just to find myself being even more puzzled with their novel-long explanation.</p>\n<p>Please help meee!<br>\nI will even post my unfinished game if that's necessary!</p>\n<p>Also, I don't really understand how you express HP and stats such as agility in a text-based game. Tried everything I can but I'm still lost.</p>\n\n",
      "PostDate": "2019-12-16T11:51:15.4434007Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ccf88659-55d4-4636-a636-97f9c5405261",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If no one helps you in the next 12-hrs, I can post something that should help.  Just a warning, I tend to do things a little unorthodoxed.  They still work, but it’s in a way that my brain can manage.  :)",
      "EditableFormat": "markdown",
      "HTML": "<p>If no one helps you in the next 12-hrs, I can post something that should help.  Just a warning, I tend to do things a little unorthodoxed.  They still work, but it’s in a way that my brain can manage.  :)</p>\n\n",
      "PostDate": "2019-12-16T13:10:43.2528623Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f34d278b-e88b-405b-b9e2-821c6d7790e5",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "MY TIME TO SHINE!\r\n\r\nBear with me, this'll look long and scary but I promise I'll make it as understandable as I can.\r\n\r\nFirst thing to know, is that coding is like those school assignments you might've gotten as a child, asking you to write out the exact instructions for some simple task like making a sandwich - the computer will do EXACTLY what you tell it to do, but not necessarily what you WANT it to do.\r\n\r\nThere's a lot of libraries out there with pre-made RPG mechanics. But then you have to go in and get used to the code that someone ELSE made. Given that there's a bajillion ways to do the same thing in programming, this is not something I recommend.\r\n\r\nInstead, I find it better to build up the 'skeleton' of your game on your own. Which is something I did with my two games: I needed a VERY robust battle system, where I could have team fights of 4v4 or 2v3 or whatever I needed, buffs, ability cooldowns, and more, all on the fly.\r\n\r\nI won't explain exactly everything I did, because that leads you to the same problem as before, but I WILL give you the highlight: I won't give you the car but I will give you the tools I used to build it.\r\n\r\n**Stats in Text**: You can print stats. Say you have an object called EnemyOrc1. EnemyOrc1 has the attribute (You can give stuff custom attributes in the 'attributes' tab, go figure) Health. The game's code calls this attribute 'EnemyOrc1.Health', and let's say it's equal to 50. There's also EnemyOrc1.MaxHealth=100. You're fighting a grizzled, wounded soldier.\r\n\r\nIn a piece of text, you can write:\r\n```\r\n{EnemyOrc1.Health}/{EnemyOrc1.MaxHealth} Health\r\n```\r\nSomeone plays it, gets to that section, and sees:\r\n```\r\n50/100 Health\r\n```\r\nIn most cases you'll want a LOT of attributes controlling the enemy, but the exact ones depend on your game. For instance, my sci-fi game has 'IsMechanical' as a boolean (True/False) attribute for the purpose of robotic enemies, but that'll make little sense if you're in Middle Earth!\r\n\r\nSome probably useful ones for you:\r\nHealth\r\nMaxHealth\r\nMana\r\nMaxMana\r\nActive (Has this enemy been defeated?)\r\nFriendOrFoe\r\n\r\n**CHANGE SCRIPTS**\r\nSo you've made EnemyOrc1, given him EnemyOrc1.Health and EnemyOrc1.MaxHealth and such. You have a command where the player enters 'Hit orc', and the game executes:\r\n```\r\nEnemyOrc1.Health = EnemyOrc1.Health - Player.AttackDamage\r\nmsg(\"You hit the orc! {Player.AttackDamage} damage!\"\r\n```\r\nand the player sees:\r\n```\r\nYou hit the orc! 85 damage!\r\n```\r\nAnd now the Orc is at -35 Health.\r\n\r\nBut how do you actually, you know, make him fall over dead? It'd be pretty tedious to make every single way to damage every single enemy have to INDIVIDUALLY run the code:\r\n```\r\nif (WhateverEnemy.Health<=0){\r\nWhateverEnemy.Active=False\r\n}\r\n```\r\n, right? For hitting EnemyOrc1 with a sword, with a mace, with a magic potion, hitting EnemyOrc2 with a sword, with a mace... LUCKILY YOU DON'T HAVE TO!\r\n\r\nGo to EnemyOrc1's attribute tab. You see the + sign to make a new attribute, the - sign to delete an existing attribute? But what's this 'boxed +' next to it? That makes a changescript.\r\n\r\nSelect EnemyOrc1's Health attribute. Press boxed-plus and you'll create a new attribute called changedHealth.\r\n\r\nThis is basically a bit of mini-code, that will fire WHENEVER EnemyOrc1's Health changes. Just slot in the code:\r\n```\r\nif (this.Health<=0){\r\nthis.Active=False\r\n}\r\n```\r\n'this', of course, being a way to tell Quest 'Hey, dummy, specifically THIS object!' without needing to write the name.\r\n\r\nYou can do this to whatever EnemyOrc2 EnemyDragon3 AllyFairy2 you want.\r\n\r\nThis leads into:\r\n\r\n**$#@%ing Functions, How do they work?**\r\n\r\nAre you writing a piece of code over and over and over, and are sick of doing so? Do you wish there was a way to just set it aside and tell Quest 'Yeah, and just run that piece, no I'm not typing it out again'?\r\n\r\nLUCKILY THERE IS! On the left side, scroll all the way down to Functions, select it, and make a new one. Call it something creative, something snazzy, like TestFunction.\r\n\r\nSomething new opens up, and it looks pretty overwhelming! Return type?! Parameters?! What are these?\r\n\r\nNot important, is what they are. The import bit is the Script bit, where you can type in whatever code you want. Like:\r\n```\r\nmsg(\"This is my test function\")\r\nmsg(\"It's printing a bunch of nonsense for the player\")\r\nmsg(\"It'll do this every time I 'call' the function\")\r\nmsg(\"Which is programmer talk for 'Hey Quest, do that code thing, no I won't type it out again, yeah the one I called TestFunction, do it'\")\r\n```\r\nNow, go to somewhere in your main game's scripts and just Call Function 'TestFunction', leave the Parameters empty.\r\n\r\nRun the game, and see how it'll print that out whenever you call TestFunction. You can put more stuff into that. Me personally, I have a bunch of functions for my game, like ReceiveDamage to reduce someone's incoming damage by how much armor they have, or MainTurnHandler to decide who's turn it is, and to check if the player's won, lost, or still fighting at all before having EnemyMook53 take their turn. I even had a StatUpdate where I set someone's MaxHealth to their BaseMaxHealth and modified it with buffs/debuffs and blah blah blah.\r\n\r\nYou just make whatever functions you want.\r\n\r\n**ADVANCED Functions**\r\n\r\nRemember those Parameters and Return types? Well they're useful in some cases. I'll skip Return types because you really shouldn't ever need them - I sure as hell didn't.\r\n\r\nParameters is basically a 'fill in the blank' for the function. Let's make a new function 'TestAdvancedFunction' - function totally doesn't seem like a word anymore. Give it 1 Parameter. One single Parameter. Call it 'DudeName'.\r\n\r\nAnd have the script be:\r\n```\r\nmsg(DudeName+\" is the parameter I passed to the function\")\r\nmsg(\"There weren't any quotations around DudeName because I used expression mode for these prints rather than text\")\r\nmsg(\"And doing that basically puts it in code-view and let's you get funky\")\r\n```\r\nNow go somewhere in your game and call function TestAdvancedFunction. But now press the button and enter, with quotations, \"Bill\".\r\n\r\nIn the game, you'll see:\r\n```\r\nBill is the parameter I passed to the function\r\nblah blah other stuff\r\n```\r\nYou can do a bunch of crazy stuff, like have function SendHealing with Parameters \"Target\" and \"HealAmount\" do:\r\n```\r\nTarget.Health = Target.Health+HealAmount\r\n```\r\nAnd just call that with the target's code-name and the number for healing whenever you want to heal anyone. Functions can even call other functions, so you can have 'SendHealing' call another function called 'ReceiveHealing' where, depending on who Target is, they say \"Thanks for the healing, pal!\" or \"Thanks for the healing, minion!\" Just be careful not to make an infinite loop...\r\n\r\nWARNING: Quest is very fickle. If you CALL a function, and give it more parameters than it has, or fewer than it has, the game will absolutely go ballistic.\r\n\r\n**But I don't WANNA make a separate object for EnemyOrc12 and FinalBossMook32! There has to be a better way!**\r\n\r\nLuckily there is! And this is where things start to get weird.\r\n\r\nThere is, in the game, a block of code called Clone Object, and a more useful one called Clone Object and Move. This does exactly what it sounds like: makes a perfect copy of the object and moves it to the room you said to.\r\n\r\nIn my game, I used this in the following way: I had a DebugRoom, and in it, the object FighterBase. Whenever I started a fight, I'd move the player to a unique Fight room, and then I'd make a clone of FighterBase and move it to the room in question. Using Functions I'd set its alias (The name you see ingame, not the code name), its BaseMaxHealth, its FriendOrFoe, its Description, everything.\r\n\r\nThis way, I could have just a single FighterBase, and make whatever 1v2 or 4v4 or 4v10 fights I needed, with whatever enemies I needed, whenever and wherever.\r\n\r\nThis also let me make AoE attacks, with some cleverness using the For Each code:\r\n```\r\nforeach (ChosenFighter, FilterByAttribute(GetDirectChildren(SpecialFightRoom), \"prototype\", FighterBase)) {\r\nif (Fighter.FriendOrFoe=\"Foe\"){\r\nSendDamage(ChosenFighter, 50)\r\n}\r\n```\r\nThat looks like a lot! But if you enter it in code-view, and switch back to normal-view, it's not SO scary.\r\n\r\nI could even make Buffs by making and cloning a BuffBase object, and moving it INTO individual FighterBase clones, and then checking for every 'clone' of BuffBase (That's what the prototype word is for, it checks WHAT object it's the clone of) and, say, if it's the buff \"Health Boost\" I increase MaxHealth by 50, if it's \"Burning\" then my EndOfTurn Function causes 10 damage.\r\n\r\nOne last thing before I go.\r\n\r\n**Attributes in attributes in attributes in attributes...**\r\n\r\nLet's say you go REALLY in depth. You have the player vs 30 orcs in a last stand. You go through the effort of making the player able to target a specific orc with their Frostbolt spell, by creating the attribute Player.Target.\r\n\r\nWatch THIS shit:\r\n```\r\nPlayer.Target.Health = Player.Target.Health - (Player.Damage/Player.Target.ColdResistance)\r\n```\r\nYou can put attributes in attributes, something called 'nesting' in code. You can do some CRAZY shit by cleverly nesting stuff.\r\n\r\nThere's a bunch more I can do, but that runs into the territory of giving you the car, not the tools to make one. I hope this helps!\r\n\r\n... man this got a lot longer than I'd expected.",
      "EditableFormat": "markdown",
      "HTML": "<p>MY TIME TO SHINE!</p>\n<p>Bear with me, this'll look long and scary but I promise I'll make it as understandable as I can.</p>\n<p>First thing to know, is that coding is like those school assignments you might've gotten as a child, asking you to write out the exact instructions for some simple task like making a sandwich - the computer will do EXACTLY what you tell it to do, but not necessarily what you WANT it to do.</p>\n<p>There's a lot of libraries out there with pre-made RPG mechanics. But then you have to go in and get used to the code that someone ELSE made. Given that there's a bajillion ways to do the same thing in programming, this is not something I recommend.</p>\n<p>Instead, I find it better to build up the 'skeleton' of your game on your own. Which is something I did with my two games: I needed a VERY robust battle system, where I could have team fights of 4v4 or 2v3 or whatever I needed, buffs, ability cooldowns, and more, all on the fly.</p>\n<p>I won't explain exactly everything I did, because that leads you to the same problem as before, but I WILL give you the highlight: I won't give you the car but I will give you the tools I used to build it.</p>\n<p><strong>Stats in Text</strong>: You can print stats. Say you have an object called EnemyOrc1. EnemyOrc1 has the attribute (You can give stuff custom attributes in the 'attributes' tab, go figure) Health. The game's code calls this attribute 'EnemyOrc1.Health', and let's say it's equal to 50. There's also EnemyOrc1.MaxHealth=100. You're fighting a grizzled, wounded soldier.</p>\n<p>In a piece of text, you can write:</p>\n<pre><code>{EnemyOrc1.Health}/{EnemyOrc1.MaxHealth} Health\n</code></pre>\n<p>Someone plays it, gets to that section, and sees:</p>\n<pre><code>50/100 Health\n</code></pre>\n<p>In most cases you'll want a LOT of attributes controlling the enemy, but the exact ones depend on your game. For instance, my sci-fi game has 'IsMechanical' as a boolean (True/False) attribute for the purpose of robotic enemies, but that'll make little sense if you're in Middle Earth!</p>\n<p>Some probably useful ones for you:<br>\nHealth<br>\nMaxHealth<br>\nMana<br>\nMaxMana<br>\nActive (Has this enemy been defeated?)<br>\nFriendOrFoe</p>\n<p><strong>CHANGE SCRIPTS</strong><br>\nSo you've made EnemyOrc1, given him EnemyOrc1.Health and EnemyOrc1.MaxHealth and such. You have a command where the player enters 'Hit orc', and the game executes:</p>\n<pre><code>EnemyOrc1.Health = EnemyOrc1.Health - Player.AttackDamage\nmsg(\"You hit the orc! {Player.AttackDamage} damage!\"\n</code></pre>\n<p>and the player sees:</p>\n<pre><code>You hit the orc! 85 damage!\n</code></pre>\n<p>And now the Orc is at -35 Health.</p>\n<p>But how do you actually, you know, make him fall over dead? It'd be pretty tedious to make every single way to damage every single enemy have to INDIVIDUALLY run the code:</p>\n<pre><code>if (WhateverEnemy.Health&lt;=0){\nWhateverEnemy.Active=False\n}\n</code></pre>\n<p>, right? For hitting EnemyOrc1 with a sword, with a mace, with a magic potion, hitting EnemyOrc2 with a sword, with a mace... LUCKILY YOU DON'T HAVE TO!</p>\n<p>Go to EnemyOrc1's attribute tab. You see the + sign to make a new attribute, the - sign to delete an existing attribute? But what's this 'boxed +' next to it? That makes a changescript.</p>\n<p>Select EnemyOrc1's Health attribute. Press boxed-plus and you'll create a new attribute called changedHealth.</p>\n<p>This is basically a bit of mini-code, that will fire WHENEVER EnemyOrc1's Health changes. Just slot in the code:</p>\n<pre><code>if (this.Health&lt;=0){\nthis.Active=False\n}\n</code></pre>\n<p>'this', of course, being a way to tell Quest 'Hey, dummy, specifically THIS object!' without needing to write the name.</p>\n<p>You can do this to whatever EnemyOrc2 EnemyDragon3 AllyFairy2 you want.</p>\n<p>This leads into:</p>\n<p><strong>$#@%ing Functions, How do they work?</strong></p>\n<p>Are you writing a piece of code over and over and over, and are sick of doing so? Do you wish there was a way to just set it aside and tell Quest 'Yeah, and just run that piece, no I'm not typing it out again'?</p>\n<p>LUCKILY THERE IS! On the left side, scroll all the way down to Functions, select it, and make a new one. Call it something creative, something snazzy, like TestFunction.</p>\n<p>Something new opens up, and it looks pretty overwhelming! Return type?! Parameters?! What are these?</p>\n<p>Not important, is what they are. The import bit is the Script bit, where you can type in whatever code you want. Like:</p>\n<pre><code>msg(\"This is my test function\")\nmsg(\"It's printing a bunch of nonsense for the player\")\nmsg(\"It'll do this every time I 'call' the function\")\nmsg(\"Which is programmer talk for 'Hey Quest, do that code thing, no I won't type it out again, yeah the one I called TestFunction, do it'\")\n</code></pre>\n<p>Now, go to somewhere in your main game's scripts and just Call Function 'TestFunction', leave the Parameters empty.</p>\n<p>Run the game, and see how it'll print that out whenever you call TestFunction. You can put more stuff into that. Me personally, I have a bunch of functions for my game, like ReceiveDamage to reduce someone's incoming damage by how much armor they have, or MainTurnHandler to decide who's turn it is, and to check if the player's won, lost, or still fighting at all before having EnemyMook53 take their turn. I even had a StatUpdate where I set someone's MaxHealth to their BaseMaxHealth and modified it with buffs/debuffs and blah blah blah.</p>\n<p>You just make whatever functions you want.</p>\n<p><strong>ADVANCED Functions</strong></p>\n<p>Remember those Parameters and Return types? Well they're useful in some cases. I'll skip Return types because you really shouldn't ever need them - I sure as hell didn't.</p>\n<p>Parameters is basically a 'fill in the blank' for the function. Let's make a new function 'TestAdvancedFunction' - function totally doesn't seem like a word anymore. Give it 1 Parameter. One single Parameter. Call it 'DudeName'.</p>\n<p>And have the script be:</p>\n<pre><code>msg(DudeName+\" is the parameter I passed to the function\")\nmsg(\"There weren't any quotations around DudeName because I used expression mode for these prints rather than text\")\nmsg(\"And doing that basically puts it in code-view and let's you get funky\")\n</code></pre>\n<p>Now go somewhere in your game and call function TestAdvancedFunction. But now press the button and enter, with quotations, \"Bill\".</p>\n<p>In the game, you'll see:</p>\n<pre><code>Bill is the parameter I passed to the function\nblah blah other stuff\n</code></pre>\n<p>You can do a bunch of crazy stuff, like have function SendHealing with Parameters \"Target\" and \"HealAmount\" do:</p>\n<pre><code>Target.Health = Target.Health+HealAmount\n</code></pre>\n<p>And just call that with the target's code-name and the number for healing whenever you want to heal anyone. Functions can even call other functions, so you can have 'SendHealing' call another function called 'ReceiveHealing' where, depending on who Target is, they say \"Thanks for the healing, pal!\" or \"Thanks for the healing, minion!\" Just be careful not to make an infinite loop...</p>\n<p>WARNING: Quest is very fickle. If you CALL a function, and give it more parameters than it has, or fewer than it has, the game will absolutely go ballistic.</p>\n<p><strong>But I don't WANNA make a separate object for EnemyOrc12 and FinalBossMook32! There has to be a better way!</strong></p>\n<p>Luckily there is! And this is where things start to get weird.</p>\n<p>There is, in the game, a block of code called Clone Object, and a more useful one called Clone Object and Move. This does exactly what it sounds like: makes a perfect copy of the object and moves it to the room you said to.</p>\n<p>In my game, I used this in the following way: I had a DebugRoom, and in it, the object FighterBase. Whenever I started a fight, I'd move the player to a unique Fight room, and then I'd make a clone of FighterBase and move it to the room in question. Using Functions I'd set its alias (The name you see ingame, not the code name), its BaseMaxHealth, its FriendOrFoe, its Description, everything.</p>\n<p>This way, I could have just a single FighterBase, and make whatever 1v2 or 4v4 or 4v10 fights I needed, with whatever enemies I needed, whenever and wherever.</p>\n<p>This also let me make AoE attacks, with some cleverness using the For Each code:</p>\n<pre><code>foreach (ChosenFighter, FilterByAttribute(GetDirectChildren(SpecialFightRoom), \"prototype\", FighterBase)) {\nif (Fighter.FriendOrFoe=\"Foe\"){\nSendDamage(ChosenFighter, 50)\n}\n</code></pre>\n<p>That looks like a lot! But if you enter it in code-view, and switch back to normal-view, it's not SO scary.</p>\n<p>I could even make Buffs by making and cloning a BuffBase object, and moving it INTO individual FighterBase clones, and then checking for every 'clone' of BuffBase (That's what the prototype word is for, it checks WHAT object it's the clone of) and, say, if it's the buff \"Health Boost\" I increase MaxHealth by 50, if it's \"Burning\" then my EndOfTurn Function causes 10 damage.</p>\n<p>One last thing before I go.</p>\n<p><strong>Attributes in attributes in attributes in attributes...</strong></p>\n<p>Let's say you go REALLY in depth. You have the player vs 30 orcs in a last stand. You go through the effort of making the player able to target a specific orc with their Frostbolt spell, by creating the attribute Player.Target.</p>\n<p>Watch THIS shit:</p>\n<pre><code>Player.Target.Health = Player.Target.Health - (Player.Damage/Player.Target.ColdResistance)\n</code></pre>\n<p>You can put attributes in attributes, something called 'nesting' in code. You can do some CRAZY shit by cleverly nesting stuff.</p>\n<p>There's a bunch more I can do, but that runs into the territory of giving you the car, not the tools to make one. I hope this helps!</p>\n<p>... man this got a lot longer than I'd expected.</p>\n\n",
      "PostDate": "2019-12-16T13:13:13.2569307Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "78b7473e-2999-48e5-83f8-1e3443b07752",
      "UserId": 445604,
      "Username": "Y4T5UR0",
      "AvatarUrl": "https://i.imgur.com/HJN9Gwwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Do I have to mess with the code view? Just asking tho\r\n:v\r\nand by the way, thanks. I think I understand ur explanation better - 3 -",
      "EditableFormat": "markdown",
      "HTML": "<p>Do I have to mess with the code view? Just asking tho<br>\n:v<br>\nand by the way, thanks. I think I understand ur explanation better - 3 -</p>\n\n",
      "PostDate": "2019-12-16T13:26:24.3843695Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2214979d-b485-4bf8-aa91-ca69dd9fe96d",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nDo I have to mess with the code view?\r\n```\r\nSort of yes, sort of no? Like, all the code I put up there was in code view because there's really no way to type the non-code view stuff on the forums. You also don't have to code-view the ENTIRE GAME every single time; you can code-view individual fragments with the code-view button on them, and toggle back out of it if you want.\r\n\r\nIf memory serves you should be able to get by entirely without code view if you don't mind not being able to copy-paste my stuff. **The one exception is something I forgot to mention:**\r\n\r\nIf you decide to use my 'Clone a FighterBase' shtick, and it comes time to remove a clone that's outlives its usefulness DO NOT EVER EVER EVER USE THE **REMOVE OBJECT** CODE!\r\n\r\nRemove Object doesn't actually 'remove' it. It just sort of banishes it into hammerspace, but it's still in the game's code, floating around and using up resources.\r\n\r\nWhat you want instead is the Destroy code. Destroy doesn't have a block in non-code view, so if you use it you have to switch to code view, type:\r\n```\r\ndestroy(ObjectYouWantDead.name)\r\n```\r\nAnd I do mean .name, not .alias, since destroy wants the object's code name. Once you enter that you can go back to non-code view and there'll be a block for it, but destroy() isn't something you can pick from the list like Print.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>Do I have to mess with the code view?\n</code></pre>\n<p>Sort of yes, sort of no? Like, all the code I put up there was in code view because there's really no way to type the non-code view stuff on the forums. You also don't have to code-view the ENTIRE GAME every single time; you can code-view individual fragments with the code-view button on them, and toggle back out of it if you want.</p>\n<p>If memory serves you should be able to get by entirely without code view if you don't mind not being able to copy-paste my stuff. <strong>The one exception is something I forgot to mention:</strong></p>\n<p>If you decide to use my 'Clone a FighterBase' shtick, and it comes time to remove a clone that's outlives its usefulness DO NOT EVER EVER EVER USE THE <strong>REMOVE OBJECT</strong> CODE!</p>\n<p>Remove Object doesn't actually 'remove' it. It just sort of banishes it into hammerspace, but it's still in the game's code, floating around and using up resources.</p>\n<p>What you want instead is the Destroy code. Destroy doesn't have a block in non-code view, so if you use it you have to switch to code view, type:</p>\n<pre><code>destroy(ObjectYouWantDead.name)\n</code></pre>\n<p>And I do mean .name, not .alias, since destroy wants the object's code name. Once you enter that you can go back to non-code view and there'll be a block for it, but destroy() isn't something you can pick from the list like Print.</p>\n\n",
      "PostDate": "2019-12-16T13:38:11.9443807Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "762ef8d2-b926-494b-83ed-aa2f244644d9",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good explanation lo",
      "EditableFormat": "markdown",
      "HTML": "<p>Good explanation lo</p>\n\n",
      "PostDate": "2019-12-17T19:04:45.5627813Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7766e48e-af1f-49e0-bac5-985c31219769",
      "UserId": 445604,
      "Username": "Y4T5UR0",
      "AvatarUrl": "https://i.imgur.com/HJN9Gwwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "lmao yes",
      "EditableFormat": "markdown",
      "HTML": "<p>lmao yes</p>\n\n",
      "PostDate": "2019-12-18T16:06:13.9430924Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "62e4c7c4-b629-4e86-9582-a7b24b36ca4e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's an example combat code for you to study/look-at:\r\n\r\nhttps://textadventures.co.uk/forum/quest/topic/5703/turn-based-combat#39315\r\n\r\nask if you need help on anything or don't understand or need explanation of anything",
      "EditableFormat": "markdown",
      "HTML": "<p>here's an example combat code for you to study/look-at:</p>\n<p>https://textadventures.co.uk/forum/quest/topic/5703/turn-based-combat#39315</p>\n<p>ask if you need help on anything or don't understand or need explanation of anything</p>\n\n",
      "PostDate": "2019-12-19T17:04:18.226715Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b1b46ccd-6c52-428e-8f79-e144da037816",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Advanced or simple combat?\r\nSimple combat:\r\nStats.\r\n```\r\nMonster.hp = 100\r\nMonster.attack = 20\r\n```\r\n```\r\nplayer.hp = 100\r\nplayer.attack = 40\r\n```\r\nFunctions.\r\n```\r\nplayer.hp = player.hp - this.attack\r\n```\r\n```\r\nthis.hp = this.hp - player.attack\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Advanced or simple combat?<br>\nSimple combat:<br>\nStats.</p>\n<pre><code>Monster.hp = 100\nMonster.attack = 20\n</code></pre>\n<pre><code>player.hp = 100\nplayer.attack = 40\n</code></pre>\n<p>Functions.</p>\n<pre><code>player.hp = player.hp - this.attack\n</code></pre>\n<pre><code>this.hp = this.hp - player.attack\n</code></pre>\n\n",
      "PostDate": "2019-12-20T20:34:36.3355014Z",
      "LastEditDate": "2019-12-20T20:35:12.0491979Z",
      "link": null
    }
  ]
}
