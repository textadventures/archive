{
  "Topic": {
    "TopicId": "l2zk8mzh6u2p-8j9on03kw",
    "ForumId": "10",
    "Title": "Help Wanted Please - Its all about 'Flags'",
    "LastUpdated": "2020-01-06T01:53:34.5516795Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "43b3171d-b986-4865-b932-618226584a79",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In most programs you can create a flag by giving it a name and give it a default state of false\r\neg HasWater = True\r\nThan you can use the flag in your program by  checking it's state, setting it to True or Setting it False.\r\n\r\nI can't see anywhere in Quest where I can create a flag and set it's default value to false.\r\nSomewhere I read that you can attach a flag to an object in Quest. Also maybe an object becomes a flag in Quest.\r\n\r\nCan someonw please help me with this.\r\n\r\n \r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>In most programs you can create a flag by giving it a name and give it a default state of false<br>\neg HasWater = True<br>\nThan you can use the flag in your program by  checking it's state, setting it to True or Setting it False.</p>\n<p>I can't see anywhere in Quest where I can create a flag and set it's default value to false.<br>\nSomewhere I read that you can attach a flag to an object in Quest. Also maybe an object becomes a flag in Quest.</p>\n<p>Can someonw please help me with this.</p>\n\n",
      "PostDate": "2020-01-06T01:53:34.5516795Z",
      "LastEditDate": "2020-01-06T01:54:37.5464705Z",
      "link": null
    },
    {
      "PostId": "a40b706f-91f1-4819-9541-5fcc4d56caa4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A flag is just a name for a boolean attribute.\r\nIn Quest, all attributes belong to an object. This could be some object relevant to what the flag is for, the game, or the player.\r\n\r\nSo, for example, if you have a flag that's set when the player gets drunk, it would make sense to have it as an attribute of the player. You could set it using one of the following lines (all of which do the same thing):\r\n\r\n* `player.drunk = true`\r\n* `set (player, \"drunk\", true)`\r\n* `SetObjectFlagOn (player, \"drunk\")`\r\n\r\nIf you're setting a flag to indicate that a flashlight is turned on, you would probably do `flashlight.switchedon = true` (and this is exactly what the default \"turn on\" and \"turn off\" commands do if you enable them for an object).\r\n\r\nIf you're setting a flag to indicate that the world has been flooded, you'd probably want to make it an attribute of the special object `game`.\r\n\r\n(In Gamebook mode, the built-in function `SetFlagOn (\"some name\")` sets an attribute of `game`, because gamebook mode doesn't have flags as such)\r\n\r\nThere are two main ways to check the status of a flag:\r\n\r\n* `if (player.drunk = true) {` - this will run a command if the flag is true, and not if it's false. I see this a *lot* in code posted on the forum, and it kind of bugs me because the `if` statement already compares its contents to true. This will cause an **error** if the flag is neither true or false (for example if it hasn't been set at all)\r\n* `if (player.drunk) {` - easier to write. I think this will also give an error if the attribute hasn't been set yet.\r\n* `if (GetBoolean (player, \"drunk\")) {` - this will run code if `player.drunk` is true; but not if it's false or unset. GetBoolean treats an unset attribute (or a string, or a number) as being false, so you don't need to worry about setting it to false initially.\r\n* `if (not GetBoolean (player, \"drunk\")) {` - runs code if the attribute is false, unset, or some non-boolean value\r\n* `if (HasBoolean (player, \"drunk\")) {` - Used to test if the attribute has been set yet, regardless of whether it's true or false.\r\n\r\nI would recommend using `objectname.attributename = true` to set a flag (because it's quicker), and `GetBoolean (objectname, \"flagname\")` to test them, because it lets you assume that all flags are false initially.\r\n\r\n<hr />\r\n\r\nAnd a side note: I used ``player.drunk`` in the examples above. That's generally a bad habit, because it will stop working if you rename the player object or allow the player to choose which character to control. You never know who's going to look at your code and try to reuse it, so it's a good habit to use <code style=\"color:darkgreen\">game.pov</code> instead of `player`, especially when sharing code on the forums. <code style=\"color:darkgreen\">game.pov</code> is a built in attribute which refers to the current player object regardless of what its name is.",
      "EditableFormat": "markdown",
      "HTML": "<p>A flag is just a name for a boolean attribute.<br>\nIn Quest, all attributes belong to an object. This could be some object relevant to what the flag is for, the game, or the player.</p>\n<p>So, for example, if you have a flag that's set when the player gets drunk, it would make sense to have it as an attribute of the player. You could set it using one of the following lines (all of which do the same thing):</p>\n<ul>\n<li><code>player.drunk = true</code></li>\n<li><code>set (player, \"drunk\", true)</code></li>\n<li><code>SetObjectFlagOn (player, \"drunk\")</code></li>\n</ul>\n<p>If you're setting a flag to indicate that a flashlight is turned on, you would probably do <code>flashlight.switchedon = true</code> (and this is exactly what the default \"turn on\" and \"turn off\" commands do if you enable them for an object).</p>\n<p>If you're setting a flag to indicate that the world has been flooded, you'd probably want to make it an attribute of the special object <code>game</code>.</p>\n<p>(In Gamebook mode, the built-in function <code>SetFlagOn (\"some name\")</code> sets an attribute of <code>game</code>, because gamebook mode doesn't have flags as such)</p>\n<p>There are two main ways to check the status of a flag:</p>\n<ul>\n<li><code>if (player.drunk = true) {</code> - this will run a command if the flag is true, and not if it's false. I see this a <em>lot</em> in code posted on the forum, and it kind of bugs me because the <code>if</code> statement already compares its contents to true. This will cause an <strong>error</strong> if the flag is neither true or false (for example if it hasn't been set at all)</li>\n<li><code>if (player.drunk) {</code> - easier to write. I think this will also give an error if the attribute hasn't been set yet.</li>\n<li><code>if (GetBoolean (player, \"drunk\")) {</code> - this will run code if <code>player.drunk</code> is true; but not if it's false or unset. GetBoolean treats an unset attribute (or a string, or a number) as being false, so you don't need to worry about setting it to false initially.</li>\n<li><code>if (not GetBoolean (player, \"drunk\")) {</code> - runs code if the attribute is false, unset, or some non-boolean value</li>\n<li><code>if (HasBoolean (player, \"drunk\")) {</code> - Used to test if the attribute has been set yet, regardless of whether it's true or false.</li>\n</ul>\n<p>I would recommend using <code>objectname.attributename = true</code> to set a flag (because it's quicker), and <code>GetBoolean (objectname, \"flagname\")</code> to test them, because it lets you assume that all flags are false initially.</p>\n<hr>\n<p>And a side note: I used <code>player.drunk</code> in the examples above. That's generally a bad habit, because it will stop working if you rename the player object or allow the player to choose which character to control. You never know who's going to look at your code and try to reuse it, so it's a good habit to use <code style=\"color: darkgreen\">game.pov</code> instead of <code>player</code>, especially when sharing code on the forums. <code style=\"color: darkgreen\">game.pov</code> is a built in attribute which refers to the current player object regardless of what its name is.</p>\n\n",
      "PostDate": "2020-01-06T10:19:45.9450402Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "77d5c0a8-20d4-4b91-9e19-9a4362893910",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel for your help with flags.\r\n \r\nso a command such as if (car.FlatTyre = true)\r\n then the game needs to know that car exists but is FlatTyre is created when the above command is used?\r\n\r\nIn Gamebook mode would I use SetFlagOn (\"EngineOn\")   or would I use    SetFlagOn(\"red button\") ?  \r\n\r\nIn your text you said\r\n if (player.drunk) { - easier to write. I think this will also give an error if the attribute hasn't been set yet.\r\nDo you mean I need to add 'drunk' to the player 'attribute'? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel for your help with flags.</p>\n<p>so a command such as if (car.FlatTyre = true)<br>\nthen the game needs to know that car exists but is FlatTyre is created when the above command is used?</p>\n<p>In Gamebook mode would I use SetFlagOn (\"EngineOn\")   or would I use    SetFlagOn(\"red button\") ?</p>\n<p>In your text you said<br>\nif (player.drunk) { - easier to write. I think this will also give an error if the attribute hasn't been set yet.<br>\nDo you mean I need to add 'drunk' to the player 'attribute'?</p>\n\n",
      "PostDate": "2020-01-06T12:51:52.8393762Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "62374484-a07e-45e6-90bf-7b527109825a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> so a command such as if (car.FlatTyre = true)\r\n> then the game needs to know that car exists but is FlatTyre is created when the above command is used?\r\n\r\nNo. The car needs to exist, *and* FlatTyre must be set to `true` or `false`. If it hasn't been set yet, that line will generate an error.\r\n\r\nThat's why I suggest using `if (GetBoolean (car, \"FlatTyre\")) {` - which treats \"not set\" the same as false.\r\n\r\n> In Gamebook mode would I use SetFlagOn (\"EngineOn\") or would I use SetFlagOn(\"red button\") ?\r\n\r\nIn gamebook mode, `SetFlagOn (\"EngineOn\")` is a shortcut for `game.EngineOn = true`. The flag is related to the game, not to any specific object, so you can name it whatever helps you to remember what it means.\r\n\r\n> Do you mean I need to add 'drunk' to the player 'attribute'?\r\n\r\nIf you're using `if (player.drunk) {` you will need to add a `drunk` attribute to the player, and set it to false initially.\r\nIt's easier just to use `if (GetBoolean (player, \"drunk\")) {` in most cases.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>so a command such as if (car.FlatTyre = true)<br>\nthen the game needs to know that car exists but is FlatTyre is created when the above command is used?</p>\n</blockquote>\n<p>No. The car needs to exist, <em>and</em> FlatTyre must be set to <code>true</code> or <code>false</code>. If it hasn't been set yet, that line will generate an error.</p>\n<p>That's why I suggest using <code>if (GetBoolean (car, \"FlatTyre\")) {</code> - which treats \"not set\" the same as false.</p>\n<blockquote>\n<p>In Gamebook mode would I use SetFlagOn (\"EngineOn\") or would I use SetFlagOn(\"red button\") ?</p>\n</blockquote>\n<p>In gamebook mode, <code>SetFlagOn (\"EngineOn\")</code> is a shortcut for <code>game.EngineOn = true</code>. The flag is related to the game, not to any specific object, so you can name it whatever helps you to remember what it means.</p>\n<blockquote>\n<p>Do you mean I need to add 'drunk' to the player 'attribute'?</p>\n</blockquote>\n<p>If you're using <code>if (player.drunk) {</code> you will need to add a <code>drunk</code> attribute to the player, and set it to false initially.<br>\nIt's easier just to use <code>if (GetBoolean (player, \"drunk\")) {</code> in most cases.</p>\n\n",
      "PostDate": "2020-01-06T14:11:58.6854407Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c690753b-78e2-4843-b3aa-dd9f8aefa5b0",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel.\r\nI now have a better understanding on flag.\r\n\r\nThe next thing I want to study is timers. It should be possible to display a message followed by a 2 second delay then display another message.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel.<br>\nI now have a better understanding on flag.</p>\n<p>The next thing I want to study is timers. It should be possible to display a message followed by a 2 second delay then display another message.</p>\n\n",
      "PostDate": "2020-01-07T05:18:48.1520328Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "37cde1d2-3188-4c0f-b2bb-06d88e75dc21",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Data/VARIABLE/Attribute/Variable/Value Types:\r\n\r\n----------------\r\n\r\nAmount (able to do arithmetic upon) Data Types:\r\n\r\n1. Integers (ints): ..., -999, -1, 0, 1, 999, ....\r\n\r\nattribute example: player.strength = 100\r\n\r\n2. Doubles: ..., -999.789173682734, -1.123, 0.0, 1.43834923464, 999.123, ....\r\n\r\nattribute example: player.damage = 54.9\r\n\r\n------------------\r\n\r\nNon-Amount (NOT able to arithmetic upon) Data Types:\r\n\r\n3. Booleans (\"flags\"): true/false\r\n\r\nattribute examples:\r\n\r\norc.dead = false\r\n// or\r\norc.dead = true\r\n\r\nplayer.poisoned = false\r\n// or\r\nplayer.poisoned = true\r\n\r\ntv.switchedon = false\r\n// or\r\ntv.switchedon = true\r\n\r\nroom.visited = false\r\n// or\r\nroom.visited = true\r\n\r\n4. Strings (\"text\"): \"a\", \"abc\", \"1\", \"123\", \"abc_123\", \"hi, my name is HK, what is your name?\", etc etc etc\r\n\r\nattribute example: player.alias = \"HK\"\r\n\r\n5. Object References/Pointers: an Object's name is a reference/pointer to its memory address (location)\r\n\r\nattribute example:\r\n\r\n// create (\"katana\") // creating a 'katana' Object\r\nplayer.weapon = katana\r\n\r\n6. Scripts: does an action (or multiple actions)\r\n\r\nattribute example:\r\n\r\n```\r\ngame.start => {\r\n  msg (\"welcome to my game, I hope you enjoy it\")\r\n}\r\n```\r\n\r\n7. Lists/Arrays\r\n\r\n8. Dictionaries",
      "EditableFormat": "markdown",
      "HTML": "<p>Data/VARIABLE/Attribute/Variable/Value Types:</p>\n<hr>\n<p>Amount (able to do arithmetic upon) Data Types:</p>\n<ol>\n<li>Integers (ints): ..., -999, -1, 0, 1, 999, ....</li>\n</ol>\n<p>attribute example: player.strength = 100</p>\n<ol start=\"2\">\n<li>Doubles: ..., -999.789173682734, -1.123, 0.0, 1.43834923464, 999.123, ....</li>\n</ol>\n<p>attribute example: player.damage = 54.9</p>\n<hr>\n<p>Non-Amount (NOT able to arithmetic upon) Data Types:</p>\n<ol start=\"3\">\n<li>Booleans (\"flags\"): true/false</li>\n</ol>\n<p>attribute examples:</p>\n<p>orc.dead = false<br>\n// or<br>\norc.dead = true</p>\n<p>player.poisoned = false<br>\n// or<br>\nplayer.poisoned = true</p>\n<p>tv.switchedon = false<br>\n// or<br>\ntv.switchedon = true</p>\n<p>room.visited = false<br>\n// or<br>\nroom.visited = true</p>\n<ol start=\"4\">\n<li>Strings (\"text\"): \"a\", \"abc\", \"1\", \"123\", \"abc_123\", \"hi, my name is HK, what is your name?\", etc etc etc</li>\n</ol>\n<p>attribute example: player.alias = \"HK\"</p>\n<ol start=\"5\">\n<li>Object References/Pointers: an Object's name is a reference/pointer to its memory address (location)</li>\n</ol>\n<p>attribute example:</p>\n<p>// create (\"katana\") // creating a 'katana' Object<br>\nplayer.weapon = katana</p>\n<ol start=\"6\">\n<li>Scripts: does an action (or multiple actions)</li>\n</ol>\n<p>attribute example:</p>\n<pre><code>game.start =&gt; {\n  msg (\"welcome to my game, I hope you enjoy it\")\n}\n</code></pre>\n<ol start=\"7\">\n<li>\n<p>Lists/Arrays</p>\n</li>\n<li>\n<p>Dictionaries</p>\n</li>\n</ol>\n\n",
      "PostDate": "2020-01-10T00:10:59.3643818Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2aeefa97-d516-4995-b454-bb0d83fc59d9",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi hegemonkhan.\r\n\r\nI'm not certain what your text refers to as it does not refer to flags.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi hegemonkhan.</p>\n<p>I'm not certain what your text refers to as it does not refer to flags.</p>\n\n",
      "PostDate": "2020-01-11T10:28:44.447557Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
