{
  "Topic": {
    "TopicId": "2017",
    "ForumId": "10",
    "Title": "Add Parameter Passing to Object Actions",
    "LastUpdated": "2009-04-30T00:48:51+01:00",
    "ReplyCount": 11
  },
  "Posts": [
    {
      "PostId": "16445",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Sometimes as I'm merrily scripting along, adding capabilities to a specific type of object by tacking on new actions, I think &quot;Gee, I wish I could pass parameters to the action of an object&quot;.\n\nAt that point I have two choices:\n\n1)  Create new properties on the object that serve as placeholders for parameters that an object action needs to be aware of\n2)  Put the functionality of the action into its own procedure, then pass the object as a parameter (along with the other parameters)\n\nSolution two is obvious.  But statements that are supposed to be logically grouped with a specific object type (or specific object) are now hanging out in their own procedure and have no direct association with the original object or object type.  (Is this just me being nit-picky?  <!-- s:cry: --><img src=\"{SMILIES_PATH}/icon_cry.gif\" alt=\":cry:\" title=\"Crying or Very sad\" /><!-- s:cry: -->)\n\nSolution one is alright:  create a set of properties  (parameter1, parameter2..,parameterN) on the object that any action can refer to.  Those properties have a default 'empty' setting (such as NO_DATA) which indicates that nothing was passed to them.  If they do not equal NO_DATA, the action can choose to use them.  \n\n[code:16oxew9g]\naction &lt;SomeAction&gt; {\n\n\tset string &lt;this; $thisobject$&gt;\n\tif (#(this)&#58;parameter1# &lt;&gt; NO_DATA) then {\n\t\t'do stuff\n\t}\n\telse {\n\t\t'show error - parameter1 was supposed to be passed\n\t}\n\n\tproperty &lt;#this#; parameter1 = NO_DATA&gt;\n}[/code:16oxew9g]\n\nThe action resets any parameters it uses to NO_DATA when it finishes.\n\nBut then when I call the action on an object that requires those parameters, I have to:\n\n[code:16oxew9g]\nproperty &lt;SomeObject; parameter1 = SOME_DATA&gt;\ndoaction &lt;SomeObject; SomeAction&gt;\n[/code:16oxew9g]\n\nThe more parameters I need, the more ASL statements are required to call the action properly.\n\nSo my question is:  [i:16oxew9g]how hard would it be to add parameter passing to object actions[/i:16oxew9g]?  That way, I could simply:\n\n[code:16oxew9g]doaction &lt;SomeObject; SomeAction(SOME_DATA)&gt;[/code:16oxew9g]\n\nAnd then in the object action:\n\n[code:16oxew9g]\naction &lt;SomeAction&gt; {\n\n\tif ($numberparameters$ &gt; 0) then {\n\t\tset string &lt;p1; $parameter(1)$&gt;\n\t\t'do stuff\n\t}\n\telse {\n\t\t'show error - parameter1 was supposed to be passed\n\t}\t\n}[/code:16oxew9g]",
      "EditableFormat": "bbcode",
      "HTML": "Sometimes as I'm merrily scripting along, adding capabilities to a specific type of object by tacking on new actions, I think &quot;Gee, I wish I could pass parameters to the action of an object&quot;.<br/><br/>At that point I have two choices:<br/><br/>1)  Create new properties on the object that serve as placeholders for parameters that an object action needs to be aware of<br/>2)  Put the functionality of the action into its own procedure, then pass the object as a parameter (along with the other parameters)<br/><br/>Solution two is obvious.  But statements that are supposed to be logically grouped with a specific object type (or specific object) are now hanging out in their own procedure and have no direct association with the original object or object type.  (Is this just me being nit-picky?  <!-- s:cry: --><img src=\"{SMILIES_PATH}/icon_cry.gif\" alt=\":cry:\" title=\"Crying or Very sad\" /><!-- s:cry: -->)<br/><br/>Solution one is alright:  create a set of properties  (parameter1, parameter2..,parameterN) on the object that any action can refer to.  Those properties have a default 'empty' setting (such as NO_DATA) which indicates that nothing was passed to them.  If they do not equal NO_DATA, the action can choose to use them.  <br/><br/><pre><code><br/>action &lt;SomeAction&gt; {<br/><br/>\tset string &lt;this; $thisobject$&gt;<br/>\tif (#(this)&#58;parameter1# &lt;&gt; NO_DATA) then {<br/>\t\t'do stuff<br/>\t}<br/>\telse {<br/>\t\t'show error - parameter1 was supposed to be passed<br/>\t}<br/><br/>\tproperty &lt;#this#; parameter1 = NO_DATA&gt;<br/>}</code></pre><br/><br/>The action resets any parameters it uses to NO_DATA when it finishes.<br/><br/>But then when I call the action on an object that requires those parameters, I have to:<br/><br/><pre><code><br/>property &lt;SomeObject; parameter1 = SOME_DATA&gt;<br/>doaction &lt;SomeObject; SomeAction&gt;<br/></code></pre><br/><br/>The more parameters I need, the more ASL statements are required to call the action properly.<br/><br/>So my question is:  <span style=\"font-style:italic;\">how hard would it be to add parameter passing to object actions</span>?  That way, I could simply:<br/><br/><pre><code>doaction &lt;SomeObject; SomeAction(SOME_DATA)&gt;</code></pre><br/><br/>And then in the object action:<br/><br/><pre><code><br/>action &lt;SomeAction&gt; {<br/><br/>\tif ($numberparameters$ &gt; 0) then {<br/>\t\tset string &lt;p1; $parameter(1)$&gt;<br/>\t\t'do stuff<br/>\t}<br/>\telse {<br/>\t\t'show error - parameter1 was supposed to be passed<br/>\t}\t<br/>}</code></pre>",
      "PostDate": "2009-04-19T12:00:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16447",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "I simply work with the fact Quest uses global variables.\n\nBut that would be a nice addition, and would help with standardizing the action call (ie, calling it from two different places is messy).",
      "EditableFormat": "bbcode",
      "HTML": "I simply work with the fact Quest uses global variables.<br/><br/>But that would be a nice addition, and would help with standardizing the action call (ie, calling it from two different places is messy).",
      "PostDate": "2009-04-19T13:55:23+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16449",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "Why don't you try a different language that supports that functionality?  (Inform 6, TADS 2/3, and I think Hugo)",
      "EditableFormat": "bbcode",
      "HTML": "Why don't you try a different language that supports that functionality?  (Inform 6, TADS 2/3, and I think Hugo)",
      "PostDate": "2009-04-19T14:46:54+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16451",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "I've been nibbling at the TADS 3 documentation recently, and I think it fits me better than Inform 6 or 7.  I am going to try writing my OneRoom competition entry with TADS 3 after the competition is over.\n\nBut I like Quest's ASL because it's a blank slate: I don't have to worry about jacking into a pre-existing model, or overwriting one.  I can make it all myself!  (And learn things about structure along the way).  Although there are times when I override default functionality in Quest, it isn't very hard to do so.\n\nThat said, TADS 3 has given me a lot to think about (from what I've read so far).  Lot's of great stuff in the (prolific) documentation.  I know I can modify the libraries however I want, and that alone is luminawesome (so awesome it glows).  Just have to understand those libraries first!",
      "EditableFormat": "bbcode",
      "HTML": "I've been nibbling at the TADS 3 documentation recently, and I think it fits me better than Inform 6 or 7.  I am going to try writing my OneRoom competition entry with TADS 3 after the competition is over.<br/><br/>But I like Quest's ASL because it's a blank slate: I don't have to worry about jacking into a pre-existing model, or overwriting one.  I can make it all myself!  (And learn things about structure along the way).  Although there are times when I override default functionality in Quest, it isn't very hard to do so.<br/><br/>That said, TADS 3 has given me a lot to think about (from what I've read so far).  Lot's of great stuff in the (prolific) documentation.  I know I can modify the libraries however I want, and that alone is luminawesome (so awesome it glows).  Just have to understand those libraries first!",
      "PostDate": "2009-04-19T16:07:05+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16453",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "And?  You can ditch the TADS standard library if you want.  (I wrote an ADRIFT to TADS converter that completely replaces the library.)",
      "EditableFormat": "bbcode",
      "HTML": "And?  You can ditch the TADS standard library if you want.  (I wrote an ADRIFT to TADS converter that completely replaces the library.)",
      "PostDate": "2009-04-19T16:37:00+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16454",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:3uh7ipd5](I wrote an ADRIFT to TADS converter that completely replaces the library.)[/quote:3uh7ipd5]\n\nCool.\n\n[quote:3uh7ipd5]You can ditch the TADS standard library if you want.[/quote:3uh7ipd5]\n\nI realize that.  There's also inertia - I'm already familiar with how to do things with ASL, and I'm at the &quot;creative&quot; stage with it.  It's going to take me some time to be at the same stage with TADS (I'm no genius).  I've only got so much time on my hands, and fate has placed me here first.  I can foresee, however, getting much more into TADS in the future.  I may even attempt to make my own IF scripting language/C library some time down the road, after I've learned enough lessons to think I can manage it.  We'll see.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>(I wrote an ADRIFT to TADS converter that completely replaces the library.)</p></blockquote><br/><br/>Cool.<br/><br/><blockquote><p>You can ditch the TADS standard library if you want.</p></blockquote><br/><br/>I realize that.  There's also inertia - I'm already familiar with how to do things with ASL, and I'm at the &quot;creative&quot; stage with it.  It's going to take me some time to be at the same stage with TADS (I'm no genius).  I've only got so much time on my hands, and fate has placed me here first.  I can foresee, however, getting much more into TADS in the future.  I may even attempt to make my own IF scripting language/C library some time down the road, after I've learned enough lessons to think I can manage it.  We'll see.",
      "PostDate": "2009-04-19T16:55:18+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16505",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "You're wrong about Quest being a blank slate.  For example, &quot;getobjectname&quot; is written in VB.  There's no way to write your own equivalent in ASL.\n\nFor example, one of the examples for Inform shows how to modify disambiguation so that if the player tries eating something, the parser will prefer an edible object to a non-edible one:\n\n&gt; I\nYou are carrying a black forest cake and an issue of Black Mask magazine.\n\n&gt; EXAMINE BLACK\nWhich black do you mean, the black forest cake or the issue of Black Mask magazine?\n\n&gt; EAT THE BLACK\n(the black forest cake)\nIt's delicious.\n\n\nQuest treats directions as very special things.  Other languages treat them as ordinary objects.  For example, in I6, if I wanted to have a Discworld scene, I could replace &quot;north, south, east, west&quot; with &quot;rimwards, hubwards, turnwise, widdershins&quot; for that portion.",
      "EditableFormat": "bbcode",
      "HTML": "You're wrong about Quest being a blank slate.  For example, &quot;getobjectname&quot; is written in VB.  There's no way to write your own equivalent in ASL.<br/><br/>For example, one of the examples for Inform shows how to modify disambiguation so that if the player tries eating something, the parser will prefer an edible object to a non-edible one:<br/><br/>&gt; I<br/>You are carrying a black forest cake and an issue of Black Mask magazine.<br/><br/>&gt; EXAMINE BLACK<br/>Which black do you mean, the black forest cake or the issue of Black Mask magazine?<br/><br/>&gt; EAT THE BLACK<br/>(the black forest cake)<br/>It's delicious.<br/><br/><br/>Quest treats directions as very special things.  Other languages treat them as ordinary objects.  For example, in I6, if I wanted to have a Discworld scene, I could replace &quot;north, south, east, west&quot; with &quot;rimwards, hubwards, turnwise, widdershins&quot; for that portion.",
      "PostDate": "2009-04-26T16:04:40+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16509",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "You can replace north/south/east/west in appearance to the player.",
      "EditableFormat": "bbcode",
      "HTML": "You can replace north/south/east/west in appearance to the player.",
      "PostDate": "2009-04-26T22:12:33+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16512",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:2w8d1mh6]For example, one of the examples for Inform shows how to modify disambiguation so that if the player tries eating something, the parser will prefer an edible object to a non-edible one...[/quote:2w8d1mh6]\n\nYes, I would very much like access to the disambiguation process.  Going to put up a Feature Request post in regards to that.  All Quest needs is a hook to preprocess the disambiguation, an array that stores the latest objects needing disambiguation, and a function call to allow us to redirect back to the original disambiguation functionality once we modify the array.\n\n[code:2w8d1mh6]define game &lt;SomeGame&gt;\n\n    ambiguous {\n\n        'process AmbiguousItems array here\n        $disambiguate(AmbiguousItems)$\n    }\n\nend define[/code:2w8d1mh6]\n\n[quote:2w8d1mh6]Quest treats directions as very special things. Other languages treat them as ordinary objects. For example, in I6, if I wanted to have a Discworld scene, I could replace &quot;north, south, east, west&quot; with &quot;rimwards, hubwards, turnwise, widdershins&quot; for that portion.[/quote:2w8d1mh6]\n\nI have been implementing my own exit objects for a while now - akin to TADS travel connectors.  It is not terribly difficult.  Just need to code a few commands &amp; synonyms, and utilize the defaultroom type.  Can post the ASL if you like.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>For example, one of the examples for Inform shows how to modify disambiguation so that if the player tries eating something, the parser will prefer an edible object to a non-edible one...</p></blockquote><br/><br/>Yes, I would very much like access to the disambiguation process.  Going to put up a Feature Request post in regards to that.  All Quest needs is a hook to preprocess the disambiguation, an array that stores the latest objects needing disambiguation, and a function call to allow us to redirect back to the original disambiguation functionality once we modify the array.<br/><br/><pre><code>define game &lt;SomeGame&gt;<br/><br/>    ambiguous {<br/><br/>        'process AmbiguousItems array here<br/>        $disambiguate(AmbiguousItems)$<br/>    }<br/><br/>end define</code></pre><br/><br/><blockquote><p>Quest treats directions as very special things. Other languages treat them as ordinary objects. For example, in I6, if I wanted to have a Discworld scene, I could replace &quot;north, south, east, west&quot; with &quot;rimwards, hubwards, turnwise, widdershins&quot; for that portion.</p></blockquote><br/><br/>I have been implementing my own exit objects for a while now - akin to TADS travel connectors.  It is not terribly difficult.  Just need to code a few commands &amp; synonyms, and utilize the defaultroom type.  Can post the ASL if you like.",
      "PostDate": "2009-04-27T00:09:22+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16522",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Exits as &quot;very special things&quot; ??\n\nThey are properties/actions of a room.\nThe only problem being that Quest doesn't allow you to change then like any other object property/action.\n\nSaying they are &quot;special things&quot; is just wrong - there's no totally different way to handle exits (ie, a totally different coding mechanism, or they are definitely not properties), they are closer to &quot;read-only properties&quot; (which are changable by using some unique commands).\n\nIn comparison, l6 treating them like &quot;normal&quot; objects would mean you could pick them up, and otherwise interact with them in the same way as normal objects... Which is odd since exits are NOT normal objects - they are infact a &quot;property of a room&quot; (a door is an object - the exit is a hole/portal/other absence of an object).\n\nAs for disambiguation, I'd love for that to happen.\nFor us to be able to create our own menu, in our own style, rather then Quest pop-ups all the time.",
      "EditableFormat": "bbcode",
      "HTML": "Exits as &quot;very special things&quot; ??<br/><br/>They are properties/actions of a room.<br/>The only problem being that Quest doesn't allow you to change then like any other object property/action.<br/><br/>Saying they are &quot;special things&quot; is just wrong - there's no totally different way to handle exits (ie, a totally different coding mechanism, or they are definitely not properties), they are closer to &quot;read-only properties&quot; (which are changable by using some unique commands).<br/><br/>In comparison, l6 treating them like &quot;normal&quot; objects would mean you could pick them up, and otherwise interact with them in the same way as normal objects... Which is odd since exits are NOT normal objects - they are infact a &quot;property of a room&quot; (a door is an object - the exit is a hole/portal/other absence of an object).<br/><br/>As for disambiguation, I'd love for that to happen.<br/>For us to be able to create our own menu, in our own style, rather then Quest pop-ups all the time.",
      "PostDate": "2009-04-28T20:32:23+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16528",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "Let me rephrase that.\n\nFor each compass direction, there is a corresponding object.  (It contains the vocabulary for that direction and tells which property is used for that direction.)\n\nCommands like &quot;push cart (direction)&quot; are handled partially by matching the phrase &quot;(direction)&quot; against the direction objects.\n\nEach connection between two rooms is stored in a property for each room, as you expected.\n\nIn Quest, exits are definitely stored differently than properties; unless Alex has changed this, if you change an exit with the &quot;change exit&quot; mechanism, the map will update to the new value, but the value stored in the property isn't.",
      "EditableFormat": "bbcode",
      "HTML": "Let me rephrase that.<br/><br/>For each compass direction, there is a corresponding object.  (It contains the vocabulary for that direction and tells which property is used for that direction.)<br/><br/>Commands like &quot;push cart (direction)&quot; are handled partially by matching the phrase &quot;(direction)&quot; against the direction objects.<br/><br/>Each connection between two rooms is stored in a property for each room, as you expected.<br/><br/>In Quest, exits are definitely stored differently than properties; unless Alex has changed this, if you change an exit with the &quot;change exit&quot; mechanism, the map will update to the new value, but the value stored in the property isn't.",
      "PostDate": "2009-04-29T03:20:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16531",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Yes, exits could possibly be stored differently - since things have slowly evolved into objects and properties for ASL.\nI did want to say something about this, but I can't think of a good way to explain the thought, so I'll leave it.",
      "EditableFormat": "bbcode",
      "HTML": "Yes, exits could possibly be stored differently - since things have slowly evolved into objects and properties for ASL.<br/>I did want to say something about this, but I can't think of a good way to explain the thought, so I'll leave it.",
      "PostDate": "2009-04-30T00:48:51+01:00",
      "LastEditDate": null
    }
  ]
}
