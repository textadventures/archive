{
  "Topic": {
    "TopicId": "xdbj1vrvqkylxvmglpsjsa",
    "ForumId": "10",
    "Title": "logical operators in quest expressions?",
    "LastUpdated": "2017-12-07T09:25:54.4593281Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "2eb5969a-471f-4e6c-8c0a-cc0360524c4e",
      "UserId": 335301,
      "Username": "Tim Boettcher",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cbeb9e7460c8260fb927ec9ef212ffaf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good morning,\r\n\r\nI want to do the following: I have a command \"change size #text#\" which the player can use to change the font size. It does this correctly if I enter an integer - but what if I enter: change size bleh - obviously, the size doesn't get changed, however the game doesn't return an error, either. \r\n\r\nI have no clue why someone would enter texT if asked for a numeric input, but better save than sorry.\r\n\r\nMy first guess was to add something like: if text >= 1 && text <= 75 and for the rest the unresolved object text fires (or I add an else if this isn't the case)...\r\nThis would have two problems, though: Is quest intelligent enough to convert a string to int to check whether it matches or do I have a java-style type mismatch then? And: What logical operators does quest use? In Java, JavaScript, C++ etc. it's && for and, || for or, ! For not... In SQL we use AND, OR and NOT. What are the logical operators for quest?\r\n\r\nThanks in advance.\r\n\r\nYours,\r\nTim",
      "EditableFormat": "markdown",
      "HTML": "<p>Good morning,</p>\n<p>I want to do the following: I have a command \"change size #text#\" which the player can use to change the font size. It does this correctly if I enter an integer - but what if I enter: change size bleh - obviously, the size doesn't get changed, however the game doesn't return an error, either.</p>\n<p>I have no clue why someone would enter texT if asked for a numeric input, but better save than sorry.</p>\n<p>My first guess was to add something like: if text &gt;= 1 &amp;&amp; text &lt;= 75 and for the rest the unresolved object text fires (or I add an else if this isn't the case)...<br>\nThis would have two problems, though: Is quest intelligent enough to convert a string to int to check whether it matches or do I have a java-style type mismatch then? And: What logical operators does quest use? In Java, JavaScript, C++ etc. it's &amp;&amp; for and, || for or, ! For not... In SQL we use AND, OR and NOT. What are the logical operators for quest?</p>\n<p>Thanks in advance.</p>\n<p>Yours,<br>\nTim</p>\n\n",
      "PostDate": "2017-12-07T09:25:54.4593281Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1b1b84d5-c327-4d1c-8fea-d34fcdb88bd8",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You should use `IsInt` to check if a string can be converted to a number, and `ToInt` to convert it if it can. Comparing a non-numeric to a numeric will throw an error.\r\n\r\nQuest uses `or`, `and` and `not`.",
      "EditableFormat": "markdown",
      "HTML": "<p>You should use <code>IsInt</code> to check if a string can be converted to a number, and <code>ToInt</code> to convert it if it can. Comparing a non-numeric to a numeric will throw an error.</p>\n<p>Quest uses <code>or</code>, <code>and</code> and <code>not</code>.</p>\n\n",
      "PostDate": "2017-12-07T11:18:27.7927209Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b73f4c3c-b4b7-4cb4-a327-425615b2c020",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's some of the quest doc stuff (what quest has already built-in for you to use):\r\n\r\nthere's these scripts/functions for checking/converting/getting/etc various data/value/attribute/variable types:\r\n\r\n'IsXXX (xxx)'\r\n'ToXXX (xxx)'\r\n'HasXXX (xxx)'\r\n'GetXXX (xxx)'\r\n'TypeOf (xxx)'\r\n'DoesInherit (xxx)'\r\n\r\nhttp://docs.textadventures.co.uk/quest/ (main page, look/search/navigate around, and/or ask for help if you can't find something or need something and/or syntax explained)\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/\r\nhttp://docs.textadventures.co.uk/quest/functions/ (categorical order)\r\nhttp://docs.textadventures.co.uk/quest/functions/index_allfunctions.html (alphabetical order)\r\n\r\nhttp://docs.textadventures.co.uk/quest/types/ (Data/Attribute/Variable/Value Types)\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/ (quest's OOP/OOD 'OBJECTS' in the underlying quest code are called/known-as 'Elements' at its user-level, not to be confused with the 'Object' sub-Element, one of many types/sub-types, along with Exits/Functions/Verbs/Commands/Object_Types/Turnscripts/Timers/Etc, of quest's OOP/OOD 'OBJECTS')\r\n\r\nwhen you click on the 'Object' Element in the link above, you get to see all of its built-in Attributes (or just click on this link, lol): http://docs.textadventures.co.uk/quest/elements/object.html\r\n\r\n-----------\r\n\r\nif you work in-code directly, for using 'greater/lesser than' operations/operators, you need to nest the scripting inside of the 'cdata' code tag blocks, as this tells quest to see these symbols (<, >) as 'greater/lesser than' operations/operators/symbols, otherwise it'll see them as the tag symbols, and thus see your code as royally messed up, prompting you with error messages.\r\n\r\n```\r\n// ERROR:\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_script_attribute\" type=\"script\">\r\n    msg (\"Pick a number (1 to 10)\")\r\n    get input {\r\n      if (IsInt (result)) {\r\n        input_integer_variable = ToInt (result)\r\n        if (input_integer_variable > 0 and input_integer_variable < 11) { // or: if (input_integer_variable >= 1 and input_integer_variable <= 10) {\r\n          msg (input_integer_variable)\r\n        } else {\r\n          msg (\"wrong input, try again\")\r\n          do (example_object, \"example_script_attribute\")\r\n        }\r\n      } else {\r\n        msg (\"wrong input, try again\")\r\n        do (example_object, \"example_script_attribute\")\r\n      }\r\n    }\r\n  </attr>\r\n</object>\r\n\r\n// NO error:\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_script_attribute\" type=\"script\">\r\n    <![CDATA[\r\n      msg (\"Pick a number (1 to 10)\")\r\n      get input {\r\n        if (IsInt (result)) {\r\n          input_integer_variable = ToInt (result)\r\n          if (input_integer_variable > 0 and input_integer_variable < 11) { // or: if (input_integer_variable >= 1 and input_integer_variable <= 10) {\r\n            msg (input_integer_variable)\r\n          } else {\r\n            msg (\"wrong input, try again\")\r\n            do (example_object, \"example_script_attribute\")\r\n          }\r\n        } else {\r\n          msg (\"wrong input, try again\")\r\n          do (example_object, \"example_script_attribute\")\r\n        }\r\n      }\r\n    ]]>\r\n  </attr>\r\n</object>\r\n```\r\n\r\n---------------------\r\n\r\nyou can NOT use the 'while' Script/Function for looping if you're getting/using user input ('get input', Commands, 'show menu / ShowMenu', 'ask/Ask', etc?). You have to re-call ('do' or 'invoke') the script/function for looping (often as, and otherwise known as, 'tail recursion'). see above code example\r\n\r\n--------------------------\r\n\r\nalso, for doing 'greater/less than or equal to', the equal sign is on the RIGHT side and the greater/lesser-than is on the LEFT side (and NO space/white-space between them):\r\n\r\n```\r\nERROR:\r\n\r\nif (VARIABLE =< VALUE_OR_EXPRESSION) { /* scripting */ }\r\nif (VARIABLE => VALUE_OR_EXPRESSION) { /* scripting */ }\r\n\r\nNO error:\r\n\r\nif (VARIABLE <= VALUE_OR_EXPRESSION) { /* scripting */ }\r\nif (VARIABLE >= VALUE_OR_EXPRESSION) { /* scripting */ }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>here's some of the quest doc stuff (what quest has already built-in for you to use):</p>\n<p>there's these scripts/functions for checking/converting/getting/etc various data/value/attribute/variable types:</p>\n<p>'IsXXX (xxx)'<br>\n'ToXXX (xxx)'<br>\n'HasXXX (xxx)'<br>\n'GetXXX (xxx)'<br>\n'TypeOf (xxx)'<br>\n'DoesInherit (xxx)'</p>\n<p>http://docs.textadventures.co.uk/quest/ (main page, look/search/navigate around, and/or ask for help if you can't find something or need something and/or syntax explained)</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/<br>\nhttp://docs.textadventures.co.uk/quest/functions/ (categorical order)<br>\nhttp://docs.textadventures.co.uk/quest/functions/index_allfunctions.html (alphabetical order)</p>\n<p>http://docs.textadventures.co.uk/quest/types/ (Data/Attribute/Variable/Value Types)</p>\n<p>http://docs.textadventures.co.uk/quest/elements/ (quest's OOP/OOD 'OBJECTS' in the underlying quest code are called/known-as 'Elements' at its user-level, not to be confused with the 'Object' sub-Element, one of many types/sub-types, along with Exits/Functions/Verbs/Commands/Object_Types/Turnscripts/Timers/Etc, of quest's OOP/OOD 'OBJECTS')</p>\n<p>when you click on the 'Object' Element in the link above, you get to see all of its built-in Attributes (or just click on this link, lol): http://docs.textadventures.co.uk/quest/elements/object.html</p>\n<hr>\n<p>if you work in-code directly, for using 'greater/lesser than' operations/operators, you need to nest the scripting inside of the 'cdata' code tag blocks, as this tells quest to see these symbols (&lt;, &gt;) as 'greater/lesser than' operations/operators/symbols, otherwise it'll see them as the tag symbols, and thus see your code as royally messed up, prompting you with error messages.</p>\n<pre><code>// ERROR:\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_script_attribute\" type=\"script\"&gt;\n    msg (\"Pick a number (1 to 10)\")\n    get input {\n      if (IsInt (result)) {\n        input_integer_variable = ToInt (result)\n        if (input_integer_variable &gt; 0 and input_integer_variable &lt; 11) { // or: if (input_integer_variable &gt;= 1 and input_integer_variable &lt;= 10) {\n          msg (input_integer_variable)\n        } else {\n          msg (\"wrong input, try again\")\n          do (example_object, \"example_script_attribute\")\n        }\n      } else {\n        msg (\"wrong input, try again\")\n        do (example_object, \"example_script_attribute\")\n      }\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n// NO error:\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_script_attribute\" type=\"script\"&gt;\n    &lt;![CDATA[\n      msg (\"Pick a number (1 to 10)\")\n      get input {\n        if (IsInt (result)) {\n          input_integer_variable = ToInt (result)\n          if (input_integer_variable &gt; 0 and input_integer_variable &lt; 11) { // or: if (input_integer_variable &gt;= 1 and input_integer_variable &lt;= 10) {\n            msg (input_integer_variable)\n          } else {\n            msg (\"wrong input, try again\")\n            do (example_object, \"example_script_attribute\")\n          }\n        } else {\n          msg (\"wrong input, try again\")\n          do (example_object, \"example_script_attribute\")\n        }\n      }\n    ]]&gt;\n  &lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>you can NOT use the 'while' Script/Function for looping if you're getting/using user input ('get input', Commands, 'show menu / ShowMenu', 'ask/Ask', etc?). You have to re-call ('do' or 'invoke') the script/function for looping (often as, and otherwise known as, 'tail recursion'). see above code example</p>\n<hr>\n<p>also, for doing 'greater/less than or equal to', the equal sign is on the RIGHT side and the greater/lesser-than is on the LEFT side (and NO space/white-space between them):</p>\n<pre><code>ERROR:\n\nif (VARIABLE =&lt; VALUE_OR_EXPRESSION) { /* scripting */ }\nif (VARIABLE =&gt; VALUE_OR_EXPRESSION) { /* scripting */ }\n\nNO error:\n\nif (VARIABLE &lt;= VALUE_OR_EXPRESSION) { /* scripting */ }\nif (VARIABLE &gt;= VALUE_OR_EXPRESSION) { /* scripting */ }\n</code></pre>\n\n",
      "PostDate": "2017-12-11T19:31:20.3203471Z",
      "LastEditDate": "2017-12-11T19:51:27.1496471Z",
      "link": null
    }
  ]
}
