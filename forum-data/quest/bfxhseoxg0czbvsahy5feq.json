{
  "Topic": {
    "TopicId": "bfxhseoxg0czbvsahy5feq",
    "ForumId": "10",
    "Title": "Expanding the 'Popup' text processor function.",
    "LastUpdated": "2020-07-11T13:24:18.6002994Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c0228eb2-174b-46e9-8694-cf5bedbcaafe",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "EDIT; TURNS OUT IT WAS USER ERROR, THIS ALREADY WORKS. \r\n\r\nHi there! The Popup function added semi-recently is a neat little addition to the Text Processor's capabilities, an obvious application of it being to include information that, while not strictly relevant to a scene at hand, may be of interest to the player. Highlight a relevant word -- say, the name of a faction, or an item -- and when the player clicks on it, they get a popup window of the extended text, which they can close with a click.\r\n\r\n```\r\n{popup:text:long text} Displays a link, with the first text (which cannot have text processor directives nested in it). When the player clicks on the link, a pop-up will be displayed, containing the long text. The pop-up will disappear when the long text is clicked on. This can be used with the img command to have an image pop-up.\r\n```\r\n\r\nThe issue I've run into, however, is that lack of ability to have further text processor directives nested within it. It's most obvious application runs into an immediate wall when faced with subjects the player will gain more in-game knowledge on throughout playing, which is why I sought to simply replace the 'long text' part with a string; say, something like {Codex.(name)}, which could be updated when the player made relevant progress. At the moment, printing variables in popups isn't possible -- they simply don't show up, not even as raw text.\r\n\r\nI don't suppose anyone has an ideas on how to change this, if it's even possible with the current implementation? My original idea is still... possible, yes, but it would require that every single instance of a codex word would need a nested set of If checks after it, each filled with a variation of the codex passage, which would clog up things massively on the editor side and be far more hassle than it'd be worth. \r\n\r\nIn case I'm not being clear, here's how it works now;\r\n\r\n```\r\n{popup:Firearm:Firearms aren't as common these days, though an escalating arms situation before The End has resulted in several surviving caches being discovered and distributed today. A lack of ammunition, coupled with people's tendency to regenerate, has rendered them unpopular as anything more than clubs.}\r\n```\r\n\r\nWhereas what I'd like to extend it to is;\r\n\r\n```\r\n{popup:Firearm:{Codex.Firearm}}\r\n```\r\nWherein {Codex.Firearm} is a string I can edit whenever and wherever, automatically tied into every instance of the Firearm popup so I can edit them all at once on the fly.",
      "EditableFormat": "markdown",
      "HTML": "<p>EDIT; TURNS OUT IT WAS USER ERROR, THIS ALREADY WORKS.</p>\n<p>Hi there! The Popup function added semi-recently is a neat little addition to the Text Processor's capabilities, an obvious application of it being to include information that, while not strictly relevant to a scene at hand, may be of interest to the player. Highlight a relevant word -- say, the name of a faction, or an item -- and when the player clicks on it, they get a popup window of the extended text, which they can close with a click.</p>\n<pre><code>{popup:text:long text} Displays a link, with the first text (which cannot have text processor directives nested in it). When the player clicks on the link, a pop-up will be displayed, containing the long text. The pop-up will disappear when the long text is clicked on. This can be used with the img command to have an image pop-up.\n</code></pre>\n<p>The issue I've run into, however, is that lack of ability to have further text processor directives nested within it. It's most obvious application runs into an immediate wall when faced with subjects the player will gain more in-game knowledge on throughout playing, which is why I sought to simply replace the 'long text' part with a string; say, something like {Codex.(name)}, which could be updated when the player made relevant progress. At the moment, printing variables in popups isn't possible -- they simply don't show up, not even as raw text.</p>\n<p>I don't suppose anyone has an ideas on how to change this, if it's even possible with the current implementation? My original idea is still... possible, yes, but it would require that every single instance of a codex word would need a nested set of If checks after it, each filled with a variation of the codex passage, which would clog up things massively on the editor side and be far more hassle than it'd be worth.</p>\n<p>In case I'm not being clear, here's how it works now;</p>\n<pre><code>{popup:Firearm:Firearms aren't as common these days, though an escalating arms situation before The End has resulted in several surviving caches being discovered and distributed today. A lack of ammunition, coupled with people's tendency to regenerate, has rendered them unpopular as anything more than clubs.}\n</code></pre>\n<p>Whereas what I'd like to extend it to is;</p>\n<pre><code>{popup:Firearm:{Codex.Firearm}}\n</code></pre>\n<p>Wherein {Codex.Firearm} is a string I can edit whenever and wherever, automatically tied into every instance of the Firearm popup so I can edit them all at once on the fly.</p>\n\n",
      "PostDate": "2020-07-11T13:24:18.6002994Z",
      "LastEditDate": "2020-07-11T14:10:58.6152824Z",
      "link": null
    },
    {
      "PostId": "fd1274b9-9eef-4cc5-8e4e-c3e035deadb2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's odd; I'm looking at the code now, and I can't see any reason why `{popup:Firearm:{Codex.Firearm}}` wouldn't work.\r\n\r\nDoes it just display the command literally, or is there an error?\r\n\r\nEDIT: Just tested it in one of my games, and it works fine. Can you provide a little more detail to help debug this? Maybe a sample game showing the problem?",
      "EditableFormat": "markdown",
      "HTML": "<p>That's odd; I'm looking at the code now, and I can't see any reason why <code>{popup:Firearm:{Codex.Firearm}}</code> wouldn't work.</p>\n<p>Does it just display the command literally, or is there an error?</p>\n<p>EDIT: Just tested it in one of my games, and it works fine. Can you provide a little more detail to help debug this? Maybe a sample game showing the problem?</p>\n\n",
      "PostDate": "2020-07-11T13:52:06.9792145Z",
      "LastEditDate": "2020-07-11T13:55:24.6059518Z",
      "link": null
    },
    {
      "PostId": "845e112e-f426-4900-a072-2bb7408baf52",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was going to say that the documentation only says you can't have text processor directives in the link text, and suggest how to fix that. But looking at the code, it looks to me like it should work fine.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was going to say that the documentation only says you can't have text processor directives in the link text, and suggest how to fix that. But looking at the code, it looks to me like it should work fine.</p>\n\n",
      "PostDate": "2020-07-11T14:05:10.760761Z",
      "LastEditDate": "2020-07-11T14:07:10.9497515Z",
      "link": null
    },
    {
      "PostId": "972c768d-edb5-4cdd-a04b-b9a9917db9f9",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "-- OK SO UPDATE\r\n\r\nThis already works, I'm a big dummy who misread their own processing and placed the variable I wanted printed outside of the popup function and just didn't notice.\r\n\r\n*However*, don't delete the topic, because that modification Angel posted might come in handy.\r\n\r\nEDIT EDIT; OK THAT CODE ISN'T EVEN NEEDED APPARENTLY JUST DELETE THIS TRAINWRECK OF A POST",
      "EditableFormat": "markdown",
      "HTML": "<p>-- OK SO UPDATE</p>\n<p>This already works, I'm a big dummy who misread their own processing and placed the variable I wanted printed outside of the popup function and just didn't notice.</p>\n<p><em>However</em>, don't delete the topic, because that modification Angel posted might come in handy.</p>\n<p>EDIT EDIT; OK THAT CODE ISN'T EVEN NEEDED APPARENTLY JUST DELETE THIS TRAINWRECK OF A POST</p>\n\n",
      "PostDate": "2020-07-11T14:07:44.3588142Z",
      "LastEditDate": "2020-07-11T14:10:47.8528517Z",
      "link": null
    },
    {
      "PostId": "edc9db6c-0124-4fe9-94b8-12b667d57b0a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ahâ€¦ I made 2 silly mistakes.\r\n\r\nHere's the function modified *again*, so that you can use text processor directives in the link text as well.\r\n(Note that as it exists now, you could have `{popup:{someobject.name}:{someobject.explanation}}` and that will work fine. The limitation was actually that you can't have *colons* in the link text.\r\n\r\nTo fix that, change `Split` to `Tsplit` in this function:\r\n\r\n<pre><code>  &lt;function name=\"ProcessTextCommand_Popup\" parameters=\"section, data\" type=\"string\">&lt;![CDATA[\r\n    section = Mid(section, 7)\r\n    ary = <b>Tsplit(section)</b>\r\n    s1 = StringListItem(ary, 0)\r\n    list remove(ary, s1)\r\n    s2 = Join (ary, \":\")\r\n    id = JSSafe(s1) + GetRandomInt(0, 999999999)\r\n    link = game.defaultlinkforeground\r\n    if (HasString(game, \"altlinkforeground\")) link = game.altlinkforeground\r\n    s = \"&lt;span  style=\\\"cursor:pointer;color:\" + link + \";\\\" onclick=\\\"$('#\" + id + \"').css('display', 'block');\\\">\" + s1 + \"&lt;/span>&lt;div id=\\\"\" + id + \"\\\" class=\\\"w3-theme-border\\\" style=\\\"position:fixed;z-index:9999;display:none;cursor:pointer;left:50px;top:40%;width:40%;background-color:\" + game.defaultbackground + \";border:2px solid \" + game.defaultforeground + \";color:\" + link + \";border-radius:5px;padding:5px;\\\" onclick=\\\"$('#\" + id + \"').css('display', 'none');\\\">&lt;p>\"\r\n    s = s + s2 + \"&lt;/p>&lt;/div>\"\r\n    return(ProcessTextSection(s, data))\r\n  ]]>&lt;/function></code></pre>",
      "EditableFormat": "markdown",
      "HTML": "<p>Ahâ€¦ I made 2 silly mistakes.</p>\n<p>Here's the function modified <em>again</em>, so that you can use text processor directives in the link text as well.<br>\n(Note that as it exists now, you could have <code>{popup:{someobject.name}:{someobject.explanation}}</code> and that will work fine. The limitation was actually that you can't have <em>colons</em> in the link text.</p>\n<p>To fix that, change <code>Split</code> to <code>Tsplit</code> in this function:</p>\n<pre><code>  &lt;function name=\"ProcessTextCommand_Popup\" parameters=\"section, data\" type=\"string\"&gt;&lt;![CDATA[\n    section = Mid(section, 7)\n    ary = <b>Tsplit(section)</b>\n    s1 = StringListItem(ary, 0)\n    list remove(ary, s1)\n    s2 = Join (ary, \":\")\n    id = JSSafe(s1) + GetRandomInt(0, 999999999)\n    link = game.defaultlinkforeground\n    if (HasString(game, \"altlinkforeground\")) link = game.altlinkforeground\n    s = \"&lt;span  style=\\\"cursor:pointer;color:\" + link + \";\\\" onclick=\\\"$('#\" + id + \"').css('display', 'block');\\\"&gt;\" + s1 + \"&lt;/span&gt;&lt;div id=\\\"\" + id + \"\\\" class=\\\"w3-theme-border\\\" style=\\\"position:fixed;z-index:9999;display:none;cursor:pointer;left:50px;top:40%;width:40%;background-color:\" + game.defaultbackground + \";border:2px solid \" + game.defaultforeground + \";color:\" + link + \";border-radius:5px;padding:5px;\\\" onclick=\\\"$('#\" + id + \"').css('display', 'none');\\\"&gt;&lt;p&gt;\"\n    s = s + s2 + \"&lt;/p&gt;&lt;/div&gt;\"\n    return(ProcessTextSection(s, data))\n  ]]&gt;&lt;/function&gt;</code></pre>\n\n",
      "PostDate": "2020-07-11T14:12:38.3367577Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
