{
  "Topic": {
    "TopicId": "iv-d7lrbbu_g_w4dy_xwua",
    "ForumId": "10",
    "Title": "Navigating in the description",
    "LastUpdated": "2021-08-14T19:27:13.5055941Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0be41a1b-3f53-4cfa-bde6-1d6801449377",
      "UserId": 556351,
      "Username": "Matty2theMax",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Total newbie here so please forgive me if this is something obvious, it probably is because I've searched the forum and no one else seems to have had to ask. \r\n\r\nI really want to include some navigation within my description so something like: \r\n\r\n\"The stairs will lead you down to the BASEMENT\" \r\nThat way the player can click on BASEMENT within the description rather than relying on using the Places and Objects section or the Compass. \r\n\r\nI know how to add objects into expressions: {\"Move the \" + ObjectLink(boxes) + \".\"} and I know exits and rooms are essentially just  objects but no matter how I phrase it it just comes up with an error message. \r\nOr it might require a simple line of code, either way, surely someone must know.\r\n\r\nAny advice would be really, really appreciated. \r\n\r\nMatty.  ",
      "EditableFormat": "markdown",
      "HTML": "<p>Total newbie here so please forgive me if this is something obvious, it probably is because I've searched the forum and no one else seems to have had to ask.</p>\n<p>I really want to include some navigation within my description so something like:</p>\n<p>\"The stairs will lead you down to the BASEMENT\"<br>\nThat way the player can click on BASEMENT within the description rather than relying on using the Places and Objects section or the Compass.</p>\n<p>I know how to add objects into expressions: {\"Move the \" + ObjectLink(boxes) + \".\"} and I know exits and rooms are essentially just  objects but no matter how I phrase it it just comes up with an error message.<br>\nOr it might require a simple line of code, either way, surely someone must know.</p>\n<p>Any advice would be really, really appreciated.</p>\n<p>Matty.</p>\n\n",
      "PostDate": "2021-08-14T19:27:13.5055941Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2a0c39ef-5d3d-4e60-b523-bb0db1ec5040",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/HiZKEtPb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Make an object, IE. \"hole\" in the room.\r\nAdd a description like:\r\nThere is a {object:hole} here.\r\non the object, on the verbs tab, add IE: \"crawl\".\r\nfor the value, change to \"Run script\":\r\nMoveObject (player, dining room)\r\nThis will move the player to the room \"dining room\", or where ever the other end of the hole goes to.\r\nthen test to make sure it works.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Make an object, IE. \"hole\" in the room.<br>\nAdd a description like:<br>\nThere is a {object:hole} here.<br>\non the object, on the verbs tab, add IE: \"crawl\".<br>\nfor the value, change to \"Run script\":<br>\nMoveObject (player, dining room)<br>\nThis will move the player to the room \"dining room\", or where ever the other end of the hole goes to.<br>\nthen test to make sure it works.</p>\n\n",
      "PostDate": "2021-08-15T00:28:49.0717003Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "62a36675-4d59-4bd3-bf1a-f4fb6ae4b10d",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/HiZKEtPb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a game: https://textadventures.co.uk/games/view/ytxcboq5uug1zlu4q6sbvw/the-house-on-the-hill where the exits are first: north, south, east and west, then, after you go through, the exit, both ways,  changes to the connecting room.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a game: https://textadventures.co.uk/games/view/ytxcboq5uug1zlu4q6sbvw/the-house-on-the-hill where the exits are first: north, south, east and west, then, after you go through, the exit, both ways,  changes to the connecting room.</p>\n\n",
      "PostDate": "2021-08-15T00:32:24.7723853Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b1a1c89f-bb21-4b85-aad8-473347bc46bf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You might be a little confused because of Quest's terminology.\r\n\r\n> I know exits and rooms are essentially just objects\r\n\r\nNot quite true. Rooms are objects, but exits are not. Objects, exits, turnscripts, and commands are the 4 different types of *elements*. Although a lot of times, the documentation says \"object\" when it means \"element\". For example, an objectlist is a list of elements, and the function `GetObject` can be used to get any kind of element.\r\n\r\nIn any case… within a string, you can use the text processor to create links.\r\n\r\n* `{object:bucket}` will create a link to an object, which displays a list of verbs when clicked.\r\n* `{exit:exit126}` will create a link to an exit, which will go in that direction when clicked.\r\n\r\nIf there is an object named `bucket` then the expression `ObjectLink (bucket)` just generates the string `\"{object:bucket}\"`… so\r\n```\r\nmsg {\"Move the \" + ObjectLink(boxes) + \".\"}\r\n```\r\nis exactly the same as (but marginally slower than):\r\n```\r\nmsg {\"Move the {object:boxes}.\"}\r\n```\r\n\r\nIn general, the only real reason to use `ObjectLink` is if you have the object in a variable (because `{object:` only works with the name of an object).\r\n\r\nNote that for both `{object:` and `{exit:`, you need to give the *name* of the object or exit. In most cases you don't know the name of an exit; Quest gives them names like `exit1`, `exit2`, `exit3`, and so on, and doesn't display them in the editor. So if you want to create a manual exit link, you will need to give it a name.\r\n\r\nThe other alternative is to use the functions `GetExitByName` and `GetExitByLink` - which are horribly misnamed, because they get the *name* of an exit, not the actual exit, and because `GetExitByName` looks up an exit by alias, not by name.\r\n\r\nHere's some examples:\r\n```\r\nmsg (\"A big door leads {exit:\" + GetExitByLink (lounge, kitchen) +\"} to the kitchen.\")\r\n```\r\nn this case, `GetExitByLink (lounge, kitchen)` gets the name of the exit leading from the lounge to the kitchen. This will generate a string like ``A big door leads {exit:exit23} to the kitchen.``, which will then be displayed to the player as something like:\r\n> A big door leads <u style=\"color: blue\">north</u> to the kitchen.\r\n\r\nusing the alias of exit23.\r\n\r\nSimilarly, you can use `GetExitByName`, in which case the expression would look like `\"A path leads {exit:\" + GetExitByName (garden, \"north\") + \"}.\"`\r\nThis finds an exit heading north from the garden. I think you have to use the exit's alias (so `north` or `northeast`, but not `n` or `ne`). But I have never actually tested this, so I don't know if it might work.\r\n\r\nAlternatively, you might want to use a command link. For example:\r\n```\r\nmsg (\"It might be a good idea to {command:go north} from here.\")\r\n```\r\nThis isn't an object or an exit, it's just a piece of text. It doesn't check if the exit is accessible. When the player clicks on the command, it will type \"go north\" in the command bar and hit enter, exactly as if the player typed it directly.\r\n\r\nIn all of these, you can add a second part to the directive. For example: `{object:name of object:some other description}`. In this case, the link will act as if the player clicked on the object `name of object` (and the link will disappear if they can't see that object), but the text shown on the link will be `some other description` instead of the object's name or alias.\r\n\r\nHope that all makes sense to you.",
      "EditableFormat": "markdown",
      "HTML": "<p>You might be a little confused because of Quest's terminology.</p>\n<blockquote>\n<p>I know exits and rooms are essentially just objects</p>\n</blockquote>\n<p>Not quite true. Rooms are objects, but exits are not. Objects, exits, turnscripts, and commands are the 4 different types of <em>elements</em>. Although a lot of times, the documentation says \"object\" when it means \"element\". For example, an objectlist is a list of elements, and the function <code>GetObject</code> can be used to get any kind of element.</p>\n<p>In any case… within a string, you can use the text processor to create links.</p>\n<ul>\n<li><code>{object:bucket}</code> will create a link to an object, which displays a list of verbs when clicked.</li>\n<li><code>{exit:exit126}</code> will create a link to an exit, which will go in that direction when clicked.</li>\n</ul>\n<p>If there is an object named <code>bucket</code> then the expression <code>ObjectLink (bucket)</code> just generates the string <code>\"{object:bucket}\"</code>… so</p>\n<pre><code>msg {\"Move the \" + ObjectLink(boxes) + \".\"}\n</code></pre>\n<p>is exactly the same as (but marginally slower than):</p>\n<pre><code>msg {\"Move the {object:boxes}.\"}\n</code></pre>\n<p>In general, the only real reason to use <code>ObjectLink</code> is if you have the object in a variable (because <code>{object:</code> only works with the name of an object).</p>\n<p>Note that for both <code>{object:</code> and <code>{exit:</code>, you need to give the <em>name</em> of the object or exit. In most cases you don't know the name of an exit; Quest gives them names like <code>exit1</code>, <code>exit2</code>, <code>exit3</code>, and so on, and doesn't display them in the editor. So if you want to create a manual exit link, you will need to give it a name.</p>\n<p>The other alternative is to use the functions <code>GetExitByName</code> and <code>GetExitByLink</code> - which are horribly misnamed, because they get the <em>name</em> of an exit, not the actual exit, and because <code>GetExitByName</code> looks up an exit by alias, not by name.</p>\n<p>Here's some examples:</p>\n<pre><code>msg (\"A big door leads {exit:\" + GetExitByLink (lounge, kitchen) +\"} to the kitchen.\")\n</code></pre>\n<p>n this case, <code>GetExitByLink (lounge, kitchen)</code> gets the name of the exit leading from the lounge to the kitchen. This will generate a string like <code>A big door leads {exit:exit23} to the kitchen.</code>, which will then be displayed to the player as something like:</p>\n<blockquote>\n<p>A big door leads <u style=\"color: blue\">north</u> to the kitchen.</p>\n</blockquote>\n<p>using the alias of exit23.</p>\n<p>Similarly, you can use <code>GetExitByName</code>, in which case the expression would look like <code>\"A path leads {exit:\" + GetExitByName (garden, \"north\") + \"}.\"</code><br>\nThis finds an exit heading north from the garden. I think you have to use the exit's alias (so <code>north</code> or <code>northeast</code>, but not <code>n</code> or <code>ne</code>). But I have never actually tested this, so I don't know if it might work.</p>\n<p>Alternatively, you might want to use a command link. For example:</p>\n<pre><code>msg (\"It might be a good idea to {command:go north} from here.\")\n</code></pre>\n<p>This isn't an object or an exit, it's just a piece of text. It doesn't check if the exit is accessible. When the player clicks on the command, it will type \"go north\" in the command bar and hit enter, exactly as if the player typed it directly.</p>\n<p>In all of these, you can add a second part to the directive. For example: <code>{object:name of object:some other description}</code>. In this case, the link will act as if the player clicked on the object <code>name of object</code> (and the link will disappear if they can't see that object), but the text shown on the link will be <code>some other description</code> instead of the object's name or alias.</p>\n<p>Hope that all makes sense to you.</p>\n\n",
      "PostDate": "2021-08-15T00:57:12.451461Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dc1cc73b-94fb-4f4a-9d9b-501d38c4f1a6",
      "UserId": 556351,
      "Username": "Matty2theMax",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you MrAngel - that was exactly what I needed. I've got to be honest I tried to learn the basics from watching YouTube tutorials but there is a distinct lack of content for Quest and those that are there seem to have taught me the more complicated way round of doing things. I might have to create my own set of video tutorials when I've finished up my game and share what I've learned. Your {command: go north} was just the thing for my game; really simple and effective. \r\n\r\nAlso, thanks DarkLizerd for your suggestion I will definitely use your suggestion elsewhere in the game.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you MrAngel - that was exactly what I needed. I've got to be honest I tried to learn the basics from watching YouTube tutorials but there is a distinct lack of content for Quest and those that are there seem to have taught me the more complicated way round of doing things. I might have to create my own set of video tutorials when I've finished up my game and share what I've learned. Your {command: go north} was just the thing for my game; really simple and effective.</p>\n<p>Also, thanks DarkLizerd for your suggestion I will definitely use your suggestion elsewhere in the game.</p>\n\n",
      "PostDate": "2021-08-15T07:27:30.5660026Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
