{
  "Topic": {
    "TopicId": "gfhg-wi8mkcom5p6m4wr7g",
    "ForumId": "10",
    "Title": "Removing One Object during a foreach loop",
    "LastUpdated": "2021-02-01T23:04:56.624565Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c8bd25e8-e9f6-48a7-8127-57c9011e47f8",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, so I am trying to allow my player to use a rope to descend downward in various places, and I will be cloning ropes, so I needed a way to check if the player has a rope, and then use only one each time they descend.  I set up a variable on the player object called \"hasrope\". Each time the player takes a rope, I call the script ```game.pov.hasrope = game.pov.hasrope + 1```. The code I am in the process of creating for this functionality is as follows.\r\n```\r\nif (game.pov.hasrope >= 1) {\r\n  MoveObject (player, WellCave1)\r\n  game.pov.hasrope = game.pov.hasrope - 1\r\n  if (game.pov.hasrope = 0)\r\n    foreach (item, ScopeReachableInventory()) {\r\n      if (StartsWith (item.name, \"rope\")) {\r\n        RemoveObject (item)\r\n      }\r\n    }  \r\n  else if (game.pov.hasrope >= 1) {\r\n    foreach (item, ScopeReachableInventory()) {\r\n      if (StartsWith (item.name, \"rope\")) {\r\n        \r\n      }\r\n    }\r\n  }\r\n}\r\nelse {\r\n  msg (\"You'll need a rope to climb down into the well.\")\r\n}\r\n```\r\nThe first if statement checks if the player has a rope. The script then subtracts one from the \"hasrope\" total, then checks to see if it's 0. If so, I know the player only has one rope, and it will go through the inventory and delete anything that starts with \"rope\".  The trouble comes in when a player starts with more than one rope. The else if statement will fire if the player started with 2 or more ropes. At this point, I'd like it go through the inventory and remove just one rope, but I'm not entirely sure how to do that. Perhaps there's a different way to go about this where I don't need the \"hasrope\" attribute. Maybe I could just check for ropes in my inventory to trigger my movement script and then remove the object from the inventory somehow, but I'm not sure how I would achieve this either.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, so I am trying to allow my player to use a rope to descend downward in various places, and I will be cloning ropes, so I needed a way to check if the player has a rope, and then use only one each time they descend.  I set up a variable on the player object called \"hasrope\". Each time the player takes a rope, I call the script <code>game.pov.hasrope = game.pov.hasrope + 1</code>. The code I am in the process of creating for this functionality is as follows.</p>\n<pre><code>if (game.pov.hasrope &gt;= 1) {\n  MoveObject (player, WellCave1)\n  game.pov.hasrope = game.pov.hasrope - 1\n  if (game.pov.hasrope = 0)\n    foreach (item, ScopeReachableInventory()) {\n      if (StartsWith (item.name, \"rope\")) {\n        RemoveObject (item)\n      }\n    }  \n  else if (game.pov.hasrope &gt;= 1) {\n    foreach (item, ScopeReachableInventory()) {\n      if (StartsWith (item.name, \"rope\")) {\n        \n      }\n    }\n  }\n}\nelse {\n  msg (\"You'll need a rope to climb down into the well.\")\n}\n</code></pre>\n<p>The first if statement checks if the player has a rope. The script then subtracts one from the \"hasrope\" total, then checks to see if it's 0. If so, I know the player only has one rope, and it will go through the inventory and delete anything that starts with \"rope\".  The trouble comes in when a player starts with more than one rope. The else if statement will fire if the player started with 2 or more ropes. At this point, I'd like it go through the inventory and remove just one rope, but I'm not entirely sure how to do that. Perhaps there's a different way to go about this where I don't need the \"hasrope\" attribute. Maybe I could just check for ropes in my inventory to trigger my movement script and then remove the object from the inventory somehow, but I'm not sure how I would achieve this either.</p>\n\n",
      "PostDate": "2021-02-01T23:04:56.624565Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fbb9cb8c-47d6-4d3a-aaf5-11e7a02b8dab",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You're using `StartsWith (item.name, \"rope\")` to find an object called `rope` and its clones?\r\n\r\nIf you're cloning it using the core functions (`CloneObject`, `CloneObjectAndMove`, etc), then you could do `PickOneObject (FilterByAttribute (ScopeReachableInventory(), \"prototype\", rope))` to pick a random rope from the player's inventory.\r\n\r\nOtherwise, you probably want to use a boolean attribute to track if you already found one. For example:\r\n```\r\n    found = false\r\n    foreach (item, ScopeReachableInventory()) {\r\n      if (not found) {\r\n        if (StartsWith (item.name, \"rope\")) {\r\n          RemoveObject  (item)\r\n          found = true\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\nI'm wondering when you increase the `hasrope` total. If you increase it when the player finds a rope, then they could put the rope in a closed container and then keep on reusing it; it wouldn't be removed because it isn't in the reachable inventory. If possible, it makes more sense to actually check if there is a rope there, rather than keeping a separate count. So your function would be:\r\n```\r\nropes = FilterByAttribute (ScopeReachableInventory(), \"prototype\", rope)\r\nif (ListCount (ropes) >= 1) {\r\n  RemoveObject (PickOneItem (ropes))\r\n  MoveObject (player, WellCave1)\r\n}\r\nelse {\r\n  msg (\"You'll need a rope to climb down into the well.\")\r\n}\r\n```\r\nIf your ropes aren't all clones of an original `rope` object, you could modify that to use some other attribute to identify ropes.",
      "EditableFormat": "markdown",
      "HTML": "<p>You're using <code>StartsWith (item.name, \"rope\")</code> to find an object called <code>rope</code> and its clones?</p>\n<p>If you're cloning it using the core functions (<code>CloneObject</code>, <code>CloneObjectAndMove</code>, etc), then you could do <code>PickOneObject (FilterByAttribute (ScopeReachableInventory(), \"prototype\", rope))</code> to pick a random rope from the player's inventory.</p>\n<p>Otherwise, you probably want to use a boolean attribute to track if you already found one. For example:</p>\n<pre><code>    found = false\n    foreach (item, ScopeReachableInventory()) {\n      if (not found) {\n        if (StartsWith (item.name, \"rope\")) {\n          RemoveObject  (item)\n          found = true\n        }\n      }\n    }\n</code></pre>\n<p>I'm wondering when you increase the <code>hasrope</code> total. If you increase it when the player finds a rope, then they could put the rope in a closed container and then keep on reusing it; it wouldn't be removed because it isn't in the reachable inventory. If possible, it makes more sense to actually check if there is a rope there, rather than keeping a separate count. So your function would be:</p>\n<pre><code>ropes = FilterByAttribute (ScopeReachableInventory(), \"prototype\", rope)\nif (ListCount (ropes) &gt;= 1) {\n  RemoveObject (PickOneItem (ropes))\n  MoveObject (player, WellCave1)\n}\nelse {\n  msg (\"You'll need a rope to climb down into the well.\")\n}\n</code></pre>\n<p>If your ropes aren't all clones of an original <code>rope</code> object, you could modify that to use some other attribute to identify ropes.</p>\n\n",
      "PostDate": "2021-02-02T01:02:55.9453125Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d8c058e-dcb7-44de-80f8-df658d6c1ff7",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is perfect! Thank you so much again. Much more simple than the way I was trying to go about it. The ```hasrope``` attribute worked great when my game only contained one rope and one place to use it, but now that things are growing, I've had to reconsider many of the systems I had in place. I did have to tweak that script a bit. I used the alias instead of the prototype name as some of the objects are clones when bought from a store, but others are strategically placed in the world. I also had to change ```PickOneItem``` to ```PickOneObject``` as I don't think Quest recognizes the item version. Here's the full script for anyone that might find it useful:\r\n\r\n```\r\nropes = FilterByAttribute (ScopeReachableInventory (), \"alias\", \"rope\")\r\nmsg (ropes)\r\nif (ListCount (ropes) >= 1) {\r\n  MoveObject (player, WellCave1)\r\n  RemoveObject (PickOneObject (ropes))\r\n}\r\nelse {\r\n  msg (\"You'll need a rope to climb down into the well.\")\r\n}\r\n```\r\n\r\nI also wanted to take a moment to let you know that your help has been invaluable. I saw in a forum post quite a while back that you had written and are selling some books, but I can't seem to find that post again. If you wouldn't mind posting a link to your work, I'd love to support you somehow.",
      "EditableFormat": "markdown",
      "HTML": "<p>This is perfect! Thank you so much again. Much more simple than the way I was trying to go about it. The <code>hasrope</code> attribute worked great when my game only contained one rope and one place to use it, but now that things are growing, I've had to reconsider many of the systems I had in place. I did have to tweak that script a bit. I used the alias instead of the prototype name as some of the objects are clones when bought from a store, but others are strategically placed in the world. I also had to change <code>PickOneItem</code> to <code>PickOneObject</code> as I don't think Quest recognizes the item version. Here's the full script for anyone that might find it useful:</p>\n<pre><code>ropes = FilterByAttribute (ScopeReachableInventory (), \"alias\", \"rope\")\nmsg (ropes)\nif (ListCount (ropes) &gt;= 1) {\n  MoveObject (player, WellCave1)\n  RemoveObject (PickOneObject (ropes))\n}\nelse {\n  msg (\"You'll need a rope to climb down into the well.\")\n}\n</code></pre>\n<p>I also wanted to take a moment to let you know that your help has been invaluable. I saw in a forum post quite a while back that you had written and are selling some books, but I can't seem to find that post again. If you wouldn't mind posting a link to your work, I'd love to support you somehow.</p>\n\n",
      "PostDate": "2021-02-04T16:25:34.6943542Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "15a0b408-5cfb-4b64-a650-3b263cd0b165",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, guess I wasn't paying attention. Yes, PickOneObject is the correct function name.\r\n\r\nUsing `prototype` is the usual way to handle clones - the `CloneObject` family of functions all set a clone's `prototype` to the original object unless it has one already. If you've got some strategically placed in the world, you could give them a prototype attribute manually - this is especially useful if you're using things like a stacking system.\r\n\r\nAn alternative would be using types, in which case you can use `FilterByType`; or having something in your start script that clones the rope to all the places they're needed. These methods both have the advantage that if you want to change the rope's price, weight, displayverbs, or similar, you don't need to go through copying the change to all the ones that are out in the world.\r\n\r\nUsing the alias to identify an item works - but could lead to bugs if you (or someone else) comes to translate your game to another language; because you'd have to change it every place it's referenced.\r\n\r\nYou could also choose to use `ObjectListItem(ropes, 0)` to get the first rope in the list, rather than `PickOneObject (ropes)` to pick one at random - if all your ropes are identical, it doesn't really matter which one you pick; if you're dealing with items which aren't completely identical (like in one of my games there were \"pink flower\", \"blue flower\", \"green flower\", etc - they fill the same purpose but have different descriptions), the two methods can give a slightly different feel to the game.\r\n\r\n<hr/>\r\n\r\nIn answer to the original question, in case you ever have another case where you want a foreach loop to stop after it found a match. Rather than using the boolean, an alternative I use sometimes is to put the loop in a function. Then you can use `return()` to end the function. Most programming languages have a `break`, `continue`, or `last` command that just exits a loop, but I don't think Quest does.\r\n\r\n<hr />\r\n\r\n> I also wanted to take a moment to let you know that your help has been invaluable. I saw in a forum post quite a while back that you had written and are selling some books, but I can't seem to find that post again. If you wouldn't mind posting a link to your work, I'd love to support you somehow.\r\n\r\nThanks :) It's been great getting a few extra sales in Dec and Jan, so I really appreciate the support. Reviews would be even better, if you like what I've come up with. Most of my books are at https://author.to/angelwedge",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, guess I wasn't paying attention. Yes, PickOneObject is the correct function name.</p>\n<p>Using <code>prototype</code> is the usual way to handle clones - the <code>CloneObject</code> family of functions all set a clone's <code>prototype</code> to the original object unless it has one already. If you've got some strategically placed in the world, you could give them a prototype attribute manually - this is especially useful if you're using things like a stacking system.</p>\n<p>An alternative would be using types, in which case you can use <code>FilterByType</code>; or having something in your start script that clones the rope to all the places they're needed. These methods both have the advantage that if you want to change the rope's price, weight, displayverbs, or similar, you don't need to go through copying the change to all the ones that are out in the world.</p>\n<p>Using the alias to identify an item works - but could lead to bugs if you (or someone else) comes to translate your game to another language; because you'd have to change it every place it's referenced.</p>\n<p>You could also choose to use <code>ObjectListItem(ropes, 0)</code> to get the first rope in the list, rather than <code>PickOneObject (ropes)</code> to pick one at random - if all your ropes are identical, it doesn't really matter which one you pick; if you're dealing with items which aren't completely identical (like in one of my games there were \"pink flower\", \"blue flower\", \"green flower\", etc - they fill the same purpose but have different descriptions), the two methods can give a slightly different feel to the game.</p>\n<hr>\n<p>In answer to the original question, in case you ever have another case where you want a foreach loop to stop after it found a match. Rather than using the boolean, an alternative I use sometimes is to put the loop in a function. Then you can use <code>return()</code> to end the function. Most programming languages have a <code>break</code>, <code>continue</code>, or <code>last</code> command that just exits a loop, but I don't think Quest does.</p>\n<hr>\n<blockquote>\n<p>I also wanted to take a moment to let you know that your help has been invaluable. I saw in a forum post quite a while back that you had written and are selling some books, but I can't seem to find that post again. If you wouldn't mind posting a link to your work, I'd love to support you somehow.</p>\n</blockquote>\n<p>Thanks :) It's been great getting a few extra sales in Dec and Jan, so I really appreciate the support. Reviews would be even better, if you like what I've come up with. Most of my books are at https://author.to/angelwedge</p>\n\n",
      "PostDate": "2021-02-04T17:45:49.0968655Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
