{
  "Topic": {
    "TopicId": "wztvtjpuikck748eibqmsa",
    "ForumId": "10",
    "Title": "Dropping a bag.",
    "LastUpdated": "2020-10-26T03:36:52.8324231Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "38789264-78da-42aa-9464-f22b2c55af4b",
      "UserId": 467886,
      "Username": "Starve.",
      "AvatarUrl": "https://i.imgur.com/9VFwnkib.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So, I'm making a thing for an English assignment in this, and I want there to be a small chance that if the player takes off a backpack while it's open, it can spill it's contents everywhere on the ground, being a reason why you should keep the bag closed.\r\nHow does this happen?",
      "EditableFormat": "markdown",
      "HTML": "<p>So, I'm making a thing for an English assignment in this, and I want there to be a small chance that if the player takes off a backpack while it's open, it can spill it's contents everywhere on the ground, being a reason why you should keep the bag closed.<br>\nHow does this happen?</p>\n\n",
      "PostDate": "2020-10-26T03:36:52.8324231Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "877d6fd6-d2ec-46b9-a9f5-8a354240a0ea",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When you say \"takes off a bag\", do you mean dropping the bag, or removing it (if it's wearable?)\r\n\r\nIn the case of dropping it, you can add a script to run when the bag is dropped. On the 'Inventory' tab, change its drop behaviour from 'Default behaviour' to 'Run script'.\r\n\r\nThe script will then be run *instead of* dropping the bag. So as well as spilling the contents, you need to remember to move the bag itself.\r\n\r\nI'd suggest a script something like:\r\n```\r\nthis.parent = destination\r\nmsg (\"You put it down.\")\r\nif (this.isopen) { \r\n  foreach (object, GetDirectChildren (this)) {\r\n    if (RandomChance (60)) {\r\n      msg (CapFirst (GetDisplayName (object)) + \" spills out onto the floor.\")\r\n      object.parent = destination\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nA quick explanation of how that works. If you'd rather work in the GUI script editor, just go into code view long enough to paste the code in. You can easily see how the code translates to the GUI.\r\n\r\nI'll explain at a very basic level, as I don't know how much programming experience you have.\r\n* `this.parent = destination`\r\nThis is the same as `MoveObject (this, destination)`; more efficient but not quite as easy to read.\r\n   * On any script, `this` is the object the script belongs to.  So the bag in this case.\r\n   * In the 'drop' script, the variable `destination` holds the place where the player is trying to drop the item. This is usually the current room, but doesn't have to be. For example, in my Circus game, dropping an object on the tightrope moves it to the ground below. And if the player types \"put bag in locker\", `destination` will be the locker.\r\n* `if (this.isopen) {`\r\n   * The `isopen` property of a container determines if it's open.\r\n* `foreach (object, GetDirectChildren (this)) {`\r\nLoops over the objects inside the bag. `GetDirectChildren` finds all objects that are inside the bag.\r\n* `if (RandomChance (60)) {`\r\nEach object has a 60% chance of being dropped. So you'll find that a little over half the items in the bag will spill out. Change the number until you get the results you want.\r\n* `msg (CapFirst (GetDisplayName (object)) + \" spills out onto the floor.\")`\r\nTells the player what they have dropped. We use `GetDisplayName` to get the alias of the object, and `CapFirst` to make the first letter of the sentence a capital.\r\n* `object.parent = destination`\r\n\r\nIf I was doing this, I might end up making the script a little more complex.  Something like:\r\n```\r\nthis.parent = destination\r\nmessage = \"You put \" + this.article\r\ndropped = NewObjectList()\r\nif (GetBoolean (this, \"isopen\")) {\r\n  // Get a list of objects in the bag which are visible\r\n  droppable = FilterByAttribute (GetDirectChildren (this), \"visible\", true)\r\n  // If it's possible for there to be items in the bag that the player isn't capable of dropping, uncomment this line:\r\n  droppable = FilterByNotAttribute (droppable, \"drop\", false)\r\n}\r\nelse {\r\n  droppable = NewObjectList()\r\n}\r\n// Don't bother running all this script if the bag is closed or empty\r\nif (LictCount (droppable) > 0) {\r\n  if (destination = game.pov.parent or destination = game.pov.parent.dropdestinations) {\r\n    message = message + \" down\"\r\n    floorchance = 0\r\n  }\r\n  else {\r\n    if (DoesInherit (destination, \"surface\")) {\r\n      message = message + \" on \"\r\n    }\r\n    else {\r\n      message = message + \" in \"\r\n    }\r\n    message = message + GetDefiniteName(destination)\r\n    if (HasInt (destination, \"maxobjects\")) {\r\n      floorchance = 15 + 85 * ListCount (GetDirectChildren (destination)) / destination.maxobjects\r\n    }\r\n    else {\r\n      floorchance = ListCount (GetDirectChildren (destination)) * 15 + 10\r\n    }\r\n    if (HasObject (game.pov.parent, \"dropdestination\")) {\r\n      floor = game.pov.parent.dropdestination\r\n    }\r\n    else {\r\n      floor = game.pov.parent\r\n    }\r\n  }\r\n  foreach (obj, droppable) {\r\n    if (RandomChance (60)) {\r\n      if (RandomChance (floorchance)) {\r\n        floorchance = floorchance + 10\r\n        if (HasScript (obj, \"drop\")) {\r\n          do (obj, \"drop\", QuickParams (\"destination\", floor))\r\n        }\r\n        else {\r\n          obj.parent = floor\r\n        }\r\n      }\r\n      else {\r\n        if (HasInt (destination, \"maxobjects\")) {\r\n          floorchance = floorchance + 85 / destination.maxobjects\r\n        }\r\n        else {\r\n            floorchance = floorchance * 1.2\r\n        }\r\n        if (HasScript (destination, \"addscript\")) {\r\n          do (destination, \"addscript\", QuickParams (\"destination\", destination, \"object\", obj))\r\n        }\r\n        else if (HasScript (obj, \"drop\")) {\r\n          do (obj, \"drop\", QuickParams (\"destination\", destination))\r\n        }\r\n        else {\r\n          obj.parent = destination\r\n        }\r\n      }\r\n      // an object with a dropscript might not have been moved\r\n      // so check that it was moved before describing it\r\n      if (not obj.parent = this) {\r\n        list add (dropped, obj)\r\n      }\r\n    }\r\n  }\r\n  if (ListCount (dropped) = 1) {\r\n    message = message + \", but it is open and \" + GetDisplayName (ObjectListItem (dropped, 0)) + \" falls out\"\r\n  }\r\n  else if (ListCount (dropped) > 8) {\r\n    message = message + \", but it is open and the contents spills out\"\r\n  }\r\n  else if (ListCount (dropped) > 0) {\r\n    message = message + \", but it is open and \" + FormatList(dropped, \", \", \", and\") + \" fall out\"\r\n  }\r\n}\r\nmsg (message + \".\")\r\n```\r\nChanges made here:\r\n* The messages are a little more detailed (\"You put it on the table.\" for example, or \"You put it down, but it is open and a <u>banana</u> falls out.\")\r\n* If you put the bag in a box, locker, etc, spilled objects will be divided between the locker and the floor. This seems more realistic to me.\r\n* Rather than listing all the objects that you dropped one per line, it uses FormatList to make a list of them.\r\n* Works correctly if the player's putting  the bag in a container that has an addscript, or if the objects inside the bag have scripts to run when they are dropped.\r\n* Works with putting the bag into a limited container which allows a certain number of objects (if you put the bag in a locker that only allows 2 objeects, one object could fall out of the bag into the locker, and the rest would fall on the floor)\r\n   * (we don't bother about maxvolume, because the player wouldn't be allowed to put the bag there so the script would never run)",
      "EditableFormat": "markdown",
      "HTML": "<p>When you say \"takes off a bag\", do you mean dropping the bag, or removing it (if it's wearable?)</p>\n<p>In the case of dropping it, you can add a script to run when the bag is dropped. On the 'Inventory' tab, change its drop behaviour from 'Default behaviour' to 'Run script'.</p>\n<p>The script will then be run <em>instead of</em> dropping the bag. So as well as spilling the contents, you need to remember to move the bag itself.</p>\n<p>I'd suggest a script something like:</p>\n<pre><code>this.parent = destination\nmsg (\"You put it down.\")\nif (this.isopen) { \n  foreach (object, GetDirectChildren (this)) {\n    if (RandomChance (60)) {\n      msg (CapFirst (GetDisplayName (object)) + \" spills out onto the floor.\")\n      object.parent = destination\n    }\n  }\n}\n</code></pre>\n<p>A quick explanation of how that works. If you'd rather work in the GUI script editor, just go into code view long enough to paste the code in. You can easily see how the code translates to the GUI.</p>\n<p>I'll explain at a very basic level, as I don't know how much programming experience you have.</p>\n<ul>\n<li><code>this.parent = destination</code><br>\nThis is the same as <code>MoveObject (this, destination)</code>; more efficient but not quite as easy to read.\n<ul>\n<li>On any script, <code>this</code> is the object the script belongs to.  So the bag in this case.</li>\n<li>In the 'drop' script, the variable <code>destination</code> holds the place where the player is trying to drop the item. This is usually the current room, but doesn't have to be. For example, in my Circus game, dropping an object on the tightrope moves it to the ground below. And if the player types \"put bag in locker\", <code>destination</code> will be the locker.</li>\n</ul>\n</li>\n<li><code>if (this.isopen) {</code>\n<ul>\n<li>The <code>isopen</code> property of a container determines if it's open.</li>\n</ul>\n</li>\n<li><code>foreach (object, GetDirectChildren (this)) {</code><br>\nLoops over the objects inside the bag. <code>GetDirectChildren</code> finds all objects that are inside the bag.</li>\n<li><code>if (RandomChance (60)) {</code><br>\nEach object has a 60% chance of being dropped. So you'll find that a little over half the items in the bag will spill out. Change the number until you get the results you want.</li>\n<li><code>msg (CapFirst (GetDisplayName (object)) + \" spills out onto the floor.\")</code><br>\nTells the player what they have dropped. We use <code>GetDisplayName</code> to get the alias of the object, and <code>CapFirst</code> to make the first letter of the sentence a capital.</li>\n<li><code>object.parent = destination</code></li>\n</ul>\n<p>If I was doing this, I might end up making the script a little more complex.  Something like:</p>\n<pre><code>this.parent = destination\nmessage = \"You put \" + this.article\ndropped = NewObjectList()\nif (GetBoolean (this, \"isopen\")) {\n  // Get a list of objects in the bag which are visible\n  droppable = FilterByAttribute (GetDirectChildren (this), \"visible\", true)\n  // If it's possible for there to be items in the bag that the player isn't capable of dropping, uncomment this line:\n  droppable = FilterByNotAttribute (droppable, \"drop\", false)\n}\nelse {\n  droppable = NewObjectList()\n}\n// Don't bother running all this script if the bag is closed or empty\nif (LictCount (droppable) &gt; 0) {\n  if (destination = game.pov.parent or destination = game.pov.parent.dropdestinations) {\n    message = message + \" down\"\n    floorchance = 0\n  }\n  else {\n    if (DoesInherit (destination, \"surface\")) {\n      message = message + \" on \"\n    }\n    else {\n      message = message + \" in \"\n    }\n    message = message + GetDefiniteName(destination)\n    if (HasInt (destination, \"maxobjects\")) {\n      floorchance = 15 + 85 * ListCount (GetDirectChildren (destination)) / destination.maxobjects\n    }\n    else {\n      floorchance = ListCount (GetDirectChildren (destination)) * 15 + 10\n    }\n    if (HasObject (game.pov.parent, \"dropdestination\")) {\n      floor = game.pov.parent.dropdestination\n    }\n    else {\n      floor = game.pov.parent\n    }\n  }\n  foreach (obj, droppable) {\n    if (RandomChance (60)) {\n      if (RandomChance (floorchance)) {\n        floorchance = floorchance + 10\n        if (HasScript (obj, \"drop\")) {\n          do (obj, \"drop\", QuickParams (\"destination\", floor))\n        }\n        else {\n          obj.parent = floor\n        }\n      }\n      else {\n        if (HasInt (destination, \"maxobjects\")) {\n          floorchance = floorchance + 85 / destination.maxobjects\n        }\n        else {\n            floorchance = floorchance * 1.2\n        }\n        if (HasScript (destination, \"addscript\")) {\n          do (destination, \"addscript\", QuickParams (\"destination\", destination, \"object\", obj))\n        }\n        else if (HasScript (obj, \"drop\")) {\n          do (obj, \"drop\", QuickParams (\"destination\", destination))\n        }\n        else {\n          obj.parent = destination\n        }\n      }\n      // an object with a dropscript might not have been moved\n      // so check that it was moved before describing it\n      if (not obj.parent = this) {\n        list add (dropped, obj)\n      }\n    }\n  }\n  if (ListCount (dropped) = 1) {\n    message = message + \", but it is open and \" + GetDisplayName (ObjectListItem (dropped, 0)) + \" falls out\"\n  }\n  else if (ListCount (dropped) &gt; 8) {\n    message = message + \", but it is open and the contents spills out\"\n  }\n  else if (ListCount (dropped) &gt; 0) {\n    message = message + \", but it is open and \" + FormatList(dropped, \", \", \", and\") + \" fall out\"\n  }\n}\nmsg (message + \".\")\n</code></pre>\n<p>Changes made here:</p>\n<ul>\n<li>The messages are a little more detailed (\"You put it on the table.\" for example, or \"You put it down, but it is open and a <u>banana</u> falls out.\")</li>\n<li>If you put the bag in a box, locker, etc, spilled objects will be divided between the locker and the floor. This seems more realistic to me.</li>\n<li>Rather than listing all the objects that you dropped one per line, it uses FormatList to make a list of them.</li>\n<li>Works correctly if the player's putting  the bag in a container that has an addscript, or if the objects inside the bag have scripts to run when they are dropped.</li>\n<li>Works with putting the bag into a limited container which allows a certain number of objects (if you put the bag in a locker that only allows 2 objeects, one object could fall out of the bag into the locker, and the rest would fall on the floor)\n<ul>\n<li>(we don't bother about maxvolume, because the player wouldn't be allowed to put the bag there so the script would never run)</li>\n</ul>\n</li>\n</ul>\n\n",
      "PostDate": "2020-10-26T13:43:24.4779555Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
