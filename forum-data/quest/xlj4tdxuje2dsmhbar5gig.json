{
  "Topic": {
    "TopicId": "xlj4tdxuje2dsmhbar5gig",
    "ForumId": "10",
    "Title": "Moving an object to a new location based on attribute",
    "LastUpdated": "2020-09-08T15:11:57.7601478Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "56a210ca-5b93-4cbe-bba2-fcc877077e64",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi there.\r\n\r\nI have an object called 'plastic barrels' which I want to move to different locations as they are pushed. They start at location 1, and end up in location 4.\r\n\r\nFirst thing is, the code doesn't work. I get an error when checking and changing the attribute 'location', which I've specifically set on that object. I tried originally using a string for the attribute which matched the location names, but that didn't work, so I changed it to a simple integer going from 1-4, and that also doesn't work. What obvious thing am I missing?\r\n\r\nSecond thing is, is there an easier way of doing this? The reason I did it like the below is because I need the action of pushing and the associated message to change at each of the four locations.\r\n\r\nThanks for your help guys as ever!\r\n\r\nSO looking forward to a full GUI for Quest 6, btw! <3\r\n\r\nHere's the script as it appears (although I use the GUI editor most of the time):\r\n\r\n```msg (\"You give the barrels a firm push.\")\r\nif (plastic barrels.location  = 1) {\r\n  msg (\"They topple into the water, proving themselves to be very buoyant. The barrels begin to float further down stream!\")\r\n  set (plastic barrels, location, 2)\r\n  MoveObject (plastic barrels, River Edge)\r\n}\r\nelse if (plastic barrels.location = 2) {\r\n  msg (\"You give the barrels a second push, and once more they begin to bob gently along, heading further down the river.\")\r\n  set (plastic barrels, location, 3)\r\n  MoveObject (plastic barrels, Down Stream)\r\n}\r\nelse if (plastic barrels.location = 3) {\r\n  msg (\"A third time you push the barrels along. This time, the current takes them! The barrels bounce over the rocks in the river, careening between the banks on either side, rapidly disappearing from view. Where they'll end up is anyone's guess.\")\r\n  set (plastic barrels, location, 4)\r\n  MoveObject (plastic barrels, Lake Edge)\r\n}\r\nelse if (plastic barrels.location = 4) {\r\n  msg (\"You've had enough of pushing them around.\")\r\n}\r\nelse {\r\n  msg (\"You've had enough of pushing them around.\")\r\n}```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi there.</p>\n<p>I have an object called 'plastic barrels' which I want to move to different locations as they are pushed. They start at location 1, and end up in location 4.</p>\n<p>First thing is, the code doesn't work. I get an error when checking and changing the attribute 'location', which I've specifically set on that object. I tried originally using a string for the attribute which matched the location names, but that didn't work, so I changed it to a simple integer going from 1-4, and that also doesn't work. What obvious thing am I missing?</p>\n<p>Second thing is, is there an easier way of doing this? The reason I did it like the below is because I need the action of pushing and the associated message to change at each of the four locations.</p>\n<p>Thanks for your help guys as ever!</p>\n<p>SO looking forward to a full GUI for Quest 6, btw! &lt;3</p>\n<p>Here's the script as it appears (although I use the GUI editor most of the time):</p>\n<pre><code>if (plastic barrels.location  = 1) {\n  msg (\"They topple into the water, proving themselves to be very buoyant. The barrels begin to float further down stream!\")\n  set (plastic barrels, location, 2)\n  MoveObject (plastic barrels, River Edge)\n}\nelse if (plastic barrels.location = 2) {\n  msg (\"You give the barrels a second push, and once more they begin to bob gently along, heading further down the river.\")\n  set (plastic barrels, location, 3)\n  MoveObject (plastic barrels, Down Stream)\n}\nelse if (plastic barrels.location = 3) {\n  msg (\"A third time you push the barrels along. This time, the current takes them! The barrels bounce over the rocks in the river, careening between the banks on either side, rapidly disappearing from view. Where they'll end up is anyone's guess.\")\n  set (plastic barrels, location, 4)\n  MoveObject (plastic barrels, Lake Edge)\n}\nelse if (plastic barrels.location = 4) {\n  msg (\"You've had enough of pushing them around.\")\n}\nelse {\n  msg (\"You've had enough of pushing them around.\")\n}```\n</code></pre>\n\n",
      "PostDate": "2020-09-08T15:11:57.7601478Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b5f47571-9eec-4a9f-aa5d-56300f5241b8",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Still struggling with this. Don't know what I'm doing wrong ðŸ˜‘\r\n\r\nThe error message I get is Error running script: Error compiling expression 'location': Unknown object or variable 'location'",
      "EditableFormat": "markdown",
      "HTML": "<p>Still struggling with this. Don't know what I'm doing wrong ðŸ˜‘</p>\n<p>The error message I get is Error running script: Error compiling expression 'location': Unknown object or variable 'location'</p>\n\n",
      "PostDate": "2020-09-09T12:40:57.9479917Z",
      "LastEditDate": "2020-09-09T13:22:48.8714432Z",
      "link": null
    },
    {
      "PostId": "54212679-e4b5-4211-8fa1-08fecdd612e6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, the line `set (plastic barrels, location, 4)` takes 3 parameters\r\n\r\n1. The object you want to act on, `plastic barrels`. This is an expression that returns an object. So it can either be a function that returns an object, an attribute of type \"object\", a variable containing an object, or a literal object name (like `plastic barrels`)\r\n\r\n2. The name of the attribute to set. This needs to be a string. So it can either be an expression that returns a string, a variable or attribute whose type is string, or a literal string (like `\"location\"`)\r\n\r\n3. The value to set it to. This can be a variable, an expression, or a literal value of any type. In this case it's a literal integer, `4`.\r\n\r\nThe problem here is the second parameter.\r\n\r\n```\r\n  set (plastic barrels, location, 4)\r\n```\r\nQuest reads this as \"Find the object or variable named 'plastic barrels'. Find the variable named 'location', and use the string in that variable as the name of an attribute that we want to set. And set that attribute to 4.\"\r\n\r\nYou don't have a variable named location. You want it to be a string literal. Quest uses quote marks to tell if something is a variable or a string literal.\r\nSo what you want may be:\r\n```\r\n  set (plastic barrels, \"location\", 4)\r\n```\r\n\r\nHowever, if you're always setting the same attribute, there is no reason to use `set`. Its only purpose is if you don't know when you write the code what the name of the attribute will be (for example, if a character has 6 attributes representing statistics, and the player picks one to increase)\r\n\r\nIf you know the name of the attribute, it would be quicker to write:\r\n```\r\n  plastic barrels.location = 4\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, the line <code>set (plastic barrels, location, 4)</code> takes 3 parameters</p>\n<ol>\n<li>\n<p>The object you want to act on, <code>plastic barrels</code>. This is an expression that returns an object. So it can either be a function that returns an object, an attribute of type \"object\", a variable containing an object, or a literal object name (like <code>plastic barrels</code>)</p>\n</li>\n<li>\n<p>The name of the attribute to set. This needs to be a string. So it can either be an expression that returns a string, a variable or attribute whose type is string, or a literal string (like <code>\"location\"</code>)</p>\n</li>\n<li>\n<p>The value to set it to. This can be a variable, an expression, or a literal value of any type. In this case it's a literal integer, <code>4</code>.</p>\n</li>\n</ol>\n<p>The problem here is the second parameter.</p>\n<pre><code>  set (plastic barrels, location, 4)\n</code></pre>\n<p>Quest reads this as \"Find the object or variable named 'plastic barrels'. Find the variable named 'location', and use the string in that variable as the name of an attribute that we want to set. And set that attribute to 4.\"</p>\n<p>You don't have a variable named location. You want it to be a string literal. Quest uses quote marks to tell if something is a variable or a string literal.<br>\nSo what you want may be:</p>\n<pre><code>  set (plastic barrels, \"location\", 4)\n</code></pre>\n<p>However, if you're always setting the same attribute, there is no reason to use <code>set</code>. Its only purpose is if you don't know when you write the code what the name of the attribute will be (for example, if a character has 6 attributes representing statistics, and the player picks one to increase)</p>\n<p>If you know the name of the attribute, it would be quicker to write:</p>\n<pre><code>  plastic barrels.location = 4\n</code></pre>\n\n",
      "PostDate": "2020-09-09T23:02:53.2232057Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4d2f2622-d152-4128-bda7-a53f86525b09",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Amazingly in depth response! Thank you so much. What you said makes perfect sense, and I feel like an idiot ðŸ˜„\r\n\r\nI'm still trying to get my head around some things.",
      "EditableFormat": "markdown",
      "HTML": "<p>Amazingly in depth response! Thank you so much. What you said makes perfect sense, and I feel like an idiot ðŸ˜„</p>\n<p>I'm still trying to get my head around some things.</p>\n\n",
      "PostDate": "2020-09-10T06:00:41.3261434Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bf7b7949-0388-41d5-90a7-407a96f7e51a",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just to help anyone else who's more familiar with the GUI than editing code directly, this would be done by pressing +, then choose set variable.  plastic barrels.location goes in the first box, choose expression, then type 4 in the last box. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Just to help anyone else who's more familiar with the GUI than editing code directly, this would be done by pressing +, then choose set variable.  plastic barrels.location goes in the first box, choose expression, then type 4 in the last box.</p>\n\n",
      "PostDate": "2020-09-11T18:47:42.9254684Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "54260d10-6bc3-4c5e-86f7-12dd17d472b9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Just to help anyone else who's more familiar with the GUI than editing code directly, this would be done by pressing +, then choose set variable. plastic barrels.location goes in the first box, choose expression, then type 4 in the last box.\r\n\r\nFor the GUI users, there are a lot of places where you have to choose between \"Expression\" or \"String\" at the type of some value.\r\n\r\nIt probably helps to understand the answer if you understand what the difference between those two. When you choose 'String', if you look in code view you will see that it's put quotes around what you put  in the box.\r\n\r\nSo if you choose type \"expression\" and enter `4`, it will be the number 4. If you choose string, it will be `\"4\"` in code view, meaning the character `4`.\r\n\r\nWhen Quest looks at an expression, it goes through quite a lot of steps to determine what to do with the sequence of characters in the code.\r\n* If it consists of digits, treat it as an integer (number)\r\n* If it has digits and a decimal point, it's a float (fraction)\r\n* If it has quotation marks around it, it's a string\r\n* if it has operators like `+`, `-`, `or`, `=` and similar in, then look at the bits on either side first, and then use the operator to combine them\r\n* If it is `true`, `false`, or `null`, those are special values\r\n* If it has a dot in, look at the thing to the left first, and see if that's an object. The part to the right is assumed to be the name of that object's attribute.\r\n* If it's got brackets, it must be a function. Evaluate the bits in brackets first, and then call the function to get a value for the whole expression\r\n* If it's the name of a variable within this script, use the contents of that variable\r\n* If it's the name of an object (including objectlike elements such as turnscripts, commands, exits, and `game`) use that object\r\n* If it isn't any of the above, give an error message\r\n\r\nSo, for example, the expression `\"My sword!\"` is the same as the string `My sword!`. But as you discovered, the expression `location` will be an error unless there is a variable or object named location.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Just to help anyone else who's more familiar with the GUI than editing code directly, this would be done by pressing +, then choose set variable. plastic barrels.location goes in the first box, choose expression, then type 4 in the last box.</p>\n</blockquote>\n<p>For the GUI users, there are a lot of places where you have to choose between \"Expression\" or \"String\" at the type of some value.</p>\n<p>It probably helps to understand the answer if you understand what the difference between those two. When you choose 'String', if you look in code view you will see that it's put quotes around what you put  in the box.</p>\n<p>So if you choose type \"expression\" and enter <code>4</code>, it will be the number 4. If you choose string, it will be <code>\"4\"</code> in code view, meaning the character <code>4</code>.</p>\n<p>When Quest looks at an expression, it goes through quite a lot of steps to determine what to do with the sequence of characters in the code.</p>\n<ul>\n<li>If it consists of digits, treat it as an integer (number)</li>\n<li>If it has digits and a decimal point, it's a float (fraction)</li>\n<li>If it has quotation marks around it, it's a string</li>\n<li>if it has operators like <code>+</code>, <code>-</code>, <code>or</code>, <code>=</code> and similar in, then look at the bits on either side first, and then use the operator to combine them</li>\n<li>If it is <code>true</code>, <code>false</code>, or <code>null</code>, those are special values</li>\n<li>If it has a dot in, look at the thing to the left first, and see if that's an object. The part to the right is assumed to be the name of that object's attribute.</li>\n<li>If it's got brackets, it must be a function. Evaluate the bits in brackets first, and then call the function to get a value for the whole expression</li>\n<li>If it's the name of a variable within this script, use the contents of that variable</li>\n<li>If it's the name of an object (including objectlike elements such as turnscripts, commands, exits, and <code>game</code>) use that object</li>\n<li>If it isn't any of the above, give an error message</li>\n</ul>\n<p>So, for example, the expression <code>\"My sword!\"</code> is the same as the string <code>My sword!</code>. But as you discovered, the expression <code>location</code> will be an error unless there is a variable or object named location.</p>\n\n",
      "PostDate": "2020-09-11T19:38:50.8136065Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
