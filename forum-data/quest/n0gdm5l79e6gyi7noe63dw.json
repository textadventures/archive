{
  "Topic": {
    "TopicId": "n0gdm5l79e6gyi7noe63dw",
    "ForumId": "10",
    "Title": "Patrol and Chasing",
    "LastUpdated": "2020-04-03T05:19:00.7600621Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c3a1c4c9-210c-4bfd-8ef0-25e3630c7258",
      "UserId": 17092,
      "Username": "GAGE HOLSTON",
      "AvatarUrl": "https://secure.gravatar.com/avatar/57b86a567d503acfa104a604accfa863?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In my game, there is a certain section where a robot is patrolling an area for the player.\r\nThe way I want it is:\r\n1) The robot follows a set path, that loops afterwards back to the beginning of the patrol.\r\n2) If the player enters a room on the robot's path and the robot enters the room (or the robot is already there), it will drop the previous behavior to chase the player.\r\n3) If the player enters certain areas, the robot will lose you and return to the patrol.\r\n4) The player needs the robot chasing them to perform certain actions. (For example, one way to destroy the robot would be to get him to chase you, climb up a cliffside, and push a boulder on top of the robot before the robot gives up and returns to patrol, for instance. This is the least important point needed solved, as I doubt will be difficult to find out)\r\n\r\nThe way I tried it, so far, was by having a turn script activate when in this area where the robot moves to a new room on the path every turn. The main issue I'm having with this is none of the checks I made to trigger #2 don't work. I tried doing this also through a turn script, but it didn't work.\r\n\r\nI'd like to know how to get this to work, and in an efficient enough way.",
      "EditableFormat": "markdown",
      "HTML": "<p>In my game, there is a certain section where a robot is patrolling an area for the player.<br>\nThe way I want it is:</p>\n<ol>\n<li>The robot follows a set path, that loops afterwards back to the beginning of the patrol.</li>\n<li>If the player enters a room on the robot's path and the robot enters the room (or the robot is already there), it will drop the previous behavior to chase the player.</li>\n<li>If the player enters certain areas, the robot will lose you and return to the patrol.</li>\n<li>The player needs the robot chasing them to perform certain actions. (For example, one way to destroy the robot would be to get him to chase you, climb up a cliffside, and push a boulder on top of the robot before the robot gives up and returns to patrol, for instance. This is the least important point needed solved, as I doubt will be difficult to find out)</li>\n</ol>\n<p>The way I tried it, so far, was by having a turn script activate when in this area where the robot moves to a new room on the path every turn. The main issue I'm having with this is none of the checks I made to trigger #2 don't work. I tried doing this also through a turn script, but it didn't work.</p>\n<p>I'd like to know how to get this to work, and in an efficient enough way.</p>\n\n",
      "PostDate": "2020-04-03T05:19:00.7600621Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "95458606-c644-4b42-ae80-5989273da6d0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm… I'd give the robot an objectlist attribute `path` containing the list of rooms it needs to move through. And then set up a turnscript to move it:\r\n\r\n```\r\nnextstep = null\r\nif (HasAttribute (robot, \"chasing\")) {\r\n  // If the player runs into a room and back out again while being chased, the robot won't go into the room\r\n  while (ListContains (robot.chasing, game.pov.parent)) {\r\n    list remove (robot.chasing, ListItem (robot.chasing, ListCount (robot.chasing) - 1))\r\n  }\r\n\r\n  if (robot.parent = game.pov.parent) {\r\n    // The robot is chasing the player, but the player hasn't moved away\r\n    // If the robot is going to attack the player, the code would go here\r\n  }\r\n  else {\r\n    // Making a list of which way the player went, so the robot can follow them.\r\n    list add (robot.chasing, game.pov.parent)\r\n  }\r\n\r\n  // I've made it so that when the player gets 5 rooms away from the robot, it loses interest and returns to patrolling.\r\n  // You said you want it to give up when the player reaches a certain area\r\n  // so change this 'if' statement to test for whatever condition makes the robot give up\r\n  if (ListCount (robot.chasing) > 5) {\r\n    robot.chasing = null\r\n  }\r\n\r\n  // The robot has an 80% chance of moving each turn, to allow the player to get a few rooms ahead of it.\r\n  // If you want the robot to move as fast as the player, just change this to: if (ListCount (robot.chasing) > 0) {\r\n  if (RandomChance (80) and ListCount (robot.chasing) > 0) {\r\n    nextstep = ListItem (robot.chasing, 0)\r\n    list remove (robot.chasing, nextstep)\r\n    // we make a list of rooms the robot has already chased the player through, so it knows the way to return to its patrol path\r\n    while (ListContains (robot.return, nextstep)) {\r\n      list remove (robot.return, ListItem (robot.return, ListCount (robot.return) - 1))\r\n    }\r\n    list add (robot.return, robot.parent)\r\n  }\r\n}\r\nelse if (game.pov.parent = robot.parent) {\r\n  // The player has walked into the robot's room\r\n  msg (\"The robot bleeps angrily and starts chasing you!\")\r\n  robot.chasing = NewObjectList()\r\n  if (not HasAttribute (robot, \"return\")) {\r\n    robot.return = NewObjectList()\r\n  }\r\n}\r\nelse if (HasAttribute (robot, \"return\")) {\r\n  // The robot is returning from chasing the player\r\n  if (ListContains (robot.path, robot.parent)) {\r\n    // robot is back on its path, so clear the chase data from its memory\r\n    robot.return = null\r\n    // And cycle the path, so it knows where it currently is\r\n    for (i, 0, IndexOf (robot.path, robot.parent) + 1) {\r\n      nextstep = ListItem (robot.path, 0)\r\n      list remove (robot.path, nextstep)\r\n      list add (robot.path, nextstep)\r\n    }\r\n  }\r\n  else {\r\n    // Robot is returning from a chase, but isn't back on its patrol path yet\r\n    nextstep = ListItem (robot.return, ListCount(robot.return) - 1)\r\n    list remove (robot.return, nextstep)\r\n  }\r\n}\r\nelse {\r\n  // The robot is on its path, patrolling normally\r\n  nextstep = ListItem (robot.path, 0)\r\n  list remove (robot.path, 0)\r\n  list add (robot.path, 0)\r\n}\r\n\r\n// We've now determined where the robot will move, whether it's patrolling, chasing, or returning\r\nif (not nextstep = null) {\r\n  // move the robot\r\n  robot.parent = nextstep\r\n  // And check if it's patrolled into the player\r\n  if (robot.parent = game.pov.parent) {\r\n    if (HasAttribute (robot, \"chasing\")) {\r\n      // We can just show a message here; if the robot is going to attack the player, the script will do that next turn\r\n      // But if you want to be mean to the player, you could do it here\r\n      msg (\"The robot chases you into the room!\")\r\n    }\r\n    else {\r\n      msg (\"A robot moves into the room and turns to face you like it's about to attack.\")\r\n      robot.chasing = NewObjectList()\r\n      if (not HasAttribute (robot, \"return\")) {\r\n        robot.return = NewObjectList()\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n(This is all off the top of my head, so there could be mistakes here)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm… I'd give the robot an objectlist attribute <code>path</code> containing the list of rooms it needs to move through. And then set up a turnscript to move it:</p>\n<pre><code>nextstep = null\nif (HasAttribute (robot, \"chasing\")) {\n  // If the player runs into a room and back out again while being chased, the robot won't go into the room\n  while (ListContains (robot.chasing, game.pov.parent)) {\n    list remove (robot.chasing, ListItem (robot.chasing, ListCount (robot.chasing) - 1))\n  }\n\n  if (robot.parent = game.pov.parent) {\n    // The robot is chasing the player, but the player hasn't moved away\n    // If the robot is going to attack the player, the code would go here\n  }\n  else {\n    // Making a list of which way the player went, so the robot can follow them.\n    list add (robot.chasing, game.pov.parent)\n  }\n\n  // I've made it so that when the player gets 5 rooms away from the robot, it loses interest and returns to patrolling.\n  // You said you want it to give up when the player reaches a certain area\n  // so change this 'if' statement to test for whatever condition makes the robot give up\n  if (ListCount (robot.chasing) &gt; 5) {\n    robot.chasing = null\n  }\n\n  // The robot has an 80% chance of moving each turn, to allow the player to get a few rooms ahead of it.\n  // If you want the robot to move as fast as the player, just change this to: if (ListCount (robot.chasing) &gt; 0) {\n  if (RandomChance (80) and ListCount (robot.chasing) &gt; 0) {\n    nextstep = ListItem (robot.chasing, 0)\n    list remove (robot.chasing, nextstep)\n    // we make a list of rooms the robot has already chased the player through, so it knows the way to return to its patrol path\n    while (ListContains (robot.return, nextstep)) {\n      list remove (robot.return, ListItem (robot.return, ListCount (robot.return) - 1))\n    }\n    list add (robot.return, robot.parent)\n  }\n}\nelse if (game.pov.parent = robot.parent) {\n  // The player has walked into the robot's room\n  msg (\"The robot bleeps angrily and starts chasing you!\")\n  robot.chasing = NewObjectList()\n  if (not HasAttribute (robot, \"return\")) {\n    robot.return = NewObjectList()\n  }\n}\nelse if (HasAttribute (robot, \"return\")) {\n  // The robot is returning from chasing the player\n  if (ListContains (robot.path, robot.parent)) {\n    // robot is back on its path, so clear the chase data from its memory\n    robot.return = null\n    // And cycle the path, so it knows where it currently is\n    for (i, 0, IndexOf (robot.path, robot.parent) + 1) {\n      nextstep = ListItem (robot.path, 0)\n      list remove (robot.path, nextstep)\n      list add (robot.path, nextstep)\n    }\n  }\n  else {\n    // Robot is returning from a chase, but isn't back on its patrol path yet\n    nextstep = ListItem (robot.return, ListCount(robot.return) - 1)\n    list remove (robot.return, nextstep)\n  }\n}\nelse {\n  // The robot is on its path, patrolling normally\n  nextstep = ListItem (robot.path, 0)\n  list remove (robot.path, 0)\n  list add (robot.path, 0)\n}\n\n// We've now determined where the robot will move, whether it's patrolling, chasing, or returning\nif (not nextstep = null) {\n  // move the robot\n  robot.parent = nextstep\n  // And check if it's patrolled into the player\n  if (robot.parent = game.pov.parent) {\n    if (HasAttribute (robot, \"chasing\")) {\n      // We can just show a message here; if the robot is going to attack the player, the script will do that next turn\n      // But if you want to be mean to the player, you could do it here\n      msg (\"The robot chases you into the room!\")\n    }\n    else {\n      msg (\"A robot moves into the room and turns to face you like it's about to attack.\")\n      robot.chasing = NewObjectList()\n      if (not HasAttribute (robot, \"return\")) {\n        robot.return = NewObjectList()\n      }\n    }\n  }\n}\n</code></pre>\n<p>(This is all off the top of my head, so there could be mistakes here)</p>\n\n",
      "PostDate": "2020-04-03T16:21:11.6654255Z",
      "LastEditDate": "2020-04-03T19:46:09.4124066Z",
      "link": null
    },
    {
      "PostId": "f137fe2c-745a-4190-8659-be0419277586",
      "UserId": 17092,
      "Username": "GAGE HOLSTON",
      "AvatarUrl": "https://secure.gravatar.com/avatar/57b86a567d503acfa104a604accfa863?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This seems like an interesting solution. The only problem is that I've never had to use lists before, so I have to figure out that first.",
      "EditableFormat": "markdown",
      "HTML": "<p>This seems like an interesting solution. The only problem is that I've never had to use lists before, so I have to figure out that first.</p>\n\n",
      "PostDate": "2020-04-03T17:05:41.116059Z",
      "LastEditDate": "2020-04-03T17:07:46.598292Z",
      "link": null
    },
    {
      "PostId": "501f7385-f21c-4b58-9dd0-1a8c83762bd7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another thought… if the robot is designed to pursue sensibly, you could improve its pathfinding. This could be interesting, especially if the room layout is complex or maze-like.\r\n\r\nStill keeping fairly simple, you could replace:\r\n```\r\n  else {\r\n    // Making a list of which way the player went, so the robot can follow them.\r\n    list add (robot.chasing, game.pov.parent)\r\n  }\r\n```\r\nwith:\r\n```\r\nelse {\r\n  if (not Equal (null, GetExitByLink (robot.parent, game.pov.parent))) {\r\n    // the player is in a room adjacent to the robot\r\n    // so we forget the route the player has taken to get there; the chase route is just \"go to that room\"\r\n    robot.chasing = NewObjectList()\r\n  }\r\n  else if (ListContains (robot.return, game.pov.parent)) {\r\n    // The player is passing through a room the robot has already chased them through\r\n    // If it would be quicker to turn back, the robot should do so\r\n    if (ListCount (robot.chasing) > ListCount (robot.return) - 1 - IndexOf (robot.return, game.pov.parent)) {\r\n      robot.chasing = NewObjectList()\r\n      for (i, ListCount (robot.return) - 1, IndexOf (robot.return, game.pov.parent) + 1, -1) {\r\n        list add (robot.chasing, ListItem (robot.return, i))\r\n      }\r\n    }\r\n  }\r\n  list add (robot.chasing, game.pov.parent)\r\n}\r\n```\r\n\r\nThat means that in a more complex map, the robot will move straight into the player's room if it passes through a room adjacent to them; and will double back if the player crosses the path it has already taken.\r\n\r\nDepending on the style of your game, you might want these optimisations or just keep it simple. Whether this is beneficial really depends on how far ahead of the robot the player is likely to get. If it's only one room apart then it might not make much difference.",
      "EditableFormat": "markdown",
      "HTML": "<p>Another thought… if the robot is designed to pursue sensibly, you could improve its pathfinding. This could be interesting, especially if the room layout is complex or maze-like.</p>\n<p>Still keeping fairly simple, you could replace:</p>\n<pre><code>  else {\n    // Making a list of which way the player went, so the robot can follow them.\n    list add (robot.chasing, game.pov.parent)\n  }\n</code></pre>\n<p>with:</p>\n<pre><code>else {\n  if (not Equal (null, GetExitByLink (robot.parent, game.pov.parent))) {\n    // the player is in a room adjacent to the robot\n    // so we forget the route the player has taken to get there; the chase route is just \"go to that room\"\n    robot.chasing = NewObjectList()\n  }\n  else if (ListContains (robot.return, game.pov.parent)) {\n    // The player is passing through a room the robot has already chased them through\n    // If it would be quicker to turn back, the robot should do so\n    if (ListCount (robot.chasing) &gt; ListCount (robot.return) - 1 - IndexOf (robot.return, game.pov.parent)) {\n      robot.chasing = NewObjectList()\n      for (i, ListCount (robot.return) - 1, IndexOf (robot.return, game.pov.parent) + 1, -1) {\n        list add (robot.chasing, ListItem (robot.return, i))\n      }\n    }\n  }\n  list add (robot.chasing, game.pov.parent)\n}\n</code></pre>\n<p>That means that in a more complex map, the robot will move straight into the player's room if it passes through a room adjacent to them; and will double back if the player crosses the path it has already taken.</p>\n<p>Depending on the style of your game, you might want these optimisations or just keep it simple. Whether this is beneficial really depends on how far ahead of the robot the player is likely to get. If it's only one room apart then it might not make much difference.</p>\n\n",
      "PostDate": "2020-04-03T19:43:12.7928484Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
