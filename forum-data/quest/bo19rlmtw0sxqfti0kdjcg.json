{
  "Topic": {
    "TopicId": "bo19rlmtw0sxqfti0kdjcg",
    "ForumId": "10",
    "Title": "Commands Specific to Rooms",
    "LastUpdated": "2020-02-26T08:52:29.5769117Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a73b2dc8-b5f3-4be1-9ca4-99a1b3fa7e68",
      "UserId": 450907,
      "Username": "queste",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b00b2ee33e6a23b1a02b67a5333569b4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "An example: There is a post box and a letter. If I want something to happen when the letter is put into the post box I could copy the core PUT command and add my code into that.\r\n\r\nHowever is the better way to use a command specific to a room? As the post box will never change room this seems to make sense.\r\n\r\nSo I've made a command in the room with the same regex as the core PUT command\r\n\r\n```^(put|insert|place|drop) (?<object1>.*) (on|in|on to|in to|into) (?<object2>.*)$```\r\n\r\nPut my code in ... and it works ... sort of. I can put the letter in the post box and have what I need happen. However any other combination of objects results in a null response.\r\n\r\nWhich makes sense, I therefore need to change the regex to only be specific to putting things in the post box. I assume doing this will then make my room specific code only work when the post box is referenced as the second object. Any other object combination will use the core PUT command code.\r\n\r\nRegex makes my head explode. What do I have to do to the ```(?<object2>.*)``` part to make it specific to the object named 'post box'?\r\n\r\nHopes this makes sense. Is the best way to overriding core complex commands.",
      "EditableFormat": "markdown",
      "HTML": "<p>An example: There is a post box and a letter. If I want something to happen when the letter is put into the post box I could copy the core PUT command and add my code into that.</p>\n<p>However is the better way to use a command specific to a room? As the post box will never change room this seems to make sense.</p>\n<p>So I've made a command in the room with the same regex as the core PUT command</p>\n<p><code>^(put|insert|place|drop) (?&lt;object1&gt;.*) (on|in|on to|in to|into) (?&lt;object2&gt;.*)$</code></p>\n<p>Put my code in ... and it works ... sort of. I can put the letter in the post box and have what I need happen. However any other combination of objects results in a null response.</p>\n<p>Which makes sense, I therefore need to change the regex to only be specific to putting things in the post box. I assume doing this will then make my room specific code only work when the post box is referenced as the second object. Any other object combination will use the core PUT command code.</p>\n<p>Regex makes my head explode. What do I have to do to the <code>(?&lt;object2&gt;.*)</code> part to make it specific to the object named 'post box'?</p>\n<p>Hopes this makes sense. Is the best way to overriding core complex commands.</p>\n\n",
      "PostDate": "2020-02-26T08:52:29.5769117Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c2d4484d-f477-4984-8a8b-7e6d9053fe90",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Replace ```object2``` with ```object_post box```.\r\n\r\nSo in your example it would be:\r\n\r\n```^(put|insert|place|drop) (?<object1>.*) (on|in|on to|in to|into) (?<object_post box>.*)$```\r\n\r\nIf it is just the letter that you can only put into the post box, you could further refine it by the following:\r\n\r\n```^(put|insert|place|drop) (?<object_letter>.*) (on|in|on to|in to|into) (?<object_post box>.*)$```\r\n\r\nThere is a section in the documentation on dealing with complex commands which really helped me to get to grips with regex:\r\n\r\nhttp://docs.textadventures.co.uk/quest/complex_commands.html\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Replace <code>object2</code> with <code>object_post box</code>.</p>\n<p>So in your example it would be:</p>\n<p><code>^(put|insert|place|drop) (?&lt;object1&gt;.*) (on|in|on to|in to|into) (?&lt;object_post box&gt;.*)$</code></p>\n<p>If it is just the letter that you can only put into the post box, you could further refine it by the following:</p>\n<p><code>^(put|insert|place|drop) (?&lt;object_letter&gt;.*) (on|in|on to|in to|into) (?&lt;object_post box&gt;.*)$</code></p>\n<p>There is a section in the documentation on dealing with complex commands which really helped me to get to grips with regex:</p>\n<p>http://docs.textadventures.co.uk/quest/complex_commands.html</p>\n\n",
      "PostDate": "2020-02-26T09:22:44.6806686Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c372619-3b76-4dba-8d99-5901fc623efc",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "never mind, my mistake.",
      "EditableFormat": "markdown",
      "HTML": "<p>never mind, my mistake.</p>\n\n",
      "PostDate": "2020-02-26T10:05:51.6590947Z",
      "LastEditDate": "2020-02-26T10:20:14.2426826Z",
      "link": null
    },
    {
      "PostId": "9daad3ad-42b6-49a5-aeac-46b95f1b1c00",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Make the post box a container.\r\n\r\nSet it to run a script when an object is added to it (the `addscript` script attribute)\r\n<pre><code>if (object = letter) {\r\n  <em style=\"color:navy;font-family:initial\">// do stuff here</em>\r\n}\r\nelse {\r\n  msg (CapFirst (object.article)+\" won't fit in the slot.\")\r\n}</code></pre>\r\n\r\nThere is no need to make a separate command.",
      "EditableFormat": "markdown",
      "HTML": "<p>Make the post box a container.</p>\n<p>Set it to run a script when an object is added to it (the <code>addscript</code> script attribute)</p>\n<pre><code>if (object = letter) {\n  <em style=\"color: navy; font-family: initial\">// do stuff here</em>\n}\nelse {\n  msg (CapFirst (object.article)+\" won't fit in the slot.\")\n}</code></pre>\n<p>There is no need to make a separate command.</p>\n\n",
      "PostDate": "2020-02-26T14:17:47.6340121Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0973359e-1ef5-47c3-be50-25896588e0da",
      "UserId": 450907,
      "Username": "queste",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b00b2ee33e6a23b1a02b67a5333569b4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks everyone.\r\n\r\nmrangle, duh, I knew that, just didn't remember, thanks again.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks everyone.</p>\n<p>mrangle, duh, I knew that, just didn't remember, thanks again.</p>\n\n",
      "PostDate": "2020-02-26T14:42:21.1256543Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f7002c59-b8dc-406b-aa19-e311a724f876",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could alternatively use the letter's \"drop\" script:\r\n<pre><code>if (destination = post box) {\r\n  <em style=\"color:navy;font-family:initial\">// do stuff here</em>\r\n}\r\nelse {\r\n  MoveObject (this, destination)\r\n}</code></pre>\r\n\r\n<hr />\r\n\r\nIf you really wanted to make your own command for some reason (like you wanted to do something that the built-in one can't do), it would be possible to call the default command as a backup. You'd make your own command's script something like:\r\n\r\n<pre><code>if (object1 = letter and object2 = post box) {\r\n  <em style=\"color:navy;font-family:initial\">// do stuff here</em>\r\n}\r\nelse {\r\n  params = NewDictionary()\r\n  dictionary add (params, \"object1\", object1)\r\n  dictionary add (params, \"object2\", object2)\r\n  do (put, \"script\", params)\r\n}</code></pre>\r\n\r\n<hr />\r\n\r\n@Doctor Agon\r\n> `^(put|insert|place|drop) (?<object_letter>.*) (on|in|on to|in to|into) (?<object_post box>.*)$`\r\n\r\nIf the player types \"put cat in oven\", then your command is still run. The command has a variable named `object_letter` which points to a cat, and `object_post box` which points to an oven.\r\n\r\nYou've changed the names of the variables, but that doesn't change what is *in* the variables. It just makes them incorrectly named.\r\n\r\nYou probably meant: `^(put|insert|place|drop) (?<object1>letter) (on|in|on to|in to|into) (?<object2>post box)$`\r\n\r\nThat version only works if the object names the player types are exactly \"letter\" and \"post box\". **But**, this requires them to match exactly. If the player types \"put lette in post box\", it will run the default `put` command, and then determine that \"lette\" is the start of \"letter\".\r\n\r\nForcing the input like this could be useful; but you need to be careful, because it can end up giving the player a very confusing experience. For most of the game, shortening an object name Quest will know what you mean. On the game where I first suggested this method because someone wanted a \"kill boar\" command, it would be confusing that \"kill boar\" works but \"kill boa\" responds as if it was an unknown command. And in *this* case, having it work but give a different outcome if you leave a letter off could be very, very confusing for the player.",
      "EditableFormat": "markdown",
      "HTML": "<p>You could alternatively use the letter's \"drop\" script:</p>\n<pre><code>if (destination = post box) {\n  <em style=\"color: navy; font-family: initial\">// do stuff here</em>\n}\nelse {\n  MoveObject (this, destination)\n}</code></pre>\n<hr>\n<p>If you really wanted to make your own command for some reason (like you wanted to do something that the built-in one can't do), it would be possible to call the default command as a backup. You'd make your own command's script something like:</p>\n<pre><code>if (object1 = letter and object2 = post box) {\n  <em style=\"color: navy; font-family: initial\">// do stuff here</em>\n}\nelse {\n  params = NewDictionary()\n  dictionary add (params, \"object1\", object1)\n  dictionary add (params, \"object2\", object2)\n  do (put, \"script\", params)\n}</code></pre>\n<hr>\n<p>@Doctor Agon</p>\n<blockquote>\n<p><code>^(put|insert|place|drop) (?&lt;object_letter&gt;.*) (on|in|on to|in to|into) (?&lt;object_post box&gt;.*)$</code></p>\n</blockquote>\n<p>If the player types \"put cat in oven\", then your command is still run. The command has a variable named <code>object_letter</code> which points to a cat, and <code>object_post box</code> which points to an oven.</p>\n<p>You've changed the names of the variables, but that doesn't change what is <em>in</em> the variables. It just makes them incorrectly named.</p>\n<p>You probably meant: <code>^(put|insert|place|drop) (?&lt;object1&gt;letter) (on|in|on to|in to|into) (?&lt;object2&gt;post box)$</code></p>\n<p>That version only works if the object names the player types are exactly \"letter\" and \"post box\". <strong>But</strong>, this requires them to match exactly. If the player types \"put lette in post box\", it will run the default <code>put</code> command, and then determine that \"lette\" is the start of \"letter\".</p>\n<p>Forcing the input like this could be useful; but you need to be careful, because it can end up giving the player a very confusing experience. For most of the game, shortening an object name Quest will know what you mean. On the game where I first suggested this method because someone wanted a \"kill boar\" command, it would be confusing that \"kill boar\" works but \"kill boa\" responds as if it was an unknown command. And in <em>this</em> case, having it work but give a different outcome if you leave a letter off could be very, very confusing for the player.</p>\n\n",
      "PostDate": "2020-02-26T15:48:35.739527Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6a95f3d0-d39b-4b20-939f-5463f05023b7",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel -\r\nUsing ```(?<object>someobject)``` <b>should</b> work in the regex pattern, but it doesn't.  Using ```(?<exit>north)``` or ```(?<text>somewords)``` <b>does</b> work for me though.  Do you get the same result?",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel -<br>\nUsing <code>(?&lt;object&gt;someobject)</code> <b>should</b> work in the regex pattern, but it doesn't.  Using <code>(?&lt;exit&gt;north)</code> or <code>(?&lt;text&gt;somewords)</code> <b>does</b> work for me though.  Do you get the same result?</p>\n\n",
      "PostDate": "2020-02-26T21:29:42.0219441Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2a047b9d-644b-432a-9690-3fe2697b0501",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Using `(?<object>someobject)` **should** work in the regex pattern, but it doesn't.\r\n\r\nJust tested. It works exactly as expected for me.\r\n\r\nWhat's the full pattern you're using, and the command entered to test it?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Using <code>(?&lt;object&gt;someobject)</code> <strong>should</strong> work in the regex pattern, but it doesn't.</p>\n</blockquote>\n<p>Just tested. It works exactly as expected for me.</p>\n<p>What's the full pattern you're using, and the command entered to test it?</p>\n\n",
      "PostDate": "2020-02-26T22:32:09.039465Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9f6e2031-5f19-420f-b05f-6c23b7302495",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I tested this in a barebones game, and everything works the way it should.  It just doesn't work in my real game.  I could not reproduce the error in the barebones game, and I can't figure out why it doesn't work in my real game.  Go figure.",
      "EditableFormat": "markdown",
      "HTML": "<p>I tested this in a barebones game, and everything works the way it should.  It just doesn't work in my real game.  I could not reproduce the error in the barebones game, and I can't figure out why it doesn't work in my real game.  Go figure.</p>\n\n",
      "PostDate": "2020-02-27T02:07:54.4897935Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a93860c2-660d-46f5-ba59-59e584df012f",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In my real game, ```(?<object>someobject)``` works with commands that have new verbs I made up in the regex pattern (kick, smash, etc.), but it does <b>not</b> work in regex patterns with verbs that already exist as Quest default commands (put, use, etc.) -- with these verbs, Quest will ignore my alternative regex pattern command and go with the default command.  Changing the order of the commands makes no difference.\r\n\r\nI've also noticed that, in ```(?<object>someobject)```, ```someobject``` only works with the object's alias, not with the object's name (if different), and not with ```alt``` names.",
      "EditableFormat": "markdown",
      "HTML": "<p>In my real game, <code>(?&lt;object&gt;someobject)</code> works with commands that have new verbs I made up in the regex pattern (kick, smash, etc.), but it does <b>not</b> work in regex patterns with verbs that already exist as Quest default commands (put, use, etc.) -- with these verbs, Quest will ignore my alternative regex pattern command and go with the default command.  Changing the order of the commands makes no difference.</p>\n<p>I've also noticed that, in <code>(?&lt;object&gt;someobject)</code>, <code>someobject</code> only works with the object's alias, not with the object's name (if different), and not with <code>alt</code> names.</p>\n\n",
      "PostDate": "2020-02-27T02:41:14.8627635Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7cc6b277-a8aa-4771-98a8-a8cd068a09e0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> but it does not work in regex patterns with verbs that already exist as Quest default commands\r\n\r\nYou mean commands which would collide with one of the core commands?\r\nI'm not sure, but I think that in a case with multiple equally-weighted matches, Quest uses the first command found, unless one is in a specific room. It's the same as creating two commands with the same pattern.\r\n\r\nIs your command in a specific room? If it is, then there must be some mismatch between the pattern and what the player typed. If you have a specific example I could take a look at it.\r\n\r\nIf you have a global command with the same pattern, you would need to ensure it is found before the default one. You could possibly do this by cloning and disabling the default command. Or you could make your command more specific (less of the command is captured by named groups) by doing something like `(?<object>someobjec)t`.\r\n\r\n> only works with the object's alias, not with the object's name\r\n\r\nWhat do you mean?\r\n\r\nIf you use `(?<object>some alias here)`, it will only match if the player types exactly \"some alias here\". It doesn't matter if that string is an object's alias, an alt, or part of an alias - but the command typed by the player must match the pattern. It can be any string that the player could type to refer to that object.\r\n\r\nIf an object has alternate names, you would need to do something like `(?<object>some object|alternate name|alternate name 2)`",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>but it does not work in regex patterns with verbs that already exist as Quest default commands</p>\n</blockquote>\n<p>You mean commands which would collide with one of the core commands?<br>\nI'm not sure, but I think that in a case with multiple equally-weighted matches, Quest uses the first command found, unless one is in a specific room. It's the same as creating two commands with the same pattern.</p>\n<p>Is your command in a specific room? If it is, then there must be some mismatch between the pattern and what the player typed. If you have a specific example I could take a look at it.</p>\n<p>If you have a global command with the same pattern, you would need to ensure it is found before the default one. You could possibly do this by cloning and disabling the default command. Or you could make your command more specific (less of the command is captured by named groups) by doing something like <code>(?&lt;object&gt;someobjec)t</code>.</p>\n<blockquote>\n<p>only works with the object's alias, not with the object's name</p>\n</blockquote>\n<p>What do you mean?</p>\n<p>If you use <code>(?&lt;object&gt;some alias here)</code>, it will only match if the player types exactly \"some alias here\". It doesn't matter if that string is an object's alias, an alt, or part of an alias - but the command typed by the player must match the pattern. It can be any string that the player could type to refer to that object.</p>\n<p>If an object has alternate names, you would need to do something like <code>(?&lt;object&gt;some object|alternate name|alternate name 2)</code></p>\n\n",
      "PostDate": "2020-02-27T08:58:17.50573Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
