{
  "Topic": {
    "TopicId": "4mqo1ny7eewpixlfvrwquq",
    "ForumId": "10",
    "Title": "A way to make a new script attribute in-game from a string?",
    "LastUpdated": "2022-06-21T02:43:43.7205071Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "09f182e8-a05e-49d3-9e86-7699d71c5350",
      "UserId": 581452,
      "Username": "Leviathon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b70281225e26c938429c720cbbe2a522?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, I know all about setting up script attributes from the editor/code view, but is there a way to write/insert a string script into a new script attribute in-game?\r\n\r\nThe use-case for this is that I want to be able to convert the `game.menucallback` attribute to a string (for my SaveLoadCode library that I've posted about previously), then convert it back to a script to be assigned back to the `game.menucallback` attribute.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, I know all about setting up script attributes from the editor/code view, but is there a way to write/insert a string script into a new script attribute in-game?</p>\n<p>The use-case for this is that I want to be able to convert the <code>game.menucallback</code> attribute to a string (for my SaveLoadCode library that I've posted about previously), then convert it back to a script to be assigned back to the <code>game.menucallback</code> attribute.</p>\n\n",
      "PostDate": "2022-06-21T02:43:43.7205071Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f65ed73e-522a-41fa-a069-9822c4161bcc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No; not possible.\r\n\r\nAlthough it might be possible to search through all the game's script attributes to see if you can find one that matches.",
      "EditableFormat": "markdown",
      "HTML": "<p>No; not possible.</p>\n<p>Although it might be possible to search through all the game's script attributes to see if you can find one that matches.</p>\n\n",
      "PostDate": "2022-06-21T16:02:41.1251675Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "356ae471-7c7f-482b-a316-24036b641369",
      "UserId": 581452,
      "Username": "Leviathon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b70281225e26c938429c720cbbe2a522?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah dang. Searching through all scripts for a match could work if the user is careful about having all their showmenu callbacks stored as modular script attributes, but I'd like to think on it a bit more to see if I can come up with a slightly more automated solution...\r\n\r\nShowMenu obviously has some mechanism to separate just the callback as it's own script and store it under `game.menucallback`when the menu popup comes up, so perhaps I could see if there'd be some way to run through all instances of \"ShowMenu\" in the user's game on startup, extract all their callbacks, and store them as variables to be referenced later?\r\n\r\nI might also spend a bit more time digging around in the Quest 5.8 source code and javascript files to see if there'd be *some* way to inject a string into the code as a script attribute... I know there's no official way to do it, but maybe there's some way I can trick the code into it (perhaps editting the code of a library file mid-game to include the script, then forcing the app to reload the library somehow?)\r\n\r\nEven outside of my own use case, I could certainly see the utility in having such a feature as part of the baseline...",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah dang. Searching through all scripts for a match could work if the user is careful about having all their showmenu callbacks stored as modular script attributes, but I'd like to think on it a bit more to see if I can come up with a slightly more automated solution...</p>\n<p>ShowMenu obviously has some mechanism to separate just the callback as it's own script and store it under <code>game.menucallback</code>when the menu popup comes up, so perhaps I could see if there'd be some way to run through all instances of \"ShowMenu\" in the user's game on startup, extract all their callbacks, and store them as variables to be referenced later?</p>\n<p>I might also spend a bit more time digging around in the Quest 5.8 source code and javascript files to see if there'd be <em>some</em> way to inject a string into the code as a script attribute... I know there's no official way to do it, but maybe there's some way I can trick the code into it (perhaps editting the code of a library file mid-game to include the script, then forcing the app to reload the library somehow?)</p>\n<p>Even outside of my own use case, I could certainly see the utility in having such a feature as part of the baseline...</p>\n\n",
      "PostDate": "2022-06-22T17:01:04.5416267Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9d9023fd-cbf7-483a-be3f-1510e28842b9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, a script evaluator would be useful. If you can code in C# it might be practical; you could probably wrap up an instance of the lexer in a new script command.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, a script evaluator would be useful. If you can code in C# it might be practical; you could probably wrap up an instance of the lexer in a new script command.</p>\n\n",
      "PostDate": "2022-06-22T17:33:56.3559466Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
