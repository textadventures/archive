{
  "Topic": {
    "TopicId": "kdu1s17qok2w7ubvnmwd6w",
    "ForumId": "10",
    "Title": "Checking for partial matches in a string",
    "LastUpdated": "2017-01-16T20:41:25.7709333Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3b47d843-0b0b-418f-9d10-b2345fd2e0c5",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey there, got a bit of an odd one here today.\r\n\r\nIs this possible/reasonable.  Have a question I'm not exactly sure how to articulate without an example\r\n\r\nIn a small test game I'm working on I let the player name themselves at the start(and they can change the name at various points but that's isn't part of the problem)and its of course stored in the alias attribute. Everything simple so far. \r\n\r\nI'd like to set up a door to only let a person in if they are part of a certain family, now of course I could easily have it check a full name like Joe Smith, but could I make it to check some partial match where  it would pass any name that had “Smith” in it for example.\r\n\r\nI know I could take the “Easy” way out and have folks enter a first and last name, checking the last, but curious if it is possible to have code check for phrases in a string, it almost sounds like something of the ask/tell function. It could be useful if people say certain trigger phrases during an interrogation.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey there, got a bit of an odd one here today.</p>\n<p>Is this possible/reasonable.  Have a question I'm not exactly sure how to articulate without an example</p>\n<p>In a small test game I'm working on I let the player name themselves at the start(and they can change the name at various points but that's isn't part of the problem)and its of course stored in the alias attribute. Everything simple so far.</p>\n<p>I'd like to set up a door to only let a person in if they are part of a certain family, now of course I could easily have it check a full name like Joe Smith, but could I make it to check some partial match where  it would pass any name that had “Smith” in it for example.</p>\n<p>I know I could take the “Easy” way out and have folks enter a first and last name, checking the last, but curious if it is possible to have code check for phrases in a string, it almost sounds like something of the ask/tell function. It could be useful if people say certain trigger phrases during an interrogation.</p>\n\n",
      "PostDate": "2017-01-16T20:41:25.7709333Z",
      "LastEditDate": null
    },
    {
      "PostId": "12118cb8-b4e8-4af1-8a52-d3f93a059e2d",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could use regular expressions. Check out these links, and see if it helps (or could work). If not, ask more questions. :)\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/isregexmatch.html\r\nhttp://docs.textadventures.co.uk/quest/functions/getmatchstrength.html\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>You could use regular expressions. Check out these links, and see if it helps (or could work). If not, ask more questions. :)</p>\n<p>http://docs.textadventures.co.uk/quest/functions/isregexmatch.html<br>\nhttp://docs.textadventures.co.uk/quest/functions/getmatchstrength.html</p>\n\n",
      "PostDate": "2017-01-16T21:50:04.0120238Z",
      "LastEditDate": "2017-01-16T21:51:29.265576Z"
    },
    {
      "PostId": "7a6c761e-2910-498a-a0de-f6f5139fc779",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "and there's also the string manipulation functions too:\r\n\r\nsuch as 'StartsWith', 'EndsWith', 'Mid', and 'Instr/InstrRev'\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/ (scroll down to the very bottom, to the 'String Functions' section)\r\n\r\nbut Jay's links are the more powerful/useful Functions.",
      "EditableFormat": "markdown",
      "HTML": "<p>and there's also the string manipulation functions too:</p>\n<p>such as 'StartsWith', 'EndsWith', 'Mid', and 'Instr/InstrRev'</p>\n<p>http://docs.textadventures.co.uk/quest/functions/ (scroll down to the very bottom, to the 'String Functions' section)</p>\n<p>but Jay's links are the more powerful/useful Functions.</p>\n\n",
      "PostDate": "2017-01-17T02:22:47.1658415Z",
      "LastEditDate": null
    },
    {
      "PostId": "911f7421-0d13-4d79-86ba-0202031a25c5",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ohh this looks like some fun stuff to read and look into, the whole Regrex thing looked to scary to start with initially but seeing those functions makes it seem at least approachable. I'll get back if i have any questions. I think the \"Endswith\" will be the most useful for this specific situation\r\nThank you for your help Jay and HK\r\n\r\nEdit- Yes the Endswith worked perfectly, and now I've got new string functions to learn about and use as well,  thank you so much",
      "EditableFormat": "markdown",
      "HTML": "<p>ohh this looks like some fun stuff to read and look into, the whole Regrex thing looked to scary to start with initially but seeing those functions makes it seem at least approachable. I'll get back if i have any questions. I think the \"Endswith\" will be the most useful for this specific situation<br>\nThank you for your help Jay and HK</p>\n<p>Edit- Yes the Endswith worked perfectly, and now I've got new string functions to learn about and use as well,  thank you so much</p>\n\n",
      "PostDate": "2017-01-17T15:19:31.6586173Z",
      "LastEditDate": "2017-01-17T15:31:40.3299125Z"
    },
    {
      "PostId": "b3078243-98de-4a35-9563-e919c70856bf",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I believe the 'regex/strength' Functions that Jay give do the same thing, but more similiar to a Command's 'pattern' syntax, and with more code symbols and etc that makes it look more scary/foreign to both you and I, laughs.\r\n\r\n'StartsWith' is perfect for dealing with Cloned Objects, as when clones are made, just numbers are added to the end of their names:\r\n\r\noriginal Object's 'name' (ID) String Attribute: ball\r\nCloned Object's 'name' (ID) String Attribute: ball1 // or maybe like this (I've not used cloning yet lol): ball_1\r\n\r\nso, via 'StartsWith' Function: if (StartsWith (YOUR_OBJECT, \"ball\"), will reference your cloned Objects\r\n\r\nand if you also use 'LengthOf', you can EX-clude the original Object: if (StartsWith (YOUR_OBJECT, \"ball\") and LengthOf (YOUR_OBJECT) > \"ball\")\r\n\r\nthe 'EndsWith' works well for when you use an organized naming convention/system, such as mine for example:\r\n\r\norc_object\r\nogre_object\r\norc_object.dead_boolean_attribute\r\norc_object.flying_boolean_attribute\r\norc_object.condition_stringlist_attribute\r\norc_object.current_life_integer_attribute\r\norc_object.maximum_life_integer_attribute\r\norc_object.current_mana_integer_attribute\r\norc_object.maximum_mana_integer_attribute\r\n\r\nif (EndsWith (YOUR_OBJECT, \"_object\"))\r\nif (EndsWith (YOUR_OBJECT, \"_attribute\"))\r\nif (EndsWith (YOUR_OBJECT, \"_boolean_attribute\"))\r\nif (EndsWith (YOUR_OBJECT, \"_integer_attribute\"))\r\nif (EndsWith (YOUR_OBJECT, \"_life_integer_attribute\"))\r\nif (EndsWith (YOUR_OBJECT, \"_mana_integer_attribute\"))\r\n\r\n---------\r\n\r\nthe 'mid' Function is a bit more weird... as I tihnk it starts from the middle and goes out in both directions for looking for your specified string, so it's probably for 'palindromes', for example:\r\n\r\n'abccba' or 'abcdcba'\r\n'zyxxyz' or 'zyxwxyz'\r\n(can't think of a palindrome actual word at the moment, lol)\r\n\r\n--------\r\n\r\nthe 'Instr/InstrRev' Functions will look for a specified string in/through the entire String Input, and not just specifically at the start/end/mid. The 'instr' looks through the String Input (aka, it starts) from the left, and the 'InstrRev' (Rev for reverse) looks through the String Input (aka, it starts) from the right)\r\n\r\nusing it is a bit different, as it returns the position number of where the specified string is found within the String Input, for example, I think this is how it works (haven't used it yet myself):\r\n\r\nInstr (\"abc\", \"a\") would return '1'\r\nInstr (\"abc\", \"b\") would return '2'\r\nInstr (\"abc\", \"c\") would return '3'\r\nInstr (\"abc\", \"d\") would return '0' // FAILURE to find the specified string in the String Input\r\n\r\nInstrRev (\"abc\", \"a\") would return '3' // or maybe it's still '1'\r\nInstrRev (\"abc\", \"b\") would return '2' // or maybe it's still '2'\r\nInstrRev (\"abc\", \"c\") would return '1' // or maybe it's still '3'\r\nInstrRev (\"abc\", \"d\") would return '0' // FAILURE to find the specified string in the String Input\r\n\r\nif (not Instr (\"abc\", \"b\") = 0) -> TRUE/SUCCESS, nested scripting is run\r\nvs\r\nif (not Instr (\"abc\", \"d\") = 0) -> FALSE/FAILURE, nested scripting is NOT run / it is skipped over",
      "EditableFormat": "markdown",
      "HTML": "<p>I believe the 'regex/strength' Functions that Jay give do the same thing, but more similiar to a Command's 'pattern' syntax, and with more code symbols and etc that makes it look more scary/foreign to both you and I, laughs.</p>\n<p>'StartsWith' is perfect for dealing with Cloned Objects, as when clones are made, just numbers are added to the end of their names:</p>\n<p>original Object's 'name' (ID) String Attribute: ball<br>\nCloned Object's 'name' (ID) String Attribute: ball1 // or maybe like this (I've not used cloning yet lol): ball_1</p>\n<p>so, via 'StartsWith' Function: if (StartsWith (YOUR_OBJECT, \"ball\"), will reference your cloned Objects</p>\n<p>and if you also use 'LengthOf', you can EX-clude the original Object: if (StartsWith (YOUR_OBJECT, \"ball\") and LengthOf (YOUR_OBJECT) &gt; \"ball\")</p>\n<p>the 'EndsWith' works well for when you use an organized naming convention/system, such as mine for example:</p>\n<p>orc_object<br>\nogre_object<br>\norc_object.dead_boolean_attribute<br>\norc_object.flying_boolean_attribute<br>\norc_object.condition_stringlist_attribute<br>\norc_object.current_life_integer_attribute<br>\norc_object.maximum_life_integer_attribute<br>\norc_object.current_mana_integer_attribute<br>\norc_object.maximum_mana_integer_attribute</p>\n<p>if (EndsWith (YOUR_OBJECT, \"_object\"))<br>\nif (EndsWith (YOUR_OBJECT, \"_attribute\"))<br>\nif (EndsWith (YOUR_OBJECT, \"_boolean_attribute\"))<br>\nif (EndsWith (YOUR_OBJECT, \"_integer_attribute\"))<br>\nif (EndsWith (YOUR_OBJECT, \"_life_integer_attribute\"))<br>\nif (EndsWith (YOUR_OBJECT, \"_mana_integer_attribute\"))</p>\n<hr>\n<p>the 'mid' Function is a bit more weird... as I tihnk it starts from the middle and goes out in both directions for looking for your specified string, so it's probably for 'palindromes', for example:</p>\n<p>'abccba' or 'abcdcba'<br>\n'zyxxyz' or 'zyxwxyz'<br>\n(can't think of a palindrome actual word at the moment, lol)</p>\n<hr>\n<p>the 'Instr/InstrRev' Functions will look for a specified string in/through the entire String Input, and not just specifically at the start/end/mid. The 'instr' looks through the String Input (aka, it starts) from the left, and the 'InstrRev' (Rev for reverse) looks through the String Input (aka, it starts) from the right)</p>\n<p>using it is a bit different, as it returns the position number of where the specified string is found within the String Input, for example, I think this is how it works (haven't used it yet myself):</p>\n<p>Instr (\"abc\", \"a\") would return '1'<br>\nInstr (\"abc\", \"b\") would return '2'<br>\nInstr (\"abc\", \"c\") would return '3'<br>\nInstr (\"abc\", \"d\") would return '0' // FAILURE to find the specified string in the String Input</p>\n<p>InstrRev (\"abc\", \"a\") would return '3' // or maybe it's still '1'<br>\nInstrRev (\"abc\", \"b\") would return '2' // or maybe it's still '2'<br>\nInstrRev (\"abc\", \"c\") would return '1' // or maybe it's still '3'<br>\nInstrRev (\"abc\", \"d\") would return '0' // FAILURE to find the specified string in the String Input</p>\n<p>if (not Instr (\"abc\", \"b\") = 0) -&gt; TRUE/SUCCESS, nested scripting is run<br>\nvs<br>\nif (not Instr (\"abc\", \"d\") = 0) -&gt; FALSE/FAILURE, nested scripting is NOT run / it is skipped over</p>\n\n",
      "PostDate": "2017-01-17T17:34:14.4884059Z",
      "LastEditDate": "2017-01-17T18:03:37.0064782Z"
    }
  ]
}
