{
  "Topic": {
    "TopicId": "4206",
    "ForumId": "10",
    "Title": "where is the 'attributes' tab on web quest?",
    "LastUpdated": "2015-02-21T08:45:29+00:00",
    "ReplyCount": 6
  },
  "Posts": [
    {
      "PostId": "28005",
      "UserId": 0,
      "Username": "ej88",
      "UserAvatar": null,
      "UserGravatar": "14165510023e1cab35332dc71d68de23",
      "EditableText": "hiya,\n\ni'm totally new to quest, and pretty excited about using it. however, i can't find the 'attributes' tab anywhere on the web version of quest. how do i create attributes, without something similar to what is visible here - <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Custom_attributes\">http://quest5.net/wiki/Custom_attributes</a><!-- m --> ?\n\ni have had a long look on the questwiki and searching these forums, but can't find anything. i assume i'm missing something obvious?\n\nthanks!",
      "EditableFormat": "bbcode",
      "HTML": "hiya,<br/><br/>i'm totally new to quest, and pretty excited about using it. however, i can't find the 'attributes' tab anywhere on the web version of quest. how do i create attributes, without something similar to what is visible here - <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Custom_attributes\">http://quest5.net/wiki/Custom_attributes</a><!-- m --> ?<br/><br/>i have had a long look on the questwiki and searching these forums, but can't find anything. i assume i'm missing something obvious?<br/><br/>thanks!",
      "PostDate": "2014-02-27T11:58:30+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "28007",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I was personally shocked to discover that there is no support for editing attributes in the web editor. They seem so fundamental to everything...\n\nSo basically, you can't use the graphical interface to create or edit attributes. (The desktop version is fine.)\n\nAlso, attributes are created when they're first assigned to, so you can use script code to simply assign initial values (perhaps in the game start script). Not ideal, I know, but a workaround.",
      "EditableFormat": "bbcode",
      "HTML": "I was personally shocked to discover that there is no support for editing attributes in the web editor. They seem so fundamental to everything...<br/><br/>So basically, you can't use the graphical interface to create or edit attributes. (The desktop version is fine.)<br/><br/>Also, attributes are created when they're first assigned to, so you can use script code to simply assign initial values (perhaps in the game start script). Not ideal, I know, but a workaround.",
      "PostDate": "2014-02-27T13:09:37+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34841",
      "UserId": 0,
      "Username": "Grondhammar",
      "UserAvatar": null,
      "UserGravatar": "4f33d965f96511e690a4ec08cb561fe9",
      "EditableText": "Thread necromancy, I know, but this is exactly the question I had.\n\nIs there any movement towards getting this implemented? I'd be happy to contribute to the effort myself, but the source code for the web version is (perhaps understandably with a server involved) not on github.\n\nIf this will not happen anytime soon, is there in fact a workaround? I attempted what jaynabonne suggested, but runtime kept throwing &quot;Unknown object or variable '[var name]'&quot; inside even a super-simple example game.",
      "EditableFormat": "bbcode",
      "HTML": "Thread necromancy, I know, but this is exactly the question I had.<br/><br/>Is there any movement towards getting this implemented? I'd be happy to contribute to the effort myself, but the source code for the web version is (perhaps understandably with a server involved) not on github.<br/><br/>If this will not happen anytime soon, is there in fact a workaround? I attempted what jaynabonne suggested, but runtime kept throwing &quot;Unknown object or variable '[var name]'&quot; inside even a super-simple example game.",
      "PostDate": "2015-02-20T20:59:18+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34842",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "Well the object has to exist to put an attribute on it. So if you set an integer such as:\n\ngun.bullets = 10\n\nThere has to be an object in your game called gun.",
      "EditableFormat": "bbcode",
      "HTML": "Well the object has to exist to put an attribute on it. So if you set an integer such as:<br/><br/>gun.bullets = 10<br/><br/>There has to be an object in your game called gun.",
      "PostDate": "2015-02-20T21:42:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34843",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "The code is on GitHub, it's the WebEditor project in the quest repository. There is in fact a half implemented attributes editor in there already - it was something I paid somebody on odesk to create, and it's very rough around the edges. I have some notes somewhere on what needs to be done to get it into shape if anyone's interested.",
      "EditableFormat": "bbcode",
      "HTML": "The code is on GitHub, it's the WebEditor project in the quest repository. There is in fact a half implemented attributes editor in there already - it was something I paid somebody on odesk to create, and it's very rough around the edges. I have some notes somewhere on what needs to be done to get it into shape if anyone's interested.",
      "PostDate": "2015-02-20T23:02:59+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34844",
      "UserId": 0,
      "Username": "Grondhammar",
      "UserAvatar": null,
      "UserGravatar": "4f33d965f96511e690a4ec08cb561fe9",
      "EditableText": "Alex, thanks for the GitHub location. I'll take a look -- any particular file(s) or functions you could point me towards to get a grasp of what's there?\n\nSilver's answer made me go look at my code again, and behold, a misspelled object name! How embarrassing...  thanks for the reminder. That works perfectly.",
      "EditableFormat": "bbcode",
      "HTML": "Alex, thanks for the GitHub location. I'll take a look -- any particular file(s) or functions you could point me towards to get a grasp of what's there?<br/><br/>Silver's answer made me go look at my code again, and behold, a misspelled object name! How embarrassing...  thanks for the reminder. That works perfectly.",
      "PostDate": "2015-02-21T02:24:28+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34847",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "OK, below is the info I originally sent to the ODesk contractor a couple of years ago:\n\n[quote:14hyusir]\nFirst, some background. Everything in a Quest game is an element. All objects that appear in the game are elements, rooms are elements, the player is an element, even the game itself is an element.\n\nAll elements have attributes. The element's name is an attribute, its description is an attribute, any script attached to it is an attribute, etc.\n\nWhen editing a game, you've seen files like CoreEditorObjectSetup.aslx which contain definitions for how the editor is layed out. This file specifies the type of controls that are shown for each attribute of an element. For example, an object's &quot;name&quot; attribute is editable with a textbox, which has the caption &quot;Name&quot;.\n\nIn addition to the &quot;friendly&quot; layout of the editor, on the desktop version there's an &quot;Attributes&quot; tab for each element, which allows the user to go in and add, modify and delete all attributes directly. This control is loaded wherever &lt;controltype&gt;attributes&lt;/controltype&gt; appears in an editor aslx file, and is always on the tab called &quot;Attributes&quot; which is currently hidden from the web editor - this is because the tab specifies the &lt;desktop/&gt; flag.\n\nSo the first thing to do is remove that flag. You'll then get errors when the editor is running because the &quot;attributes&quot; control does not exist in WebEditor, so you'll need to implement this control.\n\nImplement the control by adding a new switch case to RenderEditorControl in ElementEditor.cshtml. Like the script editor, this should call an Action which will render a new partial view.\n\nLook at WFAttributesControl in the EditorControls project to see the WinForms version of the attributes editor. It shows a list of all attributes for the currently selected element. When an attribute is selected, a &quot;MultiControl&quot; is rendered, allowing the user to set the type of the attribute and enter a value. We already have the concept of a MultiControl in WebEditor - see RenderMultiControl in ElementEditor.cshtml. I expect this will need to be refactored out of ElementEditor, so that the new Attributes partial view can access it too.\n\nI wouldn't worry about the &quot;Inherited Types&quot; section at the top of the attributes control yet. We can implement this after we have implemented the attributes editor section itself.\n\nOne thing we will have to bear in mind is that the other editor tabs are all able to edit the same attributes. For example, when a user enters an Alias for an object on the Setup tab, that changes the value of the &quot;alias&quot; attribute. So, when the user clicks on to the Attributes tab, we need to ensure that they see the latest values there, and when they click elsewhere the attributes will need to be saved. Currently, elements are only saved when the user clicks on another element in the tree. We will need to change this so that the element is also saved when the user clicks on the Attributes tab, so then the attributes editor will be seeing the latest values.\n\nI think that when the user clicks the name of the attribute in the attributes control, the multicontrol for that attribute should be loaded via AJAX. Then when they click on a different attribute name, it should be immediately saved.\n\nThat's quite a lot to think about so I hope I haven't overwhelmed you with information! I think we just need to break this up into steps. For now, I would just like you to:\n\n- make the Attributes tab appear in the WebEditor\n- create a very basic attributes viewer - not even an editor yet, so we'll just be listing the names and values of the attributes for the current element.\n\nI think that will do to start with - then we can move on to actually making those attributes editable, and updating when and how the element is saved.\n[/quote:14hyusir]\n\nThe contractor did indeed do some of that, but it doesn't work very well. If you grab the code and remove the &lt;desktop/&gt; flag from an attributes editor, you'll see the current state of things.",
      "EditableFormat": "bbcode",
      "HTML": "OK, below is the info I originally sent to the ODesk contractor a couple of years ago:<br/><br/><blockquote><p><br/>First, some background. Everything in a Quest game is an element. All objects that appear in the game are elements, rooms are elements, the player is an element, even the game itself is an element.<br/><br/>All elements have attributes. The element's name is an attribute, its description is an attribute, any script attached to it is an attribute, etc.<br/><br/>When editing a game, you've seen files like CoreEditorObjectSetup.aslx which contain definitions for how the editor is layed out. This file specifies the type of controls that are shown for each attribute of an element. For example, an object's &quot;name&quot; attribute is editable with a textbox, which has the caption &quot;Name&quot;.<br/><br/>In addition to the &quot;friendly&quot; layout of the editor, on the desktop version there's an &quot;Attributes&quot; tab for each element, which allows the user to go in and add, modify and delete all attributes directly. This control is loaded wherever &lt;controltype&gt;attributes&lt;/controltype&gt; appears in an editor aslx file, and is always on the tab called &quot;Attributes&quot; which is currently hidden from the web editor - this is because the tab specifies the &lt;desktop/&gt; flag.<br/><br/>So the first thing to do is remove that flag. You'll then get errors when the editor is running because the &quot;attributes&quot; control does not exist in WebEditor, so you'll need to implement this control.<br/><br/>Implement the control by adding a new switch case to RenderEditorControl in ElementEditor.cshtml. Like the script editor, this should call an Action which will render a new partial view.<br/><br/>Look at WFAttributesControl in the EditorControls project to see the WinForms version of the attributes editor. It shows a list of all attributes for the currently selected element. When an attribute is selected, a &quot;MultiControl&quot; is rendered, allowing the user to set the type of the attribute and enter a value. We already have the concept of a MultiControl in WebEditor - see RenderMultiControl in ElementEditor.cshtml. I expect this will need to be refactored out of ElementEditor, so that the new Attributes partial view can access it too.<br/><br/>I wouldn't worry about the &quot;Inherited Types&quot; section at the top of the attributes control yet. We can implement this after we have implemented the attributes editor section itself.<br/><br/>One thing we will have to bear in mind is that the other editor tabs are all able to edit the same attributes. For example, when a user enters an Alias for an object on the Setup tab, that changes the value of the &quot;alias&quot; attribute. So, when the user clicks on to the Attributes tab, we need to ensure that they see the latest values there, and when they click elsewhere the attributes will need to be saved. Currently, elements are only saved when the user clicks on another element in the tree. We will need to change this so that the element is also saved when the user clicks on the Attributes tab, so then the attributes editor will be seeing the latest values.<br/><br/>I think that when the user clicks the name of the attribute in the attributes control, the multicontrol for that attribute should be loaded via AJAX. Then when they click on a different attribute name, it should be immediately saved.<br/><br/>That's quite a lot to think about so I hope I haven't overwhelmed you with information! I think we just need to break this up into steps. For now, I would just like you to:<br/><br/>- make the Attributes tab appear in the WebEditor<br/>- create a very basic attributes viewer - not even an editor yet, so we'll just be listing the names and values of the attributes for the current element.<br/><br/>I think that will do to start with - then we can move on to actually making those attributes editable, and updating when and how the element is saved.<br/></p></blockquote><br/><br/>The contractor did indeed do some of that, but it doesn't work very well. If you grab the code and remove the &lt;desktop/&gt; flag from an attributes editor, you'll see the current state of things.",
      "PostDate": "2015-02-21T08:45:29+00:00",
      "LastEditDate": null
    }
  ]
}
