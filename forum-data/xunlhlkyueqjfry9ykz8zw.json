{
  "Topic": {
    "TopicId": "xunlhlkyueqjfry9ykz8zw",
    "ForumId": "10",
    "Title": "A few hopefully simple questions-Types to select multiple obejects?",
    "LastUpdated": "2016-08-17T18:02:33.8329874Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9188bcee-3680-4c67-b6be-b172570e1ea3",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In the game code i'm working on I'm trying to set up, mostly to improve my grasp of the program(Always learning), The project I am working on I think would use types  types, or maybe even just attributes\r\n\r\n\r\nIn my mind I'd set up character types such as NPC, Allies, Enemies, Bosses, with each type having some similar attributes on how they are encountered and treated. \r\n\r\nI'd like to be able to affect all objects with the same type.. for example if a certain stone is used summon all the currently alive bosses to the players location(A bad idea, but certainly possible)  In that case i'd think something using a for each look maybe.. Esentially I'd like to have scripts do an effect to any object with a certain type/attribute. (Similarly summon a random ally to help you having a list made dynamically where the game collects all the objects with that attribute and picks one from the list)\r\n\r\nIn short, how would be the most elegant way of setting up scripts to target groups of defined objects without manually defining  orc1 to orc 20 one by one\r\n\r\nThank you for your time.",
      "EditableFormat": "markdown",
      "HTML": "<p>In the game code i'm working on I'm trying to set up, mostly to improve my grasp of the program(Always learning), The project I am working on I think would use types  types, or maybe even just attributes</p>\n<p>In my mind I'd set up character types such as NPC, Allies, Enemies, Bosses, with each type having some similar attributes on how they are encountered and treated.</p>\n<p>I'd like to be able to affect all objects with the same type.. for example if a certain stone is used summon all the currently alive bosses to the players location(A bad idea, but certainly possible)  In that case i'd think something using a for each look maybe.. Esentially I'd like to have scripts do an effect to any object with a certain type/attribute. (Similarly summon a random ally to help you having a list made dynamically where the game collects all the objects with that attribute and picks one from the list)</p>\n<p>In short, how would be the most elegant way of setting up scripts to target groups of defined objects without manually defining  orc1 to orc 20 one by one</p>\n<p>Thank you for your time.</p>\n\n",
      "PostDate": "2016-08-17T18:02:33.8329874Z",
      "LastEditDate": null
    },
    {
      "PostId": "61657bff-ffd9-45d8-b040-1c77c02eb4df",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The best way I can think of is to iterate through everything, and test to see if it is of that type.\r\n```\r\nforeach (obj, AllObjects()) {\r\n  if (DoesInherit(obj, \"Allies\")) {\r\n    // do stuff\r\n  }\r\n}\r\n```\r\nBy the way, did you know your types can have types too? Once you have set up the NPC type, your Ally and Enemy types can be of that type, and your Boss type can be of the Enemy.",
      "EditableFormat": "markdown",
      "HTML": "<p>The best way I can think of is to iterate through everything, and test to see if it is of that type.</p>\n<pre><code>foreach (obj, AllObjects()) {\n  if (DoesInherit(obj, \"Allies\")) {\n    // do stuff\n  }\n}\n</code></pre>\n<p>By the way, did you know your types can have types too? Once you have set up the NPC type, your Ally and Enemy types can be of that type, and your Boss type can be of the Enemy.</p>\n\n",
      "PostDate": "2016-08-17T20:30:41.4921398Z",
      "LastEditDate": null
    },
    {
      "PostId": "565e4a4c-6f33-436c-b701-75d125638c55",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "hmm that sounds easy, though my intial attempts at adapting the code very simply haven't been too effective, esentially gave a couple characters the type NPC to see if the code would just print out a list of them, it returns \"Unable to cast object of type 'System.String' to type 'TextAdventures.Quest.Element'\" error\r\n\r\n```\r\nNPClist = NewObjectList()\r\nforeach (obj, AllObjects()) {\r\n  if (DoesInherit(obj, \"NPC\")) {\r\n    list add (NPClist, \"this\")\r\n  }\r\n}\r\nDisplayList (NPClist, false)\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>hmm that sounds easy, though my intial attempts at adapting the code very simply haven't been too effective, esentially gave a couple characters the type NPC to see if the code would just print out a list of them, it returns \"Unable to cast object of type 'System.String' to type 'TextAdventures.Quest.Element'\" error</p>\n<pre><code>NPClist = NewObjectList()\nforeach (obj, AllObjects()) {\n  if (DoesInherit(obj, \"NPC\")) {\n    list add (NPClist, \"this\")\n  }\n}\nDisplayList (NPClist, false)\n</code></pre>\n\n",
      "PostDate": "2016-08-17T22:03:41.6248555Z",
      "LastEditDate": "2016-08-17T22:05:28.1827037Z"
    },
    {
      "PostId": "749091f9-dfb9-4ae2-93fa-7396918e5112",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As Pixie has demonstrated, the basic concept is to give your Objects an indicator/flag of what type object/thing it is, which can be done with either a normal Attribute (String Attribute, Integer Attribute, Boolean Attribute, etc) or via an Inherited Attribute (using the Object Types / Type), which you can then check for in your loop (usually a 'foreach' Function loop).\r\n\r\n```\r\nfor checking (the 'if (condition: see #1 and #2 below)' checking):\r\n\r\n1A. normal Attributes use the 'HasAttribute', or the specific attribute type 'Has___' Functions (HasString, HasInt, HasDouble, etc)\r\n1B. you can also use the 'Get' Functions, 'GetAttribute' or the specific attribute type 'Get____' Functions (GetString, GetInt, GetDouble, GetObject, etc) too for normal Attributes, as they either succeed, or they fail, returning 'null'\r\n2. Inherited Attributes use the 'DoesInherit' Function\r\n```\r\n\r\nInitially, if you haven't manually put (or have) your  items into a list/dictionary or if you otherwise just need to (you're working with dynamic-ness), you use the 'foreach (Variable, AllObjects())', to search/loop/iterate through all the Objects in your game, but after this (or as apart of its scripting), you may want to put those desired items, into their own list/dictionary, so that you can now just search/loop/iterate through this smaller/specific list/dictionary of your desired items, rather than ALL of the objects in your game over and over (as this is a big waste of time and processing), if you can help it.\r\n\r\nfor an (full and complex/advanced) example of using 'Object Types / Types' capabilities/features:\r\n\r\n```\r\n<game name=\"xxx\">\r\n  <attr name=\"start\" type=\"script\">\r\n    data_object.monster_list = NewObjectList()\r\n    foreach (object_variable, AllObjects()) {\r\n      if (DoesInherit (object_variable, \"monster_type\")) {\r\n        list add (data_object.monster_list, object_variable)\r\n      }\r\n    }\r\n    // we can then use our (much smaller) 'data_object.monster_list' Objectlist Attribute (compared to a hidden/automatic objectlist created by quest, containing every Object in the game, which the 'AllObjects()' Function uses), which contains all of our monster Objects, for whatever we want and where-ever we want.\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"data_object\">\r\n  <attr name=\"sex_list\" type=\"simplestringlist\">male;female</attr>\r\n  <attr name=\"homo_race_list\" type=\"simplestringlist\">human;dwarf;elf;gnome;halfling;giant</attr>\r\n  <attr name=\"hybrid_race_list\" type=\"simplestringlist\">centaur;minotaur;satyr;vampire;werewolf;harpy;mermaid</attr>\r\n  <attr name=\"monster_race_list\" type=\"simplestringlist\">orc;ogre;troll;goblin;gremlin;cyclops</attr>\r\n  <attr name=\"combat_class_list\" type=\"simplestringlist\">warrior;knight;berserker;ranger;paladin</attr>\r\n  <attr name=\"magic_class_list\" type=\"simplestringlist\">wizard;mage;cleric;necromancer;sorcerer</attr>\r\n</object>\r\n\r\n<object name=\"room\">\r\n  <inherit name=\"room_type\" />\r\n</object>\r\n\r\n<object name=\"room2\">\r\n  <inherit name=\"room_type\" />\r\n</object>\r\n\r\n<object name=\"player\">\r\n  <inherit name=\"player_type\" />\r\n  <attr name=\"current_life\" type=\"int\">500</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">500</attr>\r\n  <attr name=\"damage\" type=\"int\">50</attr>\r\n</object>\r\n\r\n<object name=\"player2\">\r\n  <inherit name=\"player_type\" />\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n   <attr name=\"damage\" type=\"int\">100</attr>\r\n</object>\r\n\r\n<object name=\"orc\">\r\n  <inherit name=\"monster_type\" />\r\n  <attr name=\"current_life\" type=\"int\">100</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">100</attr>\r\n  <attr name=\"damage\" type=\"int\">10</attr>\r\n</object>\r\n\r\n<object name=\"ogre\">\r\n  <inherit name=\"monster_type\" />\r\n  <attr name=\"current_life\" type=\"int\">250</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">250</attr>\r\n  <attr name=\"damage\" type=\"int\">25</attr>\r\n</object>\r\n\r\n<type name=\"room_type\">\r\n  <attr name=\"description\"> type=\"string\">This is a room, an area of the game</attr>\r\n</type>\r\n\r\n<type name=\"character_type\">\r\n  <attr name=\"current_life\" type=\"int\">1</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">1</attr>\r\n  <attr name=\"damage\" type=\"int\">1</attr>\r\n  <attr name=\"life\" type=\"string\">1/1</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\"><![CDATA[\r\n    if (this.current_life > this.maximum_life) {\r\n      this.current_life = this.maximum_life\r\n    } else if (this.current_life < 0) {\r\n      this.current_life = 0\r\n    }\r\n    if (this.current_life = 0) {\r\n      this.dead = true\r\n    }\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  ]]></attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\"><![CDATA[\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  ]]></attr>\r\n</type>\r\n\r\n<type name=\"player_type\">\r\n  <inherit name=\"character_type\" />\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\"><![CDATA[\r\n    if (this.current_life <= 0) {\r\n      msg (\"You were killed or died.\")\r\n      msg (\"GAME OVER\")\r\n      finish\r\n    } else if (this.current_life > this.maximum_life) {\r\n      this.current_life = this.maximum_life\r\n    }\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  ]]></attr>\r\n  <attr name=\"statusattributes\" type=\"simplestringdictionary\">life = Life: !; damage = Damage: !</attr>\r\n</type>\r\n\r\n<type name=\"monster_type\">\r\n  <inherit name=\"character_type\" />\r\n  <attr name=\"parent\" type=\"object\">room2</attr>\r\n  <attr name=\"dead\" type=\"boolean\">false</attr>\r\n</type>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>As Pixie has demonstrated, the basic concept is to give your Objects an indicator/flag of what type object/thing it is, which can be done with either a normal Attribute (String Attribute, Integer Attribute, Boolean Attribute, etc) or via an Inherited Attribute (using the Object Types / Type), which you can then check for in your loop (usually a 'foreach' Function loop).</p>\n<pre><code>for checking (the 'if (condition: see #1 and #2 below)' checking):\n\n1A. normal Attributes use the 'HasAttribute', or the specific attribute type 'Has___' Functions (HasString, HasInt, HasDouble, etc)\n1B. you can also use the 'Get' Functions, 'GetAttribute' or the specific attribute type 'Get____' Functions (GetString, GetInt, GetDouble, GetObject, etc) too for normal Attributes, as they either succeed, or they fail, returning 'null'\n2. Inherited Attributes use the 'DoesInherit' Function\n</code></pre>\n<p>Initially, if you haven't manually put (or have) your  items into a list/dictionary or if you otherwise just need to (you're working with dynamic-ness), you use the 'foreach (Variable, AllObjects())', to search/loop/iterate through all the Objects in your game, but after this (or as apart of its scripting), you may want to put those desired items, into their own list/dictionary, so that you can now just search/loop/iterate through this smaller/specific list/dictionary of your desired items, rather than ALL of the objects in your game over and over (as this is a big waste of time and processing), if you can help it.</p>\n<p>for an (full and complex/advanced) example of using 'Object Types / Types' capabilities/features:</p>\n<pre><code>&lt;game name=\"xxx\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    data_object.monster_list = NewObjectList()\n    foreach (object_variable, AllObjects()) {\n      if (DoesInherit (object_variable, \"monster_type\")) {\n        list add (data_object.monster_list, object_variable)\n      }\n    }\n    // we can then use our (much smaller) 'data_object.monster_list' Objectlist Attribute (compared to a hidden/automatic objectlist created by quest, containing every Object in the game, which the 'AllObjects()' Function uses), which contains all of our monster Objects, for whatever we want and where-ever we want.\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"data_object\"&gt;\n  &lt;attr name=\"sex_list\" type=\"simplestringlist\"&gt;male;female&lt;/attr&gt;\n  &lt;attr name=\"homo_race_list\" type=\"simplestringlist\"&gt;human;dwarf;elf;gnome;halfling;giant&lt;/attr&gt;\n  &lt;attr name=\"hybrid_race_list\" type=\"simplestringlist\"&gt;centaur;minotaur;satyr;vampire;werewolf;harpy;mermaid&lt;/attr&gt;\n  &lt;attr name=\"monster_race_list\" type=\"simplestringlist\"&gt;orc;ogre;troll;goblin;gremlin;cyclops&lt;/attr&gt;\n  &lt;attr name=\"combat_class_list\" type=\"simplestringlist\"&gt;warrior;knight;berserker;ranger;paladin&lt;/attr&gt;\n  &lt;attr name=\"magic_class_list\" type=\"simplestringlist\"&gt;wizard;mage;cleric;necromancer;sorcerer&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room\"&gt;\n  &lt;inherit name=\"room_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room2\"&gt;\n  &lt;inherit name=\"room_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;500&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;500&lt;/attr&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;50&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player2\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n   &lt;attr name=\"damage\" type=\"int\"&gt;100&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;10&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ogre\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;250&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;250&lt;/attr&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;25&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=\"room_type\"&gt;\n  &lt;attr name=\"description\"&gt; type=\"string\"&gt;This is a room, an area of the game&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"character_type\"&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;1/1&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;&lt;![CDATA[\n    if (this.current_life &gt; this.maximum_life) {\n      this.current_life = this.maximum_life\n    } else if (this.current_life &lt; 0) {\n      this.current_life = 0\n    }\n    if (this.current_life = 0) {\n      this.dead = true\n    }\n    this.life = this.current_life + \"/\" + this.maximum_life\n  ]]&gt;&lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;&lt;![CDATA[\n    this.life = this.current_life + \"/\" + this.maximum_life\n  ]]&gt;&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"player_type\"&gt;\n  &lt;inherit name=\"character_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;&lt;![CDATA[\n    if (this.current_life &lt;= 0) {\n      msg (\"You were killed or died.\")\n      msg (\"GAME OVER\")\n      finish\n    } else if (this.current_life &gt; this.maximum_life) {\n      this.current_life = this.maximum_life\n    }\n    this.life = this.current_life + \"/\" + this.maximum_life\n  ]]&gt;&lt;/attr&gt;\n  &lt;attr name=\"statusattributes\" type=\"simplestringdictionary\"&gt;life = Life: !; damage = Damage: !&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"monster_type\"&gt;\n  &lt;inherit name=\"character_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room2&lt;/attr&gt;\n  &lt;attr name=\"dead\" type=\"boolean\"&gt;false&lt;/attr&gt;\n&lt;/type&gt;\n</code></pre>\n\n",
      "PostDate": "2016-08-17T22:37:09.5216716Z",
      "LastEditDate": "2016-08-18T07:52:59.3109153Z"
    },
    {
      "PostId": "c05ee075-a65d-48dc-b312-4da402afa2fd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ Talon:\r\n\r\njust replace your \"this\" with your use of 'obj', see corrected (and as an EXAMPLE too) code below:\r\n\r\n(actually, you need your 'NPClist' Objectlist to be an Attribute, as it will be destroyed when your scripting is done, as you have it as a Variable, not an Attribute)\r\n\r\n(you can replace my 'data_object' with whatever you want, this is to just show that you need an Object to make it be an Attribute VARIABLE, OBJECT_NAME.ATTRIBUTE_NAME, and not just a Variable VARIABLE, Variable_NAME)\r\n\r\nVARIABLES (keeping this simple):\r\n1. Variable: this is local, meaning that it can only be used within its scripting, and once that scripting is done, it is destroyed\r\n2. Attribute: this is global, as it is attached/connected-to/within an Object, and thus so long as the Object exists or still exists, the Attribute is 'saved/stored' and thus you can 'load'/use it anywhere in your game, and as much as you want too.\r\n3. Arguments/Parameters: these deal with Functions/Commands/etc\r\n\r\n```\r\n<object name=\"data_object\">\r\n</object>\r\n\r\ndata_object.NPClist = NewObjectList()\r\nforeach (obj, AllObjects()) {\r\n  if (DoesInherit(obj, \"NPC\")) {\r\n    list add (data_object.NPClist, obj)\r\n  }\r\n}\r\nDisplayList (data_object.NPClist, false)\r\n```\r\n\r\n--------------------------------------------\r\n\r\nthis is how 'foreach' works conceptually, an example:\r\n\r\n```\r\n<object name=\"data_object\">\r\n  <attr name=\"team\" type=\"objectlist\">Joe;Jim;Jeff</attr>\r\n</object>\r\n\r\n<object name=\"Joe\">\r\n  <inherit name=\"character_type\" />\r\n</object>\r\n\r\n<object name=\"Jim\">\r\n  <inherit name=\"character_type\" />\r\n</object>\r\n\r\n<object name=\"Jeff\">\r\n  <inherit name=\"character_type\" />\r\n</object>\r\n\r\n<type name=\"character_type\">\r\n  <attr name=\"run_laps\" type=\"script\">\r\n    msg (this.name + \" runs laps\")\r\n  </attr>\r\n</type>\r\n\r\n// or in code scripting, to create your objectlist (one way of doing so): data_object.team = split (\"Joe;Jim;Jeff\", \";\")\r\n\r\nforeach (team_member, data_object.team) {\r\n  invoke (team_member.run_laps) // or you can use 'do', which is more powerful/useful than 'invoke', but for running a simple Script Attribute, 'invoke' is fine, and thus I used it here.\r\n}\r\n\r\n// team_member = Joe ----> team_member.run_laps -----> Joe.run_laps\r\n// team_member = Jim ----> team_member.run_laps -----> Jim.run_laps\r\n// team_member = Jeff ----> team_member.run_laps -----> Jeff.run_laps\r\n\r\n// output:\r\nJoe runs laps\r\nJim runs laps\r\nJeff runs laps\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>@ Talon:</p>\n<p>just replace your \"this\" with your use of 'obj', see corrected (and as an EXAMPLE too) code below:</p>\n<p>(actually, you need your 'NPClist' Objectlist to be an Attribute, as it will be destroyed when your scripting is done, as you have it as a Variable, not an Attribute)</p>\n<p>(you can replace my 'data_object' with whatever you want, this is to just show that you need an Object to make it be an Attribute VARIABLE, OBJECT_NAME.ATTRIBUTE_NAME, and not just a Variable VARIABLE, Variable_NAME)</p>\n<p>VARIABLES (keeping this simple):</p>\n<ol>\n<li>Variable: this is local, meaning that it can only be used within its scripting, and once that scripting is done, it is destroyed</li>\n<li>Attribute: this is global, as it is attached/connected-to/within an Object, and thus so long as the Object exists or still exists, the Attribute is 'saved/stored' and thus you can 'load'/use it anywhere in your game, and as much as you want too.</li>\n<li>Arguments/Parameters: these deal with Functions/Commands/etc</li>\n</ol>\n<pre><code>&lt;object name=\"data_object\"&gt;\n&lt;/object&gt;\n\ndata_object.NPClist = NewObjectList()\nforeach (obj, AllObjects()) {\n  if (DoesInherit(obj, \"NPC\")) {\n    list add (data_object.NPClist, obj)\n  }\n}\nDisplayList (data_object.NPClist, false)\n</code></pre>\n<hr>\n<p>this is how 'foreach' works conceptually, an example:</p>\n<pre><code>&lt;object name=\"data_object\"&gt;\n  &lt;attr name=\"team\" type=\"objectlist\"&gt;Joe;Jim;Jeff&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"Joe\"&gt;\n  &lt;inherit name=\"character_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"Jim\"&gt;\n  &lt;inherit name=\"character_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"Jeff\"&gt;\n  &lt;inherit name=\"character_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"character_type\"&gt;\n  &lt;attr name=\"run_laps\" type=\"script\"&gt;\n    msg (this.name + \" runs laps\")\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n// or in code scripting, to create your objectlist (one way of doing so): data_object.team = split (\"Joe;Jim;Jeff\", \";\")\n\nforeach (team_member, data_object.team) {\n  invoke (team_member.run_laps) // or you can use 'do', which is more powerful/useful than 'invoke', but for running a simple Script Attribute, 'invoke' is fine, and thus I used it here.\n}\n\n// team_member = Joe ----&gt; team_member.run_laps -----&gt; Joe.run_laps\n// team_member = Jim ----&gt; team_member.run_laps -----&gt; Jim.run_laps\n// team_member = Jeff ----&gt; team_member.run_laps -----&gt; Jeff.run_laps\n\n// output:\nJoe runs laps\nJim runs laps\nJeff runs laps\n</code></pre>\n\n",
      "PostDate": "2016-08-17T22:55:37.4405148Z",
      "LastEditDate": "2016-08-18T08:08:55.4006918Z"
    },
    {
      "PostId": "ecc10623-d71d-4126-942a-e74f6d9dd45f",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is exceptionally helpful and will get to playing around with it tomorrow and get it working, you have both been a big help, especially the Examples HK",
      "EditableFormat": "markdown",
      "HTML": "<p>This is exceptionally helpful and will get to playing around with it tomorrow and get it working, you have both been a big help, especially the Examples HK</p>\n\n",
      "PostDate": "2016-08-18T00:59:17.6887627Z",
      "LastEditDate": null
    },
    {
      "PostId": "e5e4b950-97f5-440d-8ccd-f9dab2d6f649",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you need any help with or in-understanding, anything, ask! I have a pretty lot of advanced (if you're new to this stuff) usages going on in my code.",
      "EditableFormat": "markdown",
      "HTML": "<p>if you need any help with or in-understanding, anything, ask! I have a pretty lot of advanced (if you're new to this stuff) usages going on in my code.</p>\n\n",
      "PostDate": "2016-08-18T20:15:53.8919386Z",
      "LastEditDate": "2016-08-18T20:16:34.9749456Z"
    },
    {
      "PostId": "f0e95a14-d2fb-43f5-bd74-91d2c02651d8",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "AvatarUrl": "http://i.imgur.com/BIofNn8b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I learned a lot from HK when I first started looking at this last month, essentially asking the same question as you did. It made a world of difference in my understanding of coding. Now, I don't know whether you will find what I'm going to say of any use, but once you get this current NPC thing mastered, the next thing you might wish to do is to have a permanent list of your NPC's in the event that you wish to reference all NPC's several times. That way you don't have to keep scanning the entire game for NPC's each and every time -- you already have a list of them .\r\n\r\nFor instance, you mentioned summoning alive bosses to the player's location. You also mentioned randomly summoning an ally. If these are each one-time events and you'll never refer to these types again, then I'd probably just go with with the example Pixie gave you in the first response. But if you wish to later randomly resurrect a dead boss, or send the player and all allies to a random room where a boss is ready to do battle, or similarly reference these objects of these types that are all over the game, I recommend that you make a permanent object list. \r\n\r\nFor me, permanent object lists are not merely convenient, but they help me keep my thoughts straight and things neatly organized when I'm creating scripts that refer to all objects of a certain group. This is a little tricky, because unlike string lists, object lists cannot be directly attached to objects in the game until the game is actually started (or at least I haven't found a way to do this). So what I do is add a function that creates the permanent object list, and then call that function in the startup script.\r\n\r\n<B>Example for objects with \"NPC\" type:</B>\r\n\r\n```\r\nNPC_list = NewObjectList()\r\nforeach (obj, AllObjects()) {\r\n  if (DoesInherit(obj, \"NPC\")) {\r\n    list add (NPC_list, obj)\r\n  }\r\n}\r\ngame.NPC_list = NPC_list\r\n```\r\n\r\nWith that script, you now have a permanent object list of NPC's saved to <B>game.NPC_list</B>. Then you can directly reference the NPC's, and only the NPC's:\r\n\r\n```\r\nforeach (NPC, game.NPC_list) {\r\n  // Do stuff\r\n}\r\n```\r\n\r\nHowever, NPC can be a bit too vague if you are having good guys and baddies. Fortunately, you can borrow this concept to make other permanent object lists too, provided you have those types (game.ally_list, game.boss_list, game.treasures_list, etc.). The only caution is that if you add/remove objects of these types, then you will need to update the object list.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I learned a lot from HK when I first started looking at this last month, essentially asking the same question as you did. It made a world of difference in my understanding of coding. Now, I don't know whether you will find what I'm going to say of any use, but once you get this current NPC thing mastered, the next thing you might wish to do is to have a permanent list of your NPC's in the event that you wish to reference all NPC's several times. That way you don't have to keep scanning the entire game for NPC's each and every time -- you already have a list of them .</p>\n<p>For instance, you mentioned summoning alive bosses to the player's location. You also mentioned randomly summoning an ally. If these are each one-time events and you'll never refer to these types again, then I'd probably just go with with the example Pixie gave you in the first response. But if you wish to later randomly resurrect a dead boss, or send the player and all allies to a random room where a boss is ready to do battle, or similarly reference these objects of these types that are all over the game, I recommend that you make a permanent object list.</p>\n<p>For me, permanent object lists are not merely convenient, but they help me keep my thoughts straight and things neatly organized when I'm creating scripts that refer to all objects of a certain group. This is a little tricky, because unlike string lists, object lists cannot be directly attached to objects in the game until the game is actually started (or at least I haven't found a way to do this). So what I do is add a function that creates the permanent object list, and then call that function in the startup script.</p>\n<p><b>Example for objects with \"NPC\" type:</b></p>\n<pre><code>NPC_list = NewObjectList()\nforeach (obj, AllObjects()) {\n  if (DoesInherit(obj, \"NPC\")) {\n    list add (NPC_list, obj)\n  }\n}\ngame.NPC_list = NPC_list\n</code></pre>\n<p>With that script, you now have a permanent object list of NPC's saved to <b>game.NPC_list</b>. Then you can directly reference the NPC's, and only the NPC's:</p>\n<pre><code>foreach (NPC, game.NPC_list) {\n  // Do stuff\n}\n</code></pre>\n<p>However, NPC can be a bit too vague if you are having good guys and baddies. Fortunately, you can borrow this concept to make other permanent object lists too, provided you have those types (game.ally_list, game.boss_list, game.treasures_list, etc.). The only caution is that if you add/remove objects of these types, then you will need to update the object list.</p>\n\n",
      "PostDate": "2016-08-19T01:33:51.0274913Z",
      "LastEditDate": null
    },
    {
      "PostId": "165e4f0d-7357-4358-9a1c-db7ffce2c931",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mmhmm Pretty much did the saving to a game list after i made sure the testing item i had worked fine when working around with it.. \r\nGot what i wanted done conceptually to work and though I still need to do the actual details and planning around the game I know when i need it i'll have the tester object to use as a guide\r\n\r\n\r\n\r\nThough not really connected at all.. It might be just as simple a question, Does quest have a \"Between\" function for numbers, lets say I want a characters description to change based on some counter that'll be going up and down with various actions each scoring a certain number of points, so if the count is 1-10 the character looks normal 11-20 they have become more deranged, 21-30 they look monstrous, and beyond that the mind is gone\r\n\r\nThink I could do it with changing flags as thresholds are met, but it seems vastly more complicated than it should be when  using attributes where the code could just see what number it is and spit out the proper description-**Edit** Managed to get it work with nested If statements, > and <\r\n\r\n\r\n\r\nAnd more in the not connected file- Is there a way to customize/put  a string comand for removing items from a container.. Ie, you take a jar of milk from a fridge vs you search around for a jar of milk in your backpack.. I'd guess it would be in the default dictionaries, but can you customize them for specific items?",
      "EditableFormat": "markdown",
      "HTML": "<p>Mmhmm Pretty much did the saving to a game list after i made sure the testing item i had worked fine when working around with it..<br>\nGot what i wanted done conceptually to work and though I still need to do the actual details and planning around the game I know when i need it i'll have the tester object to use as a guide</p>\n<p>Though not really connected at all.. It might be just as simple a question, Does quest have a \"Between\" function for numbers, lets say I want a characters description to change based on some counter that'll be going up and down with various actions each scoring a certain number of points, so if the count is 1-10 the character looks normal 11-20 they have become more deranged, 21-30 they look monstrous, and beyond that the mind is gone</p>\n<p>Think I could do it with changing flags as thresholds are met, but it seems vastly more complicated than it should be when  using attributes where the code could just see what number it is and spit out the proper description-<strong>Edit</strong> Managed to get it work with nested If statements, &gt; and &lt;</p>\n<p>And more in the not connected file- Is there a way to customize/put  a string comand for removing items from a container.. Ie, you take a jar of milk from a fridge vs you search around for a jar of milk in your backpack.. I'd guess it would be in the default dictionaries, but can you customize them for specific items?</p>\n\n",
      "PostDate": "2016-08-19T15:46:46.4514541Z",
      "LastEditDate": "2016-08-20T01:10:32.5694705Z"
    },
    {
      "PostId": "1ea9b440-c1fc-442f-b992-5871eb131364",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You should study the doc site's contents, such as the Scripts/Functions:\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/\r\nhttp://docs.textadventures.co.uk/quest/functions/ (categorical order)\r\nhttp://docs.textadventures.co.uk/quest/functions/index_allfunctions.html (alphetical order)\r\nhttp://docs.textadventures.co.uk/quest/scopes.html\r\n\r\nsuch as:\r\n\r\nContains // used upon Objects\r\nGetDirectChildren // used upon Objects, creates and returns an Objectlist Attribute\r\nGetAllChildObjects // used upon Objects, creates and returns an Objectlist Attribute\r\nListContains // used upon List Attribute\r\nDictionaryContains // used upon Dictionary Attribute\r\nGot // used upon the Player Object\r\nAllObjects // creates and returns an Objectlist Attribute\r\nvarious 'Scope' Functions // creates and returns an Objectlist Attribute\r\n\r\n------\r\n\r\nI'm not quite sure what you're asking for, but here's an example using the 'game.pov' Object (the currently controlled Player Object):\r\n\r\n```\r\nif (Contains (game.pov, potion)) {\r\n  invoke (potion.drink)\r\n  MoveObject (potion, data_object)\r\n}\r\n\r\n// or (these are/do the same thing):\r\n\r\nif (ListContains (ScopeInventory(), potion)) {\r\n  invoke (potion.drink)\r\n  MoveObject (potion, data_object)\r\n}\r\n\r\n// a concrete example:\r\n\r\n<command name=\"drink_command\">\r\n  <pattern>drink #object1# from #object2#</pattern>\r\n  <script>\r\n    if (HasScript (object1, \"drink\") and game.pov.parent = object2.parent and Contains (object2, object1)) {\r\n      invoke (object1.drink)\r\n      MoveObject (object1, data_object)\r\n    } else {\r\n      msg (\"The command input failed, try different inputs or a different location.\")\r\n    }\r\n  </script>\r\n</command>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You should study the doc site's contents, such as the Scripts/Functions:</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/<br>\nhttp://docs.textadventures.co.uk/quest/functions/ (categorical order)<br>\nhttp://docs.textadventures.co.uk/quest/functions/index_allfunctions.html (alphetical order)<br>\nhttp://docs.textadventures.co.uk/quest/scopes.html</p>\n<p>such as:</p>\n<p>Contains // used upon Objects<br>\nGetDirectChildren // used upon Objects, creates and returns an Objectlist Attribute<br>\nGetAllChildObjects // used upon Objects, creates and returns an Objectlist Attribute<br>\nListContains // used upon List Attribute<br>\nDictionaryContains // used upon Dictionary Attribute<br>\nGot // used upon the Player Object<br>\nAllObjects // creates and returns an Objectlist Attribute<br>\nvarious 'Scope' Functions // creates and returns an Objectlist Attribute</p>\n<hr>\n<p>I'm not quite sure what you're asking for, but here's an example using the 'game.pov' Object (the currently controlled Player Object):</p>\n<pre><code>if (Contains (game.pov, potion)) {\n  invoke (potion.drink)\n  MoveObject (potion, data_object)\n}\n\n// or (these are/do the same thing):\n\nif (ListContains (ScopeInventory(), potion)) {\n  invoke (potion.drink)\n  MoveObject (potion, data_object)\n}\n\n// a concrete example:\n\n&lt;command name=\"drink_command\"&gt;\n  &lt;pattern&gt;drink #object1# from #object2#&lt;/pattern&gt;\n  &lt;script&gt;\n    if (HasScript (object1, \"drink\") and game.pov.parent = object2.parent and Contains (object2, object1)) {\n      invoke (object1.drink)\n      MoveObject (object1, data_object)\n    } else {\n      msg (\"The command input failed, try different inputs or a different location.\")\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n\n",
      "PostDate": "2016-08-20T02:05:54.1127764Z",
      "LastEditDate": "2016-08-20T02:15:52.0937086Z"
    }
  ]
}
