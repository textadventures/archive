{
  "Topic": {
    "TopicId": "c_g0nnl4seya_l3gjbevyg",
    "ForumId": "10",
    "Title": "Text Processor Object Link Nesting Bug",
    "LastUpdated": "2018-12-03T06:05:11.0929705Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8e349eaa-8498-45a3-a835-ae1b48bd7ef3",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This works:\r\n```\r\nmsg (\"{object:pencil}\")\r\n```\r\nThen <u>```pencil```</u> will display as an object link.\r\n\r\nThis doesn't work, but should:\r\n```\r\nmsg (\"{object:{pencil.name}}\")\r\n```\r\n```{object:pencil}``` will be printed out.\r\n\r\nI.e., nesting any ```{object.attribute}``` inside of ```{object:XXX}``` won't work.  This means that you can only print object links with the text processor for specifically named objects, never attributes or variables.",
      "EditableFormat": "markdown",
      "HTML": "<p>This works:</p>\n<pre><code>msg (\"{object:pencil}\")\n</code></pre>\n<p>Then <u><code>pencil</code></u> will display as an object link.</p>\n<p>This doesn't work, but should:</p>\n<pre><code>msg (\"{object:{pencil.name}}\")\n</code></pre>\n<p><code>{object:pencil}</code> will be printed out.</p>\n<p>I.e., nesting any <code>{object.attribute}</code> inside of <code>{object:XXX}</code> won't work.  This means that you can only print object links with the text processor for specifically named objects, never attributes or variables.</p>\n\n",
      "PostDate": "2018-12-03T06:05:11.0929705Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1a98839b-072a-4829-b369-e70b7a38ce48",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The only other thing I could find that might be a workaround was \"Local variables\" found here:\r\n\r\nhttp://docs.textadventures.co.uk/quest/text_processor.html\r\n\r\nCouldn't get it to work and am not even entirely sure what this is supposed to do...",
      "EditableFormat": "markdown",
      "HTML": "<p>The only other thing I could find that might be a workaround was \"Local variables\" found here:</p>\n<p>http://docs.textadventures.co.uk/quest/text_processor.html</p>\n<p>Couldn't get it to work and am not even entirely sure what this is supposed to do...</p>\n\n",
      "PostDate": "2018-12-03T06:20:43.6355549Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d8f1e950-8118-42b7-8c2d-bd04054253ec",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The text processor is fairly limited, and there's a lot of cases where nesting doesn't work properly; although I believe some of them were fixed in 5.8\r\n\r\nIn this case, the text processor looks for an object named `{pencil.name}`, doesn't find one, and because it's failed it ignores the `{object:` command and escapes the curly brackets before passing the string inside it to the text processor.\r\n\r\nFor the most part, the outermost text processor commands are processed first.\r\n\r\nHowever, as of 5.8 if you do:\r\n```\r\ngame.text_processor_variables = NewDictionary()\r\ndictionary add (game.text_processor_variables, \"obj\", pencil)\r\nmsg (\"I can see a {object:obj}.\")\r\n```\r\nit will output <code>I can see a <u>pencil</u>.</code> which is probably what you wanted. The parameter passed to `{object:` can be either a variable or an object name, just like a bareword outside of the text processor.",
      "EditableFormat": "markdown",
      "HTML": "<p>The text processor is fairly limited, and there's a lot of cases where nesting doesn't work properly; although I believe some of them were fixed in 5.8</p>\n<p>In this case, the text processor looks for an object named <code>{pencil.name}</code>, doesn't find one, and because it's failed it ignores the <code>{object:</code> command and escapes the curly brackets before passing the string inside it to the text processor.</p>\n<p>For the most part, the outermost text processor commands are processed first.</p>\n<p>However, as of 5.8 if you do:</p>\n<pre><code>game.text_processor_variables = NewDictionary()\ndictionary add (game.text_processor_variables, \"obj\", pencil)\nmsg (\"I can see a {object:obj}.\")\n</code></pre>\n<p>it will output <code>I can see a <u>pencil</u>.</code> which is probably what you wanted. The parameter passed to <code>{object:</code> can be either a variable or an object name, just like a bareword outside of the text processor.</p>\n\n",
      "PostDate": "2018-12-03T08:52:22.3824798Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7febf790-1991-4a84-9a6e-d0b431bad38f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<details>\r\n<summary>Random aside</summary>\r\nJust thinking… maybe it would be more convenient to have something like:\r\n\r\n```\r\n  <function name=\"ProcessText\" type=\"string\" parameters=\"text, variables\">\r\n    data = NewDictionary()\r\n    dictionary add (data, \"fulltext\", text)\r\n    if (IsDefined(\"variables\")) {\r\n      if (not EndsWith (TypeOf (variables), \"dictionary\")) {\r\n        variables = QuickParams (\"this\", variables)\r\n      }\r\n      if (EndsWith (TypeOf (game, \"text_processor_variables\"), \"dictionary\")) {\r\n        vars = NewDictionary()\r\n        foreach (key, game.text_processor_variables) {\r\n          if (not DictionaryContains (variables, key)) dictionary add (vars, key, DictionaryItem (game.text_processor_variables, key))\r\n        }\r\n        foreach (key, variables) {\r\n          dictionary add (vars, key, DictionaryItem (variables, key))\r\n        }\r\n        dictionary add (data, vars)\r\n      }\r\n      else {\r\n        dictionary add (data, variables)\r\n      }\r\n    }\r\n    else if (EndsWith (TypeOf (game, \"text_processor_variables\"), \"dictionary\")) {\r\n      dictionary add (data, game.text_processor_variables)\r\n    }\r\n    text = ProcessTextSection(text, data)\r\n    return (Replace(Replace(text, \"@@@open@@@\", \"{\"), \"@@@close@@@\", \"}\"))\r\n  </function>\r\n```\r\nand pass the `data` dictionary to ParamsForTextProcessor and ObjectForTextProcessor.\r\n\r\nThe user could then do `ProcessText (\"The {object:thing} is blue.\", QuickParams(\"thing\", pencil))` or `ProcessText (\"The {object:this} is blue.\", pen)`; while allowing `text_processor_variables` to be used for variables which you want to persist for multiple calls to ProcessText; as well as for backwards compatibility\r\n</details>\r\n\r\nNot sure why, but looking at this made me wonder about a slightly more intuitive (to me, at least) way the text processor could be made to handle variables.",
      "EditableFormat": "markdown",
      "HTML": "<details>\n<summary>Random aside</summary>\nJust thinking… maybe it would be more convenient to have something like:\n<pre><code>  &lt;function name=\"ProcessText\" type=\"string\" parameters=\"text, variables\"&gt;\n    data = NewDictionary()\n    dictionary add (data, \"fulltext\", text)\n    if (IsDefined(\"variables\")) {\n      if (not EndsWith (TypeOf (variables), \"dictionary\")) {\n        variables = QuickParams (\"this\", variables)\n      }\n      if (EndsWith (TypeOf (game, \"text_processor_variables\"), \"dictionary\")) {\n        vars = NewDictionary()\n        foreach (key, game.text_processor_variables) {\n          if (not DictionaryContains (variables, key)) dictionary add (vars, key, DictionaryItem (game.text_processor_variables, key))\n        }\n        foreach (key, variables) {\n          dictionary add (vars, key, DictionaryItem (variables, key))\n        }\n        dictionary add (data, vars)\n      }\n      else {\n        dictionary add (data, variables)\n      }\n    }\n    else if (EndsWith (TypeOf (game, \"text_processor_variables\"), \"dictionary\")) {\n      dictionary add (data, game.text_processor_variables)\n    }\n    text = ProcessTextSection(text, data)\n    return (Replace(Replace(text, \"@@@open@@@\", \"{\"), \"@@@close@@@\", \"}\"))\n  &lt;/function&gt;\n</code></pre>\n<p>and pass the <code>data</code> dictionary to ParamsForTextProcessor and ObjectForTextProcessor.</p>\n<p>The user could then do <code>ProcessText (\"The {object:thing} is blue.\", QuickParams(\"thing\", pencil))</code> or <code>ProcessText (\"The {object:this} is blue.\", pen)</code>; while allowing <code>text_processor_variables</code> to be used for variables which you want to persist for multiple calls to ProcessText; as well as for backwards compatibility</p>\n</details>\n<p>Not sure why, but looking at this made me wonder about a slightly more intuitive (to me, at least) way the text processor could be made to handle variables.</p>\n\n",
      "PostDate": "2018-12-03T09:14:54.6970486Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1f69c5df-096c-4d54-8654-6882164f8b2a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "To me, the text processor is only for description text boxes -- like for when we are just filling in room or object descriptions in the GUI and don't feel like switching it to a script just to print an attribute or two in the prose.\r\n\r\nSo, I very rarely use the text processor in a ```msg()```, since it's just as easy (if not easier (and less stressful on Quest)) to just break in and out of a literal string with ```\" +```.\r\n\r\nExample: ```msg(\"All of a sudden, and out of nowhere, a \" + ObjectLink(pencil.name) + \" appears!\")```\r\n\r\n...but I'm thinking you may just be using a ```msg()``` in your example because it is merely an example?  Or perhaps you just dig using the text processor...\r\n\r\nEither way, I'm not judging.\r\n\r\nI'm also assuming you are attempting to process ```pencil.name``` as an example.  Your goal must be to use ```obj.name``` (with the variable ```obj```, or something of that nature) in the code.  Otherwise, I don't know why you wouldn't just do ```{object:pencil}```, seeming how you already know the pencil's name.\r\n\r\n---\r\nHere are things that work for me (in Quest 5.8 and in Quest 5.7.2 (which is the version you (Dcoder) are using, if my calculations are correct)):\r\n\r\n```\r\n// Using text processor only\r\nmsg (\"{object:pencil}\")\r\nmsg(\"{=ObjectLink(GetObject(pencil.name))}\")\r\n\r\n// using whatever works\r\nmsg (\"{object:\" + pencil.name + \"}\")\r\nmsg (ObjectLink(pencil))\r\nmsg (ObjectLink(GetObject(pencil.name)))\r\n```\r\n\r\n---\r\nAlso, I'm pretty sure when the text processor sees ```{object: {whatever_string.here}}```, it immediately prints whatever is returned by something very much like this:\r\n```\r\nObjectLink(GetObject(\"{whatever_string.here}\"))\r\n```\r\n\r\n---\r\nHere is the actual function (```ProcessTextCommand_Object```) in Quest 5.7.2:\r\n\r\n<details>\r\n\r\n```\r\nobjectname = Mid(section, 8)\r\ntext = \"\"\r\ncolon = Instr(objectname, \":\")\r\nif (colon > 0) {\r\n  text = Mid(objectname, colon + 1)\r\n  objectname = Left(objectname, colon - 1)\r\n}\r\nif (not game.text_processor_this = null) {\r\n  objectname = Replace(objectname, \"this\", game.text_processor_this.name)\r\n}\r\nobject = GetObject(objectname)\r\nif (object = null) {\r\n  return (\"@@@open@@@\" + ProcessTextSection(section, data) + \"@@@close@@@\")\r\n}\r\nelse {\r\n  if (LengthOf(text) = 0) {\r\n    text = SafeXML(GetDisplayAlias(object))\r\n  }\r\n  if (game.enablehyperlinks) {\r\n    linkid = ProcessTextCommand_GetNextLinkId()\r\n    colour = \"\"\r\n    if (HasString(object, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\r\n      colour = object.linkcolour\r\n    }\r\n    else {\r\n      colour = GetLinkTextColour()\r\n    }\r\n    style = GetCurrentTextFormat(colour)\r\n    return (\"<a id=\\\"\" + linkid + \"\\\" style=\\\"\" + style + \"\\\" class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + object.name + \"\\\">\" + text + \"</a>\")\r\n  }\r\n  else {\r\n    return (text)\r\n  }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n---\r\nHere's that same function in Quest 5.8 (it is a little different!):\r\n\r\n<details>\r\n\r\n```\r\n  <function name=\"ProcessTextCommand_Object\" type=\"string\" parameters=\"section, data\">\r\n    <![CDATA[\r\n    objectname = Mid(section, 8)\r\n    text = \"\"\r\n    colon = Instr(objectname, \":\")\r\n    if (colon > 0) {\r\n      text = Mid(objectname, colon + 1)\r\n      objectname = Left(objectname, colon - 1)\r\n    }\r\n    object = ObjectForTextProcessor(objectname)\r\n    if (object = null) {\r\n      return (\"@@@open@@@\" + ProcessTextSection(section, data) + \"@@@close@@@\")\r\n    }\r\n    else {\r\n      if (LengthOf(text) = 0) {\r\n        text = SafeXML(GetDisplayAlias(object))\r\n      }\r\n      if (game.enablehyperlinks) {\r\n        linkid = ProcessTextCommand_GetNextLinkId()\r\n        colour = \"\"\r\n        if (HasString(object, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\r\n          colour = object.linkcolour\r\n        }\r\n        else {\r\n          colour = GetLinkTextColour()\r\n        }\r\n        style = GetCurrentTextFormat(colour)\r\n        return (\"<a id=\\\"\" + linkid + \"\\\" style=\\\"\" + style + \"\\\" class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + object.name + \"\\\">\" + text + \"</a>\")\r\n      }\r\n      else {\r\n        return (text)\r\n      }\r\n    }\r\n    ]]>\r\n</function>\r\n```\r\n\r\n</details>\r\n\r\n---\r\nHere's the new function that revised function uses:\r\n\r\n<details>\r\n\r\n```\r\n  <function name=\"ObjectForTextProcessor\" type=\"object\" parameters=\"objectname\">\r\n    if (not game.text_processor_this = null and objectname = \"this\") {\r\n      object = game.text_processor_this\r\n      if (TypeOf(object) = \"object\") {\r\n        return (object)\r\n      }\r\n    }\r\n\r\n    if (not game.text_processor_variables = null and DictionaryContains (game.text_processor_variables, objectname)) {\r\n      object = DictionaryItem(game.text_processor_variables, objectname)\r\n      if (TypeOf(object) = \"object\") {\r\n        return (object)\r\n      }\r\n    }\r\n   \r\n    return (GetObject(objectname))\r\n</function>\r\n```\r\n\r\n</details>\r\n\r\n\r\n---\r\n**BONUS**\r\n\r\nThings that do <u>not</u> work:\r\n\r\n```\r\nmsg (\"{object:{pencil.name}}\") \r\n// Output: {object:pencil}\r\nmsg (\"{object:{=GetObject(pencil.name)}}\") \r\n// Output: {object:Object: pencil}\r\nmsg (\"{object:{=ToString(GetObject(pencil.name))}}\") \r\n// Output: {object:Object: pencil}\r\nmsg (\"{object:{=ToString(GetDisplayName(GetObject(pencil.name)))}}\") \r\n// Output: {object:a pencil}\r\n```\r\n\r\n---\r\nMaybe the ```ProcessTextCommand_Object``` function should check for ```{``` in the ```section``` before trying to use ```GetObject()```?",
      "EditableFormat": "markdown",
      "HTML": "<p>To me, the text processor is only for description text boxes -- like for when we are just filling in room or object descriptions in the GUI and don't feel like switching it to a script just to print an attribute or two in the prose.</p>\n<p>So, I very rarely use the text processor in a <code>msg()</code>, since it's just as easy (if not easier (and less stressful on Quest)) to just break in and out of a literal string with <code>\" +</code>.</p>\n<p>Example: <code>msg(\"All of a sudden, and out of nowhere, a \" + ObjectLink(pencil.name) + \" appears!\")</code></p>\n<p>...but I'm thinking you may just be using a <code>msg()</code> in your example because it is merely an example?  Or perhaps you just dig using the text processor...</p>\n<p>Either way, I'm not judging.</p>\n<p>I'm also assuming you are attempting to process <code>pencil.name</code> as an example.  Your goal must be to use <code>obj.name</code> (with the variable <code>obj</code>, or something of that nature) in the code.  Otherwise, I don't know why you wouldn't just do <code>{object:pencil}</code>, seeming how you already know the pencil's name.</p>\n<hr>\n<p>Here are things that work for me (in Quest 5.8 and in Quest 5.7.2 (which is the version you (Dcoder) are using, if my calculations are correct)):</p>\n<pre><code>// Using text processor only\nmsg (\"{object:pencil}\")\nmsg(\"{=ObjectLink(GetObject(pencil.name))}\")\n\n// using whatever works\nmsg (\"{object:\" + pencil.name + \"}\")\nmsg (ObjectLink(pencil))\nmsg (ObjectLink(GetObject(pencil.name)))\n</code></pre>\n<hr>\n<p>Also, I'm pretty sure when the text processor sees <code>{object: {whatever_string.here}}</code>, it immediately prints whatever is returned by something very much like this:</p>\n<pre><code>ObjectLink(GetObject(\"{whatever_string.here}\"))\n</code></pre>\n<hr>\n<p>Here is the actual function (<code>ProcessTextCommand_Object</code>) in Quest 5.7.2:</p>\n<details>\n<pre><code>objectname = Mid(section, 8)\ntext = \"\"\ncolon = Instr(objectname, \":\")\nif (colon &gt; 0) {\n  text = Mid(objectname, colon + 1)\n  objectname = Left(objectname, colon - 1)\n}\nif (not game.text_processor_this = null) {\n  objectname = Replace(objectname, \"this\", game.text_processor_this.name)\n}\nobject = GetObject(objectname)\nif (object = null) {\n  return (\"@@@open@@@\" + ProcessTextSection(section, data) + \"@@@close@@@\")\n}\nelse {\n  if (LengthOf(text) = 0) {\n    text = SafeXML(GetDisplayAlias(object))\n  }\n  if (game.enablehyperlinks) {\n    linkid = ProcessTextCommand_GetNextLinkId()\n    colour = \"\"\n    if (HasString(object, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\n      colour = object.linkcolour\n    }\n    else {\n      colour = GetLinkTextColour()\n    }\n    style = GetCurrentTextFormat(colour)\n    return (\"&lt;a id=\\\"\" + linkid + \"\\\" style=\\\"\" + style + \"\\\" class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + object.name + \"\\\"&gt;\" + text + \"&lt;/a&gt;\")\n  }\n  else {\n    return (text)\n  }\n}\n</code></pre>\n</details>\n<hr>\n<p>Here's that same function in Quest 5.8 (it is a little different!):</p>\n<details>\n<pre><code>  &lt;function name=\"ProcessTextCommand_Object\" type=\"string\" parameters=\"section, data\"&gt;\n    &lt;![CDATA[\n    objectname = Mid(section, 8)\n    text = \"\"\n    colon = Instr(objectname, \":\")\n    if (colon &gt; 0) {\n      text = Mid(objectname, colon + 1)\n      objectname = Left(objectname, colon - 1)\n    }\n    object = ObjectForTextProcessor(objectname)\n    if (object = null) {\n      return (\"@@@open@@@\" + ProcessTextSection(section, data) + \"@@@close@@@\")\n    }\n    else {\n      if (LengthOf(text) = 0) {\n        text = SafeXML(GetDisplayAlias(object))\n      }\n      if (game.enablehyperlinks) {\n        linkid = ProcessTextCommand_GetNextLinkId()\n        colour = \"\"\n        if (HasString(object, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\n          colour = object.linkcolour\n        }\n        else {\n          colour = GetLinkTextColour()\n        }\n        style = GetCurrentTextFormat(colour)\n        return (\"&lt;a id=\\\"\" + linkid + \"\\\" style=\\\"\" + style + \"\\\" class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + object.name + \"\\\"&gt;\" + text + \"&lt;/a&gt;\")\n      }\n      else {\n        return (text)\n      }\n    }\n    ]]&gt;\n&lt;/function&gt;\n</code></pre>\n</details>\n<hr>\n<p>Here's the new function that revised function uses:</p>\n<details>\n<pre><code>  &lt;function name=\"ObjectForTextProcessor\" type=\"object\" parameters=\"objectname\"&gt;\n    if (not game.text_processor_this = null and objectname = \"this\") {\n      object = game.text_processor_this\n      if (TypeOf(object) = \"object\") {\n        return (object)\n      }\n    }\n\n    if (not game.text_processor_variables = null and DictionaryContains (game.text_processor_variables, objectname)) {\n      object = DictionaryItem(game.text_processor_variables, objectname)\n      if (TypeOf(object) = \"object\") {\n        return (object)\n      }\n    }\n   \n    return (GetObject(objectname))\n&lt;/function&gt;\n</code></pre>\n</details>\n<hr>\n<p><strong>BONUS</strong></p>\n<p>Things that do <u>not</u> work:</p>\n<pre><code>msg (\"{object:{pencil.name}}\") \n// Output: {object:pencil}\nmsg (\"{object:{=GetObject(pencil.name)}}\") \n// Output: {object:Object: pencil}\nmsg (\"{object:{=ToString(GetObject(pencil.name))}}\") \n// Output: {object:Object: pencil}\nmsg (\"{object:{=ToString(GetDisplayName(GetObject(pencil.name)))}}\") \n// Output: {object:a pencil}\n</code></pre>\n<hr>\n<p>Maybe the <code>ProcessTextCommand_Object</code> function should check for <code>{</code> in the <code>section</code> before trying to use <code>GetObject()</code>?</p>\n\n",
      "PostDate": "2018-12-03T13:06:33.3235936Z",
      "LastEditDate": "2018-12-03T13:22:30.0470268Z",
      "link": null
    },
    {
      "PostId": "ea5cd8c0-9e88-4076-bd9d-34e394a5a5f5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> To me, the text processor is only for description text boxes -- like for when we are just filling in room or object descriptions in the GUI and don't feel like switching it to a script just to print an attribute or two in the prose.\r\n\r\nAlso for things where you don't want to create a global function for every possible message string.\r\n\r\nFor example: `msg(weapon.critmessage)` in a combat library, where you've loaded text_processor_variables with the name of the target, the attacker, and the damage dealt.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>To me, the text processor is only for description text boxes -- like for when we are just filling in room or object descriptions in the GUI and don't feel like switching it to a script just to print an attribute or two in the prose.</p>\n</blockquote>\n<p>Also for things where you don't want to create a global function for every possible message string.</p>\n<p>For example: <code>msg(weapon.critmessage)</code> in a combat library, where you've loaded text_processor_variables with the name of the target, the attacker, and the damage dealt.</p>\n\n",
      "PostDate": "2018-12-03T14:47:43.3324752Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
