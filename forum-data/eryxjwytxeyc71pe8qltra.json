{
  "Topic": {
    "TopicId": "eryxjwytxeyc71pe8qltra",
    "ForumId": "24",
    "Title": "Access Squiffy from external javascript",
    "LastUpdated": "2020-11-23T15:46:21.8422325Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "75ec35dc-bcec-41d9-845e-72f44f081b86",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For my story, I want to access some of the squiffy functions from external javascript.\r\n\r\nI'm thinking this can't be done without modifying story.js because I think the jquery plugin is all private.\r\nWhat I'm after is the get(attribute) function and the squiffy.story.id.\r\n\r\nI'm trying to make a fixed-position div in the main html page that can house an up-to-date inventory.",
      "EditableFormat": "markdown",
      "HTML": "<p>For my story, I want to access some of the squiffy functions from external javascript.</p>\n<p>I'm thinking this can't be done without modifying story.js because I think the jquery plugin is all private.<br>\nWhat I'm after is the get(attribute) function and the squiffy.story.id.</p>\n<p>I'm trying to make a fixed-position div in the main html page that can house an up-to-date inventory.</p>\n\n",
      "PostDate": "2020-11-23T15:46:21.8422325Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af2b2d5e-0174-4adb-ac58-8685f284a08c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Last time someone asked for help with a fixed-position div for the inventory, my suggestion was that when they gain or lose an item, they could use jquery functions to change the contents of the fixed div. As this happens in whatever section gives or removes an item, you can easily use the squiffy functions.\r\n\r\nThe alternative would be having a section starting with something like:\r\n```\r\n    window.sq = squiffy;\r\n```\r\n\r\nThe `window` object is the global object in javascript, so giving it a reference to a local object makes it accessible elsewhere. I didn't use `window.squiffy` because you can sometimes have odd behaviour if the window object has a property whose name is the same as the ID of an element (I think this is no longer the issue it used to be, but could be browser-dependant. Easier to be safe).\r\n\r\nIncluding that line in the master section, or in the first section, allows me to type stuff like `sq.story.go(\"whatever\");` in the javascript console when debugging, so you should have no problem using it from within javascript elsewhere on the page.",
      "EditableFormat": "markdown",
      "HTML": "<p>Last time someone asked for help with a fixed-position div for the inventory, my suggestion was that when they gain or lose an item, they could use jquery functions to change the contents of the fixed div. As this happens in whatever section gives or removes an item, you can easily use the squiffy functions.</p>\n<p>The alternative would be having a section starting with something like:</p>\n<pre><code>    window.sq = squiffy;\n</code></pre>\n<p>The <code>window</code> object is the global object in javascript, so giving it a reference to a local object makes it accessible elsewhere. I didn't use <code>window.squiffy</code> because you can sometimes have odd behaviour if the window object has a property whose name is the same as the ID of an element (I think this is no longer the issue it used to be, but could be browser-dependant. Easier to be safe).</p>\n<p>Including that line in the master section, or in the first section, allows me to type stuff like <code>sq.story.go(\"whatever\");</code> in the javascript console when debugging, so you should have no problem using it from within javascript elsewhere on the page.</p>\n\n",
      "PostDate": "2020-11-23T16:33:42.9917225Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6050b5b4-5e9d-425a-9cc0-42ce52fc3c31",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Whoah!  I never thought of defining the alias in the master section.  I tried all sorts of ways to accessing squiffy in the console and with jquery.  \r\n\r\nThat works like a charm and is just what I wanted!\r\n\r\nI typed sq.story.id and got the id in the console just like I wanted.\r\n\r\n(I've searched this forum over and over for any and all clues about external javascript, by the way; I've not come across your post.  Though, I admit I've only gone back about 6 pages of the forum.)\r\n\r\nTHANK YOU!\r\n\r\nNow, I did figure this out:\r\nI put this in my master section:\r\n\r\n    $(\"#inventoryarea\").html(squiffy.ui.processText(squiffy.story.sections['inventory'].text))\r\n\r\nAnd it would output a squiffy section in its full glory to my external div.\r\nBut I much prefer coding everything in external javascript for this, and leaving my squiffy a bit cleaner.",
      "EditableFormat": "markdown",
      "HTML": "<p>Whoah!  I never thought of defining the alias in the master section.  I tried all sorts of ways to accessing squiffy in the console and with jquery.</p>\n<p>That works like a charm and is just what I wanted!</p>\n<p>I typed sq.story.id and got the id in the console just like I wanted.</p>\n<p>(I've searched this forum over and over for any and all clues about external javascript, by the way; I've not come across your post.  Though, I admit I've only gone back about 6 pages of the forum.)</p>\n<p>THANK YOU!</p>\n<p>Now, I did figure this out:<br>\nI put this in my master section:</p>\n<pre><code>$(\"#inventoryarea\").html(squiffy.ui.processText(squiffy.story.sections['inventory'].text))\n</code></pre>\n<p>And it would output a squiffy section in its full glory to my external div.<br>\nBut I much prefer coding everything in external javascript for this, and leaving my squiffy a bit cleaner.</p>\n\n",
      "PostDate": "2020-11-23T20:54:30.9871894Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0285e15e-c6d2-4139-8a78-a940466788e2",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wait, that works in the console *after* you hit the first section; before the first section is passed sq is undefined.\r\n\r\nAlso, if I write  ````console.log(\"Story ID=\" + sq.story.id);```` in an external javascript, it is also undefined., even though in the javascript console, I can just write ````sq.story.id````.\r\n\r\nFor example, even in the console, if you define sq in the master section, if you refresh the page, it comes up undefined.  It becomes defined only afer a restart or a new loading.\r\n\r\nWhen in the page cycle will sq become available?",
      "EditableFormat": "markdown",
      "HTML": "<p>Wait, that works in the console <em>after</em> you hit the first section; before the first section is passed sq is undefined.</p>\n<p>Also, if I write  <code>console.log(\"Story ID=\" + sq.story.id);</code> in an external javascript, it is also undefined., even though in the javascript console, I can just write <code>sq.story.id</code>.</p>\n<p>For example, even in the console, if you define sq in the master section, if you refresh the page, it comes up undefined.  It becomes defined only afer a restart or a new loading.</p>\n<p>When in the page cycle will sq become available?</p>\n\n",
      "PostDate": "2020-11-23T21:03:41.1828568Z",
      "LastEditDate": "2020-11-23T21:16:26.1163782Z",
      "link": null
    },
    {
      "PostId": "673a7baf-ee37-434c-9b1b-15b841c027cc",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The problem is that sq is undefined unless you restart the game.  A page refresh destroys it.\r\n\r\nIs there a way to make ````sq```` always available?",
      "EditableFormat": "markdown",
      "HTML": "<p>The problem is that sq is undefined unless you restart the game.  A page refresh destroys it.</p>\n<p>Is there a way to make <code>sq</code> always available?</p>\n\n",
      "PostDate": "2020-11-23T22:14:32.6685926Z",
      "LastEditDate": "2020-11-23T22:21:20.3263108Z",
      "link": null
    },
    {
      "PostId": "bee08f61-dbb6-46ef-93bd-1df64bf0a1d0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The problem is that sq is undefined unless you restart the game. A page refresh destroys it.\r\n\r\nScript is only run when a section (or passage) is visited. On reloading a saved game, only the HTML content of the page is restored; so any modifications to the squiffy functions won't be updated either.\r\n\r\nMy only thought is that it might be possible to include a `<script>` section in the HTML itself; but that wouldn't allow you to access the `squiffy` object. On the other hand, restoring the HTML can't restore its context. So any links that are already in the output HTML must be able to function without events attached to them.\r\n\r\nAlternatively, it seems that you might be able to work out a way around it using transitions. If the Squiffy attribute `_transition` is set to a string of javascript which, when evaluated, returns a JS function reference, that function will be run immediately after reloading the game. I'm not sure if this code will have access to the `squiffy` object or not.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The problem is that sq is undefined unless you restart the game. A page refresh destroys it.</p>\n</blockquote>\n<p>Script is only run when a section (or passage) is visited. On reloading a saved game, only the HTML content of the page is restored; so any modifications to the squiffy functions won't be updated either.</p>\n<p>My only thought is that it might be possible to include a <code>&lt;script&gt;</code> section in the HTML itself; but that wouldn't allow you to access the <code>squiffy</code> object. On the other hand, restoring the HTML can't restore its context. So any links that are already in the output HTML must be able to function without events attached to them.</p>\n<p>Alternatively, it seems that you might be able to work out a way around it using transitions. If the Squiffy attribute <code>_transition</code> is set to a string of javascript which, when evaluated, returns a JS function reference, that function will be run immediately after reloading the game. I'm not sure if this code will have access to the <code>squiffy</code> object or not.</p>\n\n",
      "PostDate": "2020-11-23T22:49:04.8817534Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "daeeaa9b-1afa-422d-8f9b-9df17544d7e5",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, I found access to ````squiffy```` like this:\r\n\r\n\t\t$(document).ready(function () {\r\n\t\t\t//a simple .click function won't work for dynamically added items.\r\n\t\t\t$('#squiffy').on('click', '.squiffy-link:not(\".disabled\")', function (e) {\r\n\r\n\t\t\tconsole.log(\"clicked on \" + this.innerText);\r\n\t\t\t\t//now perform the one we want\r\n\t\t\t\tif (typeof (sq) !== \"undefined\") {\r\n\t\t\t\t\tconsole.log(\"Story ID=\" + sq.story.id);\r\n\t\t\t\t\tgetinventoryitem(\"myattribute\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\nThat works if I place this in the master OR in the first section\r\n\r\n    window.sq = squiffy;\r\n\r\nUsing the click function like that allows it to gather the information *after* the dynamically created section or passage is generated by story.js.  The attributes only change after a link is clicked, so sq is always defined during those times because it's fired in the master section.\r\n\r\nHowever, now I have a new problem - the attributes in the section only update *after* the link has been clicked, and so my inventory gotten via ````sq.get(\"myattribute\")```` is always behind.  If I change the value in the section or passage, I can't read the current value - I only have the former value.  If I place a settimeout delay within that click function, it just makes the click even take longer and the squiffy story just takes longer to advance.  I guess I need an async delay to fetch the value.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, I found access to <code>squiffy</code> like this:</p>\n<pre><code>\t$(document).ready(function () {\n\t\t//a simple .click function won't work for dynamically added items.\n\t\t$('#squiffy').on('click', '.squiffy-link:not(\".disabled\")', function (e) {\n\n\t\tconsole.log(\"clicked on \" + this.innerText);\n\t\t\t//now perform the one we want\n\t\t\tif (typeof (sq) !== \"undefined\") {\n\t\t\t\tconsole.log(\"Story ID=\" + sq.story.id);\n\t\t\t\tgetinventoryitem(\"myattribute\");\n\t\t\t}\n\t\t});\n\t});\n</code></pre>\n<p>That works if I place this in the master OR in the first section</p>\n<pre><code>window.sq = squiffy;\n</code></pre>\n<p>Using the click function like that allows it to gather the information <em>after</em> the dynamically created section or passage is generated by story.js.  The attributes only change after a link is clicked, so sq is always defined during those times because it's fired in the master section.</p>\n<p>However, now I have a new problem - the attributes in the section only update <em>after</em> the link has been clicked, and so my inventory gotten via <code>sq.get(\"myattribute\")</code> is always behind.  If I change the value in the section or passage, I can't read the current value - I only have the former value.  If I place a settimeout delay within that click function, it just makes the click even take longer and the squiffy story just takes longer to advance.  I guess I need an async delay to fetch the value.</p>\n\n",
      "PostDate": "2020-11-24T04:47:01.4202598Z",
      "LastEditDate": "2020-11-24T04:53:24.9828434Z",
      "link": null
    },
    {
      "PostId": "2e4ecdae-53e5-478c-9d16-a90bb9d9f5d8",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ahhh!  Now this works:\r\n\r\n\t\t$(document).ready(function () {\r\n\t\t\t//a simple .click function won't work for dynamically added items.\r\n\t\t\t$('#squiffy').on('click', '.squiffy-link:not(\".disabled\")', function (e) {\r\n\r\n\t\t\tconsole.log(\"clicked on \" + this.innerText);\r\n\t\t\t\t//now perform the one we want\r\n\t\t\t\tif (typeof (sq) !== \"undefined\") {\r\n\t\t\t\t\tconsole.log(\"Story ID=\" + sq.story.id);\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\tgetinventoryitem(\"myattribute\");\r\n\t\t\t\t\t}, 100);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});",
      "EditableFormat": "markdown",
      "HTML": "<p>Ahhh!  Now this works:</p>\n<pre><code>\t$(document).ready(function () {\n\t\t//a simple .click function won't work for dynamically added items.\n\t\t$('#squiffy').on('click', '.squiffy-link:not(\".disabled\")', function (e) {\n\n\t\tconsole.log(\"clicked on \" + this.innerText);\n\t\t\t//now perform the one we want\n\t\t\tif (typeof (sq) !== \"undefined\") {\n\t\t\t\tconsole.log(\"Story ID=\" + sq.story.id);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tgetinventoryitem(\"myattribute\");\n\t\t\t\t}, 100);\n\t\t\t}\n\t\t});\n\t});\n</code></pre>\n\n",
      "PostDate": "2020-11-24T04:53:06.1731052Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c7ba143-8f5d-4f6b-9274-c01b9431e0f1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK… skimming the code here.\r\n\r\nIt looks like the function `squiffy.ui.transition()` takes as its parameter a javascript function. That function will be run immediately. It will *also* be run if the window is closed and reloaded before the next section link is clicked.\r\n\r\nSo you could use the transition function to set up anything that needs to be run when the game is loaded; but it's cleared whenever you visit a new section, so you'd have to modify some of the code to set it again if you want it to stay set.\r\n\r\nI'm thinking something like:\r\n```\r\n[[first section]]:\r\n    (squiffy.story.sections['onload'].js)();\r\n\r\n[[onload]]:\r\n    if (!window.sq) {\r\n      window.sq = squiffy;\r\n      squiffy.story.save = function() {\r\n        squiffy.set('_output', squiffy.ui.output.html());\r\n        if (!squiffy.get('_transition')) {\r\n          squiffy.set('_transition', \"squiffy.story.sections['onload'].js\");\r\n        }\r\n      };\r\n\r\n      // Any code you put here will be run once at the start of the game, and again when the\r\n      //   game is reloaded so you can use it to define functions and stuff, or anything else\r\n      //   that you want to be done as soon as the `sq` variable is available\r\n    }\r\n```\r\nThat way you don't have to wait for the player to click on something (and it means that your code only needs to run once)\r\n\r\nI'm typing on my phone, so I haven't tested this yet. But after a quick look through the code, I think it should be usable.",
      "EditableFormat": "markdown",
      "HTML": "<p>OK… skimming the code here.</p>\n<p>It looks like the function <code>squiffy.ui.transition()</code> takes as its parameter a javascript function. That function will be run immediately. It will <em>also</em> be run if the window is closed and reloaded before the next section link is clicked.</p>\n<p>So you could use the transition function to set up anything that needs to be run when the game is loaded; but it's cleared whenever you visit a new section, so you'd have to modify some of the code to set it again if you want it to stay set.</p>\n<p>I'm thinking something like:</p>\n<pre><code>[[first section]]:\n    (squiffy.story.sections['onload'].js)();\n\n[[onload]]:\n    if (!window.sq) {\n      window.sq = squiffy;\n      squiffy.story.save = function() {\n        squiffy.set('_output', squiffy.ui.output.html());\n        if (!squiffy.get('_transition')) {\n          squiffy.set('_transition', \"squiffy.story.sections['onload'].js\");\n        }\n      };\n\n      // Any code you put here will be run once at the start of the game, and again when the\n      //   game is reloaded so you can use it to define functions and stuff, or anything else\n      //   that you want to be done as soon as the `sq` variable is available\n    }\n</code></pre>\n<p>That way you don't have to wait for the player to click on something (and it means that your code only needs to run once)</p>\n<p>I'm typing on my phone, so I haven't tested this yet. But after a quick look through the code, I think it should be usable.</p>\n\n",
      "PostDate": "2020-11-24T11:11:37.1953178Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2f6ab6cc-7247-4f28-b7d6-af5bfc44fff1",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I dunno.  I can't seem to access any external js functions from within squiffy.  \r\n\r\nTrying your code above doesn't make sq defined for a page refresh.  \r\n\r\nI came up with this nice routine that I run in the external js to loop through all the localstorage and filter out the inventory items.  This way I don't need to manually code them all.  It will find any attribute that starts with ````-inv_````.  So if I name my attributes in squiffy like:\r\n\r\n    {@inv_Daggers=5}\r\n\r\nThen I can just grab the items that should be tracked in my inventory and ignore all the flags.  And I don't have to keep a list of attribute names anywhere. \r\n\r\nBut this is in the external js.  I can run it fine when I click on squiffy links, but I can't keep the inventory div populated between refreshes, and I can't call that code from squiffy, even if I put it in your onload setup.  I hate to put so much javascript in squiffy like that.\r\n\r\n\r\n\tfunction getinventory(whatsquiffy){\r\n\t\t\r\n\t\t//first, add a life counter with a special style\r\n\t\tvar thisinventory = \"<span class='inventory-life'>Life: \" + whatsquiffy.get(\"life\") + \"</span><ul>\"; \r\n\t\t\r\n\t\t\r\n\t\t//loop through all the keys in localstorage to find our attributes with -inv_ before their name\r\n\t\tvar archive = [],\r\n\t\t\tkeys = Object.keys(localStorage),\r\n\t\t\ti = 0, key;\r\n\r\n\t\tfor (; key = keys[i]; i++) {\r\n\t\t\tvar lenprefix = whatsquiffy.story.id.length + 5;\t// keyname should be like this:  41c01670ee-inv_corn=4\r\n\t\t\tvar thisvalue = localStorage.getItem(key);\r\n\t\t\t//tst to make sure we are using our special inventory attribute names and that the value is not zero\r\n\t\t\tif( (left(key, lenprefix) == whatsquiffy.story.id + \"-inv_\" ) && thisvalue != \"0\"){\r\n\t\t\t\tvar attributename = key.split(\"-inv_\");\t\t//fetch the part after the -inv_\r\n\t\t\t\tattributename = attributename[1].replace(\"_\", \" \");  //we are using _ in the key name to represent spaces for the attribute name\r\n\t\t\t\tthisinventory += \"<li>\" + attributename + \": \" + thisvalue + \"</li>\";\r\n\t\t\t\t//archive.push( key + '=' + localStorage.getItem(key));\r\n\t\t\t}else{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\tthisinventory += \"</ul>\";\r\n\t\treturn thisinventory;\r\n\t}",
      "EditableFormat": "markdown",
      "HTML": "<p>I dunno.  I can't seem to access any external js functions from within squiffy.</p>\n<p>Trying your code above doesn't make sq defined for a page refresh.</p>\n<p>I came up with this nice routine that I run in the external js to loop through all the localstorage and filter out the inventory items.  This way I don't need to manually code them all.  It will find any attribute that starts with <code>-inv_</code>.  So if I name my attributes in squiffy like:</p>\n<pre><code>{@inv_Daggers=5}\n</code></pre>\n<p>Then I can just grab the items that should be tracked in my inventory and ignore all the flags.  And I don't have to keep a list of attribute names anywhere.</p>\n<p>But this is in the external js.  I can run it fine when I click on squiffy links, but I can't keep the inventory div populated between refreshes, and I can't call that code from squiffy, even if I put it in your onload setup.  I hate to put so much javascript in squiffy like that.</p>\n<pre><code>function getinventory(whatsquiffy){\n\t\n\t//first, add a life counter with a special style\n\tvar thisinventory = \"&lt;span class='inventory-life'&gt;Life: \" + whatsquiffy.get(\"life\") + \"&lt;/span&gt;&lt;ul&gt;\"; \n\t\n\t\n\t//loop through all the keys in localstorage to find our attributes with -inv_ before their name\n\tvar archive = [],\n\t\tkeys = Object.keys(localStorage),\n\t\ti = 0, key;\n\n\tfor (; key = keys[i]; i++) {\n\t\tvar lenprefix = whatsquiffy.story.id.length + 5;\t// keyname should be like this:  41c01670ee-inv_corn=4\n\t\tvar thisvalue = localStorage.getItem(key);\n\t\t//tst to make sure we are using our special inventory attribute names and that the value is not zero\n\t\tif( (left(key, lenprefix) == whatsquiffy.story.id + \"-inv_\" ) &amp;&amp; thisvalue != \"0\"){\n\t\t\tvar attributename = key.split(\"-inv_\");\t\t//fetch the part after the -inv_\n\t\t\tattributename = attributename[1].replace(\"_\", \" \");  //we are using _ in the key name to represent spaces for the attribute name\n\t\t\tthisinventory += \"&lt;li&gt;\" + attributename + \": \" + thisvalue + \"&lt;/li&gt;\";\n\t\t\t//archive.push( key + '=' + localStorage.getItem(key));\n\t\t}else{\n\t\t\tcontinue;\n\t\t}\n\t}\n\t\t\n\tthisinventory += \"&lt;/ul&gt;\";\n\treturn thisinventory;\n}\n</code></pre>\n\n",
      "PostDate": "2020-11-25T02:43:55.5597534Z",
      "LastEditDate": "2020-11-25T04:37:44.9560128Z",
      "link": null
    },
    {
      "PostId": "3043cd3d-6042-4477-8ed5-de8d14c1b0ab",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What happens is that on page refresh, sq is not defined until the user clicks on a squiffy link.\r\n\r\nNow, the restart brings everything to life.  This is the restart function that comes in the default html output.  Now, THAT seems to be able to call functions from the squiffy plugin, even if sq isn't loaded.\r\n\r\n\t\t\t$('#squiffy').squiffy();\r\n\t\t\tvar restart = function () {\r\n\t\t\t\t$('#squiffy').squiffy('restart');\r\n\t\t\t};\r\n\t\t\t$('#restart').click(restart);\r\n\t\t\t$('#restart').keypress(function (e) {\r\n\t\t\t\tif (e.which !== 13) return;\r\n\t\t\t\trestart();\r\n\t\t\t});\r\n\r\nMaybe there is some function like restart that will do the same thing without having any effect?  I tried using \r\n\r\n    $('#squiffy').squiffy('load');\r\n\r\nbut it doesn't seem to recognize that command.",
      "EditableFormat": "markdown",
      "HTML": "<p>What happens is that on page refresh, sq is not defined until the user clicks on a squiffy link.</p>\n<p>Now, the restart brings everything to life.  This is the restart function that comes in the default html output.  Now, THAT seems to be able to call functions from the squiffy plugin, even if sq isn't loaded.</p>\n<pre><code>\t\t$('#squiffy').squiffy();\n\t\tvar restart = function () {\n\t\t\t$('#squiffy').squiffy('restart');\n\t\t};\n\t\t$('#restart').click(restart);\n\t\t$('#restart').keypress(function (e) {\n\t\t\tif (e.which !== 13) return;\n\t\t\trestart();\n\t\t});\n</code></pre>\n<p>Maybe there is some function like restart that will do the same thing without having any effect?  I tried using</p>\n<pre><code>$('#squiffy').squiffy('load');\n</code></pre>\n<p>but it doesn't seem to recognize that command.</p>\n\n",
      "PostDate": "2020-11-25T04:36:49.3674436Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e721b226-5a29-46f7-abf2-316577989dcd",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, none of that worked, so I hardcoded the squiffy story id into my javascript.  That's really what I needed in the end.  With that, I can make my inventory system entirely external to squiffy, loading the attributes from local storage.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, none of that worked, so I hardcoded the squiffy story id into my javascript.  That's really what I needed in the end.  With that, I can make my inventory system entirely external to squiffy, loading the attributes from local storage.</p>\n\n",
      "PostDate": "2020-11-25T05:17:08.6670354Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9f9c0608-8ef7-4ba2-a7a8-e6b086f1d124",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Maybe there is some function like restart that will do the same thing without having any effect? I tried using\r\n\r\nI'm not sure what you're trying to do there. `load` is automatically called by Squiffy itself on startup if there are attributes for this game in localStorage.\r\nThe only methods you can call using the `$('#squiffy').squiffy()` syntax are \"init\", \"get\", \"set\", and \"restart\". ('init' is responsible for calling `initLinkHandler` and a couple of housekeeping functions; and I see no point in calling this externally)\r\n\r\n<hr />\r\n\r\nOK, I've properly tested the code I suggested before, and confirmed that it works.\r\n\r\nHere's a simplified version:\r\nIn your external JS, you'd want to define a callback to be run after the squiffy object is available (use this instead of `$(document).ready()`):\r\n```\r\n$('#squiffy').on('sqready', function () {\r\n  // all the script here to do something with sq\r\n});\r\n```\r\nand in the first section of your game, the javascript to make the squiffy object available:\r\n```\r\n    // make the object available\r\n    window.sq = squiffy;\r\n\r\n    // notify the external JS that it's ready:\r\n    $('#squiffy').trigger('sqready');\r\n\r\n    // and modify how the save function works, so that this script\r\n    //   will be run again when reloading a saved game\r\n    var initsection = squiffy.get('_section');\r\n    squiffy.story.save = function () {\r\n        squiffy.set('_output', squiffy.ui.output.html());\r\n        squiffy.set('_transition', \"squiffy.story.sections['\" + initsection + \"'].js\");\r\n    };\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Maybe there is some function like restart that will do the same thing without having any effect? I tried using</p>\n</blockquote>\n<p>I'm not sure what you're trying to do there. <code>load</code> is automatically called by Squiffy itself on startup if there are attributes for this game in localStorage.<br>\nThe only methods you can call using the <code>$('#squiffy').squiffy()</code> syntax are \"init\", \"get\", \"set\", and \"restart\". ('init' is responsible for calling <code>initLinkHandler</code> and a couple of housekeeping functions; and I see no point in calling this externally)</p>\n<hr>\n<p>OK, I've properly tested the code I suggested before, and confirmed that it works.</p>\n<p>Here's a simplified version:<br>\nIn your external JS, you'd want to define a callback to be run after the squiffy object is available (use this instead of <code>$(document).ready()</code>):</p>\n<pre><code>$('#squiffy').on('sqready', function () {\n  // all the script here to do something with sq\n});\n</code></pre>\n<p>and in the first section of your game, the javascript to make the squiffy object available:</p>\n<pre><code>    // make the object available\n    window.sq = squiffy;\n\n    // notify the external JS that it's ready:\n    $('#squiffy').trigger('sqready');\n\n    // and modify how the save function works, so that this script\n    //   will be run again when reloading a saved game\n    var initsection = squiffy.get('_section');\n    squiffy.story.save = function () {\n        squiffy.set('_output', squiffy.ui.output.html());\n        squiffy.set('_transition', \"squiffy.story.sections['\" + initsection + \"'].js\");\n    };\n</code></pre>\n\n",
      "PostDate": "2020-11-25T14:46:48.2928306Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f3686a33-50b2-42ee-8739-4209edd6ca14",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmmm...  It doesn't seem to be firing.   I put the jquery in my page head and placed a function call there (simple alert).  And I put the lower part in the game like you said.  Nothing.   It won't even log to the console.\r\n\r\nIt doesn't fire on refresh or restart.  So I tried putting it in document.ready, and that doesn't work either.  There's no javascript errors, though.\r\n\r\nHTML's javascript:\r\n\r\n<details>\r\n\r\n\t\t\t<script>\r\n\t\t\t\t$('#squiffy').on('sqready', function () {\r\n\t\t\t\t  // all the script here to do something with sq\r\n\t\t\t\t  test();\r\n\t\t\t\t});\t\t\r\n\t\t\t\r\n\t\t\t\tfunction test(){\r\n\t\t\t\t\talert(\"bob\");\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tjQuery(function($){\r\n\t\t\t\t\t$('#squiffy').squiffy();\r\n\t\t\t\t\tvar restart = function () {\r\n\t\t\t\t\t\t$('#squiffy').squiffy('restart');\r\n\t\t\t\t\t};\r\n\t\t\t\t\t$('#restart').click(restart);\r\n\t\t\t\t\t$('#restart').keypress(function (e) {\r\n\t\t\t\t\t\tif (e.which !== 13) return;\r\n\t\t\t\t\t\trestart();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t</script>\r\n</details>\r\n\r\nSquiffy Code:\r\n<details>\r\n\r\n     @title JS Test\r\n     @start init\r\n\r\n    [[init]]:\r\n    // make the object available\r\n    window.sq = squiffy;\r\n\r\n    // notify the external JS that it's ready:\r\n    $('#squiffy').trigger('sqready');\r\n\r\n    // and modify how the save function works, so that this script\r\n    //   will be run again when reloading a saved game\r\n    var initsection = squiffy.get('_section');\r\n    squiffy.story.save = function () {\r\n        squiffy.set('_output', squiffy.ui.output.html());\r\n        squiffy.set('_transition', \"squiffy.story.sections['\" + initsection + \"'].js\");\r\n    };\r\n    //squiffy.story.go(\"first\");\r\n    \r\n    [[first]]:\r\n    Halleluia!\r\n\r\n</details>\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmmm...  It doesn't seem to be firing.   I put the jquery in my page head and placed a function call there (simple alert).  And I put the lower part in the game like you said.  Nothing.   It won't even log to the console.</p>\n<p>It doesn't fire on refresh or restart.  So I tried putting it in document.ready, and that doesn't work either.  There's no javascript errors, though.</p>\n<p>HTML's javascript:</p>\n<details>\n<pre><code>\t\t&lt;script&gt;\n\t\t\t$('#squiffy').on('sqready', function () {\n\t\t\t  // all the script here to do something with sq\n\t\t\t  test();\n\t\t\t});\t\t\n\t\t\n\t\t\tfunction test(){\n\t\t\t\talert(\"bob\");\n\t\t\t}\n\t\t\n\t\t\tjQuery(function($){\n\t\t\t\t$('#squiffy').squiffy();\n\t\t\t\tvar restart = function () {\n\t\t\t\t\t$('#squiffy').squiffy('restart');\n\t\t\t\t};\n\t\t\t\t$('#restart').click(restart);\n\t\t\t\t$('#restart').keypress(function (e) {\n\t\t\t\t\tif (e.which !== 13) return;\n\t\t\t\t\trestart();\n\t\t\t\t});\n\t\t\t});\n\t\t&lt;/script&gt;\n</code></pre>\n</details>\n<p>Squiffy Code:</p>\n<details>\n<pre><code> @title JS Test\n @start init\n\n[[init]]:\n// make the object available\nwindow.sq = squiffy;\n\n// notify the external JS that it's ready:\n$('#squiffy').trigger('sqready');\n\n// and modify how the save function works, so that this script\n//   will be run again when reloading a saved game\nvar initsection = squiffy.get('_section');\nsquiffy.story.save = function () {\n    squiffy.set('_output', squiffy.ui.output.html());\n    squiffy.set('_transition', \"squiffy.story.sections['\" + initsection + \"'].js\");\n};\n//squiffy.story.go(\"first\");\n\n[[first]]:\nHalleluia!\n</code></pre>\n</details>\n\n",
      "PostDate": "2020-11-26T03:27:15.8652557Z",
      "LastEditDate": "2020-11-26T03:33:32.8164766Z",
      "link": null
    }
  ]
}
