{
  "Topic": {
    "TopicId": "4078",
    "ForumId": "10",
    "Title": "From SHOWMENU to OBJECT.SCRIPT",
    "LastUpdated": "2013-12-26T22:24:03+00:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "27229",
      "UserId": 0,
      "Username": "TriangleGames",
      "UserAvatar": null,
      "UserGravatar": "134d9e995777da65c5cf8efda551d579",
      "EditableText": "I feel like I asked about this before a long time ago, but I couldn't find it in my posts list or by searching (probably too many common search words). At any rate ...\n\n(This is for part of the menu based combat I'm working on. Most of it seems to be going well, but now I've gotten to the idea of having the combat options include: Attack, Use Item, Run. It's the Use Item part that I'm worried about.)\n\nWhat I ideally would like to do is,\npresent a forced menu to the player listing &quot;battle items&quot; (heal potion, firebomb, gem of boss-kill, etc.),\nand have an inherited script attribute be activated for whatever item they choose (as, [i:16f0o1gi]result.script[/i:16f0o1gi]).\nI get the feeling it's going to be more complicated than that.\nAs far as I can tell, [b:16f0o1gi]ShowMenu[/b:16f0o1gi] will only accept [i:16f0o1gi]string[/i:16f0o1gi]lists or [i:16f0o1gi]string[/i:16f0o1gi]dictionaries, NOT [i:16f0o1gi]object[/i:16f0o1gi]dictionaries.\nSo I'm thinking I'll have to somehow make a list/dictionary of the names/aliases of the items to display in the menu,\nthen somehow connect that over to the relevant object.\n\nMy concern is that this will inevitably mean listing ALL the battle items in the menu function itself. Is there a better way to achieve the effect I'm after that maybe I'm not thinking of?",
      "EditableFormat": "bbcode",
      "HTML": "I feel like I asked about this before a long time ago, but I couldn't find it in my posts list or by searching (probably too many common search words). At any rate ...<br/><br/>(This is for part of the menu based combat I'm working on. Most of it seems to be going well, but now I've gotten to the idea of having the combat options include: Attack, Use Item, Run. It's the Use Item part that I'm worried about.)<br/><br/>What I ideally would like to do is,<br/>present a forced menu to the player listing &quot;battle items&quot; (heal potion, firebomb, gem of boss-kill, etc.),<br/>and have an inherited script attribute be activated for whatever item they choose (as, <span style=\"font-style:italic;\">result.script</span>).<br/>I get the feeling it's going to be more complicated than that.<br/>As far as I can tell, <span style=\"font-weight:bold;\">ShowMenu</span> will only accept <span style=\"font-style:italic;\">string</span>lists or <span style=\"font-style:italic;\">string</span>dictionaries, NOT <span style=\"font-style:italic;\">object</span>dictionaries.<br/>So I'm thinking I'll have to somehow make a list/dictionary of the names/aliases of the items to display in the menu,<br/>then somehow connect that over to the relevant object.<br/><br/>My concern is that this will inevitably mean listing ALL the battle items in the menu function itself. Is there a better way to achieve the effect I'm after that maybe I'm not thinking of?",
      "PostDate": "2013-12-26T15:22:45+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27233",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I had worked on a menu-based combat system as well, and to be honest, I didn't even go near ShowMenu. Of course, back then, it didn't have the inline display it does now... The way I did mine was to use command links and just dump out menus myself. The command links would invoke commands, and the commands could be generated on the fly (e.g. &quot;useitem InvisibilityPotion&quot;). \n\nThe actual mechanism isn't really important - the critical thing is how do you deal with strings, because even a command link requires string parameters sent to the command. So you can easily use ShowMenu, if you can decide on the scheme for encoding what you want done in the string.\n\nThe scheme I used was this. I decided that I wanted to invoke a script on an object, with arguments, in response to the click. You can use a similar scheme. You just need to set up the strings when you call ShowMenu and then parse it out afterwards.\n\nThe format I used is: &quot;object:script arg1,arg2,arg3...&quot;. The number of arguments can vary from 0 to whatever your script wants. So, for example, if you have a heal potion (with object name HealPotion), and it had a &quot;use&quot; script attribute, then your string would be &quot;HealPotion:heal&quot;. \n\nThe code to handle this would be something like this, where &quot;result&quot; is the string result from ShowMenu.\n\n[code:2lcg5ulb]pieces = Split(result, &quot; &quot;)\n// Get object and script to invoke&#46;\nobject_script = StringListItem(pieces, 0)\nobject_script = Split(object_script, &quot;&#58;&quot;)\nobject = StringListItem(object_script, 0)\nattribute = StringListItem(object_script, 1)\n// Get any arguments and create params dictonary&#46;\nargs = StringListItem(pieces, 1)\nargs = Split(args, &quot;,&quot;)\nparams = NewDictionary()\nargnum = 1\nforeach (arg, args) {\n  dictionary add(params, &quot;arg&quot;+argnum, arg)\n  argnum = argnum + 1\n}\ndo (GetObject(object), attribute, params)[/code:2lcg5ulb]\n\nIf you had a string like this: &quot;Monster:attack sword,25&quot;, then it would invoke the &quot;attack&quot; script on the object &quot;Monster&quot;, and there would be an &quot;arg1&quot; parameter with value &quot;sword&quot;, and &quot;arg2&quot; would be &quot;25&quot;.\n\nHow you build the strings depends on the circumstances. You can always use &quot;o.name&quot; to get the name of the object to invoke the script on. I tended to have the scripts hanging off of rooms or other stable objects that I globally knew. But there is nothing that says it can't be dynamic.\n\nLet me know if you any of that is unclear. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "I had worked on a menu-based combat system as well, and to be honest, I didn't even go near ShowMenu. Of course, back then, it didn't have the inline display it does now... The way I did mine was to use command links and just dump out menus myself. The command links would invoke commands, and the commands could be generated on the fly (e.g. &quot;useitem InvisibilityPotion&quot;). <br/><br/>The actual mechanism isn't really important - the critical thing is how do you deal with strings, because even a command link requires string parameters sent to the command. So you can easily use ShowMenu, if you can decide on the scheme for encoding what you want done in the string.<br/><br/>The scheme I used was this. I decided that I wanted to invoke a script on an object, with arguments, in response to the click. You can use a similar scheme. You just need to set up the strings when you call ShowMenu and then parse it out afterwards.<br/><br/>The format I used is: &quot;object:script arg1,arg2,arg3...&quot;. The number of arguments can vary from 0 to whatever your script wants. So, for example, if you have a heal potion (with object name HealPotion), and it had a &quot;use&quot; script attribute, then your string would be &quot;HealPotion:heal&quot;. <br/><br/>The code to handle this would be something like this, where &quot;result&quot; is the string result from ShowMenu.<br/><br/><pre><code>pieces = Split(result, &quot; &quot;)<br/>// Get object and script to invoke&#46;<br/>object_script = StringListItem(pieces, 0)<br/>object_script = Split(object_script, &quot;&#58;&quot;)<br/>object = StringListItem(object_script, 0)<br/>attribute = StringListItem(object_script, 1)<br/>// Get any arguments and create params dictonary&#46;<br/>args = StringListItem(pieces, 1)<br/>args = Split(args, &quot;,&quot;)<br/>params = NewDictionary()<br/>argnum = 1<br/>foreach (arg, args) {<br/>  dictionary add(params, &quot;arg&quot;+argnum, arg)<br/>  argnum = argnum + 1<br/>}<br/>do (GetObject(object), attribute, params)</code></pre><br/><br/>If you had a string like this: &quot;Monster:attack sword,25&quot;, then it would invoke the &quot;attack&quot; script on the object &quot;Monster&quot;, and there would be an &quot;arg1&quot; parameter with value &quot;sword&quot;, and &quot;arg2&quot; would be &quot;25&quot;.<br/><br/>How you build the strings depends on the circumstances. You can always use &quot;o.name&quot; to get the name of the object to invoke the script on. I tended to have the scripts hanging off of rooms or other stable objects that I globally knew. But there is nothing that says it can't be dynamic.<br/><br/>Let me know if you any of that is unclear. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-12-26T16:01:53+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27234",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Just to be complete, let me drop in how you'd use it from ShowMenu. Note that I'm typing this in off the top of my head and not actually trying it in Quest!\n\nAssume that the above code has been put into a function called &quot;ExecuteMenuResult&quot;, with a single &quot;result&quot; parameter coming in.\n\n[code:1v8apmou]choices = NewDictionary()\ndictionary add(&quot;GemOfDestiny&#58;use&quot;, &quot;Use gem of destiny&quot;)\ndictionary add(&quot;HealingPotion&#58;use&quot;, &quot;Use healing potion&quot;)\n&#46;&#46;&#46;\nShowMenu(&quot;Use Item&quot;, choices, false) {\n    ExecuteMenuResult(result)\n}[/code:1v8apmou]\nIf you had a list of objects that could be used, you could do this (assume the list is &quot;olist&quot;):\n\n[code:1v8apmou]choices = NewDictionary()\nforeach (object, olist) {\n    dictionary add(object&#46;name + &quot;&#58;use&quot;, &quot;Use &quot; + object&#46;alias)\n}[/code:1v8apmou]\n\nYou then just need to create a &quot;use&quot; script on each object.\n\n(Looking back at this, I don't know why I used &quot;:&quot; for the separator. I think &quot;.&quot; would make more sense, as in &quot;HealingPotion.use&quot;. That's an easy enough change.)",
      "EditableFormat": "bbcode",
      "HTML": "Just to be complete, let me drop in how you'd use it from ShowMenu. Note that I'm typing this in off the top of my head and not actually trying it in Quest!<br/><br/>Assume that the above code has been put into a function called &quot;ExecuteMenuResult&quot;, with a single &quot;result&quot; parameter coming in.<br/><br/><pre><code>choices = NewDictionary()<br/>dictionary add(&quot;GemOfDestiny&#58;use&quot;, &quot;Use gem of destiny&quot;)<br/>dictionary add(&quot;HealingPotion&#58;use&quot;, &quot;Use healing potion&quot;)<br/>&#46;&#46;&#46;<br/>ShowMenu(&quot;Use Item&quot;, choices, false) {<br/>    ExecuteMenuResult(result)<br/>}</code></pre><br/>If you had a list of objects that could be used, you could do this (assume the list is &quot;olist&quot;):<br/><br/><pre><code>choices = NewDictionary()<br/>foreach (object, olist) {<br/>    dictionary add(object&#46;name + &quot;&#58;use&quot;, &quot;Use &quot; + object&#46;alias)<br/>}</code></pre><br/><br/>You then just need to create a &quot;use&quot; script on each object.<br/><br/>(Looking back at this, I don't know why I used &quot;:&quot; for the separator. I think &quot;.&quot; would make more sense, as in &quot;HealingPotion.use&quot;. That's an easy enough change.)",
      "PostDate": "2013-12-26T16:36:03+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27244",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I'm not exactly clear on what you want, so my apologizes, but here's a response by me regardless, lol:\n\nyou can use a menu's string list to get the choiced string that you want, then you can use that to compare with an object list, to select the object and then what you want done with it. If you can use an objectlist or object dictionary, then this would make it even simplier to do then the below\n\nfor a quick (conceptual) conception of it:\n\nBattle Items' TYPES:\n\n1. HP restoration\n2. MP restoration\n3. (negative) status effect removal\n4. damage dealing (to the monsters of course)\n5. etc other types of battle items\n\nso my menu's string list would be:\n\nshow menu (&quot;What Type of Battle Item do you wish to use?&quot;, global_data_object.battle_item_types_string_list, false) {\n}\n\n&lt;object name=&quot;global_data_object&quot;&gt;\n  &lt;battle_item_types_string_list type=&quot;simplestringlist&quot;&gt;hp_restoration;mp_restoration;status_effect_removal;damage_dealing&lt;/battle_item_types_string_list&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;player&quot;&gt;\n-&gt; &lt;object name=&quot;hp_plus_50_points&quot;&gt;\n-&gt;-&gt;  &lt;battle_item_type_string type=&quot;string&quot;&gt;hp_restoration&lt;/battle_item_type_string&gt;\n-&gt; &lt;/object&gt;\n&lt;/object&gt;\n\nthan for the following script&#058;\n\nshow menu (&quot;What Type of Battle Item do you wish to use?&quot;, global_data_object.battle_item_types_string_list, false) {\n-&gt; foreach (item_x, ScopeInventory ()) {\n-&gt;-&gt; if (result=item_x.battle_item_type_string) {\n-&gt;-&gt;-&gt; global_data_object.choosen_battle_item_type_items_list = NewStringList ()\n-&gt;-&gt;-&gt; list add (global_data_object.choosen_battle_item_type_items_list, item_x.alias)\n-&gt;-&gt; }\n-&gt;-&gt; on ready {\n-&gt;-&gt;-&gt; show menu (&quot;What battle item do you want to use?, global_data_object.choosen_battle_item_type_items_list, false) {\n-&gt;-&gt;-&gt;-&gt; battle_item_choosen_for_use = GetObject (result)\n-&gt;-&gt;-&gt;-&gt; battle_item_choosen_for_use.use_on_monster // or *.use_on_self, *.cast_on_self, *.cast_on_monster, etc...\n-&gt;-&gt;-&gt; }\n-&gt;-&gt; }\n-&gt; }\n}\n\n-----------------------\n\n&quot;COMPARING&quot; is a huge coding-logic concept (well it was for me a breakthrough, lol):\n\nif (this = that), then do ...\n\nif (this list's selected choice as an attribute string or object = that list's &quot;any-number-of&quot; (using the &quot;foreach&quot; script~function) attributes=strings or object's attributes), then do this for every one of them that which applies to the above conditional code line.",
      "EditableFormat": "bbcode",
      "HTML": "I'm not exactly clear on what you want, so my apologizes, but here's a response by me regardless, lol:<br/><br/>you can use a menu's string list to get the choiced string that you want, then you can use that to compare with an object list, to select the object and then what you want done with it. If you can use an objectlist or object dictionary, then this would make it even simplier to do then the below<br/><br/>for a quick (conceptual) conception of it:<br/><br/>Battle Items' TYPES:<br/><br/>1. HP restoration<br/>2. MP restoration<br/>3. (negative) status effect removal<br/>4. damage dealing (to the monsters of course)<br/>5. etc other types of battle items<br/><br/>so my menu's string list would be:<br/><br/>show menu (&quot;What Type of Battle Item do you wish to use?&quot;, global_data_object.battle_item_types_string_list, false) {<br/>}<br/><br/>&lt;object name=&quot;global_data_object&quot;&gt;<br/>  &lt;battle_item_types_string_list type=&quot;simplestringlist&quot;&gt;hp_restoration;mp_restoration;status_effect_removal;damage_dealing&lt;/battle_item_types_string_list&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>-&gt; &lt;object name=&quot;hp_plus_50_points&quot;&gt;<br/>-&gt;-&gt;  &lt;battle_item_type_string type=&quot;string&quot;&gt;hp_restoration&lt;/battle_item_type_string&gt;<br/>-&gt; &lt;/object&gt;<br/>&lt;/object&gt;<br/><br/>than for the following script&#058;<br/><br/>show menu (&quot;What Type of Battle Item do you wish to use?&quot;, global_data_object.battle_item_types_string_list, false) {<br/>-&gt; foreach (item_x, ScopeInventory ()) {<br/>-&gt;-&gt; if (result=item_x.battle_item_type_string) {<br/>-&gt;-&gt;-&gt; global_data_object.choosen_battle_item_type_items_list = NewStringList ()<br/>-&gt;-&gt;-&gt; list add (global_data_object.choosen_battle_item_type_items_list, item_x.alias)<br/>-&gt;-&gt; }<br/>-&gt;-&gt; on ready {<br/>-&gt;-&gt;-&gt; show menu (&quot;What battle item do you want to use?, global_data_object.choosen_battle_item_type_items_list, false) {<br/>-&gt;-&gt;-&gt;-&gt; battle_item_choosen_for_use = GetObject (result)<br/>-&gt;-&gt;-&gt;-&gt; battle_item_choosen_for_use.use_on_monster // or *.use_on_self, *.cast_on_self, *.cast_on_monster, etc...<br/>-&gt;-&gt;-&gt; }<br/>-&gt;-&gt; }<br/>-&gt; }<br/>}<br/><br/>-----------------------<br/><br/>&quot;COMPARING&quot; is a huge coding-logic concept (well it was for me a breakthrough, lol):<br/><br/>if (this = that), then do ...<br/><br/>if (this list's selected choice as an attribute string or object = that list's &quot;any-number-of&quot; (using the &quot;foreach&quot; script~function) attributes=strings or object's attributes), then do this for every one of them that which applies to the above conditional code line.",
      "PostDate": "2013-12-26T20:48:57+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27247",
      "UserId": 0,
      "Username": "TriangleGames",
      "UserAvatar": null,
      "UserGravatar": "134d9e995777da65c5cf8efda551d579",
      "EditableText": "I had to try it to really get, and apparently I was a bit backwards on how dictionaries work with the menu, but I think I understand it all now. It's sort of like manually parsing the key to activate the object's script attribute, as if the player had typed &quot;use object&quot; at the command line. That should work great, thank you!",
      "EditableFormat": "bbcode",
      "HTML": "I had to try it to really get, and apparently I was a bit backwards on how dictionaries work with the menu, but I think I understand it all now. It's sort of like manually parsing the key to activate the object's script attribute, as if the player had typed &quot;use object&quot; at the command line. That should work great, thank you!",
      "PostDate": "2013-12-26T21:21:31+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27248",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I think my &quot;travel&quot; code demonstrates this stuff, if you want to look at a concrete example or try it out (if you can get it working if you're using a newer version of quest than my usage of 540 ~ 5.40 version still):\n\nI didn't use an object dictionary to get the new player.parent 's room object, but meh, that's just using an object dictionary's syntax correctly, lol. But, regardless, all the concepts~elements~aspects involved are demonstrated, or most of them anyways.\n\n[code:31hf481c]&lt;asl version=&quot;540&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;Testing Game Stuff&quot;&gt;\n    &lt;gameid&gt;eef801a1-4e6b-4b0a-bdbf-8f3ecfa8389c&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2013&lt;/firstpublished&gt;\n    &lt;turns type=&quot;int&quot;&gt;0&lt;/turns&gt;\n    &lt;statusattributes type=&quot;simplestringdictionary&quot;&gt;turns=&lt;/statusattributes&gt;\n\t&lt;start type=&quot;script&quot;&gt;\n\t  msg (&quot;Important Note&#58;&quot;)\n\t  msg (&quot;Type in&#58; help&quot;)\n\t&lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;homeland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;grassland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;plains&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;desert&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;tundra&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;swampland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;mountains&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;forest&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;wasteland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;coastland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;hills&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;command name=&quot;help_command&quot;&gt;\n    &lt;pattern&gt;help&lt;/pattern&gt;\n\t&lt;script&gt;\n\t  help_function\n\t&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=&quot;explore_command&quot;&gt;\n    &lt;pattern&gt;explore&lt;/pattern&gt;\n    &lt;script&gt;\n      explore_function\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=&quot;travel_command&quot;&gt;\n    &lt;pattern&gt;travel&lt;/pattern&gt;\n\t&lt;script&gt;\n\t  travel_function\n\t&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=&quot;data_object&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n\t&lt;travel_string_list type=&quot;simplestringlist&quot;&gt;homeland&lt;/travel_string_list&gt;\n    &lt;homeland_events_string_list type=&quot;simplestringlist&quot;&gt;grassland_discovery;plains_discovery;desert_discovery;tundra_discovery;swampland_discovery;forest_discovery;mountains_discovery;hills_discovery;wasteland_discovery;coastland_discovery&lt;/homeland_events_string_list&gt;\n    &lt;homeland_events_script_dictionary type=&quot;scriptdictionary&quot;&gt;\n\t  &lt;item key=&quot;grassland_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;grassland&quot;)\n\t\tmsg (&quot;You've discovered the grassland! Now, you can travel to the grassland and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;plains_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;plains&quot;)\n\t\tmsg (&quot;You've discovered the plains! Now, you can travel to the plains and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;desert_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;desert&quot;)\n\t\tmsg (&quot;You've discovered the desert! Now, you can travel to the desert and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;tundra_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;tundra&quot;)\n\t\tmsg (&quot;You've discovered the tundra! Now, you can travel to the tundra and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;swampland_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;swampland&quot;)\n\t\tmsg (&quot;You've discovered the swampland! Now, you can travel to the swampland and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;forest_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;forest&quot;)\n\t\tmsg (&quot;You've discovered the forest! Now, you can travel to the forest and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;mountains_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;mountains&quot;)\n\t\tmsg (&quot;You've discovered the mountains! Now, you can travel to the mountains and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;hills_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;hills&quot;)\n\t\tmsg (&quot;You've discovered the hills! Now, you can travel to the hills and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;wasteland_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;wasteland&quot;)\n\t\tmsg (&quot;You've discovered the wasteland! Now, you can travel to the wasteland and explore it!&quot;)\n\t  &lt;/item&gt;\n\t  &lt;item key=&quot;coastland_discovery&quot;&gt;\n\t    list add (data_object&#46;travel_string_list, &quot;coastland&quot;)\n\t\tmsg (&quot;You've discovered the coastland! Now, you can travel to the coastland and explore it!&quot;)\n\t  &lt;/item&gt;\n\t&lt;/homeland_events_script_dictionary&gt;\n  &lt;/object&gt;\n  &lt;turnscript name=&quot;global_turnscript&quot;&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      game&#46;turns = game&#46;turns + 1\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n  &lt;function name=&quot;help_function&quot;&gt;\n    msg (&quot;Type 'explore' to explore your area&#46;&quot;)\n\tmsg (&quot;Type 'travel' to travel to different areas&#46;&quot;)\n  &lt;/function&gt;\n  &lt;function name=&quot;explore_function&quot;&gt;&lt;!&#91;CDATA&#91;\n    switch (game&#46;pov&#46;parent) {\n\t  case (homeland) {\n\t\tresult_1 = ListCount (data_object&#46;homeland_events_string_list) - 1\n\t\tif (result_1 &gt;= 0) {\n          result_2 = StringListItem (data_object&#46;homeland_events_string_list,GetRandomInt(0,result_1))\n          invoke (ScriptDictionaryItem (data_object&#46;homeland_events_script_dictionary,result_2))\n\t\t  on ready {\n\t\t    foreach (item_x, split (&quot;grassland_discovery;plains_discovery;desert_discovery;tundra_discovery;swampland_discovery;forest_discovery;mountains_discovery;hills_discovery;wasteland_discovery;coastland_discovery&quot;,&quot;;&quot;)) {\n\t\t      if (result_2 = item_x) {\n\t\t\t    list remove (data_object&#46;homeland_events_string_list, result_2)\n\t\t\t  }\n\t\t\t}\n\t\t  }\n\t\t} else {\n\t\t  msg (&quot;There seemingly is nothing left to explore in this area&#46;&quot;)\n\t\t}\n\t  }\n    }\n  &#93;&#93;&gt;&lt;/function&gt;\n  &lt;function name=&quot;travel_function&quot;&gt;\n    show menu (&quot;Where do you wish to travel?&quot;,data_object&#46;travel_string_list,false) {\n\t  if (not game&#46;pov&#46;parent = GetObject (result)) {\n\t    game&#46;pov&#46;parent = GetObject (result)\n\t  } else {\n\t    msg (&quot;You are already at this area&#46;&quot;)\n\t\task (&quot;Try again?&quot;) {\n\t\t  if (result=true) {\n\t\t    travel_function\n\t\t  } else {\n\t\t    msg (&quot;You realize that you need to discover a new area to travel to first, before you can travel to that place&#46;&quot;)\n\t\t  }\n\t\t}\n\t  }\n\t}\n  &lt;/function&gt;\n&lt;/asl&gt;[/code:31hf481c]",
      "EditableFormat": "bbcode",
      "HTML": "I think my &quot;travel&quot; code demonstrates this stuff, if you want to look at a concrete example or try it out (if you can get it working if you're using a newer version of quest than my usage of 540 ~ 5.40 version still):<br/><br/>I didn't use an object dictionary to get the new player.parent 's room object, but meh, that's just using an object dictionary's syntax correctly, lol. But, regardless, all the concepts~elements~aspects involved are demonstrated, or most of them anyways.<br/><br/><pre><code>&lt;asl version=&quot;540&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;Testing Game Stuff&quot;&gt;<br/>    &lt;gameid&gt;eef801a1-4e6b-4b0a-bdbf-8f3ecfa8389c&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2013&lt;/firstpublished&gt;<br/>    &lt;turns type=&quot;int&quot;&gt;0&lt;/turns&gt;<br/>    &lt;statusattributes type=&quot;simplestringdictionary&quot;&gt;turns=&lt;/statusattributes&gt;<br/>\t&lt;start type=&quot;script&quot;&gt;<br/>\t  msg (&quot;Important Note&#58;&quot;)<br/>\t  msg (&quot;Type in&#58; help&quot;)<br/>\t&lt;/start&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;homeland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;grassland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;plains&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;desert&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;tundra&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;swampland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;mountains&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;forest&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;wasteland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;coastland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;hills&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;command name=&quot;help_command&quot;&gt;<br/>    &lt;pattern&gt;help&lt;/pattern&gt;<br/>\t&lt;script&gt;<br/>\t  help_function<br/>\t&lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;command name=&quot;explore_command&quot;&gt;<br/>    &lt;pattern&gt;explore&lt;/pattern&gt;<br/>    &lt;script&gt;<br/>      explore_function<br/>    &lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;command name=&quot;travel_command&quot;&gt;<br/>    &lt;pattern&gt;travel&lt;/pattern&gt;<br/>\t&lt;script&gt;<br/>\t  travel_function<br/>\t&lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;object name=&quot;data_object&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>\t&lt;travel_string_list type=&quot;simplestringlist&quot;&gt;homeland&lt;/travel_string_list&gt;<br/>    &lt;homeland_events_string_list type=&quot;simplestringlist&quot;&gt;grassland_discovery;plains_discovery;desert_discovery;tundra_discovery;swampland_discovery;forest_discovery;mountains_discovery;hills_discovery;wasteland_discovery;coastland_discovery&lt;/homeland_events_string_list&gt;<br/>    &lt;homeland_events_script_dictionary type=&quot;scriptdictionary&quot;&gt;<br/>\t  &lt;item key=&quot;grassland_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;grassland&quot;)<br/>\t\tmsg (&quot;You've discovered the grassland! Now, you can travel to the grassland and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;plains_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;plains&quot;)<br/>\t\tmsg (&quot;You've discovered the plains! Now, you can travel to the plains and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;desert_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;desert&quot;)<br/>\t\tmsg (&quot;You've discovered the desert! Now, you can travel to the desert and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;tundra_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;tundra&quot;)<br/>\t\tmsg (&quot;You've discovered the tundra! Now, you can travel to the tundra and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;swampland_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;swampland&quot;)<br/>\t\tmsg (&quot;You've discovered the swampland! Now, you can travel to the swampland and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;forest_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;forest&quot;)<br/>\t\tmsg (&quot;You've discovered the forest! Now, you can travel to the forest and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;mountains_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;mountains&quot;)<br/>\t\tmsg (&quot;You've discovered the mountains! Now, you can travel to the mountains and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;hills_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;hills&quot;)<br/>\t\tmsg (&quot;You've discovered the hills! Now, you can travel to the hills and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;wasteland_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;wasteland&quot;)<br/>\t\tmsg (&quot;You've discovered the wasteland! Now, you can travel to the wasteland and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t  &lt;item key=&quot;coastland_discovery&quot;&gt;<br/>\t    list add (data_object&#46;travel_string_list, &quot;coastland&quot;)<br/>\t\tmsg (&quot;You've discovered the coastland! Now, you can travel to the coastland and explore it!&quot;)<br/>\t  &lt;/item&gt;<br/>\t&lt;/homeland_events_script_dictionary&gt;<br/>  &lt;/object&gt;<br/>  &lt;turnscript name=&quot;global_turnscript&quot;&gt;<br/>    &lt;enabled /&gt;<br/>    &lt;script&gt;<br/>      game&#46;turns = game&#46;turns + 1<br/>    &lt;/script&gt;<br/>  &lt;/turnscript&gt;<br/>  &lt;function name=&quot;help_function&quot;&gt;<br/>    msg (&quot;Type 'explore' to explore your area&#46;&quot;)<br/>\tmsg (&quot;Type 'travel' to travel to different areas&#46;&quot;)<br/>  &lt;/function&gt;<br/>  &lt;function name=&quot;explore_function&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    switch (game&#46;pov&#46;parent) {<br/>\t  case (homeland) {<br/>\t\tresult_1 = ListCount (data_object&#46;homeland_events_string_list) - 1<br/>\t\tif (result_1 &gt;= 0) {<br/>          result_2 = StringListItem (data_object&#46;homeland_events_string_list,GetRandomInt(0,result_1))<br/>          invoke (ScriptDictionaryItem (data_object&#46;homeland_events_script_dictionary,result_2))<br/>\t\t  on ready {<br/>\t\t    foreach (item_x, split (&quot;grassland_discovery;plains_discovery;desert_discovery;tundra_discovery;swampland_discovery;forest_discovery;mountains_discovery;hills_discovery;wasteland_discovery;coastland_discovery&quot;,&quot;;&quot;)) {<br/>\t\t      if (result_2 = item_x) {<br/>\t\t\t    list remove (data_object&#46;homeland_events_string_list, result_2)<br/>\t\t\t  }<br/>\t\t\t}<br/>\t\t  }<br/>\t\t} else {<br/>\t\t  msg (&quot;There seemingly is nothing left to explore in this area&#46;&quot;)<br/>\t\t}<br/>\t  }<br/>    }<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/>  &lt;function name=&quot;travel_function&quot;&gt;<br/>    show menu (&quot;Where do you wish to travel?&quot;,data_object&#46;travel_string_list,false) {<br/>\t  if (not game&#46;pov&#46;parent = GetObject (result)) {<br/>\t    game&#46;pov&#46;parent = GetObject (result)<br/>\t  } else {<br/>\t    msg (&quot;You are already at this area&#46;&quot;)<br/>\t\task (&quot;Try again?&quot;) {<br/>\t\t  if (result=true) {<br/>\t\t    travel_function<br/>\t\t  } else {<br/>\t\t    msg (&quot;You realize that you need to discover a new area to travel to first, before you can travel to that place&#46;&quot;)<br/>\t\t  }<br/>\t\t}<br/>\t  }<br/>\t}<br/>  &lt;/function&gt;<br/>&lt;/asl&gt;</code></pre><div><a href=\"/attachment/818\">HK Testing Travel.aslx</a></div>",
      "PostDate": "2013-12-26T22:24:03+00:00",
      "LastEditDate": null
    }
  ]
}
