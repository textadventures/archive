{
  "Topic": {
    "TopicId": "uczvdfmj-umwijhwm6galq",
    "ForumId": "10",
    "Title": "Door already closed, but why?",
    "LastUpdated": "2016-12-15T22:21:31.7021175Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "54db03e7-084f-46dd-b237-fe776c6562e3",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've set a door to **object** and activated the **container** function, making it **openable / closable.**\r\n\r\nI have **Can be opened** and **Can be closed** ticked, and **Is open** not ticked.\r\n\r\nThen I run the following script on **When opening object**:\r\n```\r\nif (GetBoolean(door2, \"shopopen\")) {\r\n  msg (\"The door's already open. You peer inside.\")\r\n}\r\nelse {\r\n  firsttime {\r\n    msg (\"You push on the door and hear it scape over dirt and grime. You stand on the threshold and peer inside. The shop's interior looks dank and is clearly not in use.\")\r\n  }\r\n  otherwise {\r\n    msg (\"You stand on the threshold and peer inside.\")\r\n  }\r\n  SetObjectFlagOn (door2, \"shopopen\")\r\n}\r\n```\r\nAnd then on **Script to run when closing object** I have:\r\n```\r\nmsg (\"You close the door.\")\r\nSetObjectFlagOff (door2, \"shopopen\")\r\n```\r\nBut when I run it, open the door and then try to close it, I get **The door is already closed.**\r\n\r\nWhat's more, the **close door** command is not removing the flag which sets it as open.",
      "EditableFormat": "markdown",
      "HTML": "<p>I've set a door to <strong>object</strong> and activated the <strong>container</strong> function, making it <strong>openable / closable.</strong></p>\n<p>I have <strong>Can be opened</strong> and <strong>Can be closed</strong> ticked, and <strong>Is open</strong> not ticked.</p>\n<p>Then I run the following script on <strong>When opening object</strong>:</p>\n<pre><code>if (GetBoolean(door2, \"shopopen\")) {\n  msg (\"The door's already open. You peer inside.\")\n}\nelse {\n  firsttime {\n    msg (\"You push on the door and hear it scape over dirt and grime. You stand on the threshold and peer inside. The shop's interior looks dank and is clearly not in use.\")\n  }\n  otherwise {\n    msg (\"You stand on the threshold and peer inside.\")\n  }\n  SetObjectFlagOn (door2, \"shopopen\")\n}\n</code></pre>\n<p>And then on <strong>Script to run when closing object</strong> I have:</p>\n<pre><code>msg (\"You close the door.\")\nSetObjectFlagOff (door2, \"shopopen\")\n</code></pre>\n<p>But when I run it, open the door and then try to close it, I get <strong>The door is already closed.</strong></p>\n<p>What's more, the <strong>close door</strong> command is not removing the flag which sets it as open.</p>\n\n",
      "PostDate": "2016-12-15T22:21:31.7021175Z",
      "LastEditDate": "2016-12-15T22:21:58.9970267Z"
    },
    {
      "PostId": "8d50f54c-323a-4ab5-a670-11cc13e43120",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I suspect that Quest has its own open/closed flag. Your \"shopopen\" one is known to your code, but Quest has no idea you opened the door, since you didn't set *its* open flag. And its checking its own flag before calling your code.\r\n\r\nJust a guess... I need to get Quest installed on my new computer!\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I suspect that Quest has its own open/closed flag. Your \"shopopen\" one is known to your code, but Quest has no idea you opened the door, since you didn't set <em>its</em> open flag. And its checking its own flag before calling your code.</p>\n<p>Just a guess... I need to get Quest installed on my new computer!</p>\n\n",
      "PostDate": "2016-12-15T22:28:30.3576921Z",
      "LastEditDate": null
    },
    {
      "PostId": "71e8b57a-c6b7-41b8-b2e2-0da382a00024",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah! Thank you.\r\n\r\nI think there's a better way to handle this, but that's usually the case where my logic is concerned.\r\n\r\nAnd yes, install Quest and come back aboard!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah! Thank you.</p>\n<p>I think there's a better way to handle this, but that's usually the case where my logic is concerned.</p>\n<p>And yes, install Quest and come back aboard!</p>\n\n",
      "PostDate": "2016-12-15T22:55:21.9526623Z",
      "LastEditDate": "2016-12-15T22:56:36.9124489Z"
    },
    {
      "PostId": "22b01fb1-cd3b-4266-8a23-61dd744bed4e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I believe the controlling/determining (Boolean) Attribute used by quest for whether the door is opened/closed is:\r\n\r\nisopen ( http://docs.textadventures.co.uk/quest/attributes/isopen.html )\r\n\r\n-------\r\n\r\nwhere-as, I believe there's the 'openable', 'opened', and 'closed' Inherited Attributes / Object Types (Types), which give Objects their properties of opening/closing, being initially open/closed, and etc functionality via through using the GUI/Editor, but what quest actually uses for the state of the Object of-as of being opened or closed, is the 'isopen' Boolean Attribute.\r\n\r\n-------\r\n\r\nHere's the Attributes for Objects (this is a good thing to study and learn up on):\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/object.html",
      "EditableFormat": "markdown",
      "HTML": "<p>I believe the controlling/determining (Boolean) Attribute used by quest for whether the door is opened/closed is:</p>\n<p>isopen ( http://docs.textadventures.co.uk/quest/attributes/isopen.html )</p>\n<hr>\n<p>where-as, I believe there's the 'openable', 'opened', and 'closed' Inherited Attributes / Object Types (Types), which give Objects their properties of opening/closing, being initially open/closed, and etc functionality via through using the GUI/Editor, but what quest actually uses for the state of the Object of-as of being opened or closed, is the 'isopen' Boolean Attribute.</p>\n<hr>\n<p>Here's the Attributes for Objects (this is a good thing to study and learn up on):</p>\n<p>http://docs.textadventures.co.uk/quest/elements/object.html</p>\n\n",
      "PostDate": "2016-12-16T04:01:02.5770994Z",
      "LastEditDate": "2016-12-16T04:20:45.9023805Z"
    },
    {
      "PostId": "754bb2ed-f146-4238-a7c2-e5ca065a9fdf",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Don't make doors containers... always worked for me.",
      "EditableFormat": "markdown",
      "HTML": "<p>Don't make doors containers... always worked for me.</p>\n\n",
      "PostDate": "2016-12-16T05:33:30.5479916Z",
      "LastEditDate": null
    },
    {
      "PostId": "e258a002-64f8-42ba-aefa-6db83a178516",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nXanMag\r\nDon't make doors containers... always worked for me.\r\n```\r\nBut how do you handle the **open door** command?\r\n",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>XanMag\nDon't make doors containers... always worked for me.\n</code></pre>\n<p>But how do you handle the <strong>open door</strong> command?</p>\n\n",
      "PostDate": "2016-12-16T17:46:36.3677127Z",
      "LastEditDate": null
    },
    {
      "PostId": "447a7d71-0188-431e-9128-e30fc3dede80",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You create a room, for example _Factory_. \r\nInside that room, create an object called like \"_Locked Exit 1_\" for example. It would like this in the tree of stuff...\r\n\r\n_factory\r\nLocked Exit 1_\r\n\r\nOn that \"_Locked Exit 1_\" object, find the \"exit tab\" and check the \"locked\". Then check \"run a script\" with an \"if script\" attached. It might look something like this.\r\n```\r\nif (Got (Key 1)) {\r\n   UnlockExit\r\n}\r\nelse {\r\n msg (\"Oh nooooes! You need a key first.\")\r\n}\r\n```\r\n\r\nAlternatively, you could do a super easy thing too...create a flag on the new \"exit's attributes\" in this case \"Locked Exit 1\" \r\nexit attributes\r\nadd, flag.boolean set to False\r\nThen check \"run a script\" with an \"if script\" attached. \r\n```\r\nif (Locked Exit 1.flag=False) {\r\nmsg (\"Argh! You need a key you nasty vermin!\") \r\nUnlockExit\r\n}\r\nelse {\r\nmsg (\"You unlocked the door you scaliwag!\")\r\n}\r\n```\r\nThen when the player takes \"Key 1\" set the flag to \"True\" with... \r\nLocked Exit 1.flag=True\r\n\r\nHope that is what you were talking about @_@\r\n\r\nAnonynn. ",
      "EditableFormat": "markdown",
      "HTML": "<p>You create a room, for example <em>Factory</em>.<br>\nInside that room, create an object called like \"<em>Locked Exit 1</em>\" for example. It would like this in the tree of stuff...</p>\n<p><em>factory<br>\nLocked Exit 1</em></p>\n<p>On that \"<em>Locked Exit 1</em>\" object, find the \"exit tab\" and check the \"locked\". Then check \"run a script\" with an \"if script\" attached. It might look something like this.</p>\n<pre><code>if (Got (Key 1)) {\n   UnlockExit\n}\nelse {\n msg (\"Oh nooooes! You need a key first.\")\n}\n</code></pre>\n<p>Alternatively, you could do a super easy thing too...create a flag on the new \"exit's attributes\" in this case \"Locked Exit 1\"<br>\nexit attributes<br>\nadd, flag.boolean set to False<br>\nThen check \"run a script\" with an \"if script\" attached.</p>\n<pre><code>if (Locked Exit 1.flag=False) {\nmsg (\"Argh! You need a key you nasty vermin!\") \nUnlockExit\n}\nelse {\nmsg (\"You unlocked the door you scaliwag!\")\n}\n</code></pre>\n<p>Then when the player takes \"Key 1\" set the flag to \"True\" with...<br>\nLocked Exit 1.flag=True</p>\n<p>Hope that is what you were talking about @_@</p>\n<p>Anonynn.</p>\n\n",
      "PostDate": "2016-12-17T21:46:29.6435354Z",
      "LastEditDate": null
    },
    {
      "PostId": "1e5fedbe-21df-4480-87a8-08f129a06265",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, Anonynn. That's pretty much what I do, although I don't create an additional object within the door. I just make the door the object then check for flags and run scripts etc.\r\n\r\nI was just wondering what Xan meant when he said don't make doors containers.\r\n\r\nFor the record, Xan, the reason I make the door a container is because it creates the **open** verb in doing so. What I mean is if you don't make the door a container, how do you handle the **open** verb?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, Anonynn. That's pretty much what I do, although I don't create an additional object within the door. I just make the door the object then check for flags and run scripts etc.</p>\n<p>I was just wondering what Xan meant when he said don't make doors containers.</p>\n<p>For the record, Xan, the reason I make the door a container is because it creates the <strong>open</strong> verb in doing so. What I mean is if you don't make the door a container, how do you handle the <strong>open</strong> verb?</p>\n\n",
      "PostDate": "2016-12-17T22:04:06.5035197Z",
      "LastEditDate": "2016-12-17T22:06:34.3716449Z"
    },
    {
      "PostId": "355d796d-12a2-4c4c-8a3c-76ba298462f8",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think... Xan means this (or I could be totally wrong):\r\n\r\nto use the 'openable' Container Type for/in the GUI/Editor's drop down menu: http://docs.textadventures.co.uk/quest/attributes/openable.html\r\n\r\n(and not the 'container_open/closed' nor the 'surface' Container Types / Object Types / Inherited Attributes)\r\n\r\n^^^^^^\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/object.html (scroll down to the bottom to find the Inherited Attributes / Object Types (Types))\r\n\r\n----------\r\n\r\nIt looks like you can use the 'lockable' Container Type too, and I think the GUI/Editor is handling this for you via you checking in the 'can be locked' check box, as otherwise, to give your 'door' Object multiple Inherited Attributes, you have to do so in code, as I believe in the GUI/Editor, you got a drop down menu for selecting the Container Types, meaning you can only pick one of them. But as I've said, I believe you choose the 'openable' Container Type in the GUI/Editor's drop down menu, and then you can check the 'can be locked' check box, which I believe underneath adds the 'lockable' Container Type to your 'door' Object, as well as the 'door' Object getting the 'openable' Container Type added to it via choosing it in the drop down menu.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think... Xan means this (or I could be totally wrong):</p>\n<p>to use the 'openable' Container Type for/in the GUI/Editor's drop down menu: http://docs.textadventures.co.uk/quest/attributes/openable.html</p>\n<p>(and not the 'container_open/closed' nor the 'surface' Container Types / Object Types / Inherited Attributes)</p>\n<p>^^^^^^</p>\n<p>http://docs.textadventures.co.uk/quest/elements/object.html (scroll down to the bottom to find the Inherited Attributes / Object Types (Types))</p>\n<hr>\n<p>It looks like you can use the 'lockable' Container Type too, and I think the GUI/Editor is handling this for you via you checking in the 'can be locked' check box, as otherwise, to give your 'door' Object multiple Inherited Attributes, you have to do so in code, as I believe in the GUI/Editor, you got a drop down menu for selecting the Container Types, meaning you can only pick one of them. But as I've said, I believe you choose the 'openable' Container Type in the GUI/Editor's drop down menu, and then you can check the 'can be locked' check box, which I believe underneath adds the 'lockable' Container Type to your 'door' Object, as well as the 'door' Object getting the 'openable' Container Type added to it via choosing it in the drop down menu.</p>\n\n",
      "PostDate": "2016-12-18T01:08:30.8474414Z",
      "LastEditDate": "2016-12-18T01:18:01.638858Z"
    },
    {
      "PostId": "84960cea-98c0-4a88-8ab8-d3e2ddf1604a",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ahh, I see. So how do I set an object to this instead of a container?",
      "EditableFormat": "markdown",
      "HTML": "<p>Ahh, I see. So how do I set an object to this instead of a container?</p>\n\n",
      "PostDate": "2016-12-18T01:11:42.5472502Z",
      "LastEditDate": null
    },
    {
      "PostId": "526369d1-eafc-4288-9625-e6cebcecc07a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just edited my previous post, so refresh and read it again... and I think it'll answer your question.... hopefully.. corectly, lol",
      "EditableFormat": "markdown",
      "HTML": "<p>I just edited my previous post, so refresh and read it again... and I think it'll answer your question.... hopefully.. corectly, lol</p>\n\n",
      "PostDate": "2016-12-18T01:15:45.5416703Z",
      "LastEditDate": "2016-12-18T01:16:14.516288Z"
    },
    {
      "PostId": "7aae2336-a85f-43ec-874c-269d782cf513",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "technically, the 'openable' is a Container Type in the underlying code, but for the user-level usage, the 'openable' is not a \"refrigerator/chest/cabinet/dresser/whatever-like container\" where you can put/take Objects into/from it after opening/closing it, it's just a \"door/whatever\" that you open/close, it can't \"contain\" other items/Objects within it like the 'container_open/close' and 'surface' Container Types can.\r\n\r\n--------\r\n\r\nHK edit, the above is wrong in that the 'openable' is NOT technically a Container Type, my bad.\r\n\r\n------\r\n\r\nso, here's my best attempt at how the Inheritance/nesting/layers work / is set up / organized / designed / structured:\r\n\r\n---\r\n\r\nContainer Types:\r\n\r\ncontainer_base (makes the Object openable/closeable, via also adding/including the 'openable' Object Type, and able to contain/take/put/display other items/Objects within it --- basically this has all the functions for handling container functionality)\r\n\r\ncontainer_base -> container_open (it is specifically set as initially being open)\r\n\r\ncontainer_base -> container_open -> container (as it inherits the 'container_open', it is initially set as being open) // I'm not sure how this is different/needed compared to just: container_base -> container_open, I don't know what makes 'container' different from 'container_open', lol\r\n\r\ncontainer_base -> container_closed (same as 'container', but it is specifically set as initially being closed)\r\n\r\ncontainer_base -> container_open -> container -> container_limited (added feature of limiting the quantity of Objects within it, via using the 'maxobject' Integer Attribute)\r\n\r\n-------\r\n\r\npartial/quasi (or full/is a) Container Type:\r\n\r\ncontainer_base -> container_open -> surface (transparent, open container, but can't be closed)\r\nor\r\ncontainer_open -> surface (transparent, open container, but can't be closed)\r\n\r\nmeh\r\n\r\n-------\r\n\r\nLockable Type:\r\n\r\ncontainer_lockable (this able the 'lockable' Object Type / Inherited Attribute, adds the locking feature to the Object. While this is not a Container Type: it doesn't include/add any container properties/features, it DOES require the Object to specifically have the 'open/close' Scripts, so you'll need to also add/include the 'container_closed/container_open/container_limited' Object Types / Inherited Attributes. It is not a Container Type, but it requires being paired with a Container Type)\r\n\r\n-------\r\n\r\nOpenable Type:\r\n\r\nopenable (adds the 'open' and 'close' Boolean Attributes, which set whether the Object can be opened/closed, this is the functionality of opening/closing, NOT the actual state of whether it is open or close during game play. The 'isopen' Boolean Atribute handles the actual state of it currently being open or closed)\r\n\r\n(again, note that the 'isopen' Boolean Attribute, is what is actually setting/determing an openable Object's current state of being during game play, as in, is it: open or closed)\r\n\r\n-------\r\n\r\nSwitchable Type:\r\n\r\nswitchable (getting tired... grants the 'on/off' functionality to an Object)",
      "EditableFormat": "markdown",
      "HTML": "<p>technically, the 'openable' is a Container Type in the underlying code, but for the user-level usage, the 'openable' is not a \"refrigerator/chest/cabinet/dresser/whatever-like container\" where you can put/take Objects into/from it after opening/closing it, it's just a \"door/whatever\" that you open/close, it can't \"contain\" other items/Objects within it like the 'container_open/close' and 'surface' Container Types can.</p>\n<hr>\n<p>HK edit, the above is wrong in that the 'openable' is NOT technically a Container Type, my bad.</p>\n<hr>\n<p>so, here's my best attempt at how the Inheritance/nesting/layers work / is set up / organized / designed / structured:</p>\n<hr>\n<p>Container Types:</p>\n<p>container_base (makes the Object openable/closeable, via also adding/including the 'openable' Object Type, and able to contain/take/put/display other items/Objects within it --- basically this has all the functions for handling container functionality)</p>\n<p>container_base -&gt; container_open (it is specifically set as initially being open)</p>\n<p>container_base -&gt; container_open -&gt; container (as it inherits the 'container_open', it is initially set as being open) // I'm not sure how this is different/needed compared to just: container_base -&gt; container_open, I don't know what makes 'container' different from 'container_open', lol</p>\n<p>container_base -&gt; container_closed (same as 'container', but it is specifically set as initially being closed)</p>\n<p>container_base -&gt; container_open -&gt; container -&gt; container_limited (added feature of limiting the quantity of Objects within it, via using the 'maxobject' Integer Attribute)</p>\n<hr>\n<p>partial/quasi (or full/is a) Container Type:</p>\n<p>container_base -&gt; container_open -&gt; surface (transparent, open container, but can't be closed)<br>\nor<br>\ncontainer_open -&gt; surface (transparent, open container, but can't be closed)</p>\n<p>meh</p>\n<hr>\n<p>Lockable Type:</p>\n<p>container_lockable (this able the 'lockable' Object Type / Inherited Attribute, adds the locking feature to the Object. While this is not a Container Type: it doesn't include/add any container properties/features, it DOES require the Object to specifically have the 'open/close' Scripts, so you'll need to also add/include the 'container_closed/container_open/container_limited' Object Types / Inherited Attributes. It is not a Container Type, but it requires being paired with a Container Type)</p>\n<hr>\n<p>Openable Type:</p>\n<p>openable (adds the 'open' and 'close' Boolean Attributes, which set whether the Object can be opened/closed, this is the functionality of opening/closing, NOT the actual state of whether it is open or close during game play. The 'isopen' Boolean Atribute handles the actual state of it currently being open or closed)</p>\n<p>(again, note that the 'isopen' Boolean Attribute, is what is actually setting/determing an openable Object's current state of being during game play, as in, is it: open or closed)</p>\n<hr>\n<p>Switchable Type:</p>\n<p>switchable (getting tired... grants the 'on/off' functionality to an Object)</p>\n\n",
      "PostDate": "2016-12-18T01:24:01.9217456Z",
      "LastEditDate": "2016-12-18T02:07:24.2630143Z"
    },
    {
      "PostId": "cc6568e4-0109-4304-9fec-aa081f05fb4b",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I might be a bit late to the party here, and honestly I didn't read anything after you asked about how to handle the open verb...\r\nScroll to the bottom if you don't care to look at the code below.\r\n```\r\n  <object name=\"room3\">\r\n    <inherit name=\"editor_room\" />\r\n    <description>There is a door to the south.</description>\r\n    <exit alias=\"out\" to=\"room1\">\r\n      <inherit name=\"outdirection\" />\r\n    </exit>\r\n    <object name=\"door\">\r\n      <inherit name=\"editor_object\" />\r\n      <look type=\"script\">\r\n        if (GetBoolean(door, \"ajar\")) {\r\n          msg (\"This door has been opened and you may now enter the adjacent room.\")\r\n        }\r\n        else {\r\n          msg (\"The door is just a door.  And... it is shut.\")\r\n        }\r\n      </look>\r\n    </object>\r\n    <command name=\"open door cmd\">\r\n      <pattern>open door</pattern>\r\n      <script>\r\n        if (GetBoolean(door, \"ajar\")) {\r\n          msg (\"It's already open, you goon.\")\r\n        }\r\n        else {\r\n          msg (\"You open the door.\")\r\n          SetObjectFlagOn (door, \"ajar\")\r\n          SetObjectFlagOn (door1, \"ajar\")\r\n          UnlockExit (doorlock)\r\n          UnlockExit (doorlock2)\r\n        }\r\n      </script>\r\n    </command>\r\n    <exit name=\"doorlock\" alias=\"south\" to=\"room4\">\r\n      <inherit name=\"southdirection\" />\r\n      <locked />\r\n      <visible />\r\n      <lockmessage>The door impedes your path.</lockmessage>\r\n    </exit>\r\n    <command name=\"close door cmd\">\r\n      <pattern>close door</pattern>\r\n      <script>\r\n        if (GetBoolean(door, \"ajar\")) {\r\n          msg (\"You close the door.\")\r\n          SetObjectFlagOff (door, \"ajar\")\r\n          SetObjectFlagOff (door, \"ajar\")\r\n          LockExit (doorlock)\r\n          LockExit (doorlock2)\r\n        }\r\n        else {\r\n          msg (\"Duh.  The door is already closed.\")\r\n        }\r\n      </script>\r\n    </command>\r\n  </object>\r\n  <object name=\"room4\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"door1\">\r\n      <inherit name=\"editor_object\" />\r\n      <look type=\"script\">\r\n        if (GetBoolean(door1, \"ajar\")) {\r\n          msg (\"This door has been opened and you may now enter the adjacent room.\")\r\n        }\r\n        else {\r\n          msg (\"The door is just a door.  And... it is shut.\")\r\n        }\r\n      </look>\r\n      <alias>door</alias>\r\n    </object>\r\n    <exit name=\"doorlock2\" alias=\"north\" to=\"room3\">\r\n      <inherit name=\"northdirection\" />\r\n      <locked />\r\n    </exit>\r\n    <command name=\"open door cmd1\">\r\n      <pattern>open door</pattern>\r\n      <script>\r\n        if (GetBoolean(door, \"ajar\")) {\r\n          msg (\"It's already open, you goon.\")\r\n        }\r\n        else {\r\n          msg (\"You open the door.\")\r\n          SetObjectFlagOn (door, \"ajar\")\r\n          SetObjectFlagOn (door1, \"ajar\")\r\n          UnlockExit (doorlock)\r\n        }\r\n      </script>\r\n    </command>\r\n    <command name=\"close door cmd1\">\r\n      <pattern>close door</pattern>\r\n      <script>\r\n        if (GetBoolean(door, \"ajar\")) {\r\n          msg (\"You close the door.\")\r\n          SetObjectFlagOff (door, \"ajar\")\r\n          SetObjectFlagOff (door, \"ajar\")\r\n          LockExit (doorlock)\r\n          LockExit (doorlock2)\r\n        }\r\n        else {\r\n          msg (\"Duh.  The door is already closed.\")\r\n        }\r\n      </script>\r\n    </command>\r\n  </object>\r\n```\r\nIt seems like a lot of code for something so simple but copy-paste is marvelous.  I've never had the best luck with container options. So, what I do often essentially is this:\r\n1.  Add a door as an object (non-container) to adjacent rooms.  door and door1.\r\n2.  Add a command in the room with 'door' in it and type in open door.  For this command script, I added a flag for 'door' and 'door1' called ajar.  I use ajar because 'open' conflicts with the built-in Quest open.  For each door I added a look at script to describe the state of the door (whether it is open or closed).\r\n3.  I also added an unlock exit script to each door object.  You could add a make exit visible/not-visible, too.",
      "EditableFormat": "markdown",
      "HTML": "<p>I might be a bit late to the party here, and honestly I didn't read anything after you asked about how to handle the open verb...<br>\nScroll to the bottom if you don't care to look at the code below.</p>\n<pre><code>  &lt;object name=\"room3\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;description&gt;There is a door to the south.&lt;/description&gt;\n    &lt;exit alias=\"out\" to=\"room1\"&gt;\n      &lt;inherit name=\"outdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"door\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look type=\"script\"&gt;\n        if (GetBoolean(door, \"ajar\")) {\n          msg (\"This door has been opened and you may now enter the adjacent room.\")\n        }\n        else {\n          msg (\"The door is just a door.  And... it is shut.\")\n        }\n      &lt;/look&gt;\n    &lt;/object&gt;\n    &lt;command name=\"open door cmd\"&gt;\n      &lt;pattern&gt;open door&lt;/pattern&gt;\n      &lt;script&gt;\n        if (GetBoolean(door, \"ajar\")) {\n          msg (\"It's already open, you goon.\")\n        }\n        else {\n          msg (\"You open the door.\")\n          SetObjectFlagOn (door, \"ajar\")\n          SetObjectFlagOn (door1, \"ajar\")\n          UnlockExit (doorlock)\n          UnlockExit (doorlock2)\n        }\n      &lt;/script&gt;\n    &lt;/command&gt;\n    &lt;exit name=\"doorlock\" alias=\"south\" to=\"room4\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n      &lt;locked /&gt;\n      &lt;visible /&gt;\n      &lt;lockmessage&gt;The door impedes your path.&lt;/lockmessage&gt;\n    &lt;/exit&gt;\n    &lt;command name=\"close door cmd\"&gt;\n      &lt;pattern&gt;close door&lt;/pattern&gt;\n      &lt;script&gt;\n        if (GetBoolean(door, \"ajar\")) {\n          msg (\"You close the door.\")\n          SetObjectFlagOff (door, \"ajar\")\n          SetObjectFlagOff (door, \"ajar\")\n          LockExit (doorlock)\n          LockExit (doorlock2)\n        }\n        else {\n          msg (\"Duh.  The door is already closed.\")\n        }\n      &lt;/script&gt;\n    &lt;/command&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room4\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"door1\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look type=\"script\"&gt;\n        if (GetBoolean(door1, \"ajar\")) {\n          msg (\"This door has been opened and you may now enter the adjacent room.\")\n        }\n        else {\n          msg (\"The door is just a door.  And... it is shut.\")\n        }\n      &lt;/look&gt;\n      &lt;alias&gt;door&lt;/alias&gt;\n    &lt;/object&gt;\n    &lt;exit name=\"doorlock2\" alias=\"north\" to=\"room3\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n      &lt;locked /&gt;\n    &lt;/exit&gt;\n    &lt;command name=\"open door cmd1\"&gt;\n      &lt;pattern&gt;open door&lt;/pattern&gt;\n      &lt;script&gt;\n        if (GetBoolean(door, \"ajar\")) {\n          msg (\"It's already open, you goon.\")\n        }\n        else {\n          msg (\"You open the door.\")\n          SetObjectFlagOn (door, \"ajar\")\n          SetObjectFlagOn (door1, \"ajar\")\n          UnlockExit (doorlock)\n        }\n      &lt;/script&gt;\n    &lt;/command&gt;\n    &lt;command name=\"close door cmd1\"&gt;\n      &lt;pattern&gt;close door&lt;/pattern&gt;\n      &lt;script&gt;\n        if (GetBoolean(door, \"ajar\")) {\n          msg (\"You close the door.\")\n          SetObjectFlagOff (door, \"ajar\")\n          SetObjectFlagOff (door, \"ajar\")\n          LockExit (doorlock)\n          LockExit (doorlock2)\n        }\n        else {\n          msg (\"Duh.  The door is already closed.\")\n        }\n      &lt;/script&gt;\n    &lt;/command&gt;\n  &lt;/object&gt;\n</code></pre>\n<p>It seems like a lot of code for something so simple but copy-paste is marvelous.  I've never had the best luck with container options. So, what I do often essentially is this:</p>\n<ol>\n<li>Add a door as an object (non-container) to adjacent rooms.  door and door1.</li>\n<li>Add a command in the room with 'door' in it and type in open door.  For this command script, I added a flag for 'door' and 'door1' called ajar.  I use ajar because 'open' conflicts with the built-in Quest open.  For each door I added a look at script to describe the state of the door (whether it is open or closed).</li>\n<li>I also added an unlock exit script to each door object.  You could add a make exit visible/not-visible, too.</li>\n</ol>\n\n",
      "PostDate": "2016-12-18T04:25:24.5202333Z",
      "LastEditDate": "2016-12-18T04:30:20.8584668Z"
    },
    {
      "PostId": "3a7725dc-873d-494c-a8c8-8e6f42da0490",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "o0 - seems convoluted, even for me.\r\n\r\nI'm happy with my containers, now that I know Quest has its own 'open' flag, and that my problem stemmed from the fact I was trying to override it with my own flag.\r\n\r\nI made the same mistake with the 'switchable' function, using **torchOn**, when Quest already uses **switchedon**",
      "EditableFormat": "markdown",
      "HTML": "<p>o0 - seems convoluted, even for me.</p>\n<p>I'm happy with my containers, now that I know Quest has its own 'open' flag, and that my problem stemmed from the fact I was trying to override it with my own flag.</p>\n<p>I made the same mistake with the 'switchable' function, using <strong>torchOn</strong>, when Quest already uses <strong>switchedon</strong></p>\n\n",
      "PostDate": "2016-12-18T18:27:32.5098275Z",
      "LastEditDate": "2016-12-18T18:27:54.8764361Z"
    }
  ]
}
