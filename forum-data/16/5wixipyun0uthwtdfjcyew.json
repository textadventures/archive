{
  "Topic": {
    "TopicId": "5wixipyun0uthwtdfjcyew",
    "ForumId": "16",
    "Title": "Typos",
    "LastUpdated": "2020-01-07T10:30:11.7719207Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a0dd587f-e0fc-457f-8b48-933d966f2c21",
      "UserId": 247261,
      "Username": "Motorzilla",
      "AvatarUrl": "https://i.imgur.com/x5RHXIlb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not wanting to be a pest, but it's an engine for text, so I feel like some things - especially templates that auto-fill - should probably be correct :> Sorry if this is the wrong forum section to post in!\r\n\r\nNamed female characters - possessive - should be \"her<u><b>s</b></u>\" (currently \"her\")\r\nPlayer pronouns - possessive - should be \"<u><b>yours</b></u>\" (currently \"its\")\r\nSpeaking to an object - singular - auto-response should be \"object.gender sa<u><b>y</b></u>s nothing\" (currently\"saies\")",
      "EditableFormat": "markdown",
      "HTML": "<p>Not wanting to be a pest, but it's an engine for text, so I feel like some things - especially templates that auto-fill - should probably be correct :&gt; Sorry if this is the wrong forum section to post in!</p>\n<p>Named female characters - possessive - should be \"her<u><b>s</b></u>\" (currently \"her\")<br>\nPlayer pronouns - possessive - should be \"<u><b>yours</b></u>\" (currently \"its\")<br>\nSpeaking to an object - singular - auto-response should be \"object.gender sa<u><b>y</b></u>s nothing\" (currently\"saies\")</p>\n\n",
      "PostDate": "2020-01-07T10:30:11.7719207Z",
      "LastEditDate": "2020-01-07T10:32:58.9448028Z",
      "link": null
    },
    {
      "PostId": "c02aff39-55af-4248-a81d-00d7d35f639e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Sorry if this is the wrong forum section to post in!\r\n\r\nThis is more for stuff about the website. Posts about Quest usually go in the Quest forum. But I think people will see it here.\r\n\r\n> Named female characters - possessive - should be \"hers\" (currently \"her\")\r\n\r\nI disagree there.\r\nThe only place the possessive attribute is used in the core code is the function Possessive, which returns a string of the form \"his lamp\" or \"her wallet\". Changing that to \"hers\" would be introducing an error.\r\n\r\nGiven the existence of this function (although it doesn't seem to be used anywhere), I assume the `possessive` attribute is intended to represent the possessive adjective, rather than the possessive pronoun. This is supported by the fact that the default `pov_possessive` (for the player) is \"your\", not \"yours\".\r\n\r\nI can think of a few cases where the former might be used in a game, but none for the latter. However, if you can think of one, it probably wouldn't be a problem to add an extra attribute for that.\r\n\r\n> Player pronouns - possessive - should be \"yours\" (currently \"its\")\r\n\r\nIn fact, `pov_possessive` is set to \"your\" by default (via the template `SelfPossessive`)\r\n\r\nSo this one isn't so much a typo as a bug: the `InitPOV` function which swaps out `pov_` attributes for their external versions misses out `pov_possessive`.\r\n\r\n<details><summary>A modified function</summary>\r\nIncluding this function should fix the issue; at least until these modifications are made in the core.\r\n\r\n<pre><code>  &lt;function name=\"InitPOV\" parameters=\"oldPOV, newPOV\">\r\n    &lt;![CDATA[\r\n    if (oldPOV &lt;> null) {\r\n      oldPOV.alias = oldPOV.external_alias\r\n      oldPOV.alt = oldPOV.external_alt\r\n      oldPOV.look = oldPOV.external_look\r\n      oldPOV.gender = oldPOV.external_gender\r\n      oldPOV.article = oldPOV.external_article\r\n      <b style=\"border: 1px solid green\">oldPOV.possessive = oldPOV.external_possessive</b>\r\n    }\r\n\r\n    newPOV.external_alias = newPOV.alias\r\n    newPOV.external_alt = newPOV.alt\r\n    newPOV.external_look = newPOV.look\r\n    newPOV.external_gender = newPOV.gender\r\n    newPOV.external_article = newPOV.article\r\n    <b style=\"border: 1px solid green\">newPOV.external_possessive = newPOV.possessive</b>\r\n   \r\n    if (not GetBoolean(newPOV, \"pov_used\")) {\r\n      if (newPOV.alt = null) {\r\n        newPOV.pov_alt = newPOV.pov_alt  // ensure we have our own copy of the list\r\n      }\r\n      else {\r\n        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)\r\n      }\r\n      if (newPOV.alias <> null) {\r\n        list add (newPOV.pov_alt, newPOV.alias)\r\n      }\r\n\r\n      if (game.showmoney and not HasInt(newPOV, \"money\")) {\r\n        newPOV.money = 0\r\n      }\r\n\r\n      if (game.showhealth) {\r\n        newPOV.health = 100\r\n        newPOV.changedhealth => {\r\n          if (this.health > 100) {\r\n            this.health = 100\r\n          }\r\n          else if (this.health = 0) {\r\n            if (HasScript(game, \"onhealthzero\")) {\r\n              do (game, \"onhealthzero\")\r\n            }\r\n          }\r\n          else if (this.health &lt; 0) {\r\n            this.health = 0\r\n            // changedhealth will be called again so the onhealthzero script will run\r\n          }\r\n        }\r\n      }\r\n      newPOV.pov_used = true\r\n    }\r\n\r\n    newPOV.alias = newPOV.pov_alias\r\n    newPOV.alt = newPOV.pov_alt\r\n    newPOV.look = newPOV.pov_look\r\n    newPOV.gender = newPOV.pov_gender\r\n    newPOV.article = newPOV.pov_article\r\n    <b style=\"border: 1px solid green\">newPOV.possessive = newPOV.pov_possessive</b>\r\n    ]]>\r\n  &lt;/function></code></pre>\r\n\r\n(I think the 'health' code probably needs a tweak too, but that's not the issue here)\r\n</details>\r\n\r\n> Speaking to an object - singular - auto-response should be \"object.gender says nothing\" (currently\"saies\")\r\n\r\nAgain, that's a bug rather than a typo. There's a function `Conjugate` which attempts to automatically conjugate verbs in English. It's used by several of the templates in order to ensure that they adapt correctly for gender/plurality. However, Conjugate uses a fairly simple algorithm.\r\n\r\nI've already posted an improved version of Conjugate, but it still isn't perfect.\r\nI thought the current version was better than thatâ€¦ maybe it's still in the queue of things to fix in the next version.\r\n\r\n<details><summary>Suggested `Conjugate` function</summary>\r\n\r\nI've not tested this fully, but it should be better than the current version:\r\n```\r\n    <function name=\"Conjugate\" type=\"string\" parameters=\"obj, verb\">\r\n      genders = LCase(obj.gender)\r\n      if (genders = \"he\" or genders = \"she\") {\r\n          genders = genders + \";it\"\r\n      }\r\n      cmd = GetObject (verb)\r\n      foreach (gender, Split(genders)) {\r\n          if (not cmd = null and HasString (cmd, \"conjugate_\"+gender)) {\r\n              return (GetString (cmd, \"conjugate_\"+gender))\r\n          }\r\n          dict = GetAttribute (game, \"conjugations_\"+gender)\r\n          if (not dict = null) {\r\n              if (DictionaryContains (dict, verb)) {\r\n                  return (DictionaryItem (dict, verb))\r\n              }\r\n              foreach (ending, game.conjugations) {\r\n                  if (Left (ending, 1) = \"@\" and EndsWith (verb, Mid (ending, 2))) {\r\n                    return (Conjugate (obj, Left (verb, LengthOf(verb) - LengthOf(ending) + 1)) + DictionaryItem (dict, ending))\r\n                  }\r\n                  else if (Left (ending, 1) = \"*\" and EndsWith (verb, Mid (ending, 2))) {\r\n                      return (Left (verb, LengthOf(verb) - LengthOf(ending) + 1) + DictionaryItem (dict, ending))\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      return (verb)\r\n    </function>\r\n```\r\nIt goes with a couple of dictionaries, which are assumed to be attributes of the game element:\r\n```\r\n    <attr name=\"conjugations_i\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>am</value></item>\r\n      <item><key>'be</key><value>'m</value></item>\r\n    </attr>\r\n\r\n    <attr name=\"conjugations_you\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>are</value></item>\r\n      <item><key>'be</key><value>'re</value></item>\r\n    </attr>\r\n\r\n    <attr name=\"conjugations_we\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>are</value></item>\r\n      <item><key>'be</key><value>'re</value></item>\r\n    </attr>\r\n\r\n    <attr name=\"conjugations_they\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>are</value></item>\r\n      <item><key>'be</key><value>'re</value></item>\r\n    </attr>\r\n\r\n    <attr name=\"conjugations_it\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>is</value></item>\r\n      <item><key>have</key><value>has</value></item>\r\n      <item><key>@n't</key><value>n't</value></item>\r\n      <item><key>'ve</key><value>'s</value></item>\r\n      <item><key>'be</key><value>'s</value></item>\r\n      <item><key>*ay</key><value>ays</value></item>\r\n      <item><key>*oy</key><value>oys</value></item>\r\n      <item><key>*ey</key><value>eys</value></item>\r\n      <item><key>*y</key><value>ies</value></item>\r\n      <item><key>*ss</key><value>sses</value></item>\r\n      <item><key>*s</key><value>sses</value></item>\r\n      <item><key>*sh</key><value>shes</value></item>\r\n      <item><key>*ch</key><value>ches</value></item>\r\n      <item><key>*o</key><value>oes</value></item>\r\n      <item><key>*x</key><value>xes</value></item>\r\n      <item><key>*z</key><value>zes</value></item>\r\n      <item><key>*</key><value>s</value></item>\r\n    </attr>\r\n```\r\n\r\n(I wrote this when I was trying to make a game where the player character adopts 1st person; though that would require changing a lot of the templates as well. Note that it shouldn't be used for the verbs \"can\", \"must\", \"would\", \"should\", because those aren't conjugated normally; and making the function ignore them would break when it comes to the verb \"can\" meaning to put something in a can)\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Sorry if this is the wrong forum section to post in!</p>\n</blockquote>\n<p>This is more for stuff about the website. Posts about Quest usually go in the Quest forum. But I think people will see it here.</p>\n<blockquote>\n<p>Named female characters - possessive - should be \"hers\" (currently \"her\")</p>\n</blockquote>\n<p>I disagree there.<br>\nThe only place the possessive attribute is used in the core code is the function Possessive, which returns a string of the form \"his lamp\" or \"her wallet\". Changing that to \"hers\" would be introducing an error.</p>\n<p>Given the existence of this function (although it doesn't seem to be used anywhere), I assume the <code>possessive</code> attribute is intended to represent the possessive adjective, rather than the possessive pronoun. This is supported by the fact that the default <code>pov_possessive</code> (for the player) is \"your\", not \"yours\".</p>\n<p>I can think of a few cases where the former might be used in a game, but none for the latter. However, if you can think of one, it probably wouldn't be a problem to add an extra attribute for that.</p>\n<blockquote>\n<p>Player pronouns - possessive - should be \"yours\" (currently \"its\")</p>\n</blockquote>\n<p>In fact, <code>pov_possessive</code> is set to \"your\" by default (via the template <code>SelfPossessive</code>)</p>\n<p>So this one isn't so much a typo as a bug: the <code>InitPOV</code> function which swaps out <code>pov_</code> attributes for their external versions misses out <code>pov_possessive</code>.</p>\n<details><summary>A modified function</summary>\nIncluding this function should fix the issue; at least until these modifications are made in the core.\n<pre><code>  &lt;function name=\"InitPOV\" parameters=\"oldPOV, newPOV\"&gt;\n    &lt;![CDATA[\n    if (oldPOV &lt;&gt; null) {\n      oldPOV.alias = oldPOV.external_alias\n      oldPOV.alt = oldPOV.external_alt\n      oldPOV.look = oldPOV.external_look\n      oldPOV.gender = oldPOV.external_gender\n      oldPOV.article = oldPOV.external_article\n      <b style=\"border: 1px solid green\">oldPOV.possessive = oldPOV.external_possessive</b>\n    }\n\n    newPOV.external_alias = newPOV.alias\n    newPOV.external_alt = newPOV.alt\n    newPOV.external_look = newPOV.look\n    newPOV.external_gender = newPOV.gender\n    newPOV.external_article = newPOV.article\n    <b style=\"border: 1px solid green\">newPOV.external_possessive = newPOV.possessive</b>\n   \n    if (not GetBoolean(newPOV, \"pov_used\")) {\n      if (newPOV.alt = null) {\n        newPOV.pov_alt = newPOV.pov_alt  // ensure we have our own copy of the list\n      }\n      else {\n        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)\n      }\n      if (newPOV.alias &lt;&gt; null) {\n        list add (newPOV.pov_alt, newPOV.alias)\n      }\n\n      if (game.showmoney and not HasInt(newPOV, \"money\")) {\n        newPOV.money = 0\n      }\n\n      if (game.showhealth) {\n        newPOV.health = 100\n        newPOV.changedhealth =&gt; {\n          if (this.health &gt; 100) {\n            this.health = 100\n          }\n          else if (this.health = 0) {\n            if (HasScript(game, \"onhealthzero\")) {\n              do (game, \"onhealthzero\")\n            }\n          }\n          else if (this.health &lt; 0) {\n            this.health = 0\n            // changedhealth will be called again so the onhealthzero script will run\n          }\n        }\n      }\n      newPOV.pov_used = true\n    }\n\n    newPOV.alias = newPOV.pov_alias\n    newPOV.alt = newPOV.pov_alt\n    newPOV.look = newPOV.pov_look\n    newPOV.gender = newPOV.pov_gender\n    newPOV.article = newPOV.pov_article\n    <b style=\"border: 1px solid green\">newPOV.possessive = newPOV.pov_possessive</b>\n    ]]&gt;\n  &lt;/function&gt;</code></pre>\n<p>(I think the 'health' code probably needs a tweak too, but that's not the issue here)</p>\n</details>\n<blockquote>\n<p>Speaking to an object - singular - auto-response should be \"object.gender says nothing\" (currently\"saies\")</p>\n</blockquote>\n<p>Again, that's a bug rather than a typo. There's a function <code>Conjugate</code> which attempts to automatically conjugate verbs in English. It's used by several of the templates in order to ensure that they adapt correctly for gender/plurality. However, Conjugate uses a fairly simple algorithm.</p>\n<p>I've already posted an improved version of Conjugate, but it still isn't perfect.<br>\nI thought the current version was better than thatâ€¦ maybe it's still in the queue of things to fix in the next version.</p>\n<details><summary>Suggested `Conjugate` function</summary>\n<p>I've not tested this fully, but it should be better than the current version:</p>\n<pre><code>    &lt;function name=\"Conjugate\" type=\"string\" parameters=\"obj, verb\"&gt;\n      genders = LCase(obj.gender)\n      if (genders = \"he\" or genders = \"she\") {\n          genders = genders + \";it\"\n      }\n      cmd = GetObject (verb)\n      foreach (gender, Split(genders)) {\n          if (not cmd = null and HasString (cmd, \"conjugate_\"+gender)) {\n              return (GetString (cmd, \"conjugate_\"+gender))\n          }\n          dict = GetAttribute (game, \"conjugations_\"+gender)\n          if (not dict = null) {\n              if (DictionaryContains (dict, verb)) {\n                  return (DictionaryItem (dict, verb))\n              }\n              foreach (ending, game.conjugations) {\n                  if (Left (ending, 1) = \"@\" and EndsWith (verb, Mid (ending, 2))) {\n                    return (Conjugate (obj, Left (verb, LengthOf(verb) - LengthOf(ending) + 1)) + DictionaryItem (dict, ending))\n                  }\n                  else if (Left (ending, 1) = \"*\" and EndsWith (verb, Mid (ending, 2))) {\n                      return (Left (verb, LengthOf(verb) - LengthOf(ending) + 1) + DictionaryItem (dict, ending))\n                  }\n              }\n          }\n      }\n      return (verb)\n    &lt;/function&gt;\n</code></pre>\n<p>It goes with a couple of dictionaries, which are assumed to be attributes of the game element:</p>\n<pre><code>    &lt;attr name=\"conjugations_i\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;am&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'m&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"conjugations_you\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;are&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'re&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"conjugations_we\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;are&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'re&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"conjugations_they\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;are&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'re&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"conjugations_it\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;is&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;have&lt;/key&gt;&lt;value&gt;has&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;@n't&lt;/key&gt;&lt;value&gt;n't&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'ve&lt;/key&gt;&lt;value&gt;'s&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'s&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ay&lt;/key&gt;&lt;value&gt;ays&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*oy&lt;/key&gt;&lt;value&gt;oys&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ey&lt;/key&gt;&lt;value&gt;eys&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*y&lt;/key&gt;&lt;value&gt;ies&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ss&lt;/key&gt;&lt;value&gt;sses&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*s&lt;/key&gt;&lt;value&gt;sses&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*sh&lt;/key&gt;&lt;value&gt;shes&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ch&lt;/key&gt;&lt;value&gt;ches&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*o&lt;/key&gt;&lt;value&gt;oes&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*x&lt;/key&gt;&lt;value&gt;xes&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*z&lt;/key&gt;&lt;value&gt;zes&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*&lt;/key&gt;&lt;value&gt;s&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n</code></pre>\n<p>(I wrote this when I was trying to make a game where the player character adopts 1st person; though that would require changing a lot of the templates as well. Note that it shouldn't be used for the verbs \"can\", \"must\", \"would\", \"should\", because those aren't conjugated normally; and making the function ignore them would break when it comes to the verb \"can\" meaning to put something in a can)</p>\n</details>\n\n",
      "PostDate": "2020-01-07T13:22:37.9019639Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8d5beed1-6333-49ab-9882-2d8ad0f2781f",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you don't like Quests use of possessive pronouns, then make your own...\r\nThat's the nice thing about programming, you can do that...\r\nI've got a game, non-Quest, where I created one.\r\nThe message would be:\r\n\"You look at {pronoun(3)} and try to determine how well {pronoun(1)} knows how to fight.\"\r\npronoun is a function with a list of words like \"he, she, it\" and I select which one I need at the time.\r\n(I think I had a \"sex\" value to determine which version I needed.)\r\nIf the sex was male then the list would be \"he, his, him,...\"\r\nFemale would be \"she, hers, her,...\"\r\nother would be \"it, its, its,...\"\r\nMainly to get every word to line up right, I repeated each line with each pronoun to get each one to sound \"right\".\r\nQuest does most of this already for you.\r\nAlso, you could just write everything out yourself and not use ANY of Quests possessive pronouns... Problem solved.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>If you don't like Quests use of possessive pronouns, then make your own...<br>\nThat's the nice thing about programming, you can do that...<br>\nI've got a game, non-Quest, where I created one.<br>\nThe message would be:<br>\n\"You look at {pronoun(3)} and try to determine how well {pronoun(1)} knows how to fight.\"<br>\npronoun is a function with a list of words like \"he, she, it\" and I select which one I need at the time.<br>\n(I think I had a \"sex\" value to determine which version I needed.)<br>\nIf the sex was male then the list would be \"he, his, him,...\"<br>\nFemale would be \"she, hers, her,...\"<br>\nother would be \"it, its, its,...\"<br>\nMainly to get every word to line up right, I repeated each line with each pronoun to get each one to sound \"right\".<br>\nQuest does most of this already for you.<br>\nAlso, you could just write everything out yourself and not use ANY of Quests possessive pronouns... Problem solved.</p>\n\n",
      "PostDate": "2020-01-07T17:25:52.6321364Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fc603006-9e53-4358-959d-24a7884e5871",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It should also be noted that the documentation is incomplete.\r\n\r\n`possessive` isn't in the list of attributes.\r\nIt should be added, and made clear that it is the possessive adjective rather than the possessive pronoun.\r\nWhile it isn't used by any of the built-in messages (at least in English), it would be good to have it documented for the benefit of any libraries that might use it, and so that people don't have to guess about what it is supposed to represent.\r\n\r\n@DarkLizerd:\r\nOn the only project I'm using that requires such functions, I find it easier to name them things like `hisher`, `hisher`, `himher`, `heshe` etc. Then it's easy to remember the name of the one you want.\r\n\r\n(maybe that would be a good thing to include as a text processor directive: `{heshe:objectname}` would be equivalent to `{objectname.gender}`, but for the less-common ones it would make them easier to remember)",
      "EditableFormat": "markdown",
      "HTML": "<p>It should also be noted that the documentation is incomplete.</p>\n<p><code>possessive</code> isn't in the list of attributes.<br>\nIt should be added, and made clear that it is the possessive adjective rather than the possessive pronoun.<br>\nWhile it isn't used by any of the built-in messages (at least in English), it would be good to have it documented for the benefit of any libraries that might use it, and so that people don't have to guess about what it is supposed to represent.</p>\n<p>@DarkLizerd:<br>\nOn the only project I'm using that requires such functions, I find it easier to name them things like <code>hisher</code>, <code>hisher</code>, <code>himher</code>, <code>heshe</code> etc. Then it's easy to remember the name of the one you want.</p>\n<p>(maybe that would be a good thing to include as a text processor directive: <code>{heshe:objectname}</code> would be equivalent to <code>{objectname.gender}</code>, but for the less-common ones it would make them easier to remember)</p>\n\n",
      "PostDate": "2020-01-07T19:50:19.584781Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9e02ba1f-b490-45d5-bf0b-7c8fc79b351a",
      "UserId": 247261,
      "Username": "Motorzilla",
      "AvatarUrl": "https://i.imgur.com/x5RHXIlb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel The fact that it's adjective as opposed to possessive pronoun explains it, and frankly I didn't think about that at all. Running \"whose cat is that?\" to \"its her\" made my brain scream. I'm not sure why my player's possessive was filled in with \"its\" then; checking in a new game file turned out to have \"your\", so all my points are now moot. (Which is good! No bugs I guess.)\r\n\r\n@DarkLizerd Thankfully the ability to use/write your own pronouns in Quest is there, but the point I was trying to make was that these innate offers should be correct, to avoid mistakes when relying on them in order to <i>not</i> have to write them yourself every time. As it turns out they were, and my concerns unfounded.",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel The fact that it's adjective as opposed to possessive pronoun explains it, and frankly I didn't think about that at all. Running \"whose cat is that?\" to \"its her\" made my brain scream. I'm not sure why my player's possessive was filled in with \"its\" then; checking in a new game file turned out to have \"your\", so all my points are now moot. (Which is good! No bugs I guess.)</p>\n<p>@DarkLizerd Thankfully the ability to use/write your own pronouns in Quest is there, but the point I was trying to make was that these innate offers should be correct, to avoid mistakes when relying on them in order to <i>not</i> have to write them yourself every time. As it turns out they were, and my concerns unfounded.</p>\n\n",
      "PostDate": "2020-01-10T12:14:13.1236179Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
