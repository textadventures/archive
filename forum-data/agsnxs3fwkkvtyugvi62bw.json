{
  "Topic": {
    "TopicId": "agsnxs3fwkkvtyugvi62bw",
    "ForumId": "15",
    "Title": "Game-changing updates in 0.8",
    "LastUpdated": "2021-05-11T13:24:59.2422741Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9b4a4846-8a16-4ec0-98e1-b14701081290",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As I mess around writing my own games, I realise there are various issues still in the Quest 6 code, and try to update them as I go along, so you will see updates on Github every now and again. Occasionally, this will potentially affect other people's game, and there have been a few recently. These are mostly obscure points I doubt anyone is using yet... until today's update, anyway!\r\n\r\nIn light of that, I want to highlight some recent changes and what authors need to do to keep their games current.\r\n\r\nThere is a good argument for waiting until the next point release. When 0.8 is released, download that version, look back here and update your files accordingly. However it is easier for me to note changes as I go along.\r\n\r\nI really want to keep the number of changes like this to a minimum so games are backwards compatible, but on the other hand, to support that I really need to get it right now, before QuestJS is properly released. So apologies, but...\r\n\r\nThe first is the big one, the next two might affect someone, the rest I include for completeness.\r\n\r\n### moveChar\r\n\r\nPreviously the player object was moved with world.setRoom, while NPCs were moved with either that or with npc.moveWithDescription. I have realised a better way is with just a single function. Part of this is so the side effects are consistent. If NPC is carrying something that is triggered when moved it should act the same as if the player is carrying it. There is also an issue with changing the POV, so the user is now controlling what was previously an NPC.\r\n\r\nWhat needs to be changed?\r\n\r\nInstead of:\r\n\r\n```\r\nworld.setRoom(char, dest, dir)\r\nchar.moveWithDscription(dest, dir)\r\n```\r\n\r\nDo:\r\n\r\n```\r\nchar.moveChar(dest, dir)\r\n```\r\n\r\nAs before `dir` is optional; if missing this will be done silently.\r\n\r\n\r\n### simpleIsAtLoc\r\n\r\nThe function complexIsAtLoc has been renamed to simpleIsAtLoc, because it is a more simple version (rather than an easier way to do something complex, which was the earlier thinking).\r\n\r\n\r\n### Restriction testing\r\n\r\nRenamed for wear/drop/full/put in for consistency to test[verb]Restrictions, and to avoid naming collisions.\r\n\r\n```\r\ncanWearRemove(char, true)\r\ncanWearRemove(char, false)\r\ntestRestrictions(obj)         [give]\r\ntestRestrictions(obj, char)  [put in container]\r\n```\r\nChange to:\r\n```\r\ntestWearRestrictions(char)\r\ntestRemoveRestrictions(char)\r\ntestGiveRestrictions(char, obj)\r\ntestPutInRestrictions(char, obj)\r\n```\r\n\r\n### Command objects array options\r\n\r\nPreviously you could use ignore:true and text:true in the objects attribute of a command. These hae been subsumed into the special attribute\r\n```\r\nignore:true,\r\ntext:true,\r\n```\r\nBecomes\r\n```\r\nspecial:'ignore',\r\nspecial:'text',\r\n```\r\nThe special attribute allows authors to add their own options here too.\r\n\r\n\r\n### settings.funcForDynamicConv\r\n\r\nsettings.dropdownForConv nolonger used, instead settings.funcForDynamicConv controls the style, allowing for more options.\r\n\r\n### NPC reactions\r\n\r\nUses an array, rather than a dictionary.",
      "EditableFormat": "markdown",
      "HTML": "<p>As I mess around writing my own games, I realise there are various issues still in the Quest 6 code, and try to update them as I go along, so you will see updates on Github every now and again. Occasionally, this will potentially affect other people's game, and there have been a few recently. These are mostly obscure points I doubt anyone is using yet... until today's update, anyway!</p>\n<p>In light of that, I want to highlight some recent changes and what authors need to do to keep their games current.</p>\n<p>There is a good argument for waiting until the next point release. When 0.8 is released, download that version, look back here and update your files accordingly. However it is easier for me to note changes as I go along.</p>\n<p>I really want to keep the number of changes like this to a minimum so games are backwards compatible, but on the other hand, to support that I really need to get it right now, before QuestJS is properly released. So apologies, but...</p>\n<p>The first is the big one, the next two might affect someone, the rest I include for completeness.</p>\n<h3>moveChar</h3>\n<p>Previously the player object was moved with world.setRoom, while NPCs were moved with either that or with npc.moveWithDescription. I have realised a better way is with just a single function. Part of this is so the side effects are consistent. If NPC is carrying something that is triggered when moved it should act the same as if the player is carrying it. There is also an issue with changing the POV, so the user is now controlling what was previously an NPC.</p>\n<p>What needs to be changed?</p>\n<p>Instead of:</p>\n<pre><code>world.setRoom(char, dest, dir)\nchar.moveWithDscription(dest, dir)\n</code></pre>\n<p>Do:</p>\n<pre><code>char.moveChar(dest, dir)\n</code></pre>\n<p>As before <code>dir</code> is optional; if missing this will be done silently.</p>\n<h3>simpleIsAtLoc</h3>\n<p>The function complexIsAtLoc has been renamed to simpleIsAtLoc, because it is a more simple version (rather than an easier way to do something complex, which was the earlier thinking).</p>\n<h3>Restriction testing</h3>\n<p>Renamed for wear/drop/full/put in for consistency to test[verb]Restrictions, and to avoid naming collisions.</p>\n<pre><code>canWearRemove(char, true)\ncanWearRemove(char, false)\ntestRestrictions(obj)         [give]\ntestRestrictions(obj, char)  [put in container]\n</code></pre>\n<p>Change to:</p>\n<pre><code>testWearRestrictions(char)\ntestRemoveRestrictions(char)\ntestGiveRestrictions(char, obj)\ntestPutInRestrictions(char, obj)\n</code></pre>\n<h3>Command objects array options</h3>\n<p>Previously you could use ignore:true and text:true in the objects attribute of a command. These hae been subsumed into the special attribute</p>\n<pre><code>ignore:true,\ntext:true,\n</code></pre>\n<p>Becomes</p>\n<pre><code>special:'ignore',\nspecial:'text',\n</code></pre>\n<p>The special attribute allows authors to add their own options here too.</p>\n<h3>settings.funcForDynamicConv</h3>\n<p>settings.dropdownForConv nolonger used, instead settings.funcForDynamicConv controls the style, allowing for more options.</p>\n<h3>NPC reactions</h3>\n<p>Uses an array, rather than a dictionary.</p>\n\n",
      "PostDate": "2021-05-11T13:24:59.2422741Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "956baa90-3a90-46df-b4b3-77fe081f0831",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I say all bets are off before version 1.0.\r\n\r\nAnyone making Quest 6 games with the pre-released code (including me) can either update our code or finish our work in progress without switching to the updated files.\r\n\r\nFix that stuff, Pixie! Don't hold back!",
      "EditableFormat": "markdown",
      "HTML": "<p>I say all bets are off before version 1.0.</p>\n<p>Anyone making Quest 6 games with the pre-released code (including me) can either update our code or finish our work in progress without switching to the updated files.</p>\n<p>Fix that stuff, Pixie! Don't hold back!</p>\n\n",
      "PostDate": "2021-05-11T18:12:08.6770985Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4bf8287b-489e-4e6b-bea6-302b13f7db2c",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@K.V. Absolutely this. Anything pre 1.0, people should expect frequent changes and updates. Really looking forward to the final release!",
      "EditableFormat": "markdown",
      "HTML": "<p>@K.V. Absolutely this. Anything pre 1.0, people should expect frequent changes and updates. Really looking forward to the final release!</p>\n\n",
      "PostDate": "2021-05-13T07:27:07.187989Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c0837781-93c3-4fe7-aa3b-c610fd6143f0",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just read \"settings.funForDynamicCow\"  :-)",
      "EditableFormat": "markdown",
      "HTML": "<p>just read \"settings.funForDynamicCow\"  :-)</p>\n\n",
      "PostDate": "2021-05-13T14:32:12.0141836Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d00b721-df67-45d6-bb7a-5be6e49c2af8",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The \"visited\" attribute of a room is incremented after the description, but now _before_ `afterEnter` and `afterFirstEnter` are run. It seems more intuitive. Before the room is entered, the player has not visited. After the room is entered, the player has visited it, which is how turn scripts have always seen it.\r\n\r\n____\r\n\r\nThe background object is no longer a thing. \r\n\r\nThe background object would be set up in room description by flagging nouns with square brackets. When the player enters the room, Quest would grab those nouns and give the background object a regex based on them, effectively faking the existence of them, so if the user looks at any of them Quest can pretend it is there, but just tell you it is scenery.\r\n\r\n```\r\ncreateRoom(\"lounge\", {\r\n  desc:'A smelly room with an [old settee:couch:sofa] and a [tv:telly]. There is a tatty [rug] on the floor.',\r\n  east:new Exit('kitchen'),\r\n  west:new Exit(\"dining_room\"),\r\n})\r\n```\r\n\r\nInstead, you can now create scenery objects by setting the \"scenery\" attribute of a room. It is moretyping, but this creates normal items, so is actually more simple code internally, and does all the work up front, rather than each turn. It also gives you the option of adding a description.\r\n\r\n```\r\ncreateRoom(\"lounge\", {\r\n  desc:'A smelly room with an old settee and a tv. There is a tatty rug on the floor.',\r\n  east:new Exit('kitchen'),\r\n  west:new Exit(\"dining_room\"),\r\n  scenery:[\r\n    'tv',\r\n    {alias:['old settee', 'couch', 'sofa']},\r\n    {alias:'rug', desc:'It might have been blue at one time. Maybe.'},\r\n  ],\r\n})\r\n```\r\n\r\nhttps://github.com/ThePix/QuestJS/wiki/Attributes-for-rooms#scenery",
      "EditableFormat": "markdown",
      "HTML": "<p>The \"visited\" attribute of a room is incremented after the description, but now <em>before</em> <code>afterEnter</code> and <code>afterFirstEnter</code> are run. It seems more intuitive. Before the room is entered, the player has not visited. After the room is entered, the player has visited it, which is how turn scripts have always seen it.</p>\n<hr>\n<p>The background object is no longer a thing.</p>\n<p>The background object would be set up in room description by flagging nouns with square brackets. When the player enters the room, Quest would grab those nouns and give the background object a regex based on them, effectively faking the existence of them, so if the user looks at any of them Quest can pretend it is there, but just tell you it is scenery.</p>\n<pre><code>createRoom(\"lounge\", {\n  desc:'A smelly room with an [old settee:couch:sofa] and a [tv:telly]. There is a tatty [rug] on the floor.',\n  east:new Exit('kitchen'),\n  west:new Exit(\"dining_room\"),\n})\n</code></pre>\n<p>Instead, you can now create scenery objects by setting the \"scenery\" attribute of a room. It is moretyping, but this creates normal items, so is actually more simple code internally, and does all the work up front, rather than each turn. It also gives you the option of adding a description.</p>\n<pre><code>createRoom(\"lounge\", {\n  desc:'A smelly room with an old settee and a tv. There is a tatty rug on the floor.',\n  east:new Exit('kitchen'),\n  west:new Exit(\"dining_room\"),\n  scenery:[\n    'tv',\n    {alias:['old settee', 'couch', 'sofa']},\n    {alias:'rug', desc:'It might have been blue at one time. Maybe.'},\n  ],\n})\n</code></pre>\n<p>https://github.com/ThePix/QuestJS/wiki/Attributes-for-rooms#scenery</p>\n\n",
      "PostDate": "2021-05-14T08:34:28.4423982Z",
      "LastEditDate": "2021-05-14T08:43:34.6912951Z",
      "link": null
    },
    {
      "PostId": "34f0403f-778b-4951-a9b5-d0d2bceeccb6",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Timed events have been re-written, see [here](http://textadventures.co.uk/forum/questkit/topic/5-iw5whf5kmpy1aqvcuttw/q6-timers-and-save-load).",
      "EditableFormat": "markdown",
      "HTML": "<p>Timed events have been re-written, see <a href=\"http://textadventures.co.uk/forum/questkit/topic/5-iw5whf5kmpy1aqvcuttw/q6-timers-and-save-load\">here</a>.</p>\n\n",
      "PostDate": "2021-05-23T09:02:37.3525921Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6737bf30-c261-4c86-890b-dd6fb0615e77",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Renames some attributes for consistency:\r\n```\r\nonGoCheck -> testCarryRestrictions\r\nonGoAction -> afterCarry\r\nitemTaked -> afterItemTakenFrom\r\nitemDropped -> afterItemDroppedHere\r\ncheckOpenClose -> testOpentrestrictions/testCloseRestrictions\r\nonOpen -> afterOpen\r\nonClose -> afterClose\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Renames some attributes for consistency:</p>\n<pre><code>onGoCheck -&gt; testCarryRestrictions\nonGoAction -&gt; afterCarry\nitemTaked -&gt; afterItemTakenFrom\nitemDropped -&gt; afterItemDroppedHere\ncheckOpenClose -&gt; testOpentrestrictions/testCloseRestrictions\nonOpen -&gt; afterOpen\nonClose -&gt; afterClose\n</code></pre>\n\n",
      "PostDate": "2021-05-29T07:11:24.0970201Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0823fe58-9385-4086-9255-970705570fb9",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "More renaming and also reordering of parameters for restriction and reaction attributes. Hopefully all done now!\r\n\r\nDetails are here, which is now much shorter, which is a good sign.\r\nhttps://github.com/ThePix/QuestJS/wiki/Restrictions-and-Reactions",
      "EditableFormat": "markdown",
      "HTML": "<p>More renaming and also reordering of parameters for restriction and reaction attributes. Hopefully all done now!</p>\n<p>Details are here, which is now much shorter, which is a good sign.<br>\nhttps://github.com/ThePix/QuestJS/wiki/Restrictions-and-Reactions</p>\n\n",
      "PostDate": "2021-06-02T09:53:12.1112575Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ce83758c-8ac1-4d15-a80f-1d3323273467",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/1bNzUShb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "All of it massively over my head, but I just like seeing enthusiastic updates of progress. Keep it up! ♥",
      "EditableFormat": "markdown",
      "HTML": "<p>All of it massively over my head, but I just like seeing enthusiastic updates of progress. Keep it up! ♥</p>\n\n",
      "PostDate": "2021-06-03T17:46:21.7111165Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d84213de-f6b6-4080-897e-91370093881e",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The custom save/load methods have been renamed , again for consistency:\r\n```\r\npreSave -> beforeSave\r\ntemplatePreSave -> beforeSaveForTemplate\r\npostLoad -> afterLoad\r\ntemplatePostLoad -> afterLoadForTemplate",
      "EditableFormat": "markdown",
      "HTML": "<p>The custom save/load methods have been renamed , again for consistency:</p>\n<pre><code>preSave -&gt; beforeSave\ntemplatePreSave -&gt; beforeSaveForTemplate\npostLoad -&gt; afterLoad\ntemplatePostLoad -&gt; afterLoadForTemplate\n</code></pre>\n\n",
      "PostDate": "2021-06-08T10:24:26.1740856Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "860378aa-f07b-4560-a564-d6f4916812e4",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Some changes for names:\r\n* properName is now properNoun, as that is the correct term.\r\n* parserAltNames is now synonyms\r\n\r\nThe second parameter for setAlias is now a dictionary, so you can set other attributes at the same time.",
      "EditableFormat": "markdown",
      "HTML": "<p>Some changes for names:</p>\n<ul>\n<li>properName is now properNoun, as that is the correct term.</li>\n<li>parserAltNames is now synonyms</li>\n</ul>\n<p>The second parameter for setAlias is now a dictionary, so you can set other attributes at the same time.</p>\n\n",
      "PostDate": "2021-06-08T10:29:32.6992561Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c0e3dace-d348-4b3e-9a46-24ab633cdf75",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "parsePriority is now parserPriority; I found I was using that anyway, so feels more natural\r\n\r\nmoveChar takes the exit as a parameter only, as various functions it calls need that, and the exit provides the destination. If you want to move a character where they is no exit, you wil need to set \"loc\" directly and handle the various possible side effects yourself.",
      "EditableFormat": "markdown",
      "HTML": "<p>parsePriority is now parserPriority; I found I was using that anyway, so feels more natural</p>\n<p>moveChar takes the exit as a parameter only, as various functions it calls need that, and the exit provides the destination. If you want to move a character where they is no exit, you wil need to set \"loc\" directly and handle the various possible side effects yourself.</p>\n\n",
      "PostDate": "2021-06-18T10:44:25.2745622Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5f7aeeb4-002b-4379-a4a6-1f70afe17207",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The text processor directive \"param\" has been removed. Originally, \"show\" would show a value of an object specified in the text, while \"param\" did that for an object in the params, but they both got modified to partly do the other too, but in slightly different ways. It seems better to have just one function.\r\n\r\nThe params will no longer work for the object name; if \"show\" finds a parameter is a string, it will take it as a string, not try to convert it to an object.\r\n\r\nIf \"show\" gets a function the function will be passed the params, not further arguments in the directive. If this turns out to be a problem, it could be modified to send the arguments as a second paramter.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The text processor directive \"param\" has been removed. Originally, \"show\" would show a value of an object specified in the text, while \"param\" did that for an object in the params, but they both got modified to partly do the other too, but in slightly different ways. It seems better to have just one function.</p>\n<p>The params will no longer work for the object name; if \"show\" finds a parameter is a string, it will take it as a string, not try to convert it to an object.</p>\n<p>If \"show\" gets a function the function will be passed the params, not further arguments in the directive. If this turns out to be a problem, it could be modified to send the arguments as a second paramter.</p>\n\n",
      "PostDate": "2021-06-20T08:02:16.2379758Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2633ad64-192e-437e-95f8-2b0de2763ea6",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have now released version 0.8. I think I have done all the big changes now, and I would like to think this will be a bit more stable, but we will see...",
      "EditableFormat": "markdown",
      "HTML": "<p>I have now released version 0.8. I think I have done all the big changes now, and I would like to think this will be a bit more stable, but we will see...</p>\n\n",
      "PostDate": "2021-07-07T09:12:55.857512Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ed07cca4-b3b0-4210-a0ce-575754287a16",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'll try to break it for you.\r\n\r\nThen, hopefully, Pertex will try to break the example game for me.\r\n\r\n:o)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'll try to break it for you.</p>\n<p>Then, hopefully, Pertex will try to break the example game for me.</p>\n<p>:o)</p>\n\n",
      "PostDate": "2021-07-07T18:45:30.20088Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "11fd849e-49f2-47ed-bad5-66a69bc506e9",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I will do my best :-)",
      "EditableFormat": "markdown",
      "HTML": "<p>I will do my best :-)</p>\n\n",
      "PostDate": "2021-07-08T08:24:33.7907445Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
