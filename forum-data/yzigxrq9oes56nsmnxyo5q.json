{
  "Topic": {
    "TopicId": "yzigxrq9oes56nsmnxyo5q",
    "ForumId": "10",
    "Title": "Add fake exit (solved; opinions are still welcomed) ",
    "LastUpdated": "2024-09-11T17:26:00.4924838Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "cba47bea-6dea-4fcb-aa57-96fc012d1373",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "heyall \r\n\r\nSo, normally there is a series of rooms (which are part of a big jungle) have say 2 or 3 exits, but when a specific situation happens, like being chased by an enemy and the player should run away, all the exit directions on the compass activate, which means the player has to memorize the right pathway not to get lost in the vast jungle.\r\n\r\nThe problem is when the chasing begins, how do I add exits that have scripts for failure or getting lost? the exit will transport the player to another room, and they have to find a way to get out.\r\n\r\nAlso the exits must be added in directions that don't originally have exits. For example, if the room has South and NorthWest directions, new \"wrong\" exits will be added to 6 remaining directions.\r\n\r\n\r\nAnd in the end, I need a function that will destroy the fake exits.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>heyall</p>\n<p>So, normally there is a series of rooms (which are part of a big jungle) have say 2 or 3 exits, but when a specific situation happens, like being chased by an enemy and the player should run away, all the exit directions on the compass activate, which means the player has to memorize the right pathway not to get lost in the vast jungle.</p>\n<p>The problem is when the chasing begins, how do I add exits that have scripts for failure or getting lost? the exit will transport the player to another room, and they have to find a way to get out.</p>\n<p>Also the exits must be added in directions that don't originally have exits. For example, if the room has South and NorthWest directions, new \"wrong\" exits will be added to 6 remaining directions.</p>\n<p>And in the end, I need a function that will destroy the fake exits.</p>\n\n",
      "PostDate": "2024-09-11T17:26:00.4924838Z",
      "LastEditDate": "2024-09-11T18:54:08.1166495Z",
      "link": null
    },
    {
      "PostId": "7dcc6ead-970d-418a-8a29-1b521d3d904d",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "EDIT 1:\r\n\r\nI fixed it to a degree.\r\n```\r\nplayer.parent = run forest\r\nz = ScopeExitsForRoom (run forest)\r\nx = Settings.exitstringnames\r\nm = NewStringList()\r\nwhile (ListCount(z) > 0) {\r\n  exi = PickOneObject (z)\r\n  list remove (z, exi)\r\n  exi = exi.alias\r\n  list add (m, exi)\r\n}\r\ny = ListExclude (x, m)\r\nmsg (y)\r\nwhile (ListCount(y) > 0) {\r\n  n = PickOneString(y)\r\n  list remove (y, n)\r\n  create exit (n, run forest, run forest)\r\n  n.runscript = true\r\n  n.script => {\r\n    \r\n  }\r\n}\r\n```\r\nthe lines: \r\n n.runscript = true\r\n  n.script => {\r\n    \r\n  }\r\nseem to be wrong. Somehow I have to get the name of the created exit\r\n\r\nother opinions are welcomed is always\r\n\r\nEDIT 2:\r\n```\r\nplayer.parent = run forest\r\nz = ScopeExitsForRoom (run forest)\r\nc = ScopeExitsForRoom (run forest)\r\nx = Settings.exitstringnames\r\nm = NewStringList()\r\nwhile (ListCount(z) > 0) {\r\n  exi = PickOneObject (z)\r\n  list remove (z, exi)\r\n  exi = exi.alias\r\n  list add (m, exi)\r\n}\r\ny = ListExclude (x, m)\r\nwhile (ListCount(y) > 0) {\r\n  n = PickOneString(y)\r\n  list remove (y, n)\r\n  create exit (n, player.parent, run forest)\r\n}\r\na = ScopeExitsForRoom (run forest)\r\nforest b.fakeexits = ListExclude (a, c)\r\nmsg (forest b.fakeexits)\r\nSetTimeout (3) {\r\n  while (ListCount(forest b.fakeexits) > 0) {\r\n    exi = PickOneObject (forest b.fakeexits)\r\n    list remove (forest b.fakeexits, exi)\r\n    exi.name = \"fakeexit \" + forest b.exitnum\r\n    forest b.exitnum = forest b.exitnum + 1\r\n    list add (Settings.todestroy, exi)\r\n  }\r\n  msg (Settings.todestroy)\r\n  SetTimeout (3) {\r\n    while (ListCount(Settings.todestroy) > 0) {\r\n      objectname = PickOneString(Settings.todestroy)\r\n      list remove (Settings.todestroy, objectname)\r\n      destroy (objectname)\r\n    }\r\n    msg (Settings.todestroy)\r\n  }\r\n}\r\n```\r\nhowever the destroy won't destroy. It says error: Exit: exit59; not found\r\n\r\nEDIT 3:\r\n\r\neverything is fixed. The only thing that remains is adding script to the exits.\r\n```\r\nplayer.parent = run forest\r\nz = ScopeExitsForRoom (run forest)\r\nc = ScopeExitsForRoom (run forest)\r\nx = Settings.exitstringnames\r\nm = NewStringList()\r\nwhile (ListCount(z) > 0) {\r\n  exi = PickOneObject (z)\r\n  list remove (z, exi)\r\n  exi = exi.alias\r\n  list add (m, exi)\r\n}\r\ny = ListExclude (x, m)\r\nwhile (ListCount(y) > 0) {\r\n  n = PickOneString(y)\r\n  list remove (y, n)\r\n  create exit (n, player.parent, run forest)\r\n}\r\na = ScopeExitsForRoom (run forest)\r\nforest b.fakeexits = ListExclude (a, c)\r\nmsg (forest b.fakeexits)\r\nSetTimeout (3) {\r\n  while (ListCount(forest b.fakeexits) > 0) {\r\n    exi = PickOneObject (forest b.fakeexits)\r\n    list remove (forest b.fakeexits, exi)\r\n    exi.isfake = true\r\n  }\r\n  SetTimeout (3) {\r\n    fakers = FilterByAttribute (AllExits(), \"isfake\", true)\r\n    while (ListCount(fakers) > 0) {\r\n      x = PickOneObject (fakers)\r\n      list remove (fakers, x)\r\n      destroy (x.name)\r\n    }\r\n    msg (Settings.todestroy)\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>EDIT 1:</p>\n<p>I fixed it to a degree.</p>\n<pre><code>player.parent = run forest\nz = ScopeExitsForRoom (run forest)\nx = Settings.exitstringnames\nm = NewStringList()\nwhile (ListCount(z) &gt; 0) {\n  exi = PickOneObject (z)\n  list remove (z, exi)\n  exi = exi.alias\n  list add (m, exi)\n}\ny = ListExclude (x, m)\nmsg (y)\nwhile (ListCount(y) &gt; 0) {\n  n = PickOneString(y)\n  list remove (y, n)\n  create exit (n, run forest, run forest)\n  n.runscript = true\n  n.script =&gt; {\n    \n  }\n}\n</code></pre>\n<p>the lines:<br>\nn.runscript = true<br>\nn.script =&gt; {</p>\n<p>}<br>\nseem to be wrong. Somehow I have to get the name of the created exit</p>\n<p>other opinions are welcomed is always</p>\n<p>EDIT 2:</p>\n<pre><code>player.parent = run forest\nz = ScopeExitsForRoom (run forest)\nc = ScopeExitsForRoom (run forest)\nx = Settings.exitstringnames\nm = NewStringList()\nwhile (ListCount(z) &gt; 0) {\n  exi = PickOneObject (z)\n  list remove (z, exi)\n  exi = exi.alias\n  list add (m, exi)\n}\ny = ListExclude (x, m)\nwhile (ListCount(y) &gt; 0) {\n  n = PickOneString(y)\n  list remove (y, n)\n  create exit (n, player.parent, run forest)\n}\na = ScopeExitsForRoom (run forest)\nforest b.fakeexits = ListExclude (a, c)\nmsg (forest b.fakeexits)\nSetTimeout (3) {\n  while (ListCount(forest b.fakeexits) &gt; 0) {\n    exi = PickOneObject (forest b.fakeexits)\n    list remove (forest b.fakeexits, exi)\n    exi.name = \"fakeexit \" + forest b.exitnum\n    forest b.exitnum = forest b.exitnum + 1\n    list add (Settings.todestroy, exi)\n  }\n  msg (Settings.todestroy)\n  SetTimeout (3) {\n    while (ListCount(Settings.todestroy) &gt; 0) {\n      objectname = PickOneString(Settings.todestroy)\n      list remove (Settings.todestroy, objectname)\n      destroy (objectname)\n    }\n    msg (Settings.todestroy)\n  }\n}\n</code></pre>\n<p>however the destroy won't destroy. It says error: Exit: exit59; not found</p>\n<p>EDIT 3:</p>\n<p>everything is fixed. The only thing that remains is adding script to the exits.</p>\n<pre><code>player.parent = run forest\nz = ScopeExitsForRoom (run forest)\nc = ScopeExitsForRoom (run forest)\nx = Settings.exitstringnames\nm = NewStringList()\nwhile (ListCount(z) &gt; 0) {\n  exi = PickOneObject (z)\n  list remove (z, exi)\n  exi = exi.alias\n  list add (m, exi)\n}\ny = ListExclude (x, m)\nwhile (ListCount(y) &gt; 0) {\n  n = PickOneString(y)\n  list remove (y, n)\n  create exit (n, player.parent, run forest)\n}\na = ScopeExitsForRoom (run forest)\nforest b.fakeexits = ListExclude (a, c)\nmsg (forest b.fakeexits)\nSetTimeout (3) {\n  while (ListCount(forest b.fakeexits) &gt; 0) {\n    exi = PickOneObject (forest b.fakeexits)\n    list remove (forest b.fakeexits, exi)\n    exi.isfake = true\n  }\n  SetTimeout (3) {\n    fakers = FilterByAttribute (AllExits(), \"isfake\", true)\n    while (ListCount(fakers) &gt; 0) {\n      x = PickOneObject (fakers)\n      list remove (fakers, x)\n      destroy (x.name)\n    }\n    msg (Settings.todestroy)\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2024-09-11T18:01:48.2358239Z",
      "LastEditDate": "2024-09-11T18:54:50.8077051Z",
      "link": null
    },
    {
      "PostId": "9544730a-a357-43ec-92c9-9e492d569fd5",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/HiZKEtPb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "An alternative could be to create your \"big\" jungle with all the \"wrong\" exits, then just hide them till later when they are needed.\r\nA simple variable player.lost=True will make the exits visible, and when player.lost=False, then hide those exits.\r\nYou could also make it so that the player can only find the hidden jungle temple IF they find it while they are lost.\r\nYes, I come from a Basic programming background and see 75% of the Quest coding as being \"Why would you need to do it THAT way???\" \r\nAs in... why make a look to list every exit when you already know that \"Jungle trail 145\" only has 2 exits???\r\nBut, that just me...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>An alternative could be to create your \"big\" jungle with all the \"wrong\" exits, then just hide them till later when they are needed.<br>\nA simple variable player.lost=True will make the exits visible, and when player.lost=False, then hide those exits.<br>\nYou could also make it so that the player can only find the hidden jungle temple IF they find it while they are lost.<br>\nYes, I come from a Basic programming background and see 75% of the Quest coding as being \"Why would you need to do it THAT way???\"<br>\nAs in... why make a look to list every exit when you already know that \"Jungle trail 145\" only has 2 exits???<br>\nBut, that just me...</p>\n\n",
      "PostDate": "2024-09-14T20:53:58.7966937Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "387d1389-c5d9-46d6-bbdc-e37eceb32031",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The most probable reason is laziness; Adding fake exits manually to 15 rooms is time-consuming and will use space in the interface. My Objects interface is crowded as it is even though I have organized the rooms into several groups. When I boot up the editor, I have to first close each unrelated group until I can figure out what the hell I'm looking at. I wish Quest had a nicer UI, or it started with every group collapsed instead of having to manually do so.\r\n\r\n(hidden temple is a neat idea)",
      "EditableFormat": "markdown",
      "HTML": "<p>The most probable reason is laziness; Adding fake exits manually to 15 rooms is time-consuming and will use space in the interface. My Objects interface is crowded as it is even though I have organized the rooms into several groups. When I boot up the editor, I have to first close each unrelated group until I can figure out what the hell I'm looking at. I wish Quest had a nicer UI, or it started with every group collapsed instead of having to manually do so.</p>\n<p>(hidden temple is a neat idea)</p>\n\n",
      "PostDate": "2024-09-15T19:14:22.8966271Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f02de266-aeaf-4145-8be5-5f9f764a5085",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would probably have made 8 fake exits, and store them outside any room. Then once the player is lost, move them all to the current room; and have the room enter script (the one on the game object, which runs whenever the player enters a room) check whether the player is lost, and if so, move fake exits to the current room if there isn't a real exit pointing in that direction.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would probably have made 8 fake exits, and store them outside any room. Then once the player is lost, move them all to the current room; and have the room enter script (the one on the game object, which runs whenever the player enters a room) check whether the player is lost, and if so, move fake exits to the current room if there isn't a real exit pointing in that direction.</p>\n\n",
      "PostDate": "2024-09-15T22:23:16.34184Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cab5ea8e-4a4b-48b2-a32b-e43dfa88c227",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How can I check if a real exit exists? With the direction alias? ",
      "EditableFormat": "markdown",
      "HTML": "<p>How can I check if a real exit exists? With the direction alias?</p>\n\n",
      "PostDate": "2024-09-17T10:03:04.7592064Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eb220a0d-5158-4a5d-bfa9-c8c3ec1c36bb",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/getexitbyname.html\r\n\r\n```\r\nGetExitByName (object from room, string direction name)\r\n```\r\n\r\nReturns a string containing the name of the exit going from the specified room in the specified direction, if it exists. If it does not exist, `null` is returned instead.\r\n\r\n---\r\nThe only other one is this one: https://docs.textadventures.co.uk/quest/functions/getexitbylink.html\r\n\r\n```\r\nGetExitByLink (object from room, object to room)\r\n```\r\n\r\nLooking at all your code, this might be more helpful?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>https://docs.textadventures.co.uk/quest/functions/getexitbyname.html</p>\n<pre><code>GetExitByName (object from room, string direction name)\n</code></pre>\n<p>Returns a string containing the name of the exit going from the specified room in the specified direction, if it exists. If it does not exist, <code>null</code> is returned instead.</p>\n<hr>\n<p>The only other one is this one: https://docs.textadventures.co.uk/quest/functions/getexitbylink.html</p>\n<pre><code>GetExitByLink (object from room, object to room)\n</code></pre>\n<p>Looking at all your code, this might be more helpful?</p>\n\n",
      "PostDate": "2024-09-18T07:56:30.0520154Z",
      "LastEditDate": "2024-09-18T16:28:33.5533386Z",
      "link": null
    },
    {
      "PostId": "28072eb3-c1d5-4e21-8466-c47ba0084af1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> How can I check if a real exit exists? With the direction alias?\r\n\r\nI was thinking that if you have a bunch of fake exits named, for example, `fake_exit_north`, you could have a roomenter script like:\r\n<pre><code>foreach (direction, Split(\"north;northeast;east;southeast;south;southwest;west;northwest\")) {\r\n  fake_exit = GetObject (\"fake_exit_\" + direction)\r\n  RemoveObject (fake_exit)\r\n  existing_exit = GetExitByName (game.pov.parent, direction)\r\n  if (<em style=\"color: blue; font-family: initial\">player is lost</em> and Equal (existing_exit, null)) {\r\n    MoveObjectHere (fake_exit)\r\n  }\r\n}</code></pre>\r\n\r\n(the <em style=\"color: blue; font-family: initial\">player is lost</em> should be replaced with a boolean attribute, or whatever other condition you might use to determine whether the fake exits should be displayed)\r\n\r\nThis would move the fake exits into the current room if they're needed, and leave them outside reachable space otherwise.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>How can I check if a real exit exists? With the direction alias?</p>\n</blockquote>\n<p>I was thinking that if you have a bunch of fake exits named, for example, <code>fake_exit_north</code>, you could have a roomenter script like:</p>\n<pre><code>foreach (direction, Split(\"north;northeast;east;southeast;south;southwest;west;northwest\")) {\n  fake_exit = GetObject (\"fake_exit_\" + direction)\n  RemoveObject (fake_exit)\n  existing_exit = GetExitByName (game.pov.parent, direction)\n  if (<em style=\"color: blue; font-family: initial\">player is lost</em> and Equal (existing_exit, null)) {\n    MoveObjectHere (fake_exit)\n  }\n}</code></pre>\n<p>(the <em style=\"color: blue; font-family: initial\">player is lost</em> should be replaced with a boolean attribute, or whatever other condition you might use to determine whether the fake exits should be displayed)</p>\n<p>This would move the fake exits into the current room if they're needed, and leave them outside reachable space otherwise.</p>\n\n",
      "PostDate": "2024-09-18T09:31:33.1690977Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "10b45bac-3dbb-4d6d-803a-ddf8ecce3b16",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Looking at all your code, this might be more helpful?\r\n\r\nI see. However I think using ScopeExits type would be more suitable. There are many rooms with exits that I don't know their direction or name at the time when the chase trigger happens. \r\nSo I'll just Scope the room the player is at and check for real and fake exits and add additional ones if necessary.\r\nHere's another example I've made:\r\n```\r\nx = ScopeExitsForRoom(player.parent)\r\ny = NewStringList()\r\n// real exit\r\nwhile (ListCount(x) > 0) {\r\n  z = PickOneObject(x)\r\n  create exit (z.alias, semi run forest, z.to)\r\n  list remove (x, z)\r\n  list add (y, z.alias)\r\n}\r\nr = ListExclude(Settings.exitstringnames, y)\r\nrepli = 0\r\n// fake exit\r\nwhile (ListCount(r) > 0 and repli < 2) {\r\n  exi = PickOneString(r)\r\n  list remove (r, exi)\r\n  repli = repli + 1\r\n  create exit (exi, semi run forest, run forest)\r\n}\r\nplayer.parent = semi run forest\r\nexitfromroom.parent = spawn\r\n```\r\nExplanation is: this is the code for the verb \"run away\" for the object \"exitfromroom\". There's a timer that will lock the real exits. (the enemy won't let you use them) and another timer that transports this object to player.parent and another timer that hides this object. So even when the exits got blocked, there's a chance that the player can use this object to escape. \r\n\r\nTo find the real exits, I use the Scope function before the player is transported to a fake forest room and I'll create the real exits in that room (semi run forest)\r\n\r\nwhile also creating the fake exits.\r\n\r\nSettings.exitstringnames is a string list that contains all the aliases for exits, i.e. north, south etc.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Looking at all your code, this might be more helpful?</p>\n</blockquote>\n<p>I see. However I think using ScopeExits type would be more suitable. There are many rooms with exits that I don't know their direction or name at the time when the chase trigger happens.<br>\nSo I'll just Scope the room the player is at and check for real and fake exits and add additional ones if necessary.<br>\nHere's another example I've made:</p>\n<pre><code>x = ScopeExitsForRoom(player.parent)\ny = NewStringList()\n// real exit\nwhile (ListCount(x) &gt; 0) {\n  z = PickOneObject(x)\n  create exit (z.alias, semi run forest, z.to)\n  list remove (x, z)\n  list add (y, z.alias)\n}\nr = ListExclude(Settings.exitstringnames, y)\nrepli = 0\n// fake exit\nwhile (ListCount(r) &gt; 0 and repli &lt; 2) {\n  exi = PickOneString(r)\n  list remove (r, exi)\n  repli = repli + 1\n  create exit (exi, semi run forest, run forest)\n}\nplayer.parent = semi run forest\nexitfromroom.parent = spawn\n</code></pre>\n<p>Explanation is: this is the code for the verb \"run away\" for the object \"exitfromroom\". There's a timer that will lock the real exits. (the enemy won't let you use them) and another timer that transports this object to player.parent and another timer that hides this object. So even when the exits got blocked, there's a chance that the player can use this object to escape.</p>\n<p>To find the real exits, I use the Scope function before the player is transported to a fake forest room and I'll create the real exits in that room (semi run forest)</p>\n<p>while also creating the fake exits.</p>\n<p>Settings.exitstringnames is a string list that contains all the aliases for exits, i.e. north, south etc.</p>\n\n",
      "PostDate": "2024-09-18T10:46:12.8551017Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2d2d9afa-2594-4d0a-928f-ea5a686ef0c7",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> This would move the fake exits into the current room if they're needed, and leave them outside reachable space otherwise.\r\n\r\nThe premade 8 fake exits are also a very good idea. Alas, I've already coded the exits.\r\n\r\n>   existing_exit = GetExitByName (game.pov.parent, direction)\r\n\r\nI see. What I did instead of checking to see if the exit was null, I used the Scope functions. They came in very handy.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>This would move the fake exits into the current room if they're needed, and leave them outside reachable space otherwise.</p>\n</blockquote>\n<p>The premade 8 fake exits are also a very good idea. Alas, I've already coded the exits.</p>\n<blockquote>\n<p>existing_exit = GetExitByName (game.pov.parent, direction)</p>\n</blockquote>\n<p>I see. What I did instead of checking to see if the exit was null, I used the Scope functions. They came in very handy.</p>\n\n",
      "PostDate": "2024-09-18T10:51:13.6466245Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9ea795cb-cf90-42bb-b046-fc0e88187eb1",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> When I boot up the editor, I have to first close each unrelated group until I can figure out what the hell I'm looking at. I wish Quest had a nicer UI, or it started with every group collapsed instead of having to manually do so.\r\n\r\nThere's a simple way to do that. Just right click on a object/room in the list of objects/rooms in the left side of the screen and click Collapse All. I feel stupid.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>When I boot up the editor, I have to first close each unrelated group until I can figure out what the hell I'm looking at. I wish Quest had a nicer UI, or it started with every group collapsed instead of having to manually do so.</p>\n</blockquote>\n<p>There's a simple way to do that. Just right click on a object/room in the list of objects/rooms in the left side of the screen and click Collapse All. I feel stupid.</p>\n\n",
      "PostDate": "2024-09-19T11:39:40.4292109Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
