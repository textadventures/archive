{
  "Topic": {
    "TopicId": "jp9y9wocouicfdyhweytew",
    "ForumId": "3",
    "Title": "Ranged combat...",
    "LastUpdated": "2016-09-06T21:46:05.5792495Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "561a0da8-41fd-4501-b2bd-1cf35023164c",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What do you think would be the best way for ranged combat to play out in an RPG style game?\r\n\r\nThe simple way would be for it to be the same as melee; attack with a crossbow and attack with a sword usesthe same mechanics, but perhaps different stats, but I feel there should be more to it.\r\n\r\nText adventures do not track position ithin a room, so how do you determine range? Would it be enough to say combats start \"at range\", and only ranged weapons are useful, and either can take a turn to advance to \"close combat\", at which point ranged weapons are either not allowed or have a severe penalty. That would mean that if you find a foe armed with a gun, your best option is to charge in and attack withyour knife, which is not that realistic, but seems to be the case in some RPGs.\r\n\r\nWhat about cover; how is that meaningful? If there is a crate in the room, who gets to use it as cover?\r\n\r\nAny other thoughts? Anyone come across cool mechanics in a game?",
      "EditableFormat": "markdown",
      "HTML": "<p>What do you think would be the best way for ranged combat to play out in an RPG style game?</p>\n<p>The simple way would be for it to be the same as melee; attack with a crossbow and attack with a sword usesthe same mechanics, but perhaps different stats, but I feel there should be more to it.</p>\n<p>Text adventures do not track position ithin a room, so how do you determine range? Would it be enough to say combats start \"at range\", and only ranged weapons are useful, and either can take a turn to advance to \"close combat\", at which point ranged weapons are either not allowed or have a severe penalty. That would mean that if you find a foe armed with a gun, your best option is to charge in and attack withyour knife, which is not that realistic, but seems to be the case in some RPGs.</p>\n<p>What about cover; how is that meaningful? If there is a crate in the room, who gets to use it as cover?</p>\n<p>Any other thoughts? Anyone come across cool mechanics in a game?</p>\n\n",
      "PostDate": "2016-09-06T21:46:05.5792495Z",
      "LastEditDate": null
    },
    {
      "PostId": "462022a6-97b6-4676-805e-caf1f73cb9ce",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey Pixie love all the work you have done and not near as good at this as you are but was thinking maybe like you stated above with melee but also add a look feature in directions for enemies that would then allow you to make a ranged attack. **Example(You are in a room 3 exits each with look direction, If enemy is in room you see \"Enemy\" making him reachable with ranged attacks. Could also add a little flavor like once shot an enemy he moves to your room, we can go a little further by adding a stealth % if shooting with silent ranged(bow) then only % chance for enemy to move to your room.)** Well its a little scattered but hope you get the gist of it plus their probably alot of better ways to do that if possible.\r\n\r\nEdit: You could also add a perception stat like DND with greater chances seeing enemies, make it harder at first and as they level the skill add chance to see enemy.\r\n\r\nMike",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey Pixie love all the work you have done and not near as good at this as you are but was thinking maybe like you stated above with melee but also add a look feature in directions for enemies that would then allow you to make a ranged attack. <strong>Example(You are in a room 3 exits each with look direction, If enemy is in room you see \"Enemy\" making him reachable with ranged attacks. Could also add a little flavor like once shot an enemy he moves to your room, we can go a little further by adding a stealth % if shooting with silent ranged(bow) then only % chance for enemy to move to your room.)</strong> Well its a little scattered but hope you get the gist of it plus their probably alot of better ways to do that if possible.</p>\n<p>Edit: You could also add a perception stat like DND with greater chances seeing enemies, make it harder at first and as they level the skill add chance to see enemy.</p>\n<p>Mike</p>\n\n",
      "PostDate": "2016-09-06T22:35:35.8049633Z",
      "LastEditDate": "2016-09-06T22:38:38.1166848Z"
    },
    {
      "PostId": "d3cc72f4-d571-4bfb-96e1-7c98d99bc64e",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Could you just change the alias/name of the mob from Goblin Archer:  10m to Goblin Archer: 5m to Goblin Archer: 1m?  Then you could add attributes to the monster object (based on that alias) that deliver different results when different weapons are used?  Code-wise, I am not certain how to implement it, but if I were you (and I don't wish that on anyone!) that's probably how I would explore it.\r\n\r\nAs far as cover goes, perhaps a timer runs when entering a room.  If you choose 'hide behind crate' within the time range, you claim the cover (or other battle bonus?) and the 'cover' attribute/flag is tacked to your character.  If not, it is tacked to the monster NPC.  When attacking/defending cover can be checked to influence results.  That's a lot of 'Ifs', I know.  =)\r\n\r\nSadly, I have not really come across a game with similar mechanics.\r\n\r\nGood luck!",
      "EditableFormat": "markdown",
      "HTML": "<p>Could you just change the alias/name of the mob from Goblin Archer:  10m to Goblin Archer: 5m to Goblin Archer: 1m?  Then you could add attributes to the monster object (based on that alias) that deliver different results when different weapons are used?  Code-wise, I am not certain how to implement it, but if I were you (and I don't wish that on anyone!) that's probably how I would explore it.</p>\n<p>As far as cover goes, perhaps a timer runs when entering a room.  If you choose 'hide behind crate' within the time range, you claim the cover (or other battle bonus?) and the 'cover' attribute/flag is tacked to your character.  If not, it is tacked to the monster NPC.  When attacking/defending cover can be checked to influence results.  That's a lot of 'Ifs', I know.  =)</p>\n<p>Sadly, I have not really come across a game with similar mechanics.</p>\n<p>Good luck!</p>\n\n",
      "PostDate": "2016-09-07T02:15:58.7474376Z",
      "LastEditDate": null
    },
    {
      "PostId": "51b11ef2-2d0b-4d7f-b5ee-8bdf2827af80",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've struggled with ranged/projectile combat too... are there any online/free resourcs/sources which discuss ranged/projectile combat?\r\n\r\nas in games which have a range/reach/distance mechanic (aka: for both melee and ranged/projectile):\r\n\r\nGrandia 1 (PS1) and Parasite Eve 1 (PS1) are good examples. Well, Grandia 1 is more transparent about the mechanics, anyways (Parasite Eve 1, not so much). And of course, there's the Fallout games (at least Fallout 1 and 2, as I've not played, nor even seen vids of Fallout 3+4 yet, lol), and of course there's the Diablo games as well. See/google 'jarulf's guide' for a look at diablo 1's mechanics, such as ranged/proejctile attacks, or the other combat mechanics too.\r\n\r\nGrandia 1 has some really cool combat mechanics, of course a Text Adventure can't use the full coolness of these mechanics (the mechanics work well in/for its 3d movement and running-time/non-static turn-based combat), but the mechanics themselves can be used. See vids of it, to see what I'm trying to describe failingly, lol.\r\n\r\n**I just can't emphasize Grandia 1 enough, it has arguably the best combat system mechanics of all time. It's really amazing, lots of complexity, but so flawless/seemless !!! TRUE PERFECTION !!!**\r\n\r\n-------\r\n\r\nI think the main mechanics are these:\r\n\r\n(these can be applied to all forms of combat: melee, ranged/projectile, spells, and etc)\r\n\r\nattributes which are used to determine the distance between actors\r\nattributes which are used to determine actors' movement amount (how far they can move towards or aways from each other)\r\nattributes which are used to determine a weapon's range/reach/length\r\nattributes which are used to determine a weapon's speed/quickness/rate-of-fire/swing-attack-speed --- \r\nattributes for a recovery/recoil/delay/wait time before can attack/swing/shoot again\r\nattributes for a dodge/evasion/parry/block \"animation\" wait-time if attacked\r\n\r\nand many more probably...\r\n\r\n--------\r\n\r\nI'm more unsure of how to handle/design how the \"ammunition\" works/aspects with ranged/projectile combat...\r\n\r\n---------\r\n\r\nP.S.\r\n\r\n@ onimike:\r\n\r\nnice points, about environmental, cover and darkness, and steath machanics, and a 'perception' stat/attribute.\r\n\r\nI forgot about these mechanics in the Fallout games (1 and 2, anyways)\r\n\r\n----\r\n\r\nalso, with ranged/projectile combat:\r\n\r\npiercing/penetration mechanics, as well\r\n\r\ndamage types: concussive/explosive (grenades, etc), fire (motolov cocktail, flame thrower), piercing/penetrating, etc etc etc",
      "EditableFormat": "markdown",
      "HTML": "<p>I've struggled with ranged/projectile combat too... are there any online/free resourcs/sources which discuss ranged/projectile combat?</p>\n<p>as in games which have a range/reach/distance mechanic (aka: for both melee and ranged/projectile):</p>\n<p>Grandia 1 (PS1) and Parasite Eve 1 (PS1) are good examples. Well, Grandia 1 is more transparent about the mechanics, anyways (Parasite Eve 1, not so much). And of course, there's the Fallout games (at least Fallout 1 and 2, as I've not played, nor even seen vids of Fallout 3+4 yet, lol), and of course there's the Diablo games as well. See/google 'jarulf's guide' for a look at diablo 1's mechanics, such as ranged/proejctile attacks, or the other combat mechanics too.</p>\n<p>Grandia 1 has some really cool combat mechanics, of course a Text Adventure can't use the full coolness of these mechanics (the mechanics work well in/for its 3d movement and running-time/non-static turn-based combat), but the mechanics themselves can be used. See vids of it, to see what I'm trying to describe failingly, lol.</p>\n<p><strong>I just can't emphasize Grandia 1 enough, it has arguably the best combat system mechanics of all time. It's really amazing, lots of complexity, but so flawless/seemless !!! TRUE PERFECTION !!!</strong></p>\n<hr>\n<p>I think the main mechanics are these:</p>\n<p>(these can be applied to all forms of combat: melee, ranged/projectile, spells, and etc)</p>\n<p>attributes which are used to determine the distance between actors<br>\nattributes which are used to determine actors' movement amount (how far they can move towards or aways from each other)<br>\nattributes which are used to determine a weapon's range/reach/length<br>\nattributes which are used to determine a weapon's speed/quickness/rate-of-fire/swing-attack-speed ---<br>\nattributes for a recovery/recoil/delay/wait time before can attack/swing/shoot again<br>\nattributes for a dodge/evasion/parry/block \"animation\" wait-time if attacked</p>\n<p>and many more probably...</p>\n<hr>\n<p>I'm more unsure of how to handle/design how the \"ammunition\" works/aspects with ranged/projectile combat...</p>\n<hr>\n<p>P.S.</p>\n<p>@ onimike:</p>\n<p>nice points, about environmental, cover and darkness, and steath machanics, and a 'perception' stat/attribute.</p>\n<p>I forgot about these mechanics in the Fallout games (1 and 2, anyways)</p>\n<hr>\n<p>also, with ranged/projectile combat:</p>\n<p>piercing/penetration mechanics, as well</p>\n<p>damage types: concussive/explosive (grenades, etc), fire (motolov cocktail, flame thrower), piercing/penetrating, etc etc etc</p>\n\n",
      "PostDate": "2016-09-08T13:38:42.2789625Z",
      "LastEditDate": "2016-09-08T14:04:57.8768028Z"
    },
    {
      "PostId": "8b176bc2-1afd-4ffe-ae41-edff1f62b387",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks HK. Something I was wondering myself which would help this situation as well is grid based movement which I have seen a few things on. I would like to  if there's a way to make a room 10x10 \"squares\" and be able to move x amount of squares for speed. Not sure if that's a thing or even possible, but think that would make these situations much easier.\r\n\r\nMike",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks HK. Something I was wondering myself which would help this situation as well is grid based movement which I have seen a few things on. I would like to  if there's a way to make a room 10x10 \"squares\" and be able to move x amount of squares for speed. Not sure if that's a thing or even possible, but think that would make these situations much easier.</p>\n<p>Mike</p>\n\n",
      "PostDate": "2016-09-09T00:26:39.9777423Z",
      "LastEditDate": "2016-09-09T01:28:52.9359755Z"
    },
    {
      "PostId": "e3bf32e6-0bfd-48fe-a42b-70d1abcf40d3",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nthe coding is basically the same as math/geometry/algebra/trig/calc, using the grid/coordinate system concept, giving your rooms and/or objects in those rooms, 'dimension (x,y or x,y,z) coordinate' Attributes, but you got to work in the coding/math for implementing it, which will take quite a bit of thinking, depending on how good you're with math/grids, and how well you know coding too. Code like it's a math class using grids/coordinates, points, and etc. You basically have to code in your grid, coordiniates/locations, and etc into your rooms and/or their objects, and the actors/characters.\r\n\r\n-------\r\n\r\nif you just need/want the distance in terms of your character and monster, then I'd just have whatever mechanic/equation/formula/attributes determine your initial distance from each other, and then you can adjust those, as you and the monster move towards or aways from each other.\r\n\r\nInvolving more stuff, means more locations/coordinates and etc of stuff.\r\n\r\n-----\r\n\r\nbasic/simple graphic coding involves creating a 'Point whatever (x-coordinate, y-coordinate)' Object, which you can then use that for creating a 'Line AB (Point A, Point B)', and then you an use lines to build your other shapes. Circles --- smart people have already created them for you, so you just need to provide a 'radius' and it's center coordinates (x,y), and it'll create/generate the circle (2*pi*r = circumference), at least this is how it's set up with Python, anyways. It was a fun class practicing some simple graphing coding. Our final was to create lines to divide the screen up into grids and then we had to create shapes in the center of those grids, using universal formulas, which just use offsetting from the screen's dimensions (for example to get the points to draw lines into 4 quadrants, you'd just -generally- do: screen x length / 2 and screen y length / 2)\r\n\r\n(I've no idea how to code in a circle/curves... myself, unless that curve is really just small angles/lines, which look like a curve, meh...)\r\n\r\n-----\r\n\r\nand for the rooms, you just give them their dimensions: 'x-coordinate, y-coordinate' Integer Attributes.\r\n\r\n-----\r\n\r\njust like with math/grid/coordinates, once you got 'coordinate' Integer Attributes , you can do the same math/grid arithmetic for the programming, for example, getting the slope:\r\n\r\n// pseudocode:\r\ngame.slope = (Object 2's 'y-coordinate' - Object 1's 'y-coordinate') / (Object 2's 'x-coordinate' - Object 1's 'x-coordinate')\r\n\r\n-----\r\n\r\nit's really just math, but done via coding:\r\n\r\nif player is at (0,0) and monster is at (0,10), then the monster is 10 units north/up (using x,y grid) of you. The difference of: 10 - 0 = 10\r\n\r\n---------\r\n\r\ntake for example, (simple) pathfinding:\r\n\r\nlet's say we want our monster in room 99, to move towards the player in room 1, and the player of course will be moving to different rooms\r\n\r\nwell, if all of our, rooms and you and monsters and npcs, have an 'x,y' Integer Attributes, then we can use the if comparison:\r\n\r\n(really poor code, just giving a quick idea of it)\r\n\r\n\r\n<turnscript name=\"simple_grid_coordinate_pathfinding\">\r\n\r\n  if (not monster.parent = player.parent) { \r\n\r\n    if (player.x_coord > monster.x_coord) {\r\n      monster.x_coord = monster.x_coord + 1\r\n    } else if (player.x_coord < monster.x_coord) {\r\n      monster.x_coord = monster.x_coord - 1\r\n    }\r\n\r\n    if (player.y_coord > monster.y_coord) {\r\n      monster.y_coord = monster.y_coord + 1\r\n    } else if (player.y_coord < monster.y_coord) {\r\n      monster.y_coord = monster.y_coord - 1\r\n    }\r\n\r\n    foreach (room_object, game.room_list) {\r\n      if (room_object.x_coord = monster.x_coord and room_object.y_coord = monster.y_coord) {\r\n        monster.parent = room_object\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n</turnscript>\r\n\r\n------------------------\r\n\r\nif you mean, giving your things/objects a 'hex grid' (\"size\"), that's a bit more math/code involved... due to dealing with all the mechanics/issues of it (overlapping, and etc) --- like in the diablo games\r\n\r\n---------------------\r\n\r\nit basically comes down to: how good are you at math/physics/algebra/trig/calculus/geometry/advanced-math (beyond calculus stuff), and your coding ability.\r\n\r\n------------------\r\n\r\nJay and Pixie have pathfinding and random map/room creation libraries in the 'libraries and code sample' forum\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>the coding is basically the same as math/geometry/algebra/trig/calc, using the grid/coordinate system concept, giving your rooms and/or objects in those rooms, 'dimension (x,y or x,y,z) coordinate' Attributes, but you got to work in the coding/math for implementing it, which will take quite a bit of thinking, depending on how good you're with math/grids, and how well you know coding too. Code like it's a math class using grids/coordinates, points, and etc. You basically have to code in your grid, coordiniates/locations, and etc into your rooms and/or their objects, and the actors/characters.\n\n-------\n\nif you just need/want the distance in terms of your character and monster, then I'd just have whatever mechanic/equation/formula/attributes determine your initial distance from each other, and then you can adjust those, as you and the monster move towards or aways from each other.\n\nInvolving more stuff, means more locations/coordinates and etc of stuff.\n\n-----\n\nbasic/simple graphic coding involves creating a 'Point whatever (x-coordinate, y-coordinate)' Object, which you can then use that for creating a 'Line AB (Point A, Point B)', and then you an use lines to build your other shapes. Circles --- smart people have already created them for you, so you just need to provide a 'radius' and it's center coordinates (x,y), and it'll create/generate the circle (2*pi*r = circumference), at least this is how it's set up with Python, anyways. It was a fun class practicing some simple graphing coding. Our final was to create lines to divide the screen up into grids and then we had to create shapes in the center of those grids, using universal formulas, which just use offsetting from the screen's dimensions (for example to get the points to draw lines into 4 quadrants, you'd just -generally- do: screen x length / 2 and screen y length / 2)\n\n(I've no idea how to code in a circle/curves... myself, unless that curve is really just small angles/lines, which look like a curve, meh...)\n\n-----\n\nand for the rooms, you just give them their dimensions: 'x-coordinate, y-coordinate' Integer Attributes.\n\n-----\n\njust like with math/grid/coordinates, once you got 'coordinate' Integer Attributes , you can do the same math/grid arithmetic for the programming, for example, getting the slope:\n\n// pseudocode:\ngame.slope = (Object 2's 'y-coordinate' - Object 1's 'y-coordinate') / (Object 2's 'x-coordinate' - Object 1's 'x-coordinate')\n\n-----\n\nit's really just math, but done via coding:\n\nif player is at (0,0) and monster is at (0,10), then the monster is 10 units north/up (using x,y grid) of you. The difference of: 10 - 0 = 10\n\n---------\n\ntake for example, (simple) pathfinding:\n\nlet's say we want our monster in room 99, to move towards the player in room 1, and the player of course will be moving to different rooms\n\nwell, if all of our, rooms and you and monsters and npcs, have an 'x,y' Integer Attributes, then we can use the if comparison:\n\n(really poor code, just giving a quick idea of it)\n\n\n&lt;turnscript name=\"simple_grid_coordinate_pathfinding\"&gt;\n\n  if (not monster.parent = player.parent) { \n\n    if (player.x_coord &gt; monster.x_coord) {\n      monster.x_coord = monster.x_coord + 1\n    } else if (player.x_coord &lt; monster.x_coord) {\n      monster.x_coord = monster.x_coord - 1\n    }\n\n    if (player.y_coord &gt; monster.y_coord) {\n      monster.y_coord = monster.y_coord + 1\n    } else if (player.y_coord &lt; monster.y_coord) {\n      monster.y_coord = monster.y_coord - 1\n    }\n\n    foreach (room_object, game.room_list) {\n      if (room_object.x_coord = monster.x_coord and room_object.y_coord = monster.y_coord) {\n        monster.parent = room_object\n      }\n    }\n\n  }\n\n&lt;/turnscript&gt;\n\n------------------------\n\nif you mean, giving your things/objects a 'hex grid' (\"size\"), that's a bit more math/code involved... due to dealing with all the mechanics/issues of it (overlapping, and etc) --- like in the diablo games\n\n---------------------\n\nit basically comes down to: how good are you at math/physics/algebra/trig/calculus/geometry/advanced-math (beyond calculus stuff), and your coding ability.\n\n------------------\n\nJay and Pixie have pathfinding and random map/room creation libraries in the 'libraries and code sample' forum\n</code></pre>\n\n",
      "PostDate": "2016-09-09T02:05:51.137276Z",
      "LastEditDate": "2016-09-09T02:45:31.1333828Z"
    },
    {
      "PostId": "63f6393a-0c65-41e9-aa52-2cd539914f48",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For the game I was working on, the rule was simply that ranged weapons had the opportunity to go first, upon the encounter beginning. If neither combatant had a ranged weapon, it feel into the normal combat cycle. If one had a ranged weapon, it got to go first before standard combat began. If both had ranged weapons, then it was based off the standard speed calculations (plus whatever factors normally applied to determining which went first). \r\n\r\nAfter that initial \"ranged\" phase before the  first round, ranged weapons didn't matter.\r\n\r\nYou could almost make it where the only case you care about it where one is ranged and one not. In that case, the one with the ranged weapons gets a preliminary shot. Otherwise, it just falls to normal combat. (That assumes only two in combat. Naturally, if you had more, you'd need to allow all the ranged ones to go first in some sort of order.)\r\n\r\nThat might not cover what you wish, but it is one way to go that's fairly simple.",
      "EditableFormat": "markdown",
      "HTML": "<p>For the game I was working on, the rule was simply that ranged weapons had the opportunity to go first, upon the encounter beginning. If neither combatant had a ranged weapon, it feel into the normal combat cycle. If one had a ranged weapon, it got to go first before standard combat began. If both had ranged weapons, then it was based off the standard speed calculations (plus whatever factors normally applied to determining which went first).</p>\n<p>After that initial \"ranged\" phase before the  first round, ranged weapons didn't matter.</p>\n<p>You could almost make it where the only case you care about it where one is ranged and one not. In that case, the one with the ranged weapons gets a preliminary shot. Otherwise, it just falls to normal combat. (That assumes only two in combat. Naturally, if you had more, you'd need to allow all the ranged ones to go first in some sort of order.)</p>\n<p>That might not cover what you wish, but it is one way to go that's fairly simple.</p>\n\n",
      "PostDate": "2016-09-09T11:19:38.0498388Z",
      "LastEditDate": "2016-09-09T11:22:07.0507633Z"
    }
  ]
}
