{
  "Topic": {
    "TopicId": "edvc3mylr0amfxqz-ac65w",
    "ForumId": "18",
    "Title": "Objects in libraries",
    "LastUpdated": "2017-07-13T17:41:55.6504171Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7a453a54-b3a8-435c-8bd2-15444991d38c",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm fiddling around with my first library.\r\n\r\nJust to make sure I've got it straight:\r\n<ul><li>Do not add an attribute to the game object (or any other object which exists in the main game file).</li><li>Do not add an object with which you wish to interact.</li><li>Do not attempt to add anything into a default script. (I.e., don't write a start script section into it. It will not add to the section. It will create a duplicate section and the game will not load.)</li>",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm fiddling around with my first library.</p>\n<p>Just to make sure I've got it straight:</p>\n<ul><li>Do not add an attribute to the game object (or any other object which exists in the main game file).</li><li>Do not add an object with which you wish to interact.</li><li>Do not attempt to add anything into a default script. (I.e., don't write a start script section into it. It will not add to the section. It will create a duplicate section and the game will not load.)</li>\n\n</ul>",
      "PostDate": "2017-07-13T17:41:55.6504171Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "098a4bf1-28e7-480c-bb02-f7802f162fd5",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Correct.\r\n\r\nBasically anything in the library with the same name as something in the main game will get over-ridden.",
      "EditableFormat": "markdown",
      "HTML": "<p>Correct.</p>\n<p>Basically anything in the library with the same name as something in the main game will get over-ridden.</p>\n\n",
      "PostDate": "2017-07-13T18:56:23.8079823Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0f27f81e-388b-4352-bbb8-22fc01f4b20d",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Groovy!\r\n\r\nI just wrote a CSSLib for the game I'm currently creating.\r\n\r\nI embedded a customized Base64 font in it, and you can switch the fonts back and forth in scripts using SetWebFont.\r\n\r\nAll I need to do in the editor is add the library and add the line in the start script. (Unless there's something easier that I overlooked while scouring all the documentation you've posted here and on GitHub. (Are you in BEAST MODE around the clock? Or do just  wear your keyboard out in short spurts?))\r\n\r\nI'm loving Quest! (And I probably only know how to do 1% of what it's capable of!)\r\n\r\nThanks, Pixie!",
      "EditableFormat": "markdown",
      "HTML": "<p>Groovy!</p>\n<p>I just wrote a CSSLib for the game I'm currently creating.</p>\n<p>I embedded a customized Base64 font in it, and you can switch the fonts back and forth in scripts using SetWebFont.</p>\n<p>All I need to do in the editor is add the library and add the line in the start script. (Unless there's something easier that I overlooked while scouring all the documentation you've posted here and on GitHub. (Are you in BEAST MODE around the clock? Or do just  wear your keyboard out in short spurts?))</p>\n<p>I'm loving Quest! (And I probably only know how to do 1% of what it's capable of!)</p>\n<p>Thanks, Pixie!</p>\n\n",
      "PostDate": "2017-07-13T19:40:19.3380968Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3fd2b92e-83f3-4821-91b5-549b33ae74fa",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Pixie's guides handle how to use libraries and about them, but here's my own \"2 cents\" on them:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/9wbwdivscuuhiq8q-durng/error-running-script-object-reference-not-set-to-an-instance-of-an-object-solv#73c2c102-ea1d-49b6-a599-9a54a1073360 (after clicking on the link, you may also want to look at my post above my post that the link will take you to)\r\n\r\nand a little extra explanation...\r\n\r\nthere's no difference between these below at all (they're the same thing)\r\n\r\nI'm using a 'dragon' Object as the example, but it can be any other Element too (Functions, Verbs, Commands, Turnscripts, Timers, Object Types / Types, etc etc etc) and as much as you want as well. Libraries are just (separated/encapulated/compartmentalized out/apart from your game file --- nice for your organization and sanity for developing big games: you can use a library file for having all the code/content for each main area of your game, a library file for equipment, a library file for your magic, etc library files for handling the various aspects/systems/features/mechanics of your game. Basically, library files act as additional folders for your game code, instead of having your entire game code within your game file) code/content that is used by your game file (along with the code/content within your game file too) for when you play your game, including code that makes up the user-level quest engine for your game making and/or game (the default engine for english speakers is the 'English.aslx' library file and the 'Core.aslx' library file, haven't looked at the 'english.aslx' file if it's a hub to individual liibrary files like the 'core.aslx' library file is (if you actually look in the quest program folder, you can take a look at these library files to see how the user-level default quest engine works --- though don't mess with them and save over them if you don't know what you're doing --- or else you'll have to download quest again --- use the GUI/Editor as it forces you to 'copy' so you're not actually messing up these quest engine files' and their built-in code/content for quest, so you can create your own user-level engine for quest/game-making and your games!)\r\n\r\n-----------------------------------------------------------------------------------\r\n\r\nexample_game_file.aslx, its code is below:\r\n\r\n```\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"example_game\">\r\n    // blah Attributes\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n\r\n  <object name=\"dragon\">\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n  </object>\r\n\r\n</asl>\r\n```\r\n\r\n---------------------- AND / VS ---------------------------\r\n\r\nexample_game_file.aslx, its code is below:\r\n\r\n```\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <include ref=\"example_library_file.aslx\" />\r\n\r\n  <game name=\"example_game\">\r\n    // blah Attributes\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\nplus...\r\nexample_library_file.aslx, (and it is in/at the same location as your game file, so quest/your-game-file can find/use it), its code is below:\r\n\r\n```\r\n<library>\r\n  <object name=\"dragon\">\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n  </object>\r\n</library>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Pixie's guides handle how to use libraries and about them, but here's my own \"2 cents\" on them:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/9wbwdivscuuhiq8q-durng/error-running-script-object-reference-not-set-to-an-instance-of-an-object-solv#73c2c102-ea1d-49b6-a599-9a54a1073360 (after clicking on the link, you may also want to look at my post above my post that the link will take you to)</p>\n<p>and a little extra explanation...</p>\n<p>there's no difference between these below at all (they're the same thing)</p>\n<p>I'm using a 'dragon' Object as the example, but it can be any other Element too (Functions, Verbs, Commands, Turnscripts, Timers, Object Types / Types, etc etc etc) and as much as you want as well. Libraries are just (separated/encapulated/compartmentalized out/apart from your game file --- nice for your organization and sanity for developing big games: you can use a library file for having all the code/content for each main area of your game, a library file for equipment, a library file for your magic, etc library files for handling the various aspects/systems/features/mechanics of your game. Basically, library files act as additional folders for your game code, instead of having your entire game code within your game file) code/content that is used by your game file (along with the code/content within your game file too) for when you play your game, including code that makes up the user-level quest engine for your game making and/or game (the default engine for english speakers is the 'English.aslx' library file and the 'Core.aslx' library file, haven't looked at the 'english.aslx' file if it's a hub to individual liibrary files like the 'core.aslx' library file is (if you actually look in the quest program folder, you can take a look at these library files to see how the user-level default quest engine works --- though don't mess with them and save over them if you don't know what you're doing --- or else you'll have to download quest again --- use the GUI/Editor as it forces you to 'copy' so you're not actually messing up these quest engine files' and their built-in code/content for quest, so you can create your own user-level engine for quest/game-making and your games!)</p>\n<hr>\n<p>example_game_file.aslx, its code is below:</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"example_game\"&gt;\n    // blah Attributes\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n\n  &lt;object name=\"dragon\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>---------------------- AND / VS ---------------------------</p>\n<p>example_game_file.aslx, its code is below:</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;include ref=\"example_library_file.aslx\" /&gt;\n\n  &lt;game name=\"example_game\"&gt;\n    // blah Attributes\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>plus...<br>\nexample_library_file.aslx, (and it is in/at the same location as your game file, so quest/your-game-file can find/use it), its code is below:</p>\n<pre><code>&lt;library&gt;\n  &lt;object name=\"dragon\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/library&gt;\n</code></pre>\n\n",
      "PostDate": "2017-07-14T01:40:17.4578168Z",
      "LastEditDate": "2017-07-14T02:10:45.0638986Z",
      "link": null
    },
    {
      "PostId": "076c9d75-a573-475c-b892-40aad63a6b0e",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Aha!\r\n\r\nI couldn't interact with the object that was in my library because I didn't assign it a parent room! (Slaps self in forehead.)\r\n\r\n>don't mess with them and save over them if you don't know what you're doing --- or else you'll have to download quest again\r\n\r\nListen to HK, kids! He speaks the truth!\r\n\r\n>use the GUI/Editor as it forces you to 'copy' \r\n\r\nThis feature is the bee's knees!",
      "EditableFormat": "markdown",
      "HTML": "<p>Aha!</p>\n<p>I couldn't interact with the object that was in my library because I didn't assign it a parent room! (Slaps self in forehead.)</p>\n<blockquote>\n<p>don't mess with them and save over them if you don't know what you're doing --- or else you'll have to download quest again</p>\n</blockquote>\n<p>Listen to HK, kids! He speaks the truth!</p>\n<blockquote>\n<p>use the GUI/Editor as it forces you to 'copy'</p>\n</blockquote>\n<p>This feature is the bee's knees!</p>\n\n",
      "PostDate": "2017-07-14T03:30:52.5267825Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "04260348-4da3-41aa-a765-120f654a87c3",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the built-in 'parent' Object (reference/pointer) Attribute is what actually controls/determines the containment/child-parent heirarchy.\r\n\r\nwhen you use the the helper Function (which is provided/used by the GUI/Editor's script options: add new script): MoveObject (NAME_OF_MOVING_OBJECT , NAME_OF_DESTINATION_OBJECT), it's just setting the 'parent' (reference/pointer) Object Attribute for you, hidden underneath (aka, done by) it:\r\n\r\nNAME_OF_MOVING_OBJECT.parent = NAME_OF_DESTINATION_OBJECT\r\n\r\nalso directly nesting it in code is another way of doing it (its all the same thing):\r\n\r\n```\r\n<object name=\"NAME_OF_DESTINATION_OBJECT\">\r\n  <object name=\"NAME_OF_MOVING_OBJECT\">\r\n  </object>\r\n</object>\r\n```\r\n\r\n----------------\r\n\r\ncontainment/child-parent heirarchy:\r\n\r\ngrandfather\r\n-> father\r\n->-> son\r\n->->-> grandson\r\n\r\nas code scripting:\r\n\r\ngrandfather.parent = null // (actually/technically it's the 'asl' GAME OBJECT)\r\nfather.parent = grandfather\r\nson.parent = father\r\ngrandson.parent = son\r\n\r\nas code creation tag blocks/lines:\r\n\r\n```\r\n// the special 'asl' OBJECT/Element is the GAME OBJECT, it is your root parent, everything (all code) must be contained within the 'asl' OBJECT/Element\r\n\r\n// Quest's 'Elements' are the user-level's OBJECTS of OOP/OOD (Object-Oriented Programming/Design) of its underneath engine/quest-sotware coding. Not to be confused with the sub 'Object' Element/OBJECT. I use 'OBJECT' for the underlying coding, and 'Object' for the 'Object' sub OBJECT/Elements. Ach I think I made it more confusing...\r\n\r\n// let me try this instead:\r\n\r\n(underlying quest software level coding)OBJECTS/CLASSES/DATA_TYPES (quest calls them as 'Elements'):\r\n-> the types of Elements (user-level coding):\r\n-> Objects\r\n-> Functions\r\n-> Verbs\r\n-> Commands\r\n-> Turnscripts\r\n-> Timers\r\n-> Object Types / Types\r\n-> JS\r\n-> etc etc etc\r\n\r\n--------------------------------------\r\n\r\n// using nesting:\r\n\r\n<asl version=\"###\">\r\n  <object name=\"grandfather\">\r\n    <attr name=\"parent\" type=\"object\">null</attr> // quest doesn't show it when its null (asl)\r\n    <object name=\"father\">\r\n      <attr name=\"parent\" type=\"object\">grandfather</attr> // quest doesn't show it when its nested\r\n      <object name=\"son\">\r\n        <attr name=\"parent\" type=\"object\">father</attr> // quest doesn't show it when its nested\r\n        <object name=\"grandson\">\r\n          <attr name=\"parent\" type=\"object\">son</attr> // quest doesn't show it when its nested\r\n        </object>\r\n      </object>\r\n    </object>\r\n  </object>\r\n</asl>\r\n\r\n// using the 'parent' Object (reference/pointer) Attribute:\r\n\r\n<asl version=\"###\">\r\n  <object name=\"grandfather\">\r\n    <attr name=\"parent\" type=\"object\">null</attr> // quest doesn't show it when its null (asl)\r\n  </object>\r\n  <object name=\"father\">\r\n    <attr name=\"parent\" type=\"object\">grandfather</attr>\r\n  </object>\r\n  <object name=\"son\">\r\n    <attr name=\"parent\" type=\"object\">father</attr>\r\n  </object>\r\n  <object name=\"grandson\">\r\n    <attr name=\"parent\" type=\"object\">son</attr>\r\n  </object>\r\n</asl>\r\n```\r\n\r\ngrandather is the root (main) parent of father, son, and grandson\r\ngrandfather is the direct parent of father\r\ngrandfather is the indirect parent of son and grandson\r\n\r\nfather is the direct child of grandfather\r\nfather is the direct parent of son\r\nfather is the indirect parent of grandson\r\n\r\nson is the indirect child of grandfather\r\nson is the direct child of father\r\nson is the direct parent of grandson\r\n\r\ngrandson is the direct child of son\r\ngrandson is the indirect child of grandfather and father\r\n\r\n-----------------\r\n\r\ngrandson.parent = null\r\nson.parent = grandson\r\nfather.parent = son\r\ngrandfather.parent = father\r\n\r\ngrandson\r\n-> son\r\n->-> father\r\n->->-> grandfather\r\n\r\n-----------------------\r\n\r\ngrandson.parent = grandfather\r\nson.parent = father\r\nfather.parent = null\r\ngrandfather.parent = father\r\n\r\nfather\r\n-> son\r\n-> grandfather\r\n->-> grandson\r\n\r\n--------\r\n\r\netc etc etc combinations....",
      "EditableFormat": "markdown",
      "HTML": "<p>the built-in 'parent' Object (reference/pointer) Attribute is what actually controls/determines the containment/child-parent heirarchy.</p>\n<p>when you use the the helper Function (which is provided/used by the GUI/Editor's script options: add new script): MoveObject (NAME_OF_MOVING_OBJECT , NAME_OF_DESTINATION_OBJECT), it's just setting the 'parent' (reference/pointer) Object Attribute for you, hidden underneath (aka, done by) it:</p>\n<p>NAME_OF_MOVING_OBJECT.parent = NAME_OF_DESTINATION_OBJECT</p>\n<p>also directly nesting it in code is another way of doing it (its all the same thing):</p>\n<pre><code>&lt;object name=\"NAME_OF_DESTINATION_OBJECT\"&gt;\n  &lt;object name=\"NAME_OF_MOVING_OBJECT\"&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>containment/child-parent heirarchy:</p>\n<p>grandfather<br>\n-&gt; father<br>\n-&gt;-&gt; son<br>\n-&gt;-&gt;-&gt; grandson</p>\n<p>as code scripting:</p>\n<p>grandfather.parent = null // (actually/technically it's the 'asl' GAME OBJECT)<br>\nfather.parent = grandfather<br>\nson.parent = father<br>\ngrandson.parent = son</p>\n<p>as code creation tag blocks/lines:</p>\n<pre><code>// the special 'asl' OBJECT/Element is the GAME OBJECT, it is your root parent, everything (all code) must be contained within the 'asl' OBJECT/Element\n\n// Quest's 'Elements' are the user-level's OBJECTS of OOP/OOD (Object-Oriented Programming/Design) of its underneath engine/quest-sotware coding. Not to be confused with the sub 'Object' Element/OBJECT. I use 'OBJECT' for the underlying coding, and 'Object' for the 'Object' sub OBJECT/Elements. Ach I think I made it more confusing...\n\n// let me try this instead:\n\n(underlying quest software level coding)OBJECTS/CLASSES/DATA_TYPES (quest calls them as 'Elements'):\n-&gt; the types of Elements (user-level coding):\n-&gt; Objects\n-&gt; Functions\n-&gt; Verbs\n-&gt; Commands\n-&gt; Turnscripts\n-&gt; Timers\n-&gt; Object Types / Types\n-&gt; JS\n-&gt; etc etc etc\n\n--------------------------------------\n\n// using nesting:\n\n&lt;asl version=\"###\"&gt;\n  &lt;object name=\"grandfather\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;null&lt;/attr&gt; // quest doesn't show it when its null (asl)\n    &lt;object name=\"father\"&gt;\n      &lt;attr name=\"parent\" type=\"object\"&gt;grandfather&lt;/attr&gt; // quest doesn't show it when its nested\n      &lt;object name=\"son\"&gt;\n        &lt;attr name=\"parent\" type=\"object\"&gt;father&lt;/attr&gt; // quest doesn't show it when its nested\n        &lt;object name=\"grandson\"&gt;\n          &lt;attr name=\"parent\" type=\"object\"&gt;son&lt;/attr&gt; // quest doesn't show it when its nested\n        &lt;/object&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n\n// using the 'parent' Object (reference/pointer) Attribute:\n\n&lt;asl version=\"###\"&gt;\n  &lt;object name=\"grandfather\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;null&lt;/attr&gt; // quest doesn't show it when its null (asl)\n  &lt;/object&gt;\n  &lt;object name=\"father\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;grandfather&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=\"son\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;father&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=\"grandson\"&gt;\n    &lt;attr name=\"parent\" type=\"object\"&gt;son&lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>grandather is the root (main) parent of father, son, and grandson<br>\ngrandfather is the direct parent of father<br>\ngrandfather is the indirect parent of son and grandson</p>\n<p>father is the direct child of grandfather<br>\nfather is the direct parent of son<br>\nfather is the indirect parent of grandson</p>\n<p>son is the indirect child of grandfather<br>\nson is the direct child of father<br>\nson is the direct parent of grandson</p>\n<p>grandson is the direct child of son<br>\ngrandson is the indirect child of grandfather and father</p>\n<hr>\n<p>grandson.parent = null<br>\nson.parent = grandson<br>\nfather.parent = son<br>\ngrandfather.parent = father</p>\n<p>grandson<br>\n-&gt; son<br>\n-&gt;-&gt; father<br>\n-&gt;-&gt;-&gt; grandfather</p>\n<hr>\n<p>grandson.parent = grandfather<br>\nson.parent = father<br>\nfather.parent = null<br>\ngrandfather.parent = father</p>\n<p>father<br>\n-&gt; son<br>\n-&gt; grandfather<br>\n-&gt;-&gt; grandson</p>\n<hr>\n<p>etc etc etc combinations....</p>\n\n",
      "PostDate": "2017-07-14T04:19:26.0322253Z",
      "LastEditDate": "2017-07-14T04:33:05.418751Z",
      "link": null
    }
  ]
}
