{
  "Topic": {
    "TopicId": "25mlaks-pe_py1ipboflhg",
    "ForumId": "10",
    "Title": "Player Object Questions",
    "LastUpdated": "2017-03-26T02:43:53.6055981Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "1b122845-04d0-4c14-8174-6c7680b3dc09",
      "UserId": 249674,
      "Username": "subtletylost",
      "AvatarUrl": "https://secure.gravatar.com/avatar/27c3ff026255398d57caf8116a9399db?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Using the GUI preferably, how do you make sure that Quest knows which \"can become player\" object is the current player object if they're both in play/in the same room?\r\n\r\nI have object Xia a named Female Character and she is the player object at the start of the game. I have a named Female Character Scion and she can become the player object later in the game. They both start out in room quarters1. \r\n\r\nI feel like this is a really really simple thing and I am just worrying over nothing. I just want to make sure that we're not going to start the game with two players or accidentally controlling Scion, who's supposed to be asleep.\r\n\r\n---\r\nOn a slightly less simple note: if I wanted Scion to follow Xia at points, is that a built in function, would I need to get an extra library, would I need to/be able to code that in myself, or is that something that can't be done?\r\n\r\nAn example would be if I wanted Scion to follow Xia north from quarters1 into hall1 then north into hall2 but for the following to stop if Xia tells Scion to wait.\r\n\r\nCould it be done by temporarily making Scion's parent object be Xia?\r\n```\r\n//other code\r\nif (this.followXia = true) {\r\n   MoveObject (this, Xia)\r\n} else {\r\n   msg \"\\\"I'll wait here.\"\\\"\r\n//other code\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Using the GUI preferably, how do you make sure that Quest knows which \"can become player\" object is the current player object if they're both in play/in the same room?</p>\n<p>I have object Xia a named Female Character and she is the player object at the start of the game. I have a named Female Character Scion and she can become the player object later in the game. They both start out in room quarters1.</p>\n<p>I feel like this is a really really simple thing and I am just worrying over nothing. I just want to make sure that we're not going to start the game with two players or accidentally controlling Scion, who's supposed to be asleep.</p>\n<hr>\n<p>On a slightly less simple note: if I wanted Scion to follow Xia at points, is that a built in function, would I need to get an extra library, would I need to/be able to code that in myself, or is that something that can't be done?</p>\n<p>An example would be if I wanted Scion to follow Xia north from quarters1 into hall1 then north into hall2 but for the following to stop if Xia tells Scion to wait.</p>\n<p>Could it be done by temporarily making Scion's parent object be Xia?</p>\n<pre><code>//other code\nif (this.followXia = true) {\n   MoveObject (this, Xia)\n} else {\n   msg \"\\\"I'll wait here.\"\\\"\n//other code\n</code></pre>\n\n",
      "PostDate": "2017-03-26T02:43:53.6055981Z",
      "LastEditDate": null
    },
    {
      "PostId": "c6728afd-daab-4c5b-978f-a3ff98261487",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just made a real simple test game for this and it works.\r\n\r\nIn the game object in the GUI click on the script tab.  In code view I typed the following under the 'script when entering a room'' section.\r\n```\r\nif (GetBoolean(dog, \"following\")) {\r\n  msg (\"The dog follows closely at your heels.\")\r\n  dog.parent = game.pov.parent\r\n}\r\n```\r\nIt is simply an If script that checks for the flag 'following'.  If that flag is present, then I printed the message about the dog following.  I also set the dog parent equal to the current pov (our character) parent. In the GUI, it is the set variable script.  In the first box I typed dog.parent, I left the drop down set to expression, and I typed game.pov.parent in the last box.\r\n\r\nIn this demo, I set the flag 'following' on the dog object after the player entered the room that had the dog.  In another room, I unset the flag and moved the dog back to the original room.  If you want the 'following' flag to be set whenever the two characters \"run into each other\" in the same room, just move the flag setting script to the game tab to be run after every turn.  You can also unset the flag for any event that you choose.\r\n\r\nAs far as changing the player object.  Whenever you change the player object, the pov switches to that object and the object that used to be the game pov object will remain where ever the switch of pov occurred. In X2, I have a character that the main character can switch to with a simple command if they are in the same room.  The original player passes out and remains put until the player decides to switch back.  Another option there is to move the non-pov character to a \"storage room\" or make them invisible.",
      "EditableFormat": "markdown",
      "HTML": "<p>I just made a real simple test game for this and it works.</p>\n<p>In the game object in the GUI click on the script tab.  In code view I typed the following under the 'script when entering a room'' section.</p>\n<pre><code>if (GetBoolean(dog, \"following\")) {\n  msg (\"The dog follows closely at your heels.\")\n  dog.parent = game.pov.parent\n}\n</code></pre>\n<p>It is simply an If script that checks for the flag 'following'.  If that flag is present, then I printed the message about the dog following.  I also set the dog parent equal to the current pov (our character) parent. In the GUI, it is the set variable script.  In the first box I typed dog.parent, I left the drop down set to expression, and I typed game.pov.parent in the last box.</p>\n<p>In this demo, I set the flag 'following' on the dog object after the player entered the room that had the dog.  In another room, I unset the flag and moved the dog back to the original room.  If you want the 'following' flag to be set whenever the two characters \"run into each other\" in the same room, just move the flag setting script to the game tab to be run after every turn.  You can also unset the flag for any event that you choose.</p>\n<p>As far as changing the player object.  Whenever you change the player object, the pov switches to that object and the object that used to be the game pov object will remain where ever the switch of pov occurred. In X2, I have a character that the main character can switch to with a simple command if they are in the same room.  The original player passes out and remains put until the player decides to switch back.  Another option there is to move the non-pov character to a \"storage room\" or make them invisible.</p>\n\n",
      "PostDate": "2017-03-26T03:16:30.8472321Z",
      "LastEditDate": "2017-03-26T03:18:47.483659Z"
    },
    {
      "PostId": "b2ea8c4f-95bf-43cc-a8a0-8d48fec5b1e8",
      "UserId": 249674,
      "Username": "subtletylost",
      "AvatarUrl": "https://secure.gravatar.com/avatar/27c3ff026255398d57caf8116a9399db?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, that answered my question perfectly! I think, to avoid cluttering the forum, I'll use this thread for all my questions about the player object and how it interacts with the world.\r\n\r\nI have another one now actually. I want the look at description of an object to change based on which of the two possible player characters is currently the game pov character. I know this _can_ be done by selecting script and setting it as an if script and doing the code to present different messages based on who is looking. \r\n\r\nHowever, I also know it can be done in the <a href=\"http://docs.textadventures.co.uk/quest/text_processor.html\">text processor. </a>  Doing it in the text processor would make it easier because for most things I only need to change for example when looking at the ArtWall```Scion's Art``` into ```your art```. But how would I format the thing attribute it's looking for to be able to check who is the pov character?  I know that ```game.pov.parent``` would give what room the game pov is in, would ```game.pov``` give the object that is the game pov?\r\n\r\nAny ideas or hints there? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, that answered my question perfectly! I think, to avoid cluttering the forum, I'll use this thread for all my questions about the player object and how it interacts with the world.</p>\n<p>I have another one now actually. I want the look at description of an object to change based on which of the two possible player characters is currently the game pov character. I know this <em>can</em> be done by selecting script and setting it as an if script and doing the code to present different messages based on who is looking.</p>\n<p>However, I also know it can be done in the <a href=\"http://docs.textadventures.co.uk/quest/text_processor.html\">text processor. </a>  Doing it in the text processor would make it easier because for most things I only need to change for example when looking at the ArtWall<code>Scion's Art</code> into <code>your art</code>. But how would I format the thing attribute it's looking for to be able to check who is the pov character?  I know that <code>game.pov.parent</code> would give what room the game pov is in, would <code>game.pov</code> give the object that is the game pov?</p>\n<p>Any ideas or hints there?</p>\n\n",
      "PostDate": "2017-03-26T05:00:02.9734212Z",
      "LastEditDate": null
    },
    {
      "PostId": "9f94b040-b981-4141-b4eb-7909a4c64e0d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is not something I have played arouind with, but if you set an object to be the player, you get a new tab appearing. Does that have a description on it? If so, I would assume that would be the description when the object is the player, and he normal one is the description otherwise.",
      "EditableFormat": "markdown",
      "HTML": "<p>This is not something I have played arouind with, but if you set an object to be the player, you get a new tab appearing. Does that have a description on it? If so, I would assume that would be the description when the object is the player, and he normal one is the description otherwise.</p>\n\n",
      "PostDate": "2017-03-26T08:52:40.036565Z",
      "LastEditDate": null
    },
    {
      "PostId": "2463f1e8-4026-4615-84f3-0bbfb556d1b7",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK edit: added in another link (the 'ChangePov' Function/Command) that I forgot the first time\r\n\r\n------------\r\n\r\nyes, Object Attributes (which the 'pov' is a special one) are pointers/object-references (well, I think technically an Object's name is the actual pointer, but whatever, lol), which hold the 'name' of the Object:\r\n\r\ngame.pov = player\r\n\r\nplayer.parent = room\r\n// game.pov.parent = room\r\n\r\ngame.pov = player\r\nplayer.parent = room\r\n// which is the same as:\r\ngame.pov.parent = room\r\n\r\ngame.pov = player\r\nMoveObject (player, room2)\r\n// which is the same as:\r\nMoveObject (game.pov, room2)\r\n\r\n// think of 'game.pov' as being the same as using 'player' (or whatever Player Object's 'name' is the Value of the 'game.pov' Object Attribute)\r\n\r\nanother built-in and special Object Attribute: 'parent'\r\n\r\n------\r\n\r\n```\r\nsome custom Object Attribute examples:\r\n\r\nplayer.right_arm = sword\r\nplayer.left_hand = shield\r\nplayer.selected_spell = fireball\r\n\r\n<object name=\"player\"></object>\r\n<object name=\"sword\"></object>\r\n<object name=\"shield\"></object>\r\n<object name=\"fireball\"></object>\r\n\r\n---------------\r\n\r\n// simplistic-example code for allowing being able to go 'back' to your previous room (we'd need to use an Objectlist Attribute, to be able to go back to further/multiple previous rooms):\r\n\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"current_room\" type=\"object\">room</attr>\r\n  <attr name=\"previous_room\" type=\"object\">room</attr>\r\n  <attr name=\"changedparent\" type=\"script\">\r\n    player.previous_room = current_room\r\n    player.current_room = player.parent\r\n  </attr>\r\n</object>\r\n\r\n<command name=\"back_cheat_command\">\r\n  <pattern>cheat_back</pattern>\r\n  <script>\r\n    game.pov.parent = game.pov.previous_room\r\n  </script>\r\n</command\r\n```\r\n-----------\r\n\r\n```\r\nthe 'game.pov' is what is used to determine who's your currently controlled Player Object\r\n\r\n'game' Game Settings Object -> 'Features' Tab -> toggle on the 'Player' Tabs (if needed)\r\n\r\n'game' Game Settings Object -> 'Player' Tab (I think, or maybe it's some other Tab, meh) -> 'pov' Object Attribute (drop down box, I think)\r\n\r\n'NAME_OF_PLAYER_OBJECT' Player Object -> 'Player' Tab (I think, or maybe it's some other Tab, meh) -> 'can be a player object' -> (think this creates the '<inherit name=\"editor_player' />' in code, which then auto-gives the various things needed, otherwise you got to find out what all of the various things are needed, and add them in code, manually)\r\n\r\nObject Name: game\r\nAttribute Name: pov\r\nAttribute Type: object\r\nAttribute Value: NAME_OF_PLAYER_OBJECT\r\n\r\nthe 'game' Game Settings Object and Player Objects have the 'statusattributes' String Dictionary Attribute.\r\n\r\nYou got to be careful when using multiple Player Objects, as when to use 'game.pov' (it'll apply to who-ever is your current Value of game.pov) vs their (the Player Objects') individual names (it'll only apply to that Player Object) in code, depending on what you're doin for your game design or varios parts of it.\r\n\r\nlastly, be aware ...that for your Player Objects, you've got your 'non-player object description' (when you're NOT controlling the Player Object, aka it's currenting acting as an npc) normal area in the 'setup' Tab of your Player Object in/for the GUI/Editor (the 'look/lookat'String/Script Attribute/Verb/Command) and you've also got a 'player object description' (when you ARE controlling it) area in the 'Player' Tab of your Player Object  in/for the GUI/Editor (this is the 'pov_look' String/Script Attribute/Verb/Command). Many people don't realize this, and are baffled at why they can't see the description that they gave to their Player Object... due to not realizing that Player Objects have now two Attributes for handling their descriptions, the normal 'loo/lookat' String/Script Attribute and also the 'pov_look' String/Script Attribute.\r\n````\r\n\r\n-----------------\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/corelibrary/changepov.html\r\nhttps://docs.textadventures.co.uk/quest/tutorial/changing_the_player_object.html\r\n\r\nhttps://blog.textadventures.co.uk/2012/09/19/pov-support-multiple-player-objects-in-quest-5-3/\r\n^^^^^^^^^^^\r\nhttps://blog.textadventures.co.uk/2012/12/03/quest-5-3-beta-is-now-available/ (scroll down to 'game behavior - new things' -> changeable pov)\r\n^^^^^\r\nhttps://docs.textadventures.co.uk/quest/upgrade_notes.html\r\n\r\nor\r\n\r\nhttp://docs.textadventures.co.uk/quest/tutorial/changing_the_player_object.html\r\n\r\nhttp://blog.textadventures.co.uk/2012/09/19/pov-support-multiple-player-objects-in-quest-5-3/\r\n^^^^^^^^^^^\r\nhttp://blog.textadventures.co.uk/2012/12/03/quest-5-3-beta-is-now-available/ (scroll down to 'game behavior - new things' -> changeable pov)\r\n^^^^^\r\nhttp://docs.textadventures.co.uk/quest/upgrade_notes.html\r\n\r\n-----\r\n\r\nask me if you need help with anything",
      "EditableFormat": "markdown",
      "HTML": "<p>HK edit: added in another link (the 'ChangePov' Function/Command) that I forgot the first time</p>\n<hr>\n<p>yes, Object Attributes (which the 'pov' is a special one) are pointers/object-references (well, I think technically an Object's name is the actual pointer, but whatever, lol), which hold the 'name' of the Object:</p>\n<p>game.pov = player</p>\n<p>player.parent = room<br>\n// game.pov.parent = room</p>\n<p>game.pov = player<br>\nplayer.parent = room<br>\n// which is the same as:<br>\ngame.pov.parent = room</p>\n<p>game.pov = player<br>\nMoveObject (player, room2)<br>\n// which is the same as:<br>\nMoveObject (game.pov, room2)</p>\n<p>// think of 'game.pov' as being the same as using 'player' (or whatever Player Object's 'name' is the Value of the 'game.pov' Object Attribute)</p>\n<p>another built-in and special Object Attribute: 'parent'</p>\n<hr>\n<pre><code>some custom Object Attribute examples:\n\nplayer.right_arm = sword\nplayer.left_hand = shield\nplayer.selected_spell = fireball\n\n&lt;object name=\"player\"&gt;&lt;/object&gt;\n&lt;object name=\"sword\"&gt;&lt;/object&gt;\n&lt;object name=\"shield\"&gt;&lt;/object&gt;\n&lt;object name=\"fireball\"&gt;&lt;/object&gt;\n\n---------------\n\n// simplistic-example code for allowing being able to go 'back' to your previous room (we'd need to use an Objectlist Attribute, to be able to go back to further/multiple previous rooms):\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"current_room\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"previous_room\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"changedparent\" type=\"script\"&gt;\n    player.previous_room = current_room\n    player.current_room = player.parent\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;command name=\"back_cheat_command\"&gt;\n  &lt;pattern&gt;cheat_back&lt;/pattern&gt;\n  &lt;script&gt;\n    game.pov.parent = game.pov.previous_room\n  &lt;/script&gt;\n&lt;/command\n</code></pre>\n<hr>\n<pre><code>the 'game.pov' is what is used to determine who's your currently controlled Player Object\n\n'game' Game Settings Object -&gt; 'Features' Tab -&gt; toggle on the 'Player' Tabs (if needed)\n\n'game' Game Settings Object -&gt; 'Player' Tab (I think, or maybe it's some other Tab, meh) -&gt; 'pov' Object Attribute (drop down box, I think)\n\n'NAME_OF_PLAYER_OBJECT' Player Object -&gt; 'Player' Tab (I think, or maybe it's some other Tab, meh) -&gt; 'can be a player object' -&gt; (think this creates the '&lt;inherit name=\"editor_player' /&gt;' in code, which then auto-gives the various things needed, otherwise you got to find out what all of the various things are needed, and add them in code, manually)\n\nObject Name: game\nAttribute Name: pov\nAttribute Type: object\nAttribute Value: NAME_OF_PLAYER_OBJECT\n\nthe 'game' Game Settings Object and Player Objects have the 'statusattributes' String Dictionary Attribute.\n\nYou got to be careful when using multiple Player Objects, as when to use 'game.pov' (it'll apply to who-ever is your current Value of game.pov) vs their (the Player Objects') individual names (it'll only apply to that Player Object) in code, depending on what you're doin for your game design or varios parts of it.\n\nlastly, be aware ...that for your Player Objects, you've got your 'non-player object description' (when you're NOT controlling the Player Object, aka it's currenting acting as an npc) normal area in the 'setup' Tab of your Player Object in/for the GUI/Editor (the 'look/lookat'String/Script Attribute/Verb/Command) and you've also got a 'player object description' (when you ARE controlling it) area in the 'Player' Tab of your Player Object  in/for the GUI/Editor (this is the 'pov_look' String/Script Attribute/Verb/Command). Many people don't realize this, and are baffled at why they can't see the description that they gave to their Player Object... due to not realizing that Player Objects have now two Attributes for handling their descriptions, the normal 'loo/lookat' String/Script Attribute and also the 'pov_look' String/Script Attribute.\n</code></pre>\n<hr>\n<p>http://docs.textadventures.co.uk/quest/functions/corelibrary/changepov.html<br>\nhttps://docs.textadventures.co.uk/quest/tutorial/changing_the_player_object.html</p>\n<p>https://blog.textadventures.co.uk/2012/09/19/pov-support-multiple-player-objects-in-quest-5-3/<br>\n^^^^^^^^^^^<br>\nhttps://blog.textadventures.co.uk/2012/12/03/quest-5-3-beta-is-now-available/ (scroll down to 'game behavior - new things' -&gt; changeable pov)<br>\n^^^^^<br>\nhttps://docs.textadventures.co.uk/quest/upgrade_notes.html</p>\n<p>or</p>\n<p>http://docs.textadventures.co.uk/quest/tutorial/changing_the_player_object.html</p>\n<p>http://blog.textadventures.co.uk/2012/09/19/pov-support-multiple-player-objects-in-quest-5-3/<br>\n^^^^^^^^^^^<br>\nhttp://blog.textadventures.co.uk/2012/12/03/quest-5-3-beta-is-now-available/ (scroll down to 'game behavior - new things' -&gt; changeable pov)<br>\n^^^^^<br>\nhttp://docs.textadventures.co.uk/quest/upgrade_notes.html</p>\n<hr>\n<p>ask me if you need help with anything</p>\n\n",
      "PostDate": "2017-03-26T09:15:29.8027226Z",
      "LastEditDate": "2017-03-26T10:19:58.0018149Z"
    },
    {
      "PostId": "cb1201aa-9578-41e7-aa08-ec036ae08308",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's no built-in 'follower' code, but creating one is very simple, credit goes to 'Sgrieg', for his/her generalized 'follower' code of how to do it:\r\n\r\nsubtletylost.parent = hegemonkhan.parent // you're following me, hehe\r\nor\r\nMoveObject (subtletylost, hegemonkhan.parent) // you're following me, hehe\r\n\r\n```\r\nWarning:\r\n\r\nif you just did this:\r\n\r\nsubtletylost.parent = hegemonkhan\r\nor\r\nMoveObject (subletylost, hegemonkhan) \r\n\r\nyou'd be moving/putting/setting 'subletylost' INSIDE OF 'hegemonkhan', which you probably don't want, lol\r\n```\r\n\r\nan example of it in use (your almost classic D&D party/team: you and 6 team/party members: you merely select their actions, they're NOT separate/world-controllable characters):\r\n\r\n```\r\n<object name=\"room\">\r\n</object>\r\n\r\n<object name=\"room2\">\r\n</object>\r\n\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"team_objectlist_attribute\" type=\"objectlist\">barbarian;knight;thief;cleric;wizard;bard</attr>\r\n  <attr name=\"changedparent\" type=\"script\">\r\n    foreach (team_member_object_variable, this.team_objectlist_attribute) {\r\n      team_member_object_variable.parent = this.parent\r\n    }\r\n  <attr>\r\n</object>\r\n\r\n<object name=\"barbarian\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"knight\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"thief\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"cleric\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"wizard\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"bard\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>there's no built-in 'follower' code, but creating one is very simple, credit goes to 'Sgrieg', for his/her generalized 'follower' code of how to do it:</p>\n<p>subtletylost.parent = hegemonkhan.parent // you're following me, hehe<br>\nor<br>\nMoveObject (subtletylost, hegemonkhan.parent) // you're following me, hehe</p>\n<pre><code>Warning:\n\nif you just did this:\n\nsubtletylost.parent = hegemonkhan\nor\nMoveObject (subletylost, hegemonkhan) \n\nyou'd be moving/putting/setting 'subletylost' INSIDE OF 'hegemonkhan', which you probably don't want, lol\n</code></pre>\n<p>an example of it in use (your almost classic D&amp;D party/team: you and 6 team/party members: you merely select their actions, they're NOT separate/world-controllable characters):</p>\n<pre><code>&lt;object name=\"room\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room2\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"team_objectlist_attribute\" type=\"objectlist\"&gt;barbarian;knight;thief;cleric;wizard;bard&lt;/attr&gt;\n  &lt;attr name=\"changedparent\" type=\"script\"&gt;\n    foreach (team_member_object_variable, this.team_objectlist_attribute) {\n      team_member_object_variable.parent = this.parent\n    }\n  &lt;attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"barbarian\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"knight\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"thief\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"cleric\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"wizard\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"bard\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2017-03-26T09:59:48.2716075Z",
      "LastEditDate": "2017-03-26T10:06:39.8178561Z"
    }
  ]
}
