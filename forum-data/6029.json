{
  "Topic": {
    "TopicId": "6029",
    "ForumId": "10",
    "Title": "Combat...Sigh.",
    "LastUpdated": "2016-03-13T01:57:49+00:00",
    "ReplyCount": 9
  },
  "Posts": [
    {
      "PostId": "41621",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "Oi, I may need a little walk-through of how to implement combat. I already know there are libraries available and tutorials, but I already have my own sort of way to handle health and whatnot, so I cannot use those combat systems. As for the tutorials, I think some of them may be a little out of date anyway and I had a lot of problems with them several months back so I erased all the previous attempts and wanted to start over fresh when I understood things a little better. So anyway! This is where I'm currently at. \n\nI have two Object TYPES at the moment. \n\nObject [i:1she8avy]type[/i:1she8avy]: monster\nObject [i:1she8avy]type[/i:1she8avy]: weapon\n\nI know [i:1she8avy]object types[/i:1she8avy] apply to all objects that you assign each &quot;type&quot; to. So if I made a &quot;whip&quot; I would go to the [i:1she8avy]inherited attributes[/i:1she8avy] and type &quot;weapon&quot; to it and then all the components of &quot;weapon&quot; would apply to that weapon. \n\nThe first logical step would be to create the weapons; which I've done. There are [i:1she8avy]Fists [/i:1she8avy](which will be default attack with no weapon), [i:1she8avy]Rickety Machete[/i:1she8avy], [i:1she8avy]Beating Stick[/i:1she8avy], [i:1she8avy]Frying Pan[/i:1she8avy], [i:1she8avy]Leather Whip[/i:1she8avy]. \n\nSo now I must apply the &quot;weapon&quot; type to each of them --- which I've done. \n\nNext, I must apply [i:1she8avy]attributes [/i:1she8avy]to the [i:1she8avy]weapon type[/i:1she8avy] so that the weapons will inherit them.\nI added...\n[i:1she8avy]Equip[/i:1she8avy]  (string)\n[i:1she8avy]Unequip[/i:1she8avy] (string)\n\nNow I have to apply the &quot;inherited&quot; [i:1she8avy]monster[/i:1she8avy] type with &quot;attack&quot;. \n[i:1she8avy]Attack[/i:1she8avy] (string)\n\nAnd each monster gets it's own &quot;current_health&quot; integer, and &quot;maximum_health&quot; integer.\n\n\nIs this correct so far?",
      "EditableFormat": "bbcode",
      "HTML": "Oi, I may need a little walk-through of how to implement combat. I already know there are libraries available and tutorials, but I already have my own sort of way to handle health and whatnot, so I cannot use those combat systems. As for the tutorials, I think some of them may be a little out of date anyway and I had a lot of problems with them several months back so I erased all the previous attempts and wanted to start over fresh when I understood things a little better. So anyway! This is where I'm currently at. <br/><br/>I have two Object TYPES at the moment. <br/><br/>Object <span style=\"font-style:italic;\">type</span>: monster<br/>Object <span style=\"font-style:italic;\">type</span>: weapon<br/><br/>I know <span style=\"font-style:italic;\">object types</span> apply to all objects that you assign each &quot;type&quot; to. So if I made a &quot;whip&quot; I would go to the <span style=\"font-style:italic;\">inherited attributes</span> and type &quot;weapon&quot; to it and then all the components of &quot;weapon&quot; would apply to that weapon. <br/><br/>The first logical step would be to create the weapons; which I've done. There are <span style=\"font-style:italic;\">Fists </span>(which will be default attack with no weapon), <span style=\"font-style:italic;\">Rickety Machete</span>, <span style=\"font-style:italic;\">Beating Stick</span>, <span style=\"font-style:italic;\">Frying Pan</span>, <span style=\"font-style:italic;\">Leather Whip</span>. <br/><br/>So now I must apply the &quot;weapon&quot; type to each of them --- which I've done. <br/><br/>Next, I must apply <span style=\"font-style:italic;\">attributes </span>to the <span style=\"font-style:italic;\">weapon type</span> so that the weapons will inherit them.<br/>I added...<br/><span style=\"font-style:italic;\">Equip</span>  (string)<br/><span style=\"font-style:italic;\">Unequip</span> (string)<br/><br/>Now I have to apply the &quot;inherited&quot; <span style=\"font-style:italic;\">monster</span> type with &quot;attack&quot;. <br/><span style=\"font-style:italic;\">Attack</span> (string)<br/><br/>And each monster gets it's own &quot;current_health&quot; integer, and &quot;maximum_health&quot; integer.<br/><br/><br/>Is this correct so far?",
      "PostDate": "2016-03-07T23:44:47+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41635",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "Also, I'm aware that I can possibly use these equip and unequip scripts. \n\n[code:1xft28hi]      if (this&#46;parent = game&#46;pov) {\n        if (not game&#46;pov&#46;equipped = fists and not game&#46;pov&#46;equipped = null) {\n          msg (&quot;You put away your &quot; + game&#46;pov&#46;equipped&#46;alias + &quot; and draw your &quot; + this&#46;alias + &quot;&#46;&quot;)\n        }\n        else {\n          msg (&quot;You draw your &quot; + this&#46;alias + &quot;&#46;&quot;)\n        }\n        game&#46;pov&#46;equipped = this\n        this&#46;inventoryverbs = Split (&quot;Look at;Drop;Unequip&quot;, &quot;;&quot;)\n        game&#46;pov&#46;equippedstatus = &quot;Wielding&#58; &quot; + this&#46;alias\n      }\n      else {\n        msg (&quot;You don't have it&#46;&quot;)\n      }[/code:1xft28hi]\n\nand...\n\n[code:1xft28hi]   if (this&#46;parent = game&#46;pov) {\n        msg (&quot;You put away your &quot; + game&#46;pov&#46;equipped&#46;alias + &quot;&#46;&quot;)\n        game&#46;pov&#46;equipped = fists\n        this&#46;inventoryverbs = Split (&quot;Look at;Drop;Equip&quot;, &quot;;&quot;)\n        game&#46;pov&#46;equippedstatus = &quot;Wielding&#58; nothing&quot;\n      }\n      else {\n        msg (&quot;You don't have it&#46;&quot;)\n      }[/code:1xft28hi]\n\nI also don't care about the player pane saying &quot;equipped status&quot; because the player will see what is equipped/wielded in their inventory. \n\nIs this correct as well?",
      "EditableFormat": "bbcode",
      "HTML": "Also, I'm aware that I can possibly use these equip and unequip scripts. <br/><br/><pre><code>      if (this&#46;parent = game&#46;pov) {<br/>        if (not game&#46;pov&#46;equipped = fists and not game&#46;pov&#46;equipped = null) {<br/>          msg (&quot;You put away your &quot; + game&#46;pov&#46;equipped&#46;alias + &quot; and draw your &quot; + this&#46;alias + &quot;&#46;&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;You draw your &quot; + this&#46;alias + &quot;&#46;&quot;)<br/>        }<br/>        game&#46;pov&#46;equipped = this<br/>        this&#46;inventoryverbs = Split (&quot;Look at;Drop;Unequip&quot;, &quot;;&quot;)<br/>        game&#46;pov&#46;equippedstatus = &quot;Wielding&#58; &quot; + this&#46;alias<br/>      }<br/>      else {<br/>        msg (&quot;You don't have it&#46;&quot;)<br/>      }</code></pre><br/><br/>and...<br/><br/><pre><code>   if (this&#46;parent = game&#46;pov) {<br/>        msg (&quot;You put away your &quot; + game&#46;pov&#46;equipped&#46;alias + &quot;&#46;&quot;)<br/>        game&#46;pov&#46;equipped = fists<br/>        this&#46;inventoryverbs = Split (&quot;Look at;Drop;Equip&quot;, &quot;;&quot;)<br/>        game&#46;pov&#46;equippedstatus = &quot;Wielding&#58; nothing&quot;<br/>      }<br/>      else {<br/>        msg (&quot;You don't have it&#46;&quot;)<br/>      }</code></pre><br/><br/>I also don't care about the player pane saying &quot;equipped status&quot; because the player will see what is equipped/wielded in their inventory. <br/><br/>Is this correct as well?",
      "PostDate": "2016-03-09T05:06:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41658",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "If you don't have that many weapons/monsters/etc, you may not want to try to learn how to use the Object Types, as that will take more time and be more confusing, than if you didn't use them. However, you're probably going to be using lots of monsters/weapons/etc, as from what I've read, you're game seems to be really awesome!, so you might as well learn how to use Object Types.\n\na lot of all this advanced/fancy code stuff is for more macro-design systems (for really big games, to handle lots of objects, equipment, npcs, dialogue, fancy features of combat/magic/items, and etc). It's mostly for the scope of handling the size and/or complexity of the game.\n\n---------\n\nactually, you want to have your actions (attack, equip, unequip, etc) be scripts (Script Attributes ARE your &quot;Verbs&quot;), so change them from &quot;string&quot; to &quot;script&quot;. Then you add the whatever Scripts to them (exactly like a Verb). Otherwise, maybe you want to use the Commands (like how Chase's library works), in this case, you'd NOT add any of the action stuff as Script Attributes of/for/to your Object Types.\n\nHowever, there's an issue with using Object Types, as their Attributes will be applied/added to many different weapon/monster Objects, which MEANS you have to use the 'this' special word, in place of the spot where you'd use the Object's name. if you're 'monster' Object Type scripting uses for example, 'orc.damage = 1&quot;, it'll work fine being applied to your 'orc' monster Object, but won't work being applied to your 'ogre' monster Object.\n\nthat's where the special 'this' comes in:\n\nthis.damage = 1\n\nwhen quest applies this 'monster' Object Type's Script Attribute to your 'orc' monster Object (you added the 'monster' Object Type, via Inherited Attribute, to the 'orc' monster Object), the 'this' will get the Object's name, which for the 'orc' monster Object, is 'orc', and so it works.\n\nWhen quest applies this 'monster' Object Type's Script Attribute to your 'ogre' monster Object (you added the 'monster' Object Type, via Inherited Attribute, to the 'ogre' monster Object), the 'this' will get the Object's name, which for the 'ogre' monster Object, is 'ogre', and so it works.\n\n----------\n\nthe more challenging/difficult part with combat is with getting the other Object involved in the scripting... as the special 'this' word ONLY gets the Object that this Attribute is added to, you got to use some other method of getting the other Object that is also involved. This is much more code intensive, but we'll help you through it, hehe.\n\n--------\n\npersonally... if you got the time (which I don't think you do, as you're trying to get out your game), it'd be better to slowly learn combat, first making / understanding how to do the most simple type of combat, getting down how to do basic combat (simple damage, etc). And then slowly build up to more complex combat designs for your game's needs. As it sounds like you got really confusd with trying to jump in and use Chase's (wearables/equipment) and Pixie's combat libraries, for your combat. If you got the time, learn the very basics of how to do simple damage (you and one other monster, via using an &quot;attack&quot; Verb with that one monster), then learn to use basic equipment with it, and then slowly build up from there to more advanced stuff, such as having to choose/get between different monsters or multiple monsters at once, and etc various fancy combat features seen in many games.",
      "EditableFormat": "bbcode",
      "HTML": "If you don't have that many weapons/monsters/etc, you may not want to try to learn how to use the Object Types, as that will take more time and be more confusing, than if you didn't use them. However, you're probably going to be using lots of monsters/weapons/etc, as from what I've read, you're game seems to be really awesome!, so you might as well learn how to use Object Types.<br/><br/>a lot of all this advanced/fancy code stuff is for more macro-design systems (for really big games, to handle lots of objects, equipment, npcs, dialogue, fancy features of combat/magic/items, and etc). It's mostly for the scope of handling the size and/or complexity of the game.<br/><br/>---------<br/><br/>actually, you want to have your actions (attack, equip, unequip, etc) be scripts (Script Attributes ARE your &quot;Verbs&quot;), so change them from &quot;string&quot; to &quot;script&quot;. Then you add the whatever Scripts to them (exactly like a Verb). Otherwise, maybe you want to use the Commands (like how Chase's library works), in this case, you'd NOT add any of the action stuff as Script Attributes of/for/to your Object Types.<br/><br/>However, there's an issue with using Object Types, as their Attributes will be applied/added to many different weapon/monster Objects, which MEANS you have to use the 'this' special word, in place of the spot where you'd use the Object's name. if you're 'monster' Object Type scripting uses for example, 'orc.damage = 1&quot;, it'll work fine being applied to your 'orc' monster Object, but won't work being applied to your 'ogre' monster Object.<br/><br/>that's where the special 'this' comes in:<br/><br/>this.damage = 1<br/><br/>when quest applies this 'monster' Object Type's Script Attribute to your 'orc' monster Object (you added the 'monster' Object Type, via Inherited Attribute, to the 'orc' monster Object), the 'this' will get the Object's name, which for the 'orc' monster Object, is 'orc', and so it works.<br/><br/>When quest applies this 'monster' Object Type's Script Attribute to your 'ogre' monster Object (you added the 'monster' Object Type, via Inherited Attribute, to the 'ogre' monster Object), the 'this' will get the Object's name, which for the 'ogre' monster Object, is 'ogre', and so it works.<br/><br/>----------<br/><br/>the more challenging/difficult part with combat is with getting the other Object involved in the scripting... as the special 'this' word ONLY gets the Object that this Attribute is added to, you got to use some other method of getting the other Object that is also involved. This is much more code intensive, but we'll help you through it, hehe.<br/><br/>--------<br/><br/>personally... if you got the time (which I don't think you do, as you're trying to get out your game), it'd be better to slowly learn combat, first making / understanding how to do the most simple type of combat, getting down how to do basic combat (simple damage, etc). And then slowly build up to more complex combat designs for your game's needs. As it sounds like you got really confusd with trying to jump in and use Chase's (wearables/equipment) and Pixie's combat libraries, for your combat. If you got the time, learn the very basics of how to do simple damage (you and one other monster, via using an &quot;attack&quot; Verb with that one monster), then learn to use basic equipment with it, and then slowly build up from there to more advanced stuff, such as having to choose/get between different monsters or multiple monsters at once, and etc various fancy combat features seen in many games.",
      "PostDate": "2016-03-10T21:45:36+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41667",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "[quote:1yr4454n]as from what I've read, you're game seems to be really awesome![/quote:1yr4454n]\n\nThanks!\n\n[quote:1yr4454n] actually, you want to have your actions (attack, equip, unequip, etc) be scripts (Script Attributes ARE your &quot;Verbs&quot;), so change them from &quot;string&quot; to &quot;script&quot;. Then you add the whatever Scripts to them (exactly like a Verb). Otherwise, maybe you want to use the Commands (like how Chase's library works), in this case, you'd NOT add any of the action stuff as Script Attributes of/for/to your Object Types.[/quote:1yr4454n]\n\nOops! Yeah, I meant to say scripts not strings! Nice catch! \n\n[quote:1yr4454n]However, there's an issue with using Object Types, as their Attributes will be applied/added to many different weapon/monster Objects, which MEANS you have to use the 'this' special word, in place of the spot where you'd use the Object's name. if you're 'monster' Object Type scripting uses for example, 'orc.damage = 1&quot;, it'll work fine being applied to your 'orc' monster Object, but won't work being applied to your 'ogre' monster Object.\n\nthat's where the special 'this' comes in:\n\nthis.damage = 1[/quote:1yr4454n]\n\nSo you're saying I want to apply:\n\nthis.damage = 1 \n\nOkay! So I removed &quot;Attack&quot; from the object type &quot;Monster&quot; and instead put it on the first monster in the game. &quot;Attack&quot; script, and then I put this.damage = 1 on it. I think this will be easier to manage. I can just apply universal things to the object type &quot;Monster&quot; like how strength, defense, etc varies the attacks.\n\n[quote:1yr4454n]personally... if you got the time (which I don't think you do, as you're trying to get out your game), it'd be better to slowly learn combat, first making / understanding how to do the most simple type of combat, getting down how to do basic combat (simple damage, etc).[/quote:1yr4454n]\n\nProbably! But you know me, I like to jump right in! I mean, look how much I learned in the last...what 5 months? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> \n\nSo anyway, what should the equip/unequip weapons code be? As I mentioned I don't care to show the status of the weapons in the player pane, just the (equipped) or (wielded) in the inventory pane. Fists are obviously default and unequippable. \n\nequip\n      if (this.parent = game.pov) {\n        if (not game.pov.equipped = fists and not game.pov.equipped = null) {\n          msg (&quot;You put away your &quot; + game.pov.equipped.alias + &quot; and draw your &quot; + this.alias + &quot;.&quot;)\n        }\n        else {\n          msg (&quot;You draw your &quot; + this.alias + &quot;.&quot;)\n        }\n        game.pov.equipped = this\n        this.inventoryverbs = Split (&quot;Look at;Drop;Unequip&quot;, &quot;;&quot;)\n        game.pov.equippedstatus = &quot;Wielding: &quot; + this.alias\n      }\n      else {\n        msg (&quot;You don't have it.&quot;)\n      }\n\nunequip\n\n   if (this.parent = game.pov) {\n        msg (&quot;You put away your &quot; + game.pov.equipped.alias + &quot;.&quot;)\n        game.pov.equipped = fists\n        this.inventoryverbs = Split (&quot;Look at;Drop;Equip&quot;, &quot;;&quot;)\n        game.pov.equippedstatus = &quot;Wielding: nothing&quot;\n      }\n      else {\n        msg (&quot;You don't have it.&quot;)\n      }\n\nBTW, thank you for your help so far! I appreciate it!",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>as from what I've read, you're game seems to be really awesome!</p></blockquote><br/><br/>Thanks!<br/><br/><blockquote><p> actually, you want to have your actions (attack, equip, unequip, etc) be scripts (Script Attributes ARE your &quot;Verbs&quot;), so change them from &quot;string&quot; to &quot;script&quot;. Then you add the whatever Scripts to them (exactly like a Verb). Otherwise, maybe you want to use the Commands (like how Chase's library works), in this case, you'd NOT add any of the action stuff as Script Attributes of/for/to your Object Types.</p></blockquote><br/><br/>Oops! Yeah, I meant to say scripts not strings! Nice catch! <br/><br/><blockquote><p>However, there's an issue with using Object Types, as their Attributes will be applied/added to many different weapon/monster Objects, which MEANS you have to use the 'this' special word, in place of the spot where you'd use the Object's name. if you're 'monster' Object Type scripting uses for example, 'orc.damage = 1&quot;, it'll work fine being applied to your 'orc' monster Object, but won't work being applied to your 'ogre' monster Object.<br/><br/>that's where the special 'this' comes in:<br/><br/>this.damage = 1</p></blockquote><br/><br/>So you're saying I want to apply:<br/><br/>this.damage = 1 <br/><br/>Okay! So I removed &quot;Attack&quot; from the object type &quot;Monster&quot; and instead put it on the first monster in the game. &quot;Attack&quot; script, and then I put this.damage = 1 on it. I think this will be easier to manage. I can just apply universal things to the object type &quot;Monster&quot; like how strength, defense, etc varies the attacks.<br/><br/><blockquote><p>personally... if you got the time (which I don't think you do, as you're trying to get out your game), it'd be better to slowly learn combat, first making / understanding how to do the most simple type of combat, getting down how to do basic combat (simple damage, etc).</p></blockquote><br/><br/>Probably! But you know me, I like to jump right in! I mean, look how much I learned in the last...what 5 months? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> <br/><br/>So anyway, what should the equip/unequip weapons code be? As I mentioned I don't care to show the status of the weapons in the player pane, just the (equipped) or (wielded) in the inventory pane. Fists are obviously default and unequippable. <br/><br/>equip<br/>      if (this.parent = game.pov) {<br/>        if (not game.pov.equipped = fists and not game.pov.equipped = null) {<br/>          msg (&quot;You put away your &quot; + game.pov.equipped.alias + &quot; and draw your &quot; + this.alias + &quot;.&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;You draw your &quot; + this.alias + &quot;.&quot;)<br/>        }<br/>        game.pov.equipped = this<br/>        this.inventoryverbs = Split (&quot;Look at;Drop;Unequip&quot;, &quot;;&quot;)<br/>        game.pov.equippedstatus = &quot;Wielding: &quot; + this.alias<br/>      }<br/>      else {<br/>        msg (&quot;You don't have it.&quot;)<br/>      }<br/><br/>unequip<br/><br/>   if (this.parent = game.pov) {<br/>        msg (&quot;You put away your &quot; + game.pov.equipped.alias + &quot;.&quot;)<br/>        game.pov.equipped = fists<br/>        this.inventoryverbs = Split (&quot;Look at;Drop;Equip&quot;, &quot;;&quot;)<br/>        game.pov.equippedstatus = &quot;Wielding: nothing&quot;<br/>      }<br/>      else {<br/>        msg (&quot;You don't have it.&quot;)<br/>      }<br/><br/>BTW, thank you for your help so far! I appreciate it!",
      "PostDate": "2016-03-11T21:10:40+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41672",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I too like jumping right into stuff too, hehe <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->\n\n-----\n\nactually... your actions are (should be) universal, so they're good to place/add into Object Types, whereas your 'stat' Attributes usually are (their values are) specific for individual monsters, and thus not good for putting into Object Types.\n\n------\n\nthe use of 'this' instead of your Object's name in scripting is for (and required) when using (adding/creating the Attribute in the) Object Types. If you're not using Object Types, and just adding the Attributes (Script Attributes), or Verbs, directly to (into) each of your Objects, then you can just use the Object's name.\n\n-----------\n\na very simple combat example:\n\n[code:38fy6qtw]&lt;object name=&quot;player&quot;&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;Neonayon&lt;/attr&gt;\n  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;999&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;orc_1&quot;&gt;\n  &lt;inherit name=&quot;monster&quot; /&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;\n  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;250&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;ogre_1&quot;&gt;\n  &lt;inherit name=&quot;monster&quot; /&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;ogre&lt;/attr&gt;\n  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;\n  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;500&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=&quot;monster&quot;&gt;\n  &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;\n    if (this&#46;dead) {\n      msg (&quot;The &quot; + this&#46;alias + &quot; is already dead, silly&quot;)\n    } else {\n      this&#46;current_life = this&#46;current_life - player&#46;damage\n      msg (&quot;You attack the &quot; + this&#46;alias + &quot;, doing &quot; + player&#46;damage + &quot; damage, leaving the &quot; + this&#46;alias + &quot; with only &quot; + this&#46;current_life + &quot; life left&#46;&quot;)\n      if (this&#46;current_life &lt;= 0) {\n        this&#46;dead = true\n        msg (&quot;You killed the &quot; + this&#46;alias + &quot;!&quot;)\n      } else {\n        player&#46;current_life = player&#46;current_life - this&#46;damage\n        msg (&quot;The &quot; + this&#46;alias + &quot; attacks you, doing &quot; + this&#46;damage + &quot; damage, leaving you with only &quot; + player&#46;current_life + &quot; life left&#46;&quot;)\n        if (player&#46;current_life &lt;= 0) {\n          msg (&quot;You were killed by the &quot; + this&#46;alias +&quot;&#46;&quot;)\n          msg (&quot;GAME OVER&quot;)\n          finish\n        }\n        invoke (this&#46;attack) // this will loop the 'attack' script, meaning that you and the monster will continue damaging each other, until one is dead&#46;\n      }\n    }\n  &lt;/attr&gt;\n  &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;look;attack&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;attack&lt;/property&gt;\n  &lt;pattern&gt;attack&lt;/pattern&gt;\n  &lt;defaultexpression&gt;&quot;You can't attack it&quot;&lt;/defaultexpression&gt;\n&lt;/verb&gt;[/code:38fy6qtw]\n\n--------------\n\nto understand Object Types:\n\nfor any Object that has (using my example code above) the '&lt;inherit name=&quot;monster&quot; /&gt;' Inherited Attribute, pretend that every Attribute within the 'monster' Object Type, is written/added into that Object, just as if you done it yourself.\n\nso, for example, doing this (writing/typing/coding it in) yourself:\n\n[code:38fy6qtw]&lt;object name=&quot;orc_1&quot;&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;\n  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;\n    msg (&quot;The &quot; + orc_1&#46;alias + &quot; attacks you!&quot;)\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;ogre_1&quot;&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;ogre&lt;/attr&gt;\n  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;\n    msg (&quot;The &quot; + ogre_1&#46;alias + &quot; attacks you!&quot;)\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;troll_1&quot;&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;troll&lt;/attr&gt;\n  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;\n    msg (&quot;The &quot; + troll_1&#46;alias + &quot; attacks you!&quot;)\n  &lt;/attr&gt;\n&lt;/object&gt;[/code:38fy6qtw]\n\nis the exact same as this (quest will add/write in the Attributes to the Objects for you, and 'this' will get the Object's name, so it'll correctly use and display the right/correct name for each of the 3 monster Objects):\n\n[code:38fy6qtw]&lt;object name=&quot;orc_1&quot;&gt;\n  &lt;inherit name=&quot;monster&quot; /&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;ogre_1&quot;&gt;\n  &lt;inherit name=&quot;monster&quot; /&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;ogre&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;troll_1&quot;&gt;\n  &lt;inherit name=&quot;monster&quot; /&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;troll&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=&quot;monster&quot;&gt;\n  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;\n    msg (&quot;The &quot; + this&#46;alias + &quot; attacks you!&quot;)\n  &lt;/attr&gt; \n&lt;/object&gt;[/code:38fy6qtw]\n\n------------------------\n\nI think your 'equip' and 'unequip' code will already work correctly for/with your 'weapon' Object Type, so go ahead and add them as Script Attributes to your 'weapon' Object Type\n\na quick (incomplete) example below, using my own coding...\n\n[code:38fy6qtw]&lt;object name=&quot;player&quot;&gt;\n  &lt;attr name=&quot;equipped&quot; type=&quot;object&quot;&gt;fist&lt;/attr&gt;\n&lt;/object&gt;\n\n// I'm NOT giving the 'fist' Object the 'weapon' Object Type (and you don't want it to be drop'able, and you want it to always be on the player), because I don't want it to have the 'unequip' Script Attribute/Verb, as the 'fist' is your default weapon (weaponless&#58; &quot;naked weapon&quot;), so you can always do some damage&#46; Well, you could just have your player have a 'damage=1' Integer Attribute, and not even have a &quot;fist&quot; weapon, but by using a 'fist' weapon, it allows for more easily done complex combat features, if you wish to go there with your combat&#46;\n\n&lt;object name=&quot;fist&quot;&gt;\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;player&lt;/attr&gt;\n  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n  &lt;attr name=&quot;equip&quot; type=&quot;script&quot;&gt;\n    if (this&#46;parent = player and not player&#46;equipped = this) {\n      msg (&quot;You remove the &quot; + player&#46;equipped&#46;alias + &quot;, and put on the &quot; + this&#46;alias +&quot;&#46;&quot;)\n      player&#46;equipped = this\n    } else if (player&#46;equipped = this) {\n      msg (&quot;You're already wearing the &quot; + this&#46;alias + &quot;&#46;&quot;)\n    } else if (not this&#46;parent = player) {\n      msg (&quot;You can't equip the &quot; + this&#46;alias + &quot; when it's not in your possession!&quot;)\n    } else {\n      msg (&quot;You can't equip it for whatever the reason&#46;&quot;)\n    }\n  &lt;/attr&gt;\n  &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;equip&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;sword&quot;&gt;\n  &lt;inherit name=&quot;weapon&quot; /&gt;\n  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;axe&quot;&gt;\n  &lt;inherit name=&quot;weapon&quot; /&gt;\n  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=&quot;weapon&quot;&gt;\n  &lt;attr name=&quot;equip&quot; type=&quot;script&quot;&gt;\n    if (this&#46;parent = player and not player&#46;equipped = this) {\n      msg (&quot;You remove the &quot; + player&#46;equipped&#46;alias + &quot;, and put on the &quot; + this&#46;alias +&quot;&#46;&quot;)\n      player&#46;equipped = this\n    } else if (player&#46;equipped = this) {\n      msg (&quot;You're already wearing the &quot; + this&#46;alias + &quot;&#46;&quot;)\n    } else if (not this&#46;parent = player) {\n      msg (&quot;You can't equip the &quot; + this&#46;alias + &quot; when it's not in your possession!&quot;)\n    } else {\n      msg (&quot;You can't equip it for whatever the reason&#46;&quot;)\n    }\n  &lt;/attr&gt;\n  &lt;attr name=&quot;unequip&quot; type=&quot;script&quot;&gt;\n    if (player&#46;equipped = this) {\n      msg (&quot;You remove the &quot; + this&#46;alias + &quot;&#46;&quot;)\n      player&#46;equipped = fist\n    } else if (not player&#46;equipped = this) {\n      msg (&quot;You're already not wearing the &quot; + this&#46;alias + &quot;&#46;&quot;)\n    } else if (not this&#46;parent = player) {\n      msg (&quot;You can't unequip the &quot; + this&#46;alias + &quot; when it's not in your possession! Houston, we got a coding logic bug/error/mistake problem!&quot;)\n    } else {\n      msg (&quot;You can't unequip it for whatever the reason&#46;&quot;)\n    }\n  &lt;/attr&gt;\n  &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;equip;unequip&lt;/attr&gt;\n  &lt;attr name=&quot;inventoryverbs&quot; type=&quot;simplestringlist&quot;&gt;equip;unequip&lt;/attr&gt;\n&lt;/type&gt;[/code:38fy6qtw]",
      "EditableFormat": "bbcode",
      "HTML": "I too like jumping right into stuff too, hehe <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) --><br/><br/>-----<br/><br/>actually... your actions are (should be) universal, so they're good to place/add into Object Types, whereas your 'stat' Attributes usually are (their values are) specific for individual monsters, and thus not good for putting into Object Types.<br/><br/>------<br/><br/>the use of 'this' instead of your Object's name in scripting is for (and required) when using (adding/creating the Attribute in the) Object Types. If you're not using Object Types, and just adding the Attributes (Script Attributes), or Verbs, directly to (into) each of your Objects, then you can just use the Object's name.<br/><br/>-----------<br/><br/>a very simple combat example:<br/><br/><pre><code>&lt;object name=&quot;player&quot;&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;Neonayon&lt;/attr&gt;<br/>  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;999&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;orc_1&quot;&gt;<br/>  &lt;inherit name=&quot;monster&quot; /&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;<br/>  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;250&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;ogre_1&quot;&gt;<br/>  &lt;inherit name=&quot;monster&quot; /&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;ogre&lt;/attr&gt;<br/>  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;<br/>  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;500&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;type name=&quot;monster&quot;&gt;<br/>  &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;<br/>    if (this&#46;dead) {<br/>      msg (&quot;The &quot; + this&#46;alias + &quot; is already dead, silly&quot;)<br/>    } else {<br/>      this&#46;current_life = this&#46;current_life - player&#46;damage<br/>      msg (&quot;You attack the &quot; + this&#46;alias + &quot;, doing &quot; + player&#46;damage + &quot; damage, leaving the &quot; + this&#46;alias + &quot; with only &quot; + this&#46;current_life + &quot; life left&#46;&quot;)<br/>      if (this&#46;current_life &lt;= 0) {<br/>        this&#46;dead = true<br/>        msg (&quot;You killed the &quot; + this&#46;alias + &quot;!&quot;)<br/>      } else {<br/>        player&#46;current_life = player&#46;current_life - this&#46;damage<br/>        msg (&quot;The &quot; + this&#46;alias + &quot; attacks you, doing &quot; + this&#46;damage + &quot; damage, leaving you with only &quot; + player&#46;current_life + &quot; life left&#46;&quot;)<br/>        if (player&#46;current_life &lt;= 0) {<br/>          msg (&quot;You were killed by the &quot; + this&#46;alias +&quot;&#46;&quot;)<br/>          msg (&quot;GAME OVER&quot;)<br/>          finish<br/>        }<br/>        invoke (this&#46;attack) // this will loop the 'attack' script, meaning that you and the monster will continue damaging each other, until one is dead&#46;<br/>      }<br/>    }<br/>  &lt;/attr&gt;<br/>  &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;look;attack&lt;/attr&gt;<br/>&lt;/type&gt;<br/><br/>&lt;verb&gt;<br/>  &lt;property&gt;attack&lt;/property&gt;<br/>  &lt;pattern&gt;attack&lt;/pattern&gt;<br/>  &lt;defaultexpression&gt;&quot;You can't attack it&quot;&lt;/defaultexpression&gt;<br/>&lt;/verb&gt;</code></pre><br/><br/>--------------<br/><br/>to understand Object Types:<br/><br/>for any Object that has (using my example code above) the '&lt;inherit name=&quot;monster&quot; /&gt;' Inherited Attribute, pretend that every Attribute within the 'monster' Object Type, is written/added into that Object, just as if you done it yourself.<br/><br/>so, for example, doing this (writing/typing/coding it in) yourself:<br/><br/><pre><code>&lt;object name=&quot;orc_1&quot;&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;<br/>  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;<br/>    msg (&quot;The &quot; + orc_1&#46;alias + &quot; attacks you!&quot;)<br/>  &lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;ogre_1&quot;&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;ogre&lt;/attr&gt;<br/>  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;<br/>    msg (&quot;The &quot; + ogre_1&#46;alias + &quot; attacks you!&quot;)<br/>  &lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;troll_1&quot;&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;troll&lt;/attr&gt;<br/>  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;<br/>    msg (&quot;The &quot; + troll_1&#46;alias + &quot; attacks you!&quot;)<br/>  &lt;/attr&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>is the exact same as this (quest will add/write in the Attributes to the Objects for you, and 'this' will get the Object's name, so it'll correctly use and display the right/correct name for each of the 3 monster Objects):<br/><br/><pre><code>&lt;object name=&quot;orc_1&quot;&gt;<br/>  &lt;inherit name=&quot;monster&quot; /&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;ogre_1&quot;&gt;<br/>  &lt;inherit name=&quot;monster&quot; /&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;ogre&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;troll_1&quot;&gt;<br/>  &lt;inherit name=&quot;monster&quot; /&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;troll&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;type name=&quot;monster&quot;&gt;<br/>  &lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;<br/>    msg (&quot;The &quot; + this&#46;alias + &quot; attacks you!&quot;)<br/>  &lt;/attr&gt; <br/>&lt;/object&gt;</code></pre><br/><br/>------------------------<br/><br/>I think your 'equip' and 'unequip' code will already work correctly for/with your 'weapon' Object Type, so go ahead and add them as Script Attributes to your 'weapon' Object Type<br/><br/>a quick (incomplete) example below, using my own coding...<br/><br/><pre><code>&lt;object name=&quot;player&quot;&gt;<br/>  &lt;attr name=&quot;equipped&quot; type=&quot;object&quot;&gt;fist&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>// I'm NOT giving the 'fist' Object the 'weapon' Object Type (and you don't want it to be drop'able, and you want it to always be on the player), because I don't want it to have the 'unequip' Script Attribute/Verb, as the 'fist' is your default weapon (weaponless&#58; &quot;naked weapon&quot;), so you can always do some damage&#46; Well, you could just have your player have a 'damage=1' Integer Attribute, and not even have a &quot;fist&quot; weapon, but by using a 'fist' weapon, it allows for more easily done complex combat features, if you wish to go there with your combat&#46;<br/><br/>&lt;object name=&quot;fist&quot;&gt;<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;player&lt;/attr&gt;<br/>  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>  &lt;attr name=&quot;equip&quot; type=&quot;script&quot;&gt;<br/>    if (this&#46;parent = player and not player&#46;equipped = this) {<br/>      msg (&quot;You remove the &quot; + player&#46;equipped&#46;alias + &quot;, and put on the &quot; + this&#46;alias +&quot;&#46;&quot;)<br/>      player&#46;equipped = this<br/>    } else if (player&#46;equipped = this) {<br/>      msg (&quot;You're already wearing the &quot; + this&#46;alias + &quot;&#46;&quot;)<br/>    } else if (not this&#46;parent = player) {<br/>      msg (&quot;You can't equip the &quot; + this&#46;alias + &quot; when it's not in your possession!&quot;)<br/>    } else {<br/>      msg (&quot;You can't equip it for whatever the reason&#46;&quot;)<br/>    }<br/>  &lt;/attr&gt;<br/>  &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;equip&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;sword&quot;&gt;<br/>  &lt;inherit name=&quot;weapon&quot; /&gt;<br/>  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;axe&quot;&gt;<br/>  &lt;inherit name=&quot;weapon&quot; /&gt;<br/>  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;type name=&quot;weapon&quot;&gt;<br/>  &lt;attr name=&quot;equip&quot; type=&quot;script&quot;&gt;<br/>    if (this&#46;parent = player and not player&#46;equipped = this) {<br/>      msg (&quot;You remove the &quot; + player&#46;equipped&#46;alias + &quot;, and put on the &quot; + this&#46;alias +&quot;&#46;&quot;)<br/>      player&#46;equipped = this<br/>    } else if (player&#46;equipped = this) {<br/>      msg (&quot;You're already wearing the &quot; + this&#46;alias + &quot;&#46;&quot;)<br/>    } else if (not this&#46;parent = player) {<br/>      msg (&quot;You can't equip the &quot; + this&#46;alias + &quot; when it's not in your possession!&quot;)<br/>    } else {<br/>      msg (&quot;You can't equip it for whatever the reason&#46;&quot;)<br/>    }<br/>  &lt;/attr&gt;<br/>  &lt;attr name=&quot;unequip&quot; type=&quot;script&quot;&gt;<br/>    if (player&#46;equipped = this) {<br/>      msg (&quot;You remove the &quot; + this&#46;alias + &quot;&#46;&quot;)<br/>      player&#46;equipped = fist<br/>    } else if (not player&#46;equipped = this) {<br/>      msg (&quot;You're already not wearing the &quot; + this&#46;alias + &quot;&#46;&quot;)<br/>    } else if (not this&#46;parent = player) {<br/>      msg (&quot;You can't unequip the &quot; + this&#46;alias + &quot; when it's not in your possession! Houston, we got a coding logic bug/error/mistake problem!&quot;)<br/>    } else {<br/>      msg (&quot;You can't unequip it for whatever the reason&#46;&quot;)<br/>    }<br/>  &lt;/attr&gt;<br/>  &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;equip;unequip&lt;/attr&gt;<br/>  &lt;attr name=&quot;inventoryverbs&quot; type=&quot;simplestringlist&quot;&gt;equip;unequip&lt;/attr&gt;<br/>&lt;/type&gt;</code></pre>",
      "PostDate": "2016-03-12T01:51:00+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41675",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "[quote:1aaf8g1y]I too like jumping right into stuff too, hehe <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->[/quote:1aaf8g1y]\n\n^_~\n\n[quote:1aaf8g1y]I think your 'equip' and 'unequip' code will already work correctly for/with your 'weapon' Object Type, so go ahead and add them as Script Attributes to your 'weapon' Object Type\n[/quote:1aaf8g1y]\n\nNope. I put this code in the object type &quot;weapon&quot; which is applied too all the current weapons (except the fist) and when I click the &quot;Equip&quot; in the game, it says &quot;You cannot equip the Rickety Machete&quot; for example. And fists also came up as an item which is equippable and droppable. Also, &quot;attack&quot;ing the monsters did nothing (though I imagine it's because I didn't have &quot;fists&quot; to attack with. \n\nI made sure and matched up all the codes for what it's labeled in my game as well. For example, &quot;current_life&quot; in your code is &quot;health&quot; in my game. So all of those are matched up. \n\nThis is what happened last time I tried doing this e_____e",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>I too like jumping right into stuff too, hehe <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) --></p></blockquote><br/><br/>^_~<br/><br/><blockquote><p>I think your 'equip' and 'unequip' code will already work correctly for/with your 'weapon' Object Type, so go ahead and add them as Script Attributes to your 'weapon' Object Type<br/></p></blockquote><br/><br/>Nope. I put this code in the object type &quot;weapon&quot; which is applied too all the current weapons (except the fist) and when I click the &quot;Equip&quot; in the game, it says &quot;You cannot equip the Rickety Machete&quot; for example. And fists also came up as an item which is equippable and droppable. Also, &quot;attack&quot;ing the monsters did nothing (though I imagine it's because I didn't have &quot;fists&quot; to attack with. <br/><br/>I made sure and matched up all the codes for what it's labeled in my game as well. For example, &quot;current_life&quot; in your code is &quot;health&quot; in my game. So all of those are matched up. <br/><br/>This is what happened last time I tried doing this e_____e",
      "PostDate": "2016-03-12T05:37:44+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41676",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I would create a new game, and try to learn how to use Object Types, starting simple and then building up with them, then hopefully, you'll be able to create them for your own game, setting them up to match up with all of your code and design and features in your game.\n\nThe reason being that probably most of your difficulties with trying to use Objects Types is in setting them up to work with your entire game code and its design. By creating a new game, you can learn directly how they work and how to use them, without having to figure out how to match them up to your game code that you've already created. Once you understand how to use them, then hopefully it'll be a bit easier in setting them up for your game's code.\n\n--------\n\nStart simple:\n\n(not completed, sorry, but hopefully you can figure out the rest... at least it's a starting point for you)\n\nGame Object:\n\n[code:2xhjwdi3]&lt;attr name=&quot;pov&quot; type=&quot;object&quot;&gt;player&lt;/attr&gt;[/code:2xhjwdi3]\n\nRoom Objects:\n\n1. 'room' Room Object\n\ncharacter Objects:\n\n1. 'player' Player Object\n\n[code:2xhjwdi3]&lt;inherit name=&quot;actor&quot; /&gt;\n&lt;inherit name=&quot;playable&quot; /&gt;[/code:2xhjwdi3]\n\n2. 'orc' monster Object\n\n[code:2xhjwdi3]&lt;inherit name=&quot;actor&quot; /&gt;\n&lt;inherit name=&quot;monster&quot; /&gt;[/code:2xhjwdi3]\n\nweapon Objects:\n\n1. unarmed\n\n[code:2xhjwdi3]&lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;game&#46;pov&lt;/attr&gt;\n\n&lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n\n&lt;attr name=&quot;equip&quot; type=&quot;script&quot;&gt;\n&lt;/attr&gt;[/code:2xhjwdi3]\n\n2. club\n\n[code:2xhjwdi3]&lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;orc&lt;/attr&gt;\n\n&lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;[/code:2xhjwdi3]\n\n3. sword\n\n[code:2xhjwdi3]&lt;inherit name=&quot;weapon&quot; /&gt;\n&lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;[/code:2xhjwdi3]\n\n4. axe\n\n[code:2xhjwdi3]&lt;inherit name=&quot;weapon&quot; /&gt;\n&lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;[/code:2xhjwdi3]\n\nObject Types:\n\n1. 'actor' Object Type, this will have the Attributes that both the 'player' Player Object and 'whatever' monster Object share (remember keeping this simple):\n\n[code:2xhjwdi3]&lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;\n\n&lt;attr name=&quot;changedequipped&quot; type=&quot;script&quot;&gt;\n  this&#46;damage = this&#46;equipped&#46;damage\n&lt;/attr&gt;[/code:2xhjwdi3]\n\n2. 'playable' Object Type, normally this will have the Attributes that all Player Objects share, but we're only working with one, the 'player' Player Object (so, the 'life' is included here, otherwise, it shouldn't be, as likely you'd have your Player Objects all starting at different stat values, based upon character creation choices for example):\n\n[code:2xhjwdi3]&lt;attr name=&quot;life&quot; type=&quot;int&quot;&gt;999&lt;/attr&gt;\n\n&lt;attr name=&quot;equipped&quot; type=&quot;object&quot;&gt;unarmed&lt;/attr&gt;\n\n&lt;attr name=&quot;changedlife&quot; type=&quot;script&quot;&gt;\n  if (this&#46;life &gt; 999) {\n    this&#46;life = 999\n  } else if (this&#46;life &lt;= 0) {\n    msg (&quot;You were killed or you've died&#46;&quot;)\n    msg (&quot;GAME OVER&quot;)\n    finish\n  }\n&lt;/attr&gt;\n\n&lt;attr name=&quot;statusattributes&quot; type=&quot;simplestringdictionary&quot;&gt;life = Life&#58; !; equipped = Weapon&#58; !; damage = Damage&#58; !&lt;/attr&gt;[/code:2xhjwdi3]\n\n3. 'monster' Object Type, normally this will have the Attributes that all monster Objects share, but we're only working with one, the 'orc' monster Object (normally, you'd have your monster Objects all having different stat values, adn thus not have those Attributes here, but we're only working with one monster Object, in this case):\n\n[code:2xhjwdi3]&lt;attr name=&quot;life&quot; type=&quot;int&quot;&gt;500&lt;/attr&gt;\n\n&lt;attr name=&quot;equipped&quot; type=&quot;object&quot;&gt;club&lt;/attr&gt;\n\n&lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;attack;loot&lt;/attr&gt;\n\n&lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;\n  if (this&#46;dead) {\n    msg (&quot;The &quot; + this&#46;name + &quot; is already dead, silly&#46;&quot;)\n  } else {\n    this&#46;life = this&#46;life - game&#46;pov&#46;equipped&#46;damage\n    msg (&quot;You attack the &quot; + this&#46;name + &quot; for &quot; + game&#46;pov&#46;equipped&#46;damage + &quot; damage, leaving the &quot; + this&#46;name + &quot; with only &quot; + this&#46;life + &quot; life left&#46;&quot;)\n    game&#46;pov&#46;life = game&#46;pov&#46;life - this&#46;equpped&#46;damage\n    msg (&quot;The &quot; + this&#46;name + &quot; attacks you for &quot; + this&#46;equipped&#46;damage + &quot; damage, leaving you with only &quot; + game&#46;pov&#46;life + &quot; life left&#46;&quot;)\n    invoke (this&#46;attack)\n  }\n&lt;/attr&gt;\n\n&lt;attr name=&quot;loot&quot; type=&quot;script&quot;&gt;\n  if (this&#46;dead and not this&#46;equipped = unarmed) {\n    this&#46;equipped&#46;parent = game&#46;pov\n    msg (&quot;You loot the corpse of the dead &quot; + this&#46;name + &quot;, finding a &quot; + this&#46;equipped&#46;name + &quot;, which you take and store away in your inventory&#46;&quot;)\n    this&#46;equipped = unarmed\n  } else if (this&#46;dead) {\n    msg (&quot;You search the corpse of the dead &quot; + this&#46;name + &quot;, but find nothing of value&#46;&quot;)\n  } else {\n    msg (&quot;The &quot; + this&#46;name + &quot; is still alive, and it's not going to let you just take its weapon, silly&#46;&quot;)\n  }\n&lt;/attr&gt;\n\n&lt;attr name=&quot;changedlife&quot; type=&quot;script&quot;&gt;\n  if (&lt;this&#46;life &lt;= 0) {\n    this&#46;dead = true\n    msg (&quot;You killed the &quot; + this&#46;name + &quot;!&quot;)\n  }\n&lt;/attr&gt;[/code:2xhjwdi3]\n\n4. 'weapon' Object Type, this will have the Attributes that both the 'player' Player Object and 'whatever' monster Object share (remember keeping this simple):\n\n[code:2xhjwdi3]&lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;\n\n&lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;take&lt;/attr&gt;\n&lt;attr name=&quot;inventoryverbs&quot; type=&quot;simplestringlist&quot;&gt;drop;equip&lt;/attr&gt;\n\n&lt;attr name=&quot;equip&quot; type=&quot;script&quot;&gt;\n&lt;/attr&gt;\n\n&lt;attr name=&quot;unequip&quot; type=&quot;script&quot;&gt;\n&lt;/attr&gt;[/code:2xhjwdi3]\n\nVerbs:\n\n1. attack\n\n[code:2xhjwdi3]&lt;verb&gt;\n  &lt;property&gt;attack&lt;/property&gt;\n  &lt;pattern&gt;attack&lt;/pattern&gt;\n  &lt;defaultexpression&gt;&quot;You can't attack that!&quot;&lt;/defaultexpression&gt;\n&lt;/verb&gt;[/code:2xhjwdi3]\n\n2. loot\n\n[code:2xhjwdi3]&lt;verb&gt;\n  &lt;property&gt;loot&lt;/property&gt;\n  &lt;pattern&gt;loot&lt;/pattern&gt;\n  &lt;defaultexpression&gt;&quot;You can't loot that!&quot;&lt;/defaultexpression&gt;\n&lt;/verb&gt;[/code:2xhjwdi3]",
      "EditableFormat": "bbcode",
      "HTML": "I would create a new game, and try to learn how to use Object Types, starting simple and then building up with them, then hopefully, you'll be able to create them for your own game, setting them up to match up with all of your code and design and features in your game.<br/><br/>The reason being that probably most of your difficulties with trying to use Objects Types is in setting them up to work with your entire game code and its design. By creating a new game, you can learn directly how they work and how to use them, without having to figure out how to match them up to your game code that you've already created. Once you understand how to use them, then hopefully it'll be a bit easier in setting them up for your game's code.<br/><br/>--------<br/><br/>Start simple:<br/><br/>(not completed, sorry, but hopefully you can figure out the rest... at least it's a starting point for you)<br/><br/>Game Object:<br/><br/><pre><code>&lt;attr name=&quot;pov&quot; type=&quot;object&quot;&gt;player&lt;/attr&gt;</code></pre><br/><br/>Room Objects:<br/><br/>1. 'room' Room Object<br/><br/>character Objects:<br/><br/>1. 'player' Player Object<br/><br/><pre><code>&lt;inherit name=&quot;actor&quot; /&gt;<br/>&lt;inherit name=&quot;playable&quot; /&gt;</code></pre><br/><br/>2. 'orc' monster Object<br/><br/><pre><code>&lt;inherit name=&quot;actor&quot; /&gt;<br/>&lt;inherit name=&quot;monster&quot; /&gt;</code></pre><br/><br/>weapon Objects:<br/><br/>1. unarmed<br/><br/><pre><code>&lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;game&#46;pov&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;equip&quot; type=&quot;script&quot;&gt;<br/>&lt;/attr&gt;</code></pre><br/><br/>2. club<br/><br/><pre><code>&lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;orc&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;</code></pre><br/><br/>3. sword<br/><br/><pre><code>&lt;inherit name=&quot;weapon&quot; /&gt;<br/>&lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;</code></pre><br/><br/>4. axe<br/><br/><pre><code>&lt;inherit name=&quot;weapon&quot; /&gt;<br/>&lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;</code></pre><br/><br/>Object Types:<br/><br/>1. 'actor' Object Type, this will have the Attributes that both the 'player' Player Object and 'whatever' monster Object share (remember keeping this simple):<br/><br/><pre><code>&lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;changedequipped&quot; type=&quot;script&quot;&gt;<br/>  this&#46;damage = this&#46;equipped&#46;damage<br/>&lt;/attr&gt;</code></pre><br/><br/>2. 'playable' Object Type, normally this will have the Attributes that all Player Objects share, but we're only working with one, the 'player' Player Object (so, the 'life' is included here, otherwise, it shouldn't be, as likely you'd have your Player Objects all starting at different stat values, based upon character creation choices for example):<br/><br/><pre><code>&lt;attr name=&quot;life&quot; type=&quot;int&quot;&gt;999&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;equipped&quot; type=&quot;object&quot;&gt;unarmed&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;changedlife&quot; type=&quot;script&quot;&gt;<br/>  if (this&#46;life &gt; 999) {<br/>    this&#46;life = 999<br/>  } else if (this&#46;life &lt;= 0) {<br/>    msg (&quot;You were killed or you've died&#46;&quot;)<br/>    msg (&quot;GAME OVER&quot;)<br/>    finish<br/>  }<br/>&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;statusattributes&quot; type=&quot;simplestringdictionary&quot;&gt;life = Life&#58; !; equipped = Weapon&#58; !; damage = Damage&#58; !&lt;/attr&gt;</code></pre><br/><br/>3. 'monster' Object Type, normally this will have the Attributes that all monster Objects share, but we're only working with one, the 'orc' monster Object (normally, you'd have your monster Objects all having different stat values, adn thus not have those Attributes here, but we're only working with one monster Object, in this case):<br/><br/><pre><code>&lt;attr name=&quot;life&quot; type=&quot;int&quot;&gt;500&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;equipped&quot; type=&quot;object&quot;&gt;club&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;attack;loot&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;attack&quot; type=&quot;script&quot;&gt;<br/>  if (this&#46;dead) {<br/>    msg (&quot;The &quot; + this&#46;name + &quot; is already dead, silly&#46;&quot;)<br/>  } else {<br/>    this&#46;life = this&#46;life - game&#46;pov&#46;equipped&#46;damage<br/>    msg (&quot;You attack the &quot; + this&#46;name + &quot; for &quot; + game&#46;pov&#46;equipped&#46;damage + &quot; damage, leaving the &quot; + this&#46;name + &quot; with only &quot; + this&#46;life + &quot; life left&#46;&quot;)<br/>    game&#46;pov&#46;life = game&#46;pov&#46;life - this&#46;equpped&#46;damage<br/>    msg (&quot;The &quot; + this&#46;name + &quot; attacks you for &quot; + this&#46;equipped&#46;damage + &quot; damage, leaving you with only &quot; + game&#46;pov&#46;life + &quot; life left&#46;&quot;)<br/>    invoke (this&#46;attack)<br/>  }<br/>&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;loot&quot; type=&quot;script&quot;&gt;<br/>  if (this&#46;dead and not this&#46;equipped = unarmed) {<br/>    this&#46;equipped&#46;parent = game&#46;pov<br/>    msg (&quot;You loot the corpse of the dead &quot; + this&#46;name + &quot;, finding a &quot; + this&#46;equipped&#46;name + &quot;, which you take and store away in your inventory&#46;&quot;)<br/>    this&#46;equipped = unarmed<br/>  } else if (this&#46;dead) {<br/>    msg (&quot;You search the corpse of the dead &quot; + this&#46;name + &quot;, but find nothing of value&#46;&quot;)<br/>  } else {<br/>    msg (&quot;The &quot; + this&#46;name + &quot; is still alive, and it's not going to let you just take its weapon, silly&#46;&quot;)<br/>  }<br/>&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;changedlife&quot; type=&quot;script&quot;&gt;<br/>  if (&lt;this&#46;life &lt;= 0) {<br/>    this&#46;dead = true<br/>    msg (&quot;You killed the &quot; + this&#46;name + &quot;!&quot;)<br/>  }<br/>&lt;/attr&gt;</code></pre><br/><br/>4. 'weapon' Object Type, this will have the Attributes that both the 'player' Player Object and 'whatever' monster Object share (remember keeping this simple):<br/><br/><pre><code>&lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;take&lt;/attr&gt;<br/>&lt;attr name=&quot;inventoryverbs&quot; type=&quot;simplestringlist&quot;&gt;drop;equip&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;equip&quot; type=&quot;script&quot;&gt;<br/>&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;unequip&quot; type=&quot;script&quot;&gt;<br/>&lt;/attr&gt;</code></pre><br/><br/>Verbs:<br/><br/>1. attack<br/><br/><pre><code>&lt;verb&gt;<br/>  &lt;property&gt;attack&lt;/property&gt;<br/>  &lt;pattern&gt;attack&lt;/pattern&gt;<br/>  &lt;defaultexpression&gt;&quot;You can't attack that!&quot;&lt;/defaultexpression&gt;<br/>&lt;/verb&gt;</code></pre><br/><br/>2. loot<br/><br/><pre><code>&lt;verb&gt;<br/>  &lt;property&gt;loot&lt;/property&gt;<br/>  &lt;pattern&gt;loot&lt;/pattern&gt;<br/>  &lt;defaultexpression&gt;&quot;You can't loot that!&quot;&lt;/defaultexpression&gt;<br/>&lt;/verb&gt;</code></pre>",
      "PostDate": "2016-03-12T08:27:30+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41678",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "I appreciate all the help HK, but don't worry about it. I'll just have to come up with my own combat system or something I guess. Thank you!",
      "EditableFormat": "bbcode",
      "HTML": "I appreciate all the help HK, but don't worry about it. I'll just have to come up with my own combat system or something I guess. Thank you!",
      "PostDate": "2016-03-12T18:39:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41681",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "let us know if you need help with anything, like if you're still having trouble with Object Types, or whatever aspect that you're trying to do with your combat.\n\nIf you can make your own combat, that's definately best, as you understand it well, whereas it's more difficult to work with someone else's code system (such as other people's combat libraries, and etc). You know your own code best, and what you need to do to apply whatever you're trying to do to it or it to whatever you're trying to do.\n\n-------\n\nI was just trying to help walk you through on how to use Object Types, as I know your game and its needs are very different than the code I was giving for using Object Types, my code wasn't for you to use in your game, just to try to learn.understand how they work and how to get them to work correctly for you to then apply Object Types into your game creation.",
      "EditableFormat": "bbcode",
      "HTML": "let us know if you need help with anything, like if you're still having trouble with Object Types, or whatever aspect that you're trying to do with your combat.<br/><br/>If you can make your own combat, that's definately best, as you understand it well, whereas it's more difficult to work with someone else's code system (such as other people's combat libraries, and etc). You know your own code best, and what you need to do to apply whatever you're trying to do to it or it to whatever you're trying to do.<br/><br/>-------<br/><br/>I was just trying to help walk you through on how to use Object Types, as I know your game and its needs are very different than the code I was giving for using Object Types, my code wasn't for you to use in your game, just to try to learn.understand how they work and how to get them to work correctly for you to then apply Object Types into your game creation.",
      "PostDate": "2016-03-13T00:35:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "41683",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "Hmm. I understand how to use the Object Types, I just can't get things to work in my game regarding the steps....like for example equipping weapons and unequipping them. The original code doesn't really work. Remember the last time I tried it and it still wasn't working properly. I think taking steps little by little would be more beneficial than trying to use something preexisting. \n\nFor example, what might be the minimal equip/unequip code be. Do I need fists as an object or can I just put the damage right on the player object? Yada yada. \n\nMaybe one small thing at a time will help <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> Otherwise I start getting really frustrated.",
      "EditableFormat": "bbcode",
      "HTML": "Hmm. I understand how to use the Object Types, I just can't get things to work in my game regarding the steps....like for example equipping weapons and unequipping them. The original code doesn't really work. Remember the last time I tried it and it still wasn't working properly. I think taking steps little by little would be more beneficial than trying to use something preexisting. <br/><br/>For example, what might be the minimal equip/unequip code be. Do I need fists as an object or can I just put the damage right on the player object? Yada yada. <br/><br/>Maybe one small thing at a time will help <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> Otherwise I start getting really frustrated.",
      "PostDate": "2016-03-13T01:57:49+00:00",
      "LastEditDate": null
    }
  ]
}
