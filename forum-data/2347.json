{
  "Topic": {
    "TopicId": "2347",
    "ForumId": "10",
    "Title": "Container bug",
    "LastUpdated": "2011-01-03T12:43:30+00:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "17584",
      "UserId": 0,
      "Username": "sbangs",
      "UserAvatar": null,
      "UserGravatar": "b98d2093f74a032de5358b3e56ae46a9",
      "EditableText": "Not sure if this issue existed prior 4.13 so making new post on it.\n\nFrom what I have seen, if you have an object in a container, and the container is open, if you have a script that calls to make object inaccessible, the object in question, does vanish. However if you look at the container again, the object comes back and can be interacted with.\n\nDuring the script process, if you remove the object from its parent and then make it inaccessible, then the desired effect works. Looking at the container does not bring the object back into the game.\n\nRemoving object from parent can seem like a viable work around, or maybe this was the design intent. However the issue I see if during the game development, you cant seem to always determine what the parent object may be. This will come into play, when a player picks up a bag and stores items into the bag to help clear up his inventory.\n\nI uploaded an example asl file.\nGrey Goose has 2 shots, shot1 will be removed from parent, while shot2 will not. You will see different results.\n\nThanks,\n\nS",
      "EditableFormat": "bbcode",
      "HTML": "Not sure if this issue existed prior 4.13 so making new post on it.<br/><br/>From what I have seen, if you have an object in a container, and the container is open, if you have a script that calls to make object inaccessible, the object in question, does vanish. However if you look at the container again, the object comes back and can be interacted with.<br/><br/>During the script process, if you remove the object from its parent and then make it inaccessible, then the desired effect works. Looking at the container does not bring the object back into the game.<br/><br/>Removing object from parent can seem like a viable work around, or maybe this was the design intent. However the issue I see if during the game development, you cant seem to always determine what the parent object may be. This will come into play, when a player picks up a bag and stores items into the bag to help clear up his inventory.<br/><br/>I uploaded an example asl file.<br/>Grey Goose has 2 shots, shot1 will be removed from parent, while shot2 will not. You will see different results.<br/><br/>Thanks,<br/><br/><div><a href=\"/attachment/50\">Grey Goose.asl</a></div>",
      "PostDate": "2010-12-12T16:48:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "17591",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Thanks, I'll take a look. It probably existed before 4.1.3 (as I don't think I've changed anything in that area).",
      "EditableFormat": "bbcode",
      "HTML": "Thanks, I'll take a look. It probably existed before 4.1.3 (as I don't think I've changed anything in that area).",
      "PostDate": "2010-12-14T09:35:25+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "17631",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "This is a limitation of how containers work in Quest 4.x. When an object is inside another one, it's not &quot;really&quot; inside it as far as Quest is concerned - it's in the parent room. If the parent object is closed, then the child object is inaccessible.\n\nIt's all much more sensible in Quest 5.0, but for now I think you'll have to work around the issue by moving objects to a different room if they're not supposed to be interacted with.",
      "EditableFormat": "bbcode",
      "HTML": "This is a limitation of how containers work in Quest 4.x. When an object is inside another one, it's not &quot;really&quot; inside it as far as Quest is concerned - it's in the parent room. If the parent object is closed, then the child object is inaccessible.<br/><br/>It's all much more sensible in Quest 5.0, but for now I think you'll have to work around the issue by moving objects to a different room if they're not supposed to be interacted with.",
      "PostDate": "2011-01-03T12:43:30+00:00",
      "LastEditDate": null
    }
  ]
}
