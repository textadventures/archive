{
  "Topic": {
    "TopicId": "4073",
    "ForumId": "10",
    "Title": "Object Lists and Object Dictionaries vs Nested+Moving Object",
    "LastUpdated": "2013-12-26T12:40:15+00:00",
    "ReplyCount": 4
  },
  "Posts": [
    {
      "PostId": "27214",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I haven't worked much with Object Lists and Object Dictionaries (aside from the &quot;ScopeInventory&quot; and the &quot;foreach&quot; functions or scripts), so I have a few questions on them, and would like to understand them better, compared to versus Objects simply being nested in other Objects or just simply with the scripts for moving Objects around.\n\nObjects can be physically moved around, from within an Object, Player Object, or a Room Object, to another Object, Player Object, or Room Object.\n\nDoes this happen with objectlists and~or objectdictionaries too, when you add~remove from their lists~dictionaries, or is it &quot;logical&quot; in usage, and thus not &quot;physical&quot; like it is with moving nested Objects or script-moved Objects ???\n\nAre Objects actually &quot;placed~put~held&quot; within the objectlist or objectdictionary ??? Or, no? How does this compare to Moving Objects around by scripts and thus nesting objects (objects placed within objects) ??? What's the difference, is there is any ???\n\nand any other basic explanation of what Objectlists and Objectdictionaries are and can do, vs simply moving objects around via script and nesting objects (objects within objects) ???",
      "EditableFormat": "bbcode",
      "HTML": "I haven't worked much with Object Lists and Object Dictionaries (aside from the &quot;ScopeInventory&quot; and the &quot;foreach&quot; functions or scripts), so I have a few questions on them, and would like to understand them better, compared to versus Objects simply being nested in other Objects or just simply with the scripts for moving Objects around.<br/><br/>Objects can be physically moved around, from within an Object, Player Object, or a Room Object, to another Object, Player Object, or Room Object.<br/><br/>Does this happen with objectlists and~or objectdictionaries too, when you add~remove from their lists~dictionaries, or is it &quot;logical&quot; in usage, and thus not &quot;physical&quot; like it is with moving nested Objects or script-moved Objects ???<br/><br/>Are Objects actually &quot;placed~put~held&quot; within the objectlist or objectdictionary ??? Or, no? How does this compare to Moving Objects around by scripts and thus nesting objects (objects placed within objects) ??? What's the difference, is there is any ???<br/><br/>and any other basic explanation of what Objectlists and Objectdictionaries are and can do, vs simply moving objects around via script and nesting objects (objects within objects) ???",
      "PostDate": "2013-12-25T05:19:45+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27215",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "As you've suspected, object lists and object dictionaries are different from the child/parent relationship that exists elsewhere in Quest. The latter is implemented by each object having a &quot;parent&quot; object attribute which can be set to the parent object that holds that child. This parent relationship is used by the Quest engine to conceptually implement things like containment, objects being in a room, etc. (Your use of the word &quot;physical&quot; in your question threw me a little, as even &quot;moving&quot; objects in Quest does not physically move them. Such moves are logical as well, with simply a new parent being assigned. I suppose if you are looking at it virtually, in the sense of the game world, then an object is &quot;moved&quot;.) Given that each object only has one &quot;parent&quot; attribute, an object can only have one parent. In a sense, a child points &quot;upward&quot; to its parent.\n\nObject lists and dictionaries are the opposite. They point downward to the objects that they contain. As such, an object can exist in multiple such lists or dictionaries at once. More importantly, Quest does not place any special meaning on such containment; there is no &quot;physical&quot; or virtual meaning to being in such a container, apart from what you assign to it yourself.\n\nDictionaries and lists are data structures you can use for whatever purpose you wish. For example, when you invoke GetDirectChildren on an object, Quest searches through all the objects in the game, finds all the ones with &quot;parent&quot; set to the object in question, and then adds them into a list to return to you. Once you're done with it, the list goes away. There is no meaning to that list other than that is the result of that function call. Lists and dictionaries can come and go as you need, or you can keep them around if you have a purpose where you need lists. How you use them and what they mean to your code are up to you.\n\nI hope that helps a bit. If not, ask away. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "As you've suspected, object lists and object dictionaries are different from the child/parent relationship that exists elsewhere in Quest. The latter is implemented by each object having a &quot;parent&quot; object attribute which can be set to the parent object that holds that child. This parent relationship is used by the Quest engine to conceptually implement things like containment, objects being in a room, etc. (Your use of the word &quot;physical&quot; in your question threw me a little, as even &quot;moving&quot; objects in Quest does not physically move them. Such moves are logical as well, with simply a new parent being assigned. I suppose if you are looking at it virtually, in the sense of the game world, then an object is &quot;moved&quot;.) Given that each object only has one &quot;parent&quot; attribute, an object can only have one parent. In a sense, a child points &quot;upward&quot; to its parent.<br/><br/>Object lists and dictionaries are the opposite. They point downward to the objects that they contain. As such, an object can exist in multiple such lists or dictionaries at once. More importantly, Quest does not place any special meaning on such containment; there is no &quot;physical&quot; or virtual meaning to being in such a container, apart from what you assign to it yourself.<br/><br/>Dictionaries and lists are data structures you can use for whatever purpose you wish. For example, when you invoke GetDirectChildren on an object, Quest searches through all the objects in the game, finds all the ones with &quot;parent&quot; set to the object in question, and then adds them into a list to return to you. Once you're done with it, the list goes away. There is no meaning to that list other than that is the result of that function call. Lists and dictionaries can come and go as you need, or you can keep them around if you have a purpose where you need lists. How you use them and what they mean to your code are up to you.<br/><br/>I hope that helps a bit. If not, ask away. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-12-25T12:07:48+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27219",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thanks Jayne, that helps a lot, everything makes a lot of sense now, and sorry about the confusion with my use of &quot;physical&quot;.\n\nI was thinking of in reference to the &quot;moving~changing&quot; of an &quot;object&quot; (like &quot;gold_coin&quot;) from one &quot;object&quot; to another &quot;object&quot;, vs using the changing of attributes (&quot;gold_amount&quot;), for my use of &quot;physical&quot;. As you put it well: the &quot;virtual&quot; perception of a physical movement within quest.\n\nI totally forgot about the &quot;parent&quot; logical association (and thus couldn't realize it's presumably the same as the &quot;list~dictionary&quot; logical assoication), due to it mostly not being needed thanks to the underlying code engine (as it recognizes your ease-of-use of nesting it, both via the GUI~Editor and In-Code modes), laughs.\n\nso, as you point out, technically you're changing an attribute (the &quot;parent&quot;) when you &quot;move&quot; an &quot;Object&quot; (&quot;such as a &quot;gold_coin&quot;), just as you're changing the attributes (such as with &quot;gold_amount&quot;) of an &quot;Object&quot;. This is all logical, actually, as there's no physical movment (technically, ALMOST EVERYTHING in terms of computing is logical, unless you're actually talking about the hardware and the AC-DC electrical current and its moving of the bits of data at the OSI model's layer 1, whereas and because the other 6 layers of the OSI's 7 layers are logical. OSI (Data Link) Layer 2 's use of a MAC address and up is ALL logical attribute coding!\n\ngood Cisco networking info~pic of the &quot;OSI&quot;, &quot;DoD ~ TCP/IP&quot;, and &quot;Cisco's 3 layers heirarcial&quot; 3 models all together:\n\n<!-- m --><a class=\"postlink\" href=\"http://www.texbuddy.com/Images/Snap_Shot_OSI.jpg\">http://www.texbuddy.com/Images/Snap_Shot_OSI.jpg</a><!-- m -->\n\nor just between &quot;OSI&quot; and &quot;DoD ~ TCP/IP&quot; models (not as good as the above link, lol):\n\n<!-- m --><a class=\"postlink\" href=\"http://www.sis.pitt.edu/~icucart/networking_basics/4LayersofTCPIPModel.html\">http://www.sis.pitt.edu/~icucart/networ ... Model.html</a><!-- m -->\n\n----------\n\ncould we say that the &quot;parent~nesting&quot; and &quot;lists~dictionaries&quot; are both forms of containment, the quest engine recognizes their &quot;virtual location existances and virtual movement&quot;, and thus they can be acted upon at that &quot;location&quot; (association of~with another Object), with the only difference being that the &quot;object&quot; can have only one &quot;parent&quot; association (&quot;virtual location existence&quot;), but many &quot;list~dictionary&quot; associations ???\n\nAnd thus if the above is true, then using &quot;MoveObject or &lt;parent&gt;blah&lt;/parent&gt;&quot; Scripts~Tags, &quot;Remove~Destroy Object&quot; Objects, or &quot;list~dictionary add~remove&quot; are all ways of &quot;virtually moving~changing&quot; the logical &quot;object&quot; attribute, correct ???\n\nie, everything that can be done to~with~at (acted upon) an &quot;object&quot; via a &quot;parent&quot; association~containment, can be done with an &quot;object&quot; via a &quot;list~dictionary&quot; association~containment, correct?\n\nI'm basically trying to ask this (lol ~ I think I'm just confusing you more, and making myself look like I understand less and less):\n\nan &quot;object&quot; logically-exists (and thus can be acted upon) at both its &quot;parent&quot; and &quot;list~dictionary&quot; associations (the other &quot;object&quot; that it is pointing towards or at) ???\n\n----------\n\nAlso, one other question for more conceptual understanding for me:\n\nwould this cause a problem~conflict~error?\n\n&lt;object name=&quot;blah_1&quot;&gt;\n-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt; &lt;object name=&quot;blah_2&quot;&gt; // either via a &quot;parent&quot; attribute on the &quot;blah_2&quot; object or the underlying code engine recognizing this code nesting\n-&gt;-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt; &lt;object&gt;\n-&gt; &lt;blah_object_list type=&quot;simpleobjectlist&quot;&gt;blah_2&lt;/blah_object_list&gt;\n&lt;/object&gt;\n\nor can the &quot;blah_2&quot; object exist at &quot;blah_1&quot; object via these two logical associations of &quot;parent~nesting&quot; and &quot;lists~dictionaries&quot; ???\n\nAlso, are they independant of each other ??? what happens if one action is done to one (the &quot;parent~nesting&quot;) of them, but a different action is done to the other of them (the &quot;list~dictionary&quot;) ???\n\nWhat happens if I do a &quot;list~dictionary remove&quot;, does &quot;blah_2&quot; object still exist-logically at &quot;blah_1&quot; object via the &quot;parent~nesting&quot; ??? what if I were to &quot;move~change to the parent~nesting&quot;, does &quot;blah_2&quot; object still exist-logically at &quot;blah_1&quot; object via the &quot;list~dictionary&quot; ??? What if I were to &quot;destroy~remove&quot; the &quot;blah_2&quot; object, does it still exist-logically at &quot;blah_1&quot; object via the &quot;list~dictionary&quot; and~or the &quot;parent~nesting&quot; ???\n\n----------------\n\nOut of coding~logic curiosity, could an &quot;object&quot; (and if the underlying code engine was ~ and ie can be ~ coded for) have multiple &quot;parent&quot; (upward) associations too, or is this somehow impossible in the coding~logic &quot;world&quot;, whereas it's not for the &quot;lists~dictionaries&quot; (downward) associations ???\n\n---------------\n\n[quote=&quot;jayna&quot;:1kbk8ix1]As such, an object can exist in multiple such lists or dictionaries at once. More importantly, Quest does not place any special meaning on such containment; there is no &quot;physical&quot; or virtual meaning to being in such a container, apart from what you assign to it yourself.[/quote:1kbk8ix1]\n\nI'm assuming (guessing) that this is what you mean (I'm hoping!):\n\nthe underlying code engine acts upon (ie is coded for acting upon or for understanding) the &quot;parent~nesting&quot; of &quot;objects&quot;, but you got to craft your own code for specifically acting upon the &quot;lists~dictionaries&quot; (obviously for doing what you want with them), is this the correct understanding of your quote~comment ???",
      "EditableFormat": "bbcode",
      "HTML": "thanks Jayne, that helps a lot, everything makes a lot of sense now, and sorry about the confusion with my use of &quot;physical&quot;.<br/><br/>I was thinking of in reference to the &quot;moving~changing&quot; of an &quot;object&quot; (like &quot;gold_coin&quot;) from one &quot;object&quot; to another &quot;object&quot;, vs using the changing of attributes (&quot;gold_amount&quot;), for my use of &quot;physical&quot;. As you put it well: the &quot;virtual&quot; perception of a physical movement within quest.<br/><br/>I totally forgot about the &quot;parent&quot; logical association (and thus couldn't realize it's presumably the same as the &quot;list~dictionary&quot; logical assoication), due to it mostly not being needed thanks to the underlying code engine (as it recognizes your ease-of-use of nesting it, both via the GUI~Editor and In-Code modes), laughs.<br/><br/>so, as you point out, technically you're changing an attribute (the &quot;parent&quot;) when you &quot;move&quot; an &quot;Object&quot; (&quot;such as a &quot;gold_coin&quot;), just as you're changing the attributes (such as with &quot;gold_amount&quot;) of an &quot;Object&quot;. This is all logical, actually, as there's no physical movment (technically, ALMOST EVERYTHING in terms of computing is logical, unless you're actually talking about the hardware and the AC-DC electrical current and its moving of the bits of data at the OSI model's layer 1, whereas and because the other 6 layers of the OSI's 7 layers are logical. OSI (Data Link) Layer 2 's use of a MAC address and up is ALL logical attribute coding!<br/><br/>good Cisco networking info~pic of the &quot;OSI&quot;, &quot;DoD ~ TCP/IP&quot;, and &quot;Cisco's 3 layers heirarcial&quot; 3 models all together:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://www.texbuddy.com/Images/Snap_Shot_OSI.jpg\">http://www.texbuddy.com/Images/Snap_Shot_OSI.jpg</a><!-- m --><br/><br/>or just between &quot;OSI&quot; and &quot;DoD ~ TCP/IP&quot; models (not as good as the above link, lol):<br/><br/><!-- m --><a class=\"postlink\" href=\"http://www.sis.pitt.edu/~icucart/networking_basics/4LayersofTCPIPModel.html\">http://www.sis.pitt.edu/~icucart/networ ... Model.html</a><!-- m --><br/><br/>----------<br/><br/>could we say that the &quot;parent~nesting&quot; and &quot;lists~dictionaries&quot; are both forms of containment, the quest engine recognizes their &quot;virtual location existances and virtual movement&quot;, and thus they can be acted upon at that &quot;location&quot; (association of~with another Object), with the only difference being that the &quot;object&quot; can have only one &quot;parent&quot; association (&quot;virtual location existence&quot;), but many &quot;list~dictionary&quot; associations ???<br/><br/>And thus if the above is true, then using &quot;MoveObject or &lt;parent&gt;blah&lt;/parent&gt;&quot; Scripts~Tags, &quot;Remove~Destroy Object&quot; Objects, or &quot;list~dictionary add~remove&quot; are all ways of &quot;virtually moving~changing&quot; the logical &quot;object&quot; attribute, correct ???<br/><br/>ie, everything that can be done to~with~at (acted upon) an &quot;object&quot; via a &quot;parent&quot; association~containment, can be done with an &quot;object&quot; via a &quot;list~dictionary&quot; association~containment, correct?<br/><br/>I'm basically trying to ask this (lol ~ I think I'm just confusing you more, and making myself look like I understand less and less):<br/><br/>an &quot;object&quot; logically-exists (and thus can be acted upon) at both its &quot;parent&quot; and &quot;list~dictionary&quot; associations (the other &quot;object&quot; that it is pointing towards or at) ???<br/><br/>----------<br/><br/>Also, one other question for more conceptual understanding for me:<br/><br/>would this cause a problem~conflict~error?<br/><br/>&lt;object name=&quot;blah_1&quot;&gt;<br/>-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt; &lt;object name=&quot;blah_2&quot;&gt; // either via a &quot;parent&quot; attribute on the &quot;blah_2&quot; object or the underlying code engine recognizing this code nesting<br/>-&gt;-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt; &lt;object&gt;<br/>-&gt; &lt;blah_object_list type=&quot;simpleobjectlist&quot;&gt;blah_2&lt;/blah_object_list&gt;<br/>&lt;/object&gt;<br/><br/>or can the &quot;blah_2&quot; object exist at &quot;blah_1&quot; object via these two logical associations of &quot;parent~nesting&quot; and &quot;lists~dictionaries&quot; ???<br/><br/>Also, are they independant of each other ??? what happens if one action is done to one (the &quot;parent~nesting&quot;) of them, but a different action is done to the other of them (the &quot;list~dictionary&quot;) ???<br/><br/>What happens if I do a &quot;list~dictionary remove&quot;, does &quot;blah_2&quot; object still exist-logically at &quot;blah_1&quot; object via the &quot;parent~nesting&quot; ??? what if I were to &quot;move~change to the parent~nesting&quot;, does &quot;blah_2&quot; object still exist-logically at &quot;blah_1&quot; object via the &quot;list~dictionary&quot; ??? What if I were to &quot;destroy~remove&quot; the &quot;blah_2&quot; object, does it still exist-logically at &quot;blah_1&quot; object via the &quot;list~dictionary&quot; and~or the &quot;parent~nesting&quot; ???<br/><br/>----------------<br/><br/>Out of coding~logic curiosity, could an &quot;object&quot; (and if the underlying code engine was ~ and ie can be ~ coded for) have multiple &quot;parent&quot; (upward) associations too, or is this somehow impossible in the coding~logic &quot;world&quot;, whereas it's not for the &quot;lists~dictionaries&quot; (downward) associations ???<br/><br/>---------------<br/><br/><blockquote><cite>jayna wrote:</cite>As such, an object can exist in multiple such lists or dictionaries at once. More importantly, Quest does not place any special meaning on such containment; there is no &quot;physical&quot; or virtual meaning to being in such a container, apart from what you assign to it yourself.</blockquote><br/><br/>I'm assuming (guessing) that this is what you mean (I'm hoping!):<br/><br/>the underlying code engine acts upon (ie is coded for acting upon or for understanding) the &quot;parent~nesting&quot; of &quot;objects&quot;, but you got to craft your own code for specifically acting upon the &quot;lists~dictionaries&quot; (obviously for doing what you want with them), is this the correct understanding of your quote~comment ???",
      "PostDate": "2013-12-26T07:15:58+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27220",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I think that's the important part of all of that. Apart from the one/many, upward/downward pointing nature of the two schemes, the crucial difference is that Quest has a lot of logic built around the parent/child relationship, in terms of what it means in the game world. But lists and dictionaries have no inherent meaning. If you create an arbitrary list or dictionary and put an object in it, it has no &quot;meaning&quot; in the Quest world as such.\n\nMaybe this makes sense: the room I'm sitting in right now has all sorts of things in it - a table, a chair, a TV some bookcases, a Christmas tree. That is the &quot;physical&quot; sense of those things; their being in this room is part of my &quot;world&quot;. That's what Quest uses the parent/child relationship to represent. Now, if I take a pad of paper and pen and make a list of those objects, writing each one down on the list, nothing in the &quot;world&quot; changes (other than that the list now has entries), but I have a list I can look at and use for my own purposes. The fact that I have written &quot;chair&quot; on my list does not change anything about the chair or where it is. It's just put in a list for my own use, so I can track it for some purpose. (Maybe I'm taking an inventory or want to remember what I have for insurance purposes after I set the house on fire.)\n\nAnd I can have as many different lists as I want. It doesn't change things in the &quot;world&quot; as such. (The analogy breaks down a little bit there, as in the real world, a pad of paper is itself an object, whereas in Quest an internal list is not. Try to look past that a bit. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> )",
      "EditableFormat": "bbcode",
      "HTML": "I think that's the important part of all of that. Apart from the one/many, upward/downward pointing nature of the two schemes, the crucial difference is that Quest has a lot of logic built around the parent/child relationship, in terms of what it means in the game world. But lists and dictionaries have no inherent meaning. If you create an arbitrary list or dictionary and put an object in it, it has no &quot;meaning&quot; in the Quest world as such.<br/><br/>Maybe this makes sense: the room I'm sitting in right now has all sorts of things in it - a table, a chair, a TV some bookcases, a Christmas tree. That is the &quot;physical&quot; sense of those things; their being in this room is part of my &quot;world&quot;. That's what Quest uses the parent/child relationship to represent. Now, if I take a pad of paper and pen and make a list of those objects, writing each one down on the list, nothing in the &quot;world&quot; changes (other than that the list now has entries), but I have a list I can look at and use for my own purposes. The fact that I have written &quot;chair&quot; on my list does not change anything about the chair or where it is. It's just put in a list for my own use, so I can track it for some purpose. (Maybe I'm taking an inventory or want to remember what I have for insurance purposes after I set the house on fire.)<br/><br/>And I can have as many different lists as I want. It doesn't change things in the &quot;world&quot; as such. (The analogy breaks down a little bit there, as in the real world, a pad of paper is itself an object, whereas in Quest an internal list is not. Try to look past that a bit. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> )",
      "PostDate": "2013-12-26T09:29:17+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27224",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Thanks, that makes a lot of sense! The &quot;object&quot; (as an Object) is indeed the Object and thus its &quot;parent~nesting&quot; too (as the quest engine understands it), whereas a &quot;Value&quot; (even an &quot;Object&quot; as that Value) in an Object List~Dictionary Attribute, is just that, a Value of an Attribute... of an Object. You can use Object Lists~dictionaries to act upon the &quot;Objects&quot; within them, but the &quot;physical&quot; (for the quest code engine's &quot;world&quot;) Object itself, exists as a tag (&lt;object name=&quot;blah&quot;&gt;&lt;/object&gt;) and through its &quot;parent or &quot;nesting&quot;, for its &quot;physical&quot; (again as understood by quest engine) location. Though in terms of &quot;containment&quot;, there's no difference between the &quot;parent~nesting&quot; Attributes and the &quot;lists~dictionaries&quot; Attributes (aside from one vs many, and &quot;upwards-parents&quot; vs &quot;downwards-childs&quot;).\n\nAn &quot;object&quot; within a list~dictionary is just a &quot;representation&quot; (a mark or symbol) of the &quot;actual~physical&quot; (virtual) &quot;Object&quot;, in terms of how the quest engine is coded to understand. Writing &quot;pig&quot; on a contract is just a &quot;representation&quot;, it's obviously not an actual pig, just as an &quot;object&quot; within a list~dictionary isn't the quest-engine-understood &quot;physical&quot; Object, either. The &quot;real pig&quot; of the quest engine, is the &quot;creation-tag&quot; of &lt;object=&quot;name&quot;&gt;&lt;/object&gt; (or a script that creates it) and it's &quot;location&quot; via a &quot;parent&quot; attribute or the &quot;nesting&quot; made possible by the quest engine's underlying coding to understand it as such.\n\nI think I understand these concepts very well and a lot more of the coding design~logic~concepts too, understanding greatly more about &quot;objects&quot;, &quot;parents~nesting&quot;, &quot;lists~dictionaries~childs&quot;, attributes, and etc, thanks to your superb explanations!\n\nsorry, for the work of getting me to understand, I am~was so dense~slow in understanding that: an Object is an Object, and a list (or dictionary) is a list (or dictionary), lol. Sighs... but at least now I do understand, heh.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks, that makes a lot of sense! The &quot;object&quot; (as an Object) is indeed the Object and thus its &quot;parent~nesting&quot; too (as the quest engine understands it), whereas a &quot;Value&quot; (even an &quot;Object&quot; as that Value) in an Object List~Dictionary Attribute, is just that, a Value of an Attribute... of an Object. You can use Object Lists~dictionaries to act upon the &quot;Objects&quot; within them, but the &quot;physical&quot; (for the quest code engine's &quot;world&quot;) Object itself, exists as a tag (&lt;object name=&quot;blah&quot;&gt;&lt;/object&gt;) and through its &quot;parent or &quot;nesting&quot;, for its &quot;physical&quot; (again as understood by quest engine) location. Though in terms of &quot;containment&quot;, there's no difference between the &quot;parent~nesting&quot; Attributes and the &quot;lists~dictionaries&quot; Attributes (aside from one vs many, and &quot;upwards-parents&quot; vs &quot;downwards-childs&quot;).<br/><br/>An &quot;object&quot; within a list~dictionary is just a &quot;representation&quot; (a mark or symbol) of the &quot;actual~physical&quot; (virtual) &quot;Object&quot;, in terms of how the quest engine is coded to understand. Writing &quot;pig&quot; on a contract is just a &quot;representation&quot;, it's obviously not an actual pig, just as an &quot;object&quot; within a list~dictionary isn't the quest-engine-understood &quot;physical&quot; Object, either. The &quot;real pig&quot; of the quest engine, is the &quot;creation-tag&quot; of &lt;object=&quot;name&quot;&gt;&lt;/object&gt; (or a script that creates it) and it's &quot;location&quot; via a &quot;parent&quot; attribute or the &quot;nesting&quot; made possible by the quest engine's underlying coding to understand it as such.<br/><br/>I think I understand these concepts very well and a lot more of the coding design~logic~concepts too, understanding greatly more about &quot;objects&quot;, &quot;parents~nesting&quot;, &quot;lists~dictionaries~childs&quot;, attributes, and etc, thanks to your superb explanations!<br/><br/>sorry, for the work of getting me to understand, I am~was so dense~slow in understanding that: an Object is an Object, and a list (or dictionary) is a list (or dictionary), lol. Sighs... but at least now I do understand, heh.",
      "PostDate": "2013-12-26T12:40:15+00:00",
      "LastEditDate": null
    }
  ]
}
