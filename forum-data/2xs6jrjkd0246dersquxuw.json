{
  "Topic": {
    "TopicId": "2xs6jrjkd0246dersquxuw",
    "ForumId": "10",
    "Title": "[SOLVED]Make exits command dosent work",
    "LastUpdated": "2019-12-23T04:29:37.6803149Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "dc05e3c7-ab07-49e7-8762-c669272e4d0e",
      "UserId": 370918,
      "Username": "Dusydungeon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d92eb09bfd05d45f40969336f3078be0?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Im trying to make this thing where the player is in a box and can use a penknife to make a hole in said box, but I cant figure out how to get the penknife to create an exit when used on the box. Please help.",
      "EditableFormat": "markdown",
      "HTML": "<p>Im trying to make this thing where the player is in a box and can use a penknife to make a hole in said box, but I cant figure out how to get the penknife to create an exit when used on the box. Please help.</p>\n\n",
      "PostDate": "2019-12-23T04:29:37.6803149Z",
      "LastEditDate": "2019-12-23T07:29:14.3213123Z",
      "link": null
    },
    {
      "PostId": "67630453-f30d-42d2-8885-adcd7b7978ac",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's easier to have a NAMED exit already be in existence, invisible, and using the penknife on the box makes it visible.",
      "EditableFormat": "markdown",
      "HTML": "<p>It's easier to have a NAMED exit already be in existence, invisible, and using the penknife on the box makes it visible.</p>\n\n",
      "PostDate": "2019-12-23T04:35:25.8127501Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af8b64c4-5120-4447-800e-b87d06ea6914",
      "UserId": 370918,
      "Username": "Dusydungeon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d92eb09bfd05d45f40969336f3078be0?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "cool,thanks\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>cool,thanks</p>\n\n",
      "PostDate": "2019-12-23T07:28:26.9141589Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4a987ffc-bb52-42c5-b424-f7048f78d27a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There are some cases where it would be useful to create an exit or an object, but not many. In most cases, there's a few better ways to handle the situation where you want to create something.\r\n\r\n1. **Lock it**\r\n\r\nIn cases like your example, locking the exit might make more sense than creating it. That way, when the player types \"go out\" before cutting their way out of the box, they can see a lock message like \"The box isn't open\"; or even set the exit's locked message to \"You can't go that way\".\r\n\r\nIt's not quite what you asked for, but depending on the setup it might feel more natural to the player if they have an exit they can't go through. I'd save invisible exits for situations where it's not clear you can go that way. A person inside a box is likely to be trying to find a way out, so it's natural that the player may try \"go out\", and it's a nice touch to give them a meaningful message.\r\n\r\n2. **Make it invisible**\r\n\r\nAs io points out, you can make your object or exit invisible initially, and then make it visible when you need it. For most cases, an invisible object is pretty much the same as it not existing.\r\n\r\n3. **Make it somewhere else**\r\n\r\nIf you don't know where the object or exit will be needed (for example if there are multiple compartments in a box, and the player can move to any of them before cutting their way out), rather than an invisible exit it's easier to put one somewhere else entirely; maybe outside player space, in a room the player can't reach yet, or inside an object that isn't a container. Then when you need it, you can just do `MoveObjectHere (name_of_exit)` or `name_of_exit.parent = game.pov.parent`.\r\n\r\n(Most object functions also work on exits; such as moving them around the map. All exits are effectively teleporters, so moving them to a different room without changing the destination will work fine)\r\n\r\n4. **Clone an existing one**\r\n\r\nProbably not so useful for exits, but it could be useful. Functions such as `CloneObject` work perfectly well on exits if you need to. And if you want to create multiple copies of the same object, having an \"original\" object that you can clone means that you can still use the GUI to modify its attributes easily. This is usually easier and more efficient (both for the programmer and the Quest engine) than creating a new object and setting all its attributes.\r\n\r\n5. **Actually create a new one**\r\n\r\nThere's very few circumstances where you'd need to do this, but there are a few. Most notably if you've got a script that creates a random dungeon, or if the player has a stick of dynamite that allows them to make a hole through any wall in a dungeon.\r\n\r\nYou probably wouldn't end up doing this, but in case you do:\r\n\r\nCreate objects with `create (name)`\r\n\r\nFor example:\r\n```\r\ncreate (\"jellyfish\")\r\njellyfish.alias = \"John the Jellyfish\"\r\nMoveObject (jellyfish, aquarium)\r\n```\r\nor if you might want to create multiple objects of the same type, you need to give them different names. For example:\r\n```\r\n// We get a unique name, which might end up being \"fish\", or \"fish3\", of \"fish1337\"\r\nfishname = GetUniqueElementName (\"fish\")\r\ncreate (fishname)\r\n// then create a variable pointing to the newly-created object so we can do stuff with it\r\nnew_fish = GetObject (fishname)\r\nif (new_fish = null) {\r\n  error (\"Couldn't create fish - maybe we're out of memory?\")\r\n}\r\nelse {\r\n  new_fish.alias = \"Yellowtail\"\r\n  new_fish.weight = 395\r\n  AddToInventory (new_fish)\r\n}\r\n```\r\n\r\nYou can do the same with exits, but the command is \"create exit\".\r\nLike so:\r\n```\r\ncreate exit (\"out\", box_room, room_outside_box, \"outdirection\")\r\n```\r\nNote that I specified which direction the exit is twice. The first, \"out\", is the alias which appears in the \"You can go:\" display. The last, \"outdirection\" in this case, is the name of a type that the exit should inherit. The default ones are `northdirection`, `eastdirection`, `westdirection`, `updirection`, `northwestdirection`, and so on. This does a couple of things: the map uses it to work out which side of the room to draw the exit on, and it also adds the abbreviated aliases (so the player can type \"go nw\"). The compass might or might not work with exits whose type isn't set; it can be a little unpredictable.\r\n\r\nIf you want the player to be able to reenter the box, you'd want to add something like:\r\n```\r\ncreate exit (\"in\", room_outside_box, box_room, \"indirection\")\r\n```\r\nthere's also a core function `CreateBiExits` which is supposed to create two exits at once, but I'd advise against using it because it doesn't set the exit type.\r\n\r\n`create exit` doesn't actually return the new exit as far as I'm aware, so if you want to give the exit any other attributes you'll either want to pick a name for it in advance, or find the exit again.\r\nthese two pieces of code will do roughly the same thing:\r\n```\r\nexitname = GetUniqueElementName (\"exit\")\r\ncreate exit (exitname, \"north\", source_room, destination_room, \"northdirection\")\r\nnewexit = GetObject (exitname)\r\n```\r\nor\r\n```\r\ncreate exit (\"north\", source_room, destination_room, \"northdirection\")\r\nnewexit = GetObject (GetExitByLink (source_room, destination_room))\r\n```\r\nthen you have a variable `newexit` which you can use to do things such as locking the exit you've just created.\r\nNote that the function `GetExitByName` is a little misleading, because it gets the *name* of an exit between those two rooms, not the exit itself.",
      "EditableFormat": "markdown",
      "HTML": "<p>There are some cases where it would be useful to create an exit or an object, but not many. In most cases, there's a few better ways to handle the situation where you want to create something.</p>\n<ol>\n<li><strong>Lock it</strong></li>\n</ol>\n<p>In cases like your example, locking the exit might make more sense than creating it. That way, when the player types \"go out\" before cutting their way out of the box, they can see a lock message like \"The box isn't open\"; or even set the exit's locked message to \"You can't go that way\".</p>\n<p>It's not quite what you asked for, but depending on the setup it might feel more natural to the player if they have an exit they can't go through. I'd save invisible exits for situations where it's not clear you can go that way. A person inside a box is likely to be trying to find a way out, so it's natural that the player may try \"go out\", and it's a nice touch to give them a meaningful message.</p>\n<ol start=\"2\">\n<li><strong>Make it invisible</strong></li>\n</ol>\n<p>As io points out, you can make your object or exit invisible initially, and then make it visible when you need it. For most cases, an invisible object is pretty much the same as it not existing.</p>\n<ol start=\"3\">\n<li><strong>Make it somewhere else</strong></li>\n</ol>\n<p>If you don't know where the object or exit will be needed (for example if there are multiple compartments in a box, and the player can move to any of them before cutting their way out), rather than an invisible exit it's easier to put one somewhere else entirely; maybe outside player space, in a room the player can't reach yet, or inside an object that isn't a container. Then when you need it, you can just do <code>MoveObjectHere (name_of_exit)</code> or <code>name_of_exit.parent = game.pov.parent</code>.</p>\n<p>(Most object functions also work on exits; such as moving them around the map. All exits are effectively teleporters, so moving them to a different room without changing the destination will work fine)</p>\n<ol start=\"4\">\n<li><strong>Clone an existing one</strong></li>\n</ol>\n<p>Probably not so useful for exits, but it could be useful. Functions such as <code>CloneObject</code> work perfectly well on exits if you need to. And if you want to create multiple copies of the same object, having an \"original\" object that you can clone means that you can still use the GUI to modify its attributes easily. This is usually easier and more efficient (both for the programmer and the Quest engine) than creating a new object and setting all its attributes.</p>\n<ol start=\"5\">\n<li><strong>Actually create a new one</strong></li>\n</ol>\n<p>There's very few circumstances where you'd need to do this, but there are a few. Most notably if you've got a script that creates a random dungeon, or if the player has a stick of dynamite that allows them to make a hole through any wall in a dungeon.</p>\n<p>You probably wouldn't end up doing this, but in case you do:</p>\n<p>Create objects with <code>create (name)</code></p>\n<p>For example:</p>\n<pre><code>create (\"jellyfish\")\njellyfish.alias = \"John the Jellyfish\"\nMoveObject (jellyfish, aquarium)\n</code></pre>\n<p>or if you might want to create multiple objects of the same type, you need to give them different names. For example:</p>\n<pre><code>// We get a unique name, which might end up being \"fish\", or \"fish3\", of \"fish1337\"\nfishname = GetUniqueElementName (\"fish\")\ncreate (fishname)\n// then create a variable pointing to the newly-created object so we can do stuff with it\nnew_fish = GetObject (fishname)\nif (new_fish = null) {\n  error (\"Couldn't create fish - maybe we're out of memory?\")\n}\nelse {\n  new_fish.alias = \"Yellowtail\"\n  new_fish.weight = 395\n  AddToInventory (new_fish)\n}\n</code></pre>\n<p>You can do the same with exits, but the command is \"create exit\".<br>\nLike so:</p>\n<pre><code>create exit (\"out\", box_room, room_outside_box, \"outdirection\")\n</code></pre>\n<p>Note that I specified which direction the exit is twice. The first, \"out\", is the alias which appears in the \"You can go:\" display. The last, \"outdirection\" in this case, is the name of a type that the exit should inherit. The default ones are <code>northdirection</code>, <code>eastdirection</code>, <code>westdirection</code>, <code>updirection</code>, <code>northwestdirection</code>, and so on. This does a couple of things: the map uses it to work out which side of the room to draw the exit on, and it also adds the abbreviated aliases (so the player can type \"go nw\"). The compass might or might not work with exits whose type isn't set; it can be a little unpredictable.</p>\n<p>If you want the player to be able to reenter the box, you'd want to add something like:</p>\n<pre><code>create exit (\"in\", room_outside_box, box_room, \"indirection\")\n</code></pre>\n<p>there's also a core function <code>CreateBiExits</code> which is supposed to create two exits at once, but I'd advise against using it because it doesn't set the exit type.</p>\n<p><code>create exit</code> doesn't actually return the new exit as far as I'm aware, so if you want to give the exit any other attributes you'll either want to pick a name for it in advance, or find the exit again.<br>\nthese two pieces of code will do roughly the same thing:</p>\n<pre><code>exitname = GetUniqueElementName (\"exit\")\ncreate exit (exitname, \"north\", source_room, destination_room, \"northdirection\")\nnewexit = GetObject (exitname)\n</code></pre>\n<p>or</p>\n<pre><code>create exit (\"north\", source_room, destination_room, \"northdirection\")\nnewexit = GetObject (GetExitByLink (source_room, destination_room))\n</code></pre>\n<p>then you have a variable <code>newexit</code> which you can use to do things such as locking the exit you've just created.<br>\nNote that the function <code>GetExitByName</code> is a little misleading, because it gets the <em>name</em> of an exit between those two rooms, not the exit itself.</p>\n\n",
      "PostDate": "2019-12-23T13:38:30.1950948Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
