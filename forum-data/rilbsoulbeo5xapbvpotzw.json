{
  "Topic": {
    "TopicId": "rilbsoulbeo5xapbvpotzw",
    "ForumId": "10",
    "Title": "Still suffering with result =",
    "LastUpdated": "2017-07-17T14:29:52.8311608Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f31b723f-f754-47d7-b53a-caac3a5ae161",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Heya,\r\n\r\nIt got explained to me before, how to make it so various inputs do the same thing but I'm still having trouble implementing it. I thought I'd attach an image just to make it clear where I seem to be having trouble.  I'm trying to make it so that typing W, West, west and w would all have the same function for a ```get input``` script. But I can't seem to pin down the variation to get this to work, if it can be done.\r\n\r\nhttp://i.imgur.com/L6Aclmt.png\r\n\r\nWould be a great help if anyone can tell me where I'm going wrong.",
      "EditableFormat": "markdown",
      "HTML": "<p>Heya,</p>\n<p>It got explained to me before, how to make it so various inputs do the same thing but I'm still having trouble implementing it. I thought I'd attach an image just to make it clear where I seem to be having trouble.  I'm trying to make it so that typing W, West, west and w would all have the same function for a <code>get input</code> script. But I can't seem to pin down the variation to get this to work, if it can be done.</p>\n<p>http://i.imgur.com/L6Aclmt.png</p>\n<p>Would be a great help if anyone can tell me where I'm going wrong.</p>\n\n",
      "PostDate": "2017-07-17T14:29:52.8311608Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9b28d3e9-1a33-4fbe-b420-4725dd40a9d5",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you merely have the wrong syntax, here's the fix (and a bit of refinement for it too):\r\n\r\n```\r\nif [EXPRESSION] LCase (result) = \"e\" or LCase (result) = \"east\"\r\n  // then -> add new script -> 'WHATEVER' Script\r\nelse if [EXPRESSION] LCase (result) = \"w\" or LCase (result) = \"west\"\r\n  // then -> add new script -> 'WHATEVER' Script\r\nelse if [EXPRESSION] LCase (result) = \"n\" or LCase (result) = \"north\"\r\n  // then -> add new script -> 'WHATEVER' Script\r\nelse if [EXPRESSION] LCase (result) = \"s\" or LCase (result) = \"south\"\r\n  // then -> add new script -> 'WHATEVER' Script\r\nelse\r\n  // then, -> add new script -> 'output' section/category -> 'print a message' Script -> print [MESSAGE] Wrong input, try again.\r\n```\r\n\r\n------------------------------------\r\n\r\nabout my code above:\r\n\r\nthe 'LCase (STRING_VALUE)' Function takes, whatever the combination of upper and lower case letters, of the inputted string value, and turns it all into lower case letters. So, if I inputted 'E', it's converted into 'e', and if I inputted 'EAST/East/eAst/etc many combinations lol', it's converted into 'east'. Now, that converted \"e\" is compared to \"e\", which is a match (TRUE), and it does the nested script(s) for it. Or, now that converted \"east\" is compared to \"east\", which is a match (TRUE), and it does the nested script(s) for it.\r\n\r\nIf I inputed 'W' or 'WEST/etc many combinations', it's converted into \"w\" or \"west\", which does NOT match up with \"e\" nor \"east\", so we go to the first 'else if', which does compare it to \"w\" or \"west\", which is a match (TRUE), and thus does its nested script(s)\r\n\r\nIf I inputed 'N' or 'NORTH/etc many combinations', it's converted into \"n\" or \"north\", which does NOT match up with \"e\" nor \"east\", so we go to the first 'else if', which does NOT match up with \"w\" nor \"west\", so we go to the second 'else if', compare it to \"n\" or \"north\", which is a match (TRUE), and thus does its nested script(s)\r\n\r\nIf I inputed 'S' or 'SOUTH/etc many combinations', it's converted into \"s\" or \"south\", which does NOT match up with \"e\" nor \"east\", so we go to the first 'else if', which does NOT match up with \"w\" nor \"west\", so we go to the second 'else if', which does NOT match up with \"n\" nor \"north\", so we go to the third/last 'else if', compare it to \"s\" or \"south\", which is a match (TRUE), and thus does its nested script(s)\r\n\r\nIf I inputed 'b' or 'BLAH/etc many combinations', it's converted into \"b\" or \"blah\", which does NOT match up with \"e\" nor \"east\", so we go to the first 'else if', which does NOT match up with \"w\" nor \"west\", so we go to the second 'else if', which does NOT match up with \"n\" nor \"north\", so we go to the third/last 'else if', which does NOT match up with \"s\" nor \"south\", so we go to the 'else', (as it has no condition being checked/compared for matching), DOING its nested script(s)\r\n\r\n-----------------------\r\n\r\nif\r\nLCase (result) = \"e\"\r\nor\r\nLCase (result) = \"east\"\r\nelse if\r\nLCase (result) = \"w\"\r\nor\r\nLCase (result) = \"west\"\r\nelse if\r\nLCase (result) = \"n\"\r\nor\r\nLCase (result) = \"north\"\r\nelse if\r\nLCase (result) = \"s\"\r\nor\r\nLCase (result) = \"south\"\r\nelse\r\n\r\nthe 'if', the 3 'else ifs', and 'else' are the command/action being done\r\n\r\nand, since it's the 'if' (if/else-if/else) Script (for this example), we're checking its conditions, which are (in this example):\r\n\r\nLCase (result) = \"e\"\r\nLCase (result) = \"east\"\r\nLCase (result) = \"w\"\r\nLCase (result) = \"west\"\r\nLCase (result) = \"n\"\r\nLCase (result) = \"north\"\r\nLCase (result) = \"s\"\r\nLCase (result) = \"south\"\r\n\r\nfor whether they are 'TRUE' or 'FALSE'\r\n\r\n(if none of the conditions are TRUE, then we do the else's nested script/s)\r\n\r\nlastly, the 'or' is a logic/boolean operator/operation\r\n\r\n--------------\r\n\r\nBasic Boolean Logic / Truth Tables:\r\n\r\n(Venn Diagrams are a great way to understand this Boolean logic)\r\n\r\nhttps://en.wikipedia.org/wiki/Truth_table\r\nhttps://lib.colostate.edu/howto/others/venn.html (Venn Diagram examples)\r\nhttps://en.wikipedia.org/wiki/Boolean_algebra (it can be written as math equations, but with a few differences, also see: Symbolic Boolean Logic/Arithmetic: see link below)\r\nhttp://philosophy.lander.edu/logic/symbolic.html (symbolic logic/arithmetic) (click on the 'next' buttons at the bottom, there's more pages on this stuff)\r\nhttps://en.wikipedia.org/wiki/Logic_gate (computer architecture = digital design = circuitry)\r\nhttps://learn.sparkfun.com/tutorials/digital-logic (computer architecture = digital design = circuitry)\r\netc etc etc resources\r\n\r\nIdentity logic:\r\n\r\ntrue ---> TRUE\r\nfalse ---> FALSE\r\n\r\nNegation (not) (opposite / compliment) logic:\r\n\r\nnot true ----> FALSE\r\nnot false ----> TRUE\r\n\r\n'AND' logic:\r\n\r\ntrue and true ---> TRUE\r\ntrue and false ---> FALSE\r\nfalse and true ----> FALSE\r\nfalse and false ----> FALSE\r\n\r\n'OR' logic:\r\n\r\ntrue or true ---> TRUE\r\ntrue or false ---> TRUE\r\nfalse or true ---> TRUE\r\nfalse or false ---> FALSE\r\n\r\n---------------\r\n\r\nhow it checks for 'TRUE' or 'FALSE' :\r\n\r\nstring matching comparison checking:\r\n\r\nVARIABLE = \"HegemonKhan\"\r\n// if [VARIABLE] = (\"HegemonKhan\")\r\n// does [\"H\"]  = (\"H\") ----> true\r\n// does [\"e\"] = (\"e\") ----> true\r\n// does [\"g\"] = (\"g\") ----> true\r\n// does [\"e\"] = (\"e\") ----> true\r\n// does [\"m\"] = (\"m\") ----> true\r\n// does [\"o\"] = (\"o\") ----> true\r\n// does [\"n\"] = (\"n\") ----> true\r\n// does [\"K\"] = (\"K\") ----> true\r\n// does [\"h\"] = (\"h\") ----> true\r\n// does [\"a\"] = (\"a\") ----> true\r\n// does [\"n\"] = (\"n\") ----> true\r\n// indeed, [\"HegemonKhan\"] = (\"HegemonKhan\") -----> TRUE\r\n\r\nVS\r\n\r\nVARIABLE = \"HegemonKhan\"\r\n// if [VARIABLE] = (\"Hegemonkhan\")\r\n// does [\"H\"]  = (\"H\") ----> true\r\n// does [\"e\"] = (\"e\") ----> true\r\n// does [\"g\"] = (\"g\") ----> true\r\n// does [\"e\"] = (\"e\") ----> true\r\n// does [\"m\"] = (\"m\") ----> true\r\n// does [\"o\"] = (\"o\") ----> true\r\n// does [\"n\"] = (\"n\") ----> true\r\n// does [\"K\"] = (\"k\") ----> false\r\n// nope, [\"HegemonKhan\"] = (\"Hegemonkhan\") -----> FALSE\r\n\r\nVS\r\n\r\nVARIABLE = \"Hegemonkhan\"\r\n// if [VARIABLE] = (\"HegemonKhan\")\r\n// does [\"H\"]  = (\"H\") ----> true\r\n// does [\"e\"] = (\"e\") ----> true\r\n// does [\"g\"] = (\"g\") ----> true\r\n// does [\"e\"] = (\"e\") ----> true\r\n// does [\"m\"] = (\"m\") ----> true\r\n// does [\"o\"] = (\"o\") ----> true\r\n// does [\"n\"] = (\"n\") ----> true\r\n// does [\"k\"] = (\"K\") ----> false\r\n// nope, [\"Hegemonkhan\"] = (\"HegemonKhan\") -----> FALSE\r\n\r\nVS\r\n\r\nVARIABLE = \"HegemonKhan\"\r\n// if [VARIABLE] = (\"A\")\r\n// does [\"H\"]  = (\"A\") ----> false\r\n// nope, [\"HegemonKhan\"] = (\"A\") -----> FALSE\r\n\r\nVS\r\n\r\nVARIABLE = \"A\"\r\n// if [VARIABLE] = (\"HegemonKhan\")\r\n// does [\"A\"]  = (\"H\") ----> false\r\n// nope, [\"A\"] = (\"HegemonKhan\") -----> FALSE",
      "EditableFormat": "markdown",
      "HTML": "<p>you merely have the wrong syntax, here's the fix (and a bit of refinement for it too):</p>\n<pre><code>if [EXPRESSION] LCase (result) = \"e\" or LCase (result) = \"east\"\n  // then -&gt; add new script -&gt; 'WHATEVER' Script\nelse if [EXPRESSION] LCase (result) = \"w\" or LCase (result) = \"west\"\n  // then -&gt; add new script -&gt; 'WHATEVER' Script\nelse if [EXPRESSION] LCase (result) = \"n\" or LCase (result) = \"north\"\n  // then -&gt; add new script -&gt; 'WHATEVER' Script\nelse if [EXPRESSION] LCase (result) = \"s\" or LCase (result) = \"south\"\n  // then -&gt; add new script -&gt; 'WHATEVER' Script\nelse\n  // then, -&gt; add new script -&gt; 'output' section/category -&gt; 'print a message' Script -&gt; print [MESSAGE] Wrong input, try again.\n</code></pre>\n<hr>\n<p>about my code above:</p>\n<p>the 'LCase (STRING_VALUE)' Function takes, whatever the combination of upper and lower case letters, of the inputted string value, and turns it all into lower case letters. So, if I inputted 'E', it's converted into 'e', and if I inputted 'EAST/East/eAst/etc many combinations lol', it's converted into 'east'. Now, that converted \"e\" is compared to \"e\", which is a match (TRUE), and it does the nested script(s) for it. Or, now that converted \"east\" is compared to \"east\", which is a match (TRUE), and it does the nested script(s) for it.</p>\n<p>If I inputed 'W' or 'WEST/etc many combinations', it's converted into \"w\" or \"west\", which does NOT match up with \"e\" nor \"east\", so we go to the first 'else if', which does compare it to \"w\" or \"west\", which is a match (TRUE), and thus does its nested script(s)</p>\n<p>If I inputed 'N' or 'NORTH/etc many combinations', it's converted into \"n\" or \"north\", which does NOT match up with \"e\" nor \"east\", so we go to the first 'else if', which does NOT match up with \"w\" nor \"west\", so we go to the second 'else if', compare it to \"n\" or \"north\", which is a match (TRUE), and thus does its nested script(s)</p>\n<p>If I inputed 'S' or 'SOUTH/etc many combinations', it's converted into \"s\" or \"south\", which does NOT match up with \"e\" nor \"east\", so we go to the first 'else if', which does NOT match up with \"w\" nor \"west\", so we go to the second 'else if', which does NOT match up with \"n\" nor \"north\", so we go to the third/last 'else if', compare it to \"s\" or \"south\", which is a match (TRUE), and thus does its nested script(s)</p>\n<p>If I inputed 'b' or 'BLAH/etc many combinations', it's converted into \"b\" or \"blah\", which does NOT match up with \"e\" nor \"east\", so we go to the first 'else if', which does NOT match up with \"w\" nor \"west\", so we go to the second 'else if', which does NOT match up with \"n\" nor \"north\", so we go to the third/last 'else if', which does NOT match up with \"s\" nor \"south\", so we go to the 'else', (as it has no condition being checked/compared for matching), DOING its nested script(s)</p>\n<hr>\n<p>if<br>\nLCase (result) = \"e\"<br>\nor<br>\nLCase (result) = \"east\"<br>\nelse if<br>\nLCase (result) = \"w\"<br>\nor<br>\nLCase (result) = \"west\"<br>\nelse if<br>\nLCase (result) = \"n\"<br>\nor<br>\nLCase (result) = \"north\"<br>\nelse if<br>\nLCase (result) = \"s\"<br>\nor<br>\nLCase (result) = \"south\"<br>\nelse</p>\n<p>the 'if', the 3 'else ifs', and 'else' are the command/action being done</p>\n<p>and, since it's the 'if' (if/else-if/else) Script (for this example), we're checking its conditions, which are (in this example):</p>\n<p>LCase (result) = \"e\"<br>\nLCase (result) = \"east\"<br>\nLCase (result) = \"w\"<br>\nLCase (result) = \"west\"<br>\nLCase (result) = \"n\"<br>\nLCase (result) = \"north\"<br>\nLCase (result) = \"s\"<br>\nLCase (result) = \"south\"</p>\n<p>for whether they are 'TRUE' or 'FALSE'</p>\n<p>(if none of the conditions are TRUE, then we do the else's nested script/s)</p>\n<p>lastly, the 'or' is a logic/boolean operator/operation</p>\n<hr>\n<p>Basic Boolean Logic / Truth Tables:</p>\n<p>(Venn Diagrams are a great way to understand this Boolean logic)</p>\n<p>https://en.wikipedia.org/wiki/Truth_table<br>\nhttps://lib.colostate.edu/howto/others/venn.html (Venn Diagram examples)<br>\nhttps://en.wikipedia.org/wiki/Boolean_algebra (it can be written as math equations, but with a few differences, also see: Symbolic Boolean Logic/Arithmetic: see link below)<br>\nhttp://philosophy.lander.edu/logic/symbolic.html (symbolic logic/arithmetic) (click on the 'next' buttons at the bottom, there's more pages on this stuff)<br>\nhttps://en.wikipedia.org/wiki/Logic_gate (computer architecture = digital design = circuitry)<br>\nhttps://learn.sparkfun.com/tutorials/digital-logic (computer architecture = digital design = circuitry)<br>\netc etc etc resources</p>\n<p>Identity logic:</p>\n<p>true ---&gt; TRUE<br>\nfalse ---&gt; FALSE</p>\n<p>Negation (not) (opposite / compliment) logic:</p>\n<p>not true ----&gt; FALSE<br>\nnot false ----&gt; TRUE</p>\n<p>'AND' logic:</p>\n<p>true and true ---&gt; TRUE<br>\ntrue and false ---&gt; FALSE<br>\nfalse and true ----&gt; FALSE<br>\nfalse and false ----&gt; FALSE</p>\n<p>'OR' logic:</p>\n<p>true or true ---&gt; TRUE<br>\ntrue or false ---&gt; TRUE<br>\nfalse or true ---&gt; TRUE<br>\nfalse or false ---&gt; FALSE</p>\n<hr>\n<p>how it checks for 'TRUE' or 'FALSE' :</p>\n<p>string matching comparison checking:</p>\n<p>VARIABLE = \"HegemonKhan\"<br>\n// if [VARIABLE] = (\"HegemonKhan\")<br>\n// does [\"H\"]  = (\"H\") ----&gt; true<br>\n// does [\"e\"] = (\"e\") ----&gt; true<br>\n// does [\"g\"] = (\"g\") ----&gt; true<br>\n// does [\"e\"] = (\"e\") ----&gt; true<br>\n// does [\"m\"] = (\"m\") ----&gt; true<br>\n// does [\"o\"] = (\"o\") ----&gt; true<br>\n// does [\"n\"] = (\"n\") ----&gt; true<br>\n// does [\"K\"] = (\"K\") ----&gt; true<br>\n// does [\"h\"] = (\"h\") ----&gt; true<br>\n// does [\"a\"] = (\"a\") ----&gt; true<br>\n// does [\"n\"] = (\"n\") ----&gt; true<br>\n// indeed, [\"HegemonKhan\"] = (\"HegemonKhan\") -----&gt; TRUE</p>\n<p>VS</p>\n<p>VARIABLE = \"HegemonKhan\"<br>\n// if [VARIABLE] = (\"Hegemonkhan\")<br>\n// does [\"H\"]  = (\"H\") ----&gt; true<br>\n// does [\"e\"] = (\"e\") ----&gt; true<br>\n// does [\"g\"] = (\"g\") ----&gt; true<br>\n// does [\"e\"] = (\"e\") ----&gt; true<br>\n// does [\"m\"] = (\"m\") ----&gt; true<br>\n// does [\"o\"] = (\"o\") ----&gt; true<br>\n// does [\"n\"] = (\"n\") ----&gt; true<br>\n// does [\"K\"] = (\"k\") ----&gt; false<br>\n// nope, [\"HegemonKhan\"] = (\"Hegemonkhan\") -----&gt; FALSE</p>\n<p>VS</p>\n<p>VARIABLE = \"Hegemonkhan\"<br>\n// if [VARIABLE] = (\"HegemonKhan\")<br>\n// does [\"H\"]  = (\"H\") ----&gt; true<br>\n// does [\"e\"] = (\"e\") ----&gt; true<br>\n// does [\"g\"] = (\"g\") ----&gt; true<br>\n// does [\"e\"] = (\"e\") ----&gt; true<br>\n// does [\"m\"] = (\"m\") ----&gt; true<br>\n// does [\"o\"] = (\"o\") ----&gt; true<br>\n// does [\"n\"] = (\"n\") ----&gt; true<br>\n// does [\"k\"] = (\"K\") ----&gt; false<br>\n// nope, [\"Hegemonkhan\"] = (\"HegemonKhan\") -----&gt; FALSE</p>\n<p>VS</p>\n<p>VARIABLE = \"HegemonKhan\"<br>\n// if [VARIABLE] = (\"A\")<br>\n// does [\"H\"]  = (\"A\") ----&gt; false<br>\n// nope, [\"HegemonKhan\"] = (\"A\") -----&gt; FALSE</p>\n<p>VS</p>\n<p>VARIABLE = \"A\"<br>\n// if [VARIABLE] = (\"HegemonKhan\")<br>\n// does [\"A\"]  = (\"H\") ----&gt; false<br>\n// nope, [\"A\"] = (\"HegemonKhan\") -----&gt; FALSE</p>\n\n",
      "PostDate": "2017-07-17T15:28:51.4352294Z",
      "LastEditDate": "2017-07-17T16:02:03.7799625Z",
      "link": null
    },
    {
      "PostId": "3b04d48c-08d7-4c19-b210-1cfce9d4cad0",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Unfortunately,  your syntax only works for string lists, not separate possible string results.",
      "EditableFormat": "markdown",
      "HTML": "<p>Unfortunately,  your syntax only works for string lists, not separate possible string results.</p>\n\n",
      "PostDate": "2017-07-17T15:43:51.6389304Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fcd9017a-ff81-4792-bf37-989bb108cbea",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "for what you (JK) tried to do in your code ( http://i.imgur.com/L6Aclmt.png ), it would look like this (in correct usage and syntax):\r\n\r\n```\r\neast_stringlist_variable = split (\"e;east\", \";\")\r\nwest_stringlist_variable = split (\"w;west\", \";\")\r\nnorth_stringlist_variable = split (\"n;north\", \";\")\r\nsouth_stringlist_variable = split (\"s;south\", \";\")\r\n\r\nhandled_boolean_variable = false\r\n\r\nget input {\r\n  foreach (string_variable, east_stringlist_variable) {\r\n    if (LCase (result) = string_variable) {\r\n      // do whatever you want to do\r\n      handled_boolean_variable = true\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    foreach (string_variable, west_stringlist_variable) {\r\n      if (LCase (result) = string_variable) {\r\n        // do whatever you want to do\r\n        handled_boolean_variable = true\r\n      }\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    foreach (string_variable, north_stringlist_variable) {\r\n      if (LCase (result) = string_variable) {\r\n        // do whatever you want to do\r\n        handled_boolean_variable = true\r\n      }\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    foreach (string_variable, south_stringlist_variable) {\r\n      if (LCase (result) = string_variable) {\r\n        // do whatever you want to do\r\n        handled_boolean_variable = true\r\n      }\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    msg (\"Wrong input, try again\")\r\n  }\r\n}\r\n```\r\n\r\n------------------\r\n\r\nor if you don't like my usage of the 'LCase' stuff, it'd look like this:\r\n\r\n(but by not using the 'LCase', an input of, for example, 'EAST', would result in the scripting displayed/output of: Wrong input, try again)\r\n\r\n(unless, you were to put in every combination into your 'split' Functions...)\r\n\r\n(e/w = 2^1 = 2 = e, E = 2)\r\n(east/west = 2^4 = 16 = east, easT, eaSt, eaST, eAst, eAsT, eASt, eAST, East, EasT, EaSt, EaST, EAst, EAsT, EASt, EAST = 16)\r\n[ east_stringlist_variable = split (\"e; E; east; easT; eaSt; eaST; eAst; eAsT; eASt; eAST; East; EasT; EaSt; EaST; EAst; EAsT; EASt; EAST\", \";\") ]\r\n\r\n(north/south = 2^5 = 32 = HELL NO! lol)\r\n\r\n```\r\neast_stringlist_variable = split (\"E;e;East;east\", \";\")\r\nwest_stringlist_variable = split (\"W;w;West;west\", \";\")\r\nnorth_stringlist_variable = split (\"N;n;North;north\", \";\")\r\nsouth_stringlist_variable = split (\"S;s;South;south\", \";\")\r\n\r\nhandled_boolean_variable = false\r\n\r\nget input {\r\n  foreach (string_variable, east_stringlist_variable) {\r\n    if (result = string_variable) {\r\n      // do whatever you want to do\r\n      handled_boolean_variable = true\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    foreach (string_variable, west_stringlist_variable) {\r\n      if (result = string_variable) {\r\n        // do whatever you want to do\r\n        handled_boolean_variable = true\r\n      }\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    foreach (string_variable, north_stringlist_variable) {\r\n      if (result = string_variable) {\r\n        // do whatever you want to do\r\n        handled_boolean_variable = true\r\n      }\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    foreach (string_variable, south_stringlist_variable) {\r\n      if (result = string_variable) {\r\n        // do whatever you want to do\r\n        handled_boolean_variable = true\r\n      }\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    msg (\"Wrong input, try again\")\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>for what you (JK) tried to do in your code ( http://i.imgur.com/L6Aclmt.png ), it would look like this (in correct usage and syntax):</p>\n<pre><code>east_stringlist_variable = split (\"e;east\", \";\")\nwest_stringlist_variable = split (\"w;west\", \";\")\nnorth_stringlist_variable = split (\"n;north\", \";\")\nsouth_stringlist_variable = split (\"s;south\", \";\")\n\nhandled_boolean_variable = false\n\nget input {\n  foreach (string_variable, east_stringlist_variable) {\n    if (LCase (result) = string_variable) {\n      // do whatever you want to do\n      handled_boolean_variable = true\n    }\n  }\n  if (not handled_boolean_variable) {\n    foreach (string_variable, west_stringlist_variable) {\n      if (LCase (result) = string_variable) {\n        // do whatever you want to do\n        handled_boolean_variable = true\n      }\n    }\n  }\n  if (not handled_boolean_variable) {\n    foreach (string_variable, north_stringlist_variable) {\n      if (LCase (result) = string_variable) {\n        // do whatever you want to do\n        handled_boolean_variable = true\n      }\n    }\n  }\n  if (not handled_boolean_variable) {\n    foreach (string_variable, south_stringlist_variable) {\n      if (LCase (result) = string_variable) {\n        // do whatever you want to do\n        handled_boolean_variable = true\n      }\n    }\n  }\n  if (not handled_boolean_variable) {\n    msg (\"Wrong input, try again\")\n  }\n}\n</code></pre>\n<hr>\n<p>or if you don't like my usage of the 'LCase' stuff, it'd look like this:</p>\n<p>(but by not using the 'LCase', an input of, for example, 'EAST', would result in the scripting displayed/output of: Wrong input, try again)</p>\n<p>(unless, you were to put in every combination into your 'split' Functions...)</p>\n<p>(e/w = 2^1 = 2 = e, E = 2)<br>\n(east/west = 2^4 = 16 = east, easT, eaSt, eaST, eAst, eAsT, eASt, eAST, East, EasT, EaSt, EaST, EAst, EAsT, EASt, EAST = 16)<br>\n[ east_stringlist_variable = split (\"e; E; east; easT; eaSt; eaST; eAst; eAsT; eASt; eAST; East; EasT; EaSt; EaST; EAst; EAsT; EASt; EAST\", \";\") ]</p>\n<p>(north/south = 2^5 = 32 = HELL NO! lol)</p>\n<pre><code>east_stringlist_variable = split (\"E;e;East;east\", \";\")\nwest_stringlist_variable = split (\"W;w;West;west\", \";\")\nnorth_stringlist_variable = split (\"N;n;North;north\", \";\")\nsouth_stringlist_variable = split (\"S;s;South;south\", \";\")\n\nhandled_boolean_variable = false\n\nget input {\n  foreach (string_variable, east_stringlist_variable) {\n    if (result = string_variable) {\n      // do whatever you want to do\n      handled_boolean_variable = true\n    }\n  }\n  if (not handled_boolean_variable) {\n    foreach (string_variable, west_stringlist_variable) {\n      if (result = string_variable) {\n        // do whatever you want to do\n        handled_boolean_variable = true\n      }\n    }\n  }\n  if (not handled_boolean_variable) {\n    foreach (string_variable, north_stringlist_variable) {\n      if (result = string_variable) {\n        // do whatever you want to do\n        handled_boolean_variable = true\n      }\n    }\n  }\n  if (not handled_boolean_variable) {\n    foreach (string_variable, south_stringlist_variable) {\n      if (result = string_variable) {\n        // do whatever you want to do\n        handled_boolean_variable = true\n      }\n    }\n  }\n  if (not handled_boolean_variable) {\n    msg (\"Wrong input, try again\")\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2017-07-17T16:21:45.7878883Z",
      "LastEditDate": "2017-07-17T17:06:39.9932394Z",
      "link": null
    },
    {
      "PostId": "fe30d701-e86d-458b-9a8d-b296fb859ecc",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Heya HK, really helpful as always! ^__^\r\n\r\nAlthough I still might not be doing it right following the example.\r\n\r\n```Error running script: Error compiling expression 'LCASE (result) = \"e\" or LCASE (result) \"east\"': AndOrElement: Operation 'Or' is not defined for types 'Boolean' and 'String'```\r\n\r\n```\r\nmsg (\"The sky above is dominated by dark cloud... its not going to be friendly.</b>\")\r\nget input {\r\nif (LCASE (result) = \"e\" or LCASE (result) \"east\") {\r\n  msg (\"Against your better judgement, you decide to head east...\")\r\n```\r\nI'm assuming this means that I can't use the ```or``` function in an expression? Or is there some specific way to phase this. What you wrote looks quite complicated. \r\n\r\nAh, but now I read more into your second post...\r\n\r\n```\r\neast_stringlist_variable = split (\"e;east\", \";\")\r\nwest_stringlist_variable = split (\"w;west\", \";\")\r\n\r\nget input {\r\n  foreach (string_variable, east_stringlist_variable) {\r\n    if (LCase (result) = string_variable) {\r\n      msg (\"Against your better judgement, you decide to head east...\")\r\n      handled_boolean_variable = true\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {\r\n    foreach (string_variable, west_stringlist_variable) {\r\n      if (LCase (result) = string_variable) {\r\n        msg (\"Alternatively you go west.\")\r\n        handled_boolean_variable = true\r\n      }\r\n    }\r\n  }\r\n\r\n  if (not handled_boolean_variable) {\r\n    msg (\"Wrong input, try again\")\r\n  }\r\n}\r\n```\r\nI'll go give this a go. Just putting down my thoughts in case anyone stumbles onto the same problems.",
      "EditableFormat": "markdown",
      "HTML": "<p>Heya HK, really helpful as always! ^__^</p>\n<p>Although I still might not be doing it right following the example.</p>\n<p><code>Error running script: Error compiling expression 'LCASE (result) = \"e\" or LCASE (result) \"east\"': AndOrElement: Operation 'Or' is not defined for types 'Boolean' and 'String'</code></p>\n<pre><code>msg (\"The sky above is dominated by dark cloud... its not going to be friendly.&lt;/b&gt;\")\nget input {\nif (LCASE (result) = \"e\" or LCASE (result) \"east\") {\n  msg (\"Against your better judgement, you decide to head east...\")\n</code></pre>\n<p>I'm assuming this means that I can't use the <code>or</code> function in an expression? Or is there some specific way to phase this. What you wrote looks quite complicated.</p>\n<p>Ah, but now I read more into your second post...</p>\n<pre><code>east_stringlist_variable = split (\"e;east\", \";\")\nwest_stringlist_variable = split (\"w;west\", \";\")\n\nget input {\n  foreach (string_variable, east_stringlist_variable) {\n    if (LCase (result) = string_variable) {\n      msg (\"Against your better judgement, you decide to head east...\")\n      handled_boolean_variable = true\n    }\n  }\n  if (not handled_boolean_variable) {\n    foreach (string_variable, west_stringlist_variable) {\n      if (LCase (result) = string_variable) {\n        msg (\"Alternatively you go west.\")\n        handled_boolean_variable = true\n      }\n    }\n  }\n\n  if (not handled_boolean_variable) {\n    msg (\"Wrong input, try again\")\n  }\n}\n</code></pre>\n<p>I'll go give this a go. Just putting down my thoughts in case anyone stumbles onto the same problems.</p>\n\n",
      "PostDate": "2017-07-17T18:29:20.1422557Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a4b2fe10-e3d4-4cfe-9505-6fc5e3eea1b3",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello!\r\n\r\nThis seems to work, but it doesn't move the player.\r\n\r\n(I've been thinking of incorporating a gimmick such as this recently, myself.)\r\n\r\nIs there a way to print the message and still go somewhere?\r\n\r\nWould it need to be in an 'After exiting' room script?\r\n\r\nOr do I just need to cool my jets and read the entire post before asking all these questions?\r\n\r\n---\r\nMore on this as it comes in. . .",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello!</p>\n<p>This seems to work, but it doesn't move the player.</p>\n<p>(I've been thinking of incorporating a gimmick such as this recently, myself.)</p>\n<p>Is there a way to print the message and still go somewhere?</p>\n<p>Would it need to be in an 'After exiting' room script?</p>\n<p>Or do I just need to cool my jets and read the entire post before asking all these questions?</p>\n<hr>\n<p>More on this as it comes in. . .</p>\n\n",
      "PostDate": "2017-07-17T18:42:43.9919924Z",
      "LastEditDate": "2017-07-17T19:04:40.709944Z",
      "link": null
    },
    {
      "PostId": "bc4dcc25-ee0c-4e99-b42b-39929f9b7c5d",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Heya Richard,\r\n\r\nI'm working with a function here rather than actually going anywhere. It changes some dialogue as part of an intro scene, consider it more like picking your starting area.\r\n\r\nYou'd just incorporate a ```move object``` thing.\r\n\r\n```\r\n }\r\n  if (not handled_boolean_variable) {\r\n    foreach (string_variable, west_stringlist_variable) {\r\n      if (LCase (result) = string_variable) {\r\n        msg (\"Alternatively you go west.\")\r\n        handled_boolean_variable = true\r\n        MoveObject (player, Corrupted Town)\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Heya Richard,</p>\n<p>I'm working with a function here rather than actually going anywhere. It changes some dialogue as part of an intro scene, consider it more like picking your starting area.</p>\n<p>You'd just incorporate a <code>move object</code> thing.</p>\n<pre><code> }\n  if (not handled_boolean_variable) {\n    foreach (string_variable, west_stringlist_variable) {\n      if (LCase (result) = string_variable) {\n        msg (\"Alternatively you go west.\")\n        handled_boolean_variable = true\n        MoveObject (player, Corrupted Town)\n}\n</code></pre>\n\n",
      "PostDate": "2017-07-17T18:52:20.012Z",
      "LastEditDate": "2017-07-17T18:52:43.6907092Z",
      "link": null
    },
    {
      "PostId": "331dca6c-f497-4d17-a401-26bf9583fb91",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, I gotcha!\r\n\r\n```\r\nget input {\r\n  foreach (string_variable, east_stringlist_variable) {\r\n    if (LCase (result) = string_variable) {\r\n      msg (\"Against your better judgement, you decide to head east...\")\r\n      handled_boolean_variable = true\r\n      HandleSingleCommand (\"e\")\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) {   \r\n    foreach (string_variable, west_stringlist_variable) {\r\n      if (LCase (result) = string_variable) {\r\n        msg (\"Alternatively you go west.\")\r\n        handled_boolean_variable = true\r\n        HandleSingleCommand (\"w\")\r\n      }\r\n    }\r\n  }\r\n  if (not handled_boolean_variable) { \r\n    msg (\"Wrong input, try again\")\r\n  }\r\n}\r\n```\r\n\r\nIt doesn't print the message when I go west **for the first time**, but it does every time I go west **after** the first time.\r\n\r\nIf I move the ```foreach``` for the west_stringlist_variable above the one for the east_string_variable, west prints the message from the jump, but east doesn't print the message the first time.\r\n\r\n---\r\nDid you get your code working? Or is this the same issue you're running into? (The case being upper or lower has no bearing on my end. E, e, East, east, and EAST all go east.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, I gotcha!</p>\n<pre><code>get input {\n  foreach (string_variable, east_stringlist_variable) {\n    if (LCase (result) = string_variable) {\n      msg (\"Against your better judgement, you decide to head east...\")\n      handled_boolean_variable = true\n      HandleSingleCommand (\"e\")\n    }\n  }\n  if (not handled_boolean_variable) {   \n    foreach (string_variable, west_stringlist_variable) {\n      if (LCase (result) = string_variable) {\n        msg (\"Alternatively you go west.\")\n        handled_boolean_variable = true\n        HandleSingleCommand (\"w\")\n      }\n    }\n  }\n  if (not handled_boolean_variable) { \n    msg (\"Wrong input, try again\")\n  }\n}\n</code></pre>\n<p>It doesn't print the message when I go west <strong>for the first time</strong>, but it does every time I go west <strong>after</strong> the first time.</p>\n<p>If I move the <code>foreach</code> for the west_stringlist_variable above the one for the east_string_variable, west prints the message from the jump, but east doesn't print the message the first time.</p>\n<hr>\n<p>Did you get your code working? Or is this the same issue you're running into? (The case being upper or lower has no bearing on my end. E, e, East, east, and EAST all go east.)</p>\n\n",
      "PostDate": "2017-07-17T20:37:09.6881465Z",
      "LastEditDate": "2017-07-17T20:37:48.0563708Z",
      "link": null
    },
    {
      "PostId": "bd7dbf52-c2eb-46d9-a132-e0512cdab99c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ JK:\r\n\r\nyou just are not writing/typing in the correct spelling of the Functions, yes they have to be exact (quest is case sensitive):\r\n\r\nyou typed wrongly: LCASE (result)\r\n\r\nthere is no 'LCASE' Function in quest, hence the (unfortunately mis-leading/poor worded) error message\r\n\r\nbut, there is a 'LCase' Function, so to correct it, using this example of yours (fixed up):\r\n\r\nyou also were missing the 2nd condition's equal sign too (I just noticed this mistake myself, I almost missed it in your code, lol):\r\n\r\n... or LCASE (result) \"east\"\r\n\r\ncorrected:\r\n\r\n... or LCase (result) = \"east\"\r\n\r\n```\r\nmsg (\"The sky above is dominated by dark cloud... its not going to be friendly.</b>\")\r\nget input {\r\nif (LCase (result) = \"e\" or LCase (result) = \"east\") {\r\n  msg (\"Against your better judgement, you decide to head east...\")\r\n```\r\n\r\n-------------------\r\n\r\na little more about this, as I didn't explain how the comparisons work for many conditions and the boolean logic operators (and/or/not):\r\n\r\nif (LCase (result) = \"e\" or LCase (result) = \"east\") {\r\n\r\nquest either starts from the left or the right (barring any order of operation rules: same as the ones for math, for example something in a parenthesis is done first before something outside of a parenthesis, using math as example: 5 * (4 + 3) = 35, not 23)\r\n\r\nso first it compares:\r\n\r\nLCase (result) = \"e\" (or) LCase (result) = \"east\"\r\n\r\nwhich will result in: 'true' (or) 'false'\r\n\r\nit then compares the other one:\r\n\r\nLCase (result) = \"east\" (or) LCase (result) = \"e\"\r\n\r\nwhich will result in: 'true' (or) 'false'\r\n\r\nit then does a last comparison of the two Values of 'true/false'\r\n\r\nwhich will result in an ultimate/final: 'TRUE' (or) 'FALSE', which will determine whether it does the nested script(s) or jumps to the first 'else if' or the next 'else if' or the optional 'else'.\r\n\r\nan example will probably make more sense:\r\n\r\n(let's just start from the left side, as that is how we read, at least in the western world anyways)\r\n\r\n-------------------------\r\n\r\nresult = \"e\"\r\n\r\nif (LCase (result) = \"e\" or LCase (result) = \"east\") {\r\n\r\nfirst we do this:\r\n\r\nis \"e\" = \"e\" ----> true\r\n\r\nit's done, due to the rest of if's expression (it doesn't even need to try the second condition: or ... = \"east\") -----> TRUE, it does the nested script(s)\r\n\r\n'OR' logic:\r\n\r\ntrue or true = TRUE\r\ntrue or false = TRUE\r\nfalse or true = TRUE\r\nfalse or false = FALSE\r\n\r\nnotice:\r\n\r\ntrue or true = TRUE\r\ntrue or false = TRUE\r\n\r\nit doesn't matter whether the 2nd condition is 'true' or 'false', when the first condition is 'true', we call this type of situation 'don't cares', and use an 'X' to represent it (the 'X' means it can be either: true or false, or for binary: 1 or 0, correspondence is: true=1 / false=0, it doesn't change the final outcome):\r\n\r\ntrue or X ----> TRUE\r\n\r\n--------------------------\r\n\r\nresult = \"east\"\r\n\r\nif (LCase (result) = \"e\" or LCase (result) = \"east\") {\r\n\r\nfirst we do this (again assuming we start from the left):\r\n\r\nis \"east\" = \"e\" ----> false\r\n\r\nso, we now try the 2nd condition:\r\n\r\nis \"east\" = \"east\" ----> TRUE\r\n\r\nsince this is a 2 condition 'or', quest probably knows that the final outcome is 'TRUE' (does the nested script/s) ...\r\n\r\nbut if it doesn't, it'd do a 3rd comparison to get the final outcome:\r\n\r\nfor ('false' or 'true') ----> TRUE, does the nested script(s)\r\n\r\n------------------\r\n\r\nresult = \"blah\"\r\n\r\nif (LCase (result) = \"e\" or LCase (result) = \"east\") {\r\n\r\nfirst we do this (again assuming we start from the left):\r\n\r\nis \"blah\" = \"e\" ----> false\r\n\r\nso, we now try the 2nd condition:\r\n\r\nis \"blah\" = \"east\" ----> false\r\n\r\nsince this is a 2 condition 'or', quest probably knows that the final outcome is 'FALSE' (skips over the nested script/s, goes to first 'else if' or next 'else if' or 'else') ...\r\n\r\nbut if it doesn't, it'd do a 3rd comparison to get the final outcome:\r\n\r\nfor ('false' or 'false') ----> FALSE, skips over the nested script/s, goes to first 'else if' or next 'else if' or 'else'\r\n\r\n---------------\r\n\r\nbut we can make it more complex:\r\n\r\nif (LCase (result) = \"e\" or LCase (result) = \"east\" or LCase (result) = \"ea\")\r\n\r\nlet's just show the entire operations for you, so you can see how it works:\r\n\r\n(again assuming we start from the left)\r\n\r\nresult = \"blah\"\r\n\r\nif (LCase (result) = \"e\" or LCase (result) = \"east\" or LCase (result) = \"ea\")\r\n\r\ndoes \"blah\" = \"e\" ----> false_A\r\ndoes \"blah\" = \"east\" ---> false_B\r\nfor ('false_A' or 'false_b') ----> false_D\r\ndoes \"blah\" = \"ea\" ----> false_C\r\nfor ('false_D' or 'false_C') ----> FALSE\r\n\r\n---\r\n\r\nwe can get (infinitely) more complicated/complex (though if you do understand it, all the rules and how it works, it's not actually more complex/complicated, it's just more busy work: just becomes more and more tedius, lol):\r\n\r\nresult = \"blah\"\r\n\r\nif (((LCase (result) = \"e\") or (LCase (result) = \"east\")) or LCase (result) = \"blah\") and LCase (result) = \"blah\")\r\n\r\nsee if you can work this out for yourself... for a challenge... (assume you start from the left)\r\n\r\n(if you can do this correctly, you understand this stuff now inside and out, lol)\r\n\r\n----------\r\n\r\nthis is getting into some heavy programming and symbolic logic (philosophy) type of stuff, so don't worry if you're compeltely confused, this is really advanced stuff. If you do want to understand it, feel free to ask for help, and I'll try to explain it better for you, lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>@ JK:</p>\n<p>you just are not writing/typing in the correct spelling of the Functions, yes they have to be exact (quest is case sensitive):</p>\n<p>you typed wrongly: LCASE (result)</p>\n<p>there is no 'LCASE' Function in quest, hence the (unfortunately mis-leading/poor worded) error message</p>\n<p>but, there is a 'LCase' Function, so to correct it, using this example of yours (fixed up):</p>\n<p>you also were missing the 2nd condition's equal sign too (I just noticed this mistake myself, I almost missed it in your code, lol):</p>\n<p>... or LCASE (result) \"east\"</p>\n<p>corrected:</p>\n<p>... or LCase (result) = \"east\"</p>\n<pre><code>msg (\"The sky above is dominated by dark cloud... its not going to be friendly.&lt;/b&gt;\")\nget input {\nif (LCase (result) = \"e\" or LCase (result) = \"east\") {\n  msg (\"Against your better judgement, you decide to head east...\")\n</code></pre>\n<hr>\n<p>a little more about this, as I didn't explain how the comparisons work for many conditions and the boolean logic operators (and/or/not):</p>\n<p>if (LCase (result) = \"e\" or LCase (result) = \"east\") {</p>\n<p>quest either starts from the left or the right (barring any order of operation rules: same as the ones for math, for example something in a parenthesis is done first before something outside of a parenthesis, using math as example: 5 * (4 + 3) = 35, not 23)</p>\n<p>so first it compares:</p>\n<p>LCase (result) = \"e\" (or) LCase (result) = \"east\"</p>\n<p>which will result in: 'true' (or) 'false'</p>\n<p>it then compares the other one:</p>\n<p>LCase (result) = \"east\" (or) LCase (result) = \"e\"</p>\n<p>which will result in: 'true' (or) 'false'</p>\n<p>it then does a last comparison of the two Values of 'true/false'</p>\n<p>which will result in an ultimate/final: 'TRUE' (or) 'FALSE', which will determine whether it does the nested script(s) or jumps to the first 'else if' or the next 'else if' or the optional 'else'.</p>\n<p>an example will probably make more sense:</p>\n<p>(let's just start from the left side, as that is how we read, at least in the western world anyways)</p>\n<hr>\n<p>result = \"e\"</p>\n<p>if (LCase (result) = \"e\" or LCase (result) = \"east\") {</p>\n<p>first we do this:</p>\n<p>is \"e\" = \"e\" ----&gt; true</p>\n<p>it's done, due to the rest of if's expression (it doesn't even need to try the second condition: or ... = \"east\") -----&gt; TRUE, it does the nested script(s)</p>\n<p>'OR' logic:</p>\n<p>true or true = TRUE<br>\ntrue or false = TRUE<br>\nfalse or true = TRUE<br>\nfalse or false = FALSE</p>\n<p>notice:</p>\n<p>true or true = TRUE<br>\ntrue or false = TRUE</p>\n<p>it doesn't matter whether the 2nd condition is 'true' or 'false', when the first condition is 'true', we call this type of situation 'don't cares', and use an 'X' to represent it (the 'X' means it can be either: true or false, or for binary: 1 or 0, correspondence is: true=1 / false=0, it doesn't change the final outcome):</p>\n<p>true or X ----&gt; TRUE</p>\n<hr>\n<p>result = \"east\"</p>\n<p>if (LCase (result) = \"e\" or LCase (result) = \"east\") {</p>\n<p>first we do this (again assuming we start from the left):</p>\n<p>is \"east\" = \"e\" ----&gt; false</p>\n<p>so, we now try the 2nd condition:</p>\n<p>is \"east\" = \"east\" ----&gt; TRUE</p>\n<p>since this is a 2 condition 'or', quest probably knows that the final outcome is 'TRUE' (does the nested script/s) ...</p>\n<p>but if it doesn't, it'd do a 3rd comparison to get the final outcome:</p>\n<p>for ('false' or 'true') ----&gt; TRUE, does the nested script(s)</p>\n<hr>\n<p>result = \"blah\"</p>\n<p>if (LCase (result) = \"e\" or LCase (result) = \"east\") {</p>\n<p>first we do this (again assuming we start from the left):</p>\n<p>is \"blah\" = \"e\" ----&gt; false</p>\n<p>so, we now try the 2nd condition:</p>\n<p>is \"blah\" = \"east\" ----&gt; false</p>\n<p>since this is a 2 condition 'or', quest probably knows that the final outcome is 'FALSE' (skips over the nested script/s, goes to first 'else if' or next 'else if' or 'else') ...</p>\n<p>but if it doesn't, it'd do a 3rd comparison to get the final outcome:</p>\n<p>for ('false' or 'false') ----&gt; FALSE, skips over the nested script/s, goes to first 'else if' or next 'else if' or 'else'</p>\n<hr>\n<p>but we can make it more complex:</p>\n<p>if (LCase (result) = \"e\" or LCase (result) = \"east\" or LCase (result) = \"ea\")</p>\n<p>let's just show the entire operations for you, so you can see how it works:</p>\n<p>(again assuming we start from the left)</p>\n<p>result = \"blah\"</p>\n<p>if (LCase (result) = \"e\" or LCase (result) = \"east\" or LCase (result) = \"ea\")</p>\n<p>does \"blah\" = \"e\" ----&gt; false_A<br>\ndoes \"blah\" = \"east\" ---&gt; false_B<br>\nfor ('false_A' or 'false_b') ----&gt; false_D<br>\ndoes \"blah\" = \"ea\" ----&gt; false_C<br>\nfor ('false_D' or 'false_C') ----&gt; FALSE</p>\n<hr>\n<p>we can get (infinitely) more complicated/complex (though if you do understand it, all the rules and how it works, it's not actually more complex/complicated, it's just more busy work: just becomes more and more tedius, lol):</p>\n<p>result = \"blah\"</p>\n<p>if (((LCase (result) = \"e\") or (LCase (result) = \"east\")) or LCase (result) = \"blah\") and LCase (result) = \"blah\")</p>\n<p>see if you can work this out for yourself... for a challenge... (assume you start from the left)</p>\n<p>(if you can do this correctly, you understand this stuff now inside and out, lol)</p>\n<hr>\n<p>this is getting into some heavy programming and symbolic logic (philosophy) type of stuff, so don't worry if you're compeltely confused, this is really advanced stuff. If you do want to understand it, feel free to ask for help, and I'll try to explain it better for you, lol.</p>\n\n",
      "PostDate": "2017-07-17T23:22:19.7076565Z",
      "LastEditDate": "2017-07-18T00:31:37.2272965Z",
      "link": null
    },
    {
      "PostId": "f454d905-84fe-4ba4-895d-1b46bef7cd4c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ JK and Richard:\r\n\r\n-----------\r\n\r\nyou do NOT want to be doing the 'foreach' design, that's very inefficient, for what we're trying to do with the directional stuff.\r\n\r\nI was just showing how'd it'd look if done that way/design, as that is what JK was trying to do in her code, acidentally, not knowing how to script in the conditionals correctly, or she was trying to do it through the lists as her design, but still had the syntax+design wrong on how to do it correctly.\r\n\r\n------\r\n\r\nthere's definately a way to reference the Exits and their destination rooms for moving your player to/into them, but I'm not that familiar with the built-in stuff (Exits and the like)\r\n\r\nPixie can help, though I do remember seeing this:\r\n\r\n'exit.to'\r\n\r\nso maybe... something like this:\r\n\r\nplayer.parent = exit.to\r\nor\r\nplayer.parent = NAME_OF_EXIT.to\r\n\r\nor (if you prefer using the helper Function):\r\n\r\nMoveObject (player, exit.to)\r\nor\r\nMoveObject (player, NAME_OF_EXIT.to)\r\n\r\nthough, you'd need to likely do some scripting to match your desired destination room with the correct 'exit.to / NAME_OF_EXIT.to' for it.\r\n\r\nagain, Pixie can help with this stuff, as I'm likely totally off, lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>@ JK and Richard:</p>\n<hr>\n<p>you do NOT want to be doing the 'foreach' design, that's very inefficient, for what we're trying to do with the directional stuff.</p>\n<p>I was just showing how'd it'd look if done that way/design, as that is what JK was trying to do in her code, acidentally, not knowing how to script in the conditionals correctly, or she was trying to do it through the lists as her design, but still had the syntax+design wrong on how to do it correctly.</p>\n<hr>\n<p>there's definately a way to reference the Exits and their destination rooms for moving your player to/into them, but I'm not that familiar with the built-in stuff (Exits and the like)</p>\n<p>Pixie can help, though I do remember seeing this:</p>\n<p>'exit.to'</p>\n<p>so maybe... something like this:</p>\n<p>player.parent = exit.to<br>\nor<br>\nplayer.parent = NAME_OF_EXIT.to</p>\n<p>or (if you prefer using the helper Function):</p>\n<p>MoveObject (player, exit.to)<br>\nor<br>\nMoveObject (player, NAME_OF_EXIT.to)</p>\n<p>though, you'd need to likely do some scripting to match your desired destination room with the correct 'exit.to / NAME_OF_EXIT.to' for it.</p>\n<p>again, Pixie can help with this stuff, as I'm likely totally off, lol.</p>\n\n",
      "PostDate": "2017-07-18T00:21:19.1980213Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8a13170e-9aee-4b5d-af13-52480dd55dd0",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Now you're cooking! I'm getting it now.\r\n\r\nSee below:\r\n\r\n---\r\n<details><summary>This code is not quite correct.</summary>\r\n\r\n```\r\n\r\nmsg (\"The sky above is dominated by dark cloud... its not going to be friendly.</b>\")\r\nget input {\r\n  if (LCase (result) = \"e\" or LCase (result) = \"east\") {\r\n    msg (\"&gt; \"+result+\"<br/>Against your better judgement, you decide to head east...\")\r\n    HandleSingleCommand (\"e\") // <---Insert command of your liking here. \r\n  }\r\n  if (LCase (result) = \"w\" or LCase (result) = \"west\") {\r\n    msg (\"&gt; \"+result+\"<br/>Alternatively you go west.\")\r\n    HandleSingleCommand (\"w\")  // <---Insert command of your liking here. \r\n  }\r\n  else {\r\n    msg (\"Wrong input. Try again.\")\r\n    //  ?->_ INQUIRY: What do we put here to make it loop? Do we call the function again?  _<-?\r\n  }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n---\r\n<details><summary>This is what is printed to the screen.</summary>\r\n>You are in a room.\r\nYou can go east or west.\r\nThe sky above is dominated by dark cloud... its not going to be friendly.\r\n\\> e\r\nAgainst your better judgement, you decide to head east...\r\n>\r\n>You are in a room to the east of the first room.\r\nYou can go west.\r\n>\\> w\r\n>You are in a room.\r\nYou can go east or west.\r\nThe sky above is dominated by dark cloud... its not going to be friendly.\r\n\\> West\r\nAlternatively you go west.\r\n>\r\n>You are in a room to the west of the first room.\r\nYou can go east.\r\n>\r\n>\\> e\r\n>\r\n>You are in a room.\r\nYou can go east or west.\r\nThe sky above is dominated by dark cloud... its not going to be friendly.\r\n\\> dilly dally\r\nWrong input. Try again.\r\n\r\n\r\nThanks (again) HK!",
      "EditableFormat": "markdown",
      "HTML": "<p>Now you're cooking! I'm getting it now.</p>\n<p>See below:</p>\n<hr>\n<details><summary>This code is not quite correct.</summary>\n<pre><code>\nmsg (\"The sky above is dominated by dark cloud... its not going to be friendly.&lt;/b&gt;\")\nget input {\n  if (LCase (result) = \"e\" or LCase (result) = \"east\") {\n    msg (\"&amp;gt; \"+result+\"&lt;br/&gt;Against your better judgement, you decide to head east...\")\n    HandleSingleCommand (\"e\") // &lt;---Insert command of your liking here. \n  }\n  if (LCase (result) = \"w\" or LCase (result) = \"west\") {\n    msg (\"&amp;gt; \"+result+\"&lt;br/&gt;Alternatively you go west.\")\n    HandleSingleCommand (\"w\")  // &lt;---Insert command of your liking here. \n  }\n  else {\n    msg (\"Wrong input. Try again.\")\n    //  ?-&gt;_ INQUIRY: What do we put here to make it loop? Do we call the function again?  _&lt;-?\n  }\n}\n</code></pre>\n</details>\n<hr>\n<details><summary>This is what is printed to the screen.</summary>\n&gt;You are in a room.\nYou can go east or west.\nThe sky above is dominated by dark cloud... its not going to be friendly.\n\\&gt; e\nAgainst your better judgement, you decide to head east...\n&gt;\n&gt;You are in a room to the east of the first room.\nYou can go west.\n&gt;\\&gt; w\n&gt;You are in a room.\nYou can go east or west.\nThe sky above is dominated by dark cloud... its not going to be friendly.\n\\&gt; West\nAlternatively you go west.\n&gt;\n&gt;You are in a room to the west of the first room.\nYou can go east.\n&gt;\n&gt;\\&gt; e\n&gt;\n&gt;You are in a room.\nYou can go east or west.\nThe sky above is dominated by dark cloud... its not going to be friendly.\n\\&gt; dilly dally\nWrong input. Try again.\n<p>Thanks (again) HK!</p>\n\n</details>",
      "PostDate": "2017-07-18T00:28:42.9250187Z",
      "LastEditDate": "2017-07-18T01:48:41.8185178Z",
      "link": null
    },
    {
      "PostId": "a3dd6a41-bd76-48f1-a2fa-3aea04ac95b2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(just to get this post to update... stupid edit post restrictions... argh)\r\n\r\n-------\r\n\r\n\"//  ?->_ INQUIRY: What do we put here to make it loop? Do we call the function again?  _<-? (Richard)\"\r\n\r\n---------\r\n\r\ndepends on the parent of the scripting\r\n\r\n-----\r\n\r\nexamples of looping:\r\n\r\n(with a check to end/escape the loop, so it's not an infinite loop and crashes quest, lol)\r\n\r\n--------\r\n\r\ntail recursion looping (very easy to do/implement/simple-easy scrpting design, though if you got a long chain of multiple loopings and/or are using 'get input / show menu / ShowMenu / ask / Ask / etc stuff that gets-waits-for input' you're going to likely have errors, and will need to be much more creative in your design to get it working, lol):\r\n\r\n(I'm not sure with quest and it's 'while' Function and/or how it'd be done, if it can be done, with iteration design in quest, but in for normal programming, tail recursion can always be done instead with iteration, which is much more efficient than doing tail recursion)\r\n\r\n```\r\n<function name=\"hi_function\">\r\n  msg (\"hi\")\r\n  if (RandomChance (50)) {\r\n    hi_function\r\n  }\r\n</function>\r\n\r\n<object name=\"hi_object\">\r\n  <attr name=\"hi_script_attribute\" type=\"script\">\r\n    msg (\"hi\")\r\n    if (RandomChance (50)) {\r\n      do (hi_object, \"hi_script_attribute\")\r\n    }\r\n  </attr>\r\n</object>\r\n```\r\n\r\n-------------------------\r\n\r\nusing the 'while' Function for looping (if the 'while' Function is more efficient than tail recursion, then NEVER use tail recursion:\r\n\r\n(I hope this works... I've not gotten around to testing the 'while' Function, yet... lol. There may be issues with it and/or just my code designs below)\r\n\r\n```\r\n<function name=\"hi_function\">\r\n  terminator_boolean_variable = false\r\n  while (not terminator_boolean_variable) {\r\n    msg (\"hi\")\r\n    if (RandomChance (50)) {\r\n      terminator_boolean_variable = true\r\n    }\r\n  }\r\n</function>\r\n\r\n<object name=\"hi_object\">\r\n  <attr name=\"hi_script_attribute\" type=\"script\">\r\n    terminator_boolean_variable = false\r\n    while (not terminator_boolean_variable) {\r\n      msg (\"hi\")\r\n      if (RandomChance (50)) {\r\n        terminator_boolean_variable = true\r\n      }\r\n    }\r\n  </attr>\r\n</object>\r\n```\r\n\r\n------------------\r\n\r\nif you need Arguments/Parameters and/or a return type, and you want/need to use an Object's Script Attribute, you can do so by using Delegates with it (and it'd be of: type=\"NAME_OF_DELEGATE\", instead of: type=\"script\", so it's not actual a 'Script Attribute' anymore):\r\n\r\nif you're interested in learning how to use Delegates, let me know.\r\n\r\n---------------\r\n\r\nusing iteration for looping in quest (if this can be done, NEVER use tail recursion):\r\n\r\nI HAVE NO IDEA HOW THIS IS DONE (if it can even be done)\r\n\r\n---------------\r\n\r\nagain, ask if you got any questions and/or need hlp with anything (or let me know if my code doesn't work, lol)",
      "EditableFormat": "markdown",
      "HTML": "<p>(just to get this post to update... stupid edit post restrictions... argh)</p>\n<hr>\n<p>\"//  ?-&gt;_ INQUIRY: What do we put here to make it loop? Do we call the function again?  _&lt;-? (Richard)\"</p>\n<hr>\n<p>depends on the parent of the scripting</p>\n<hr>\n<p>examples of looping:</p>\n<p>(with a check to end/escape the loop, so it's not an infinite loop and crashes quest, lol)</p>\n<hr>\n<p>tail recursion looping (very easy to do/implement/simple-easy scrpting design, though if you got a long chain of multiple loopings and/or are using 'get input / show menu / ShowMenu / ask / Ask / etc stuff that gets-waits-for input' you're going to likely have errors, and will need to be much more creative in your design to get it working, lol):</p>\n<p>(I'm not sure with quest and it's 'while' Function and/or how it'd be done, if it can be done, with iteration design in quest, but in for normal programming, tail recursion can always be done instead with iteration, which is much more efficient than doing tail recursion)</p>\n<pre><code>&lt;function name=\"hi_function\"&gt;\n  msg (\"hi\")\n  if (RandomChance (50)) {\n    hi_function\n  }\n&lt;/function&gt;\n\n&lt;object name=\"hi_object\"&gt;\n  &lt;attr name=\"hi_script_attribute\" type=\"script\"&gt;\n    msg (\"hi\")\n    if (RandomChance (50)) {\n      do (hi_object, \"hi_script_attribute\")\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>using the 'while' Function for looping (if the 'while' Function is more efficient than tail recursion, then NEVER use tail recursion:</p>\n<p>(I hope this works... I've not gotten around to testing the 'while' Function, yet... lol. There may be issues with it and/or just my code designs below)</p>\n<pre><code>&lt;function name=\"hi_function\"&gt;\n  terminator_boolean_variable = false\n  while (not terminator_boolean_variable) {\n    msg (\"hi\")\n    if (RandomChance (50)) {\n      terminator_boolean_variable = true\n    }\n  }\n&lt;/function&gt;\n\n&lt;object name=\"hi_object\"&gt;\n  &lt;attr name=\"hi_script_attribute\" type=\"script\"&gt;\n    terminator_boolean_variable = false\n    while (not terminator_boolean_variable) {\n      msg (\"hi\")\n      if (RandomChance (50)) {\n        terminator_boolean_variable = true\n      }\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>if you need Arguments/Parameters and/or a return type, and you want/need to use an Object's Script Attribute, you can do so by using Delegates with it (and it'd be of: type=\"NAME_OF_DELEGATE\", instead of: type=\"script\", so it's not actual a 'Script Attribute' anymore):</p>\n<p>if you're interested in learning how to use Delegates, let me know.</p>\n<hr>\n<p>using iteration for looping in quest (if this can be done, NEVER use tail recursion):</p>\n<p>I HAVE NO IDEA HOW THIS IS DONE (if it can even be done)</p>\n<hr>\n<p>again, ask if you got any questions and/or need hlp with anything (or let me know if my code doesn't work, lol)</p>\n\n",
      "PostDate": "2017-07-18T00:45:27.9235083Z",
      "LastEditDate": "2017-07-18T00:56:54.9912668Z",
      "link": null
    },
    {
      "PostId": "606b3240-f033-4ee1-887c-2c9afb963252",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "non-tail recursion is a completely different beast of looping... true recursion, which is very different from simple looping.\r\n\r\nht.tps://www.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion\r\netc etc etc resources, but the khan academy seems like it'll explain recursion well (there's a 'next page or whatever it is called' button at the bottom, it has more pages)",
      "EditableFormat": "markdown",
      "HTML": "<p>non-tail recursion is a completely different beast of looping... true recursion, which is very different from simple looping.</p>\n<p>ht.tps://www.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion<br>\netc etc etc resources, but the khan academy seems like it'll explain recursion well (there's a 'next page or whatever it is called' button at the bottom, it has more pages)</p>\n\n",
      "PostDate": "2017-07-18T01:03:54.5032814Z",
      "LastEditDate": "2017-07-18T01:09:35.2003659Z",
      "link": null
    },
    {
      "PostId": "b9ad553d-4e7f-4361-8b9a-4910b3563265",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alright, HK! Thanks much!\r\n\r\nI believe I've got it going on now! (I hope JK does too!)\r\n\r\n---\r\nThis is a function named ```main_room_exits```\r\n\r\nThe first room calls it in its ```After entering the room```script.\r\n\r\nHere we go:\r\n\r\n```\r\n\r\nmsg (\"The sky above is dominated by dark cloud... its not going to be friendly.</b>\")\r\nget input {\r\n  if (LCase (result) = \"e\" or LCase (result) = \"east\") {\r\n    msg (\"&gt; \"+result+\"<br/>Against your better judgement, you decide to head east...\")\r\n    HandleSingleCommand (\"e\")\r\n  }\r\n  else if (LCase (result) = \"w\" or LCase (result) = \"west\") {\r\n    msg (\"&gt; \"+result+\"<br/>Alternatively you go west.\")\r\n    HandleSingleCommand (\"w\")\r\n  }\r\n  else {\r\n    msg (\"&gt; {result}<br/>Wrong input. Try again.\")\r\n    main_room_exits //    <--INQUIRY Is this tail recursion?\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n<details><summary>Click to view STDOUT</summary>\r\n>You are in the first room.\r\nYou can go east or west.\r\nThe sky above is dominated by dark cloud... its not going to be friendly.\r\n>\\>e\r\nAgainst your better judgement, you decide to head east...\r\n>\r\n>You are in a room to the east of the first room.\r\nYou can go west.\r\n>\r\n> \\>w\r\n>\r\n>You are in the first room.\r\nYou can go east or west.\r\nThe sky above is dominated by dark cloud... its not going to be friendly.\r\n>\\> w\r\nAlternatively you go west.\r\n>\r\n>You are in a room to the west of the first room.\r\nYou can go east.\r\n>\r\n>\\> e\r\n>\r\n>You are in the first room.\r\nYou can go east or west.\r\nThe sky above is dominated by dark cloud... its not going to be friendly.\r\n >\\>dilly dally\r\nWrong input. Try again.\r\nThe sky above is dominated by dark cloud... its not going to be friendly.\r\n>\\> jump\r\nWrong input. Try again.\r\nThe sky above is dominated by dark cloud... its not going to be friendly.\r\n> \\>e\r\nAgainst your better judgement, you decide to head east...\r\n>\r\n>You are in a room to the east of the first room.\r\nYou can go west.\r\n\r\n</details>\r\n\r\n<details><summary>Click here to view the code for the entire, three room game</summary>\r\n\r\n```\r\n\r\n\r\n<!--Saved by Quest 5.6.6108.15891-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"tester2\">\r\n    <gameid>22411e75-0166-4656-a7a1-bf7c320fb92b</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    </game>\r\n  <object name=\"the first room\">\r\n    <inherit name=\"editor_room\" />\r\n    <description type=\"script\">\r\n    </description>\r\n    <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    <enter type=\"script\">\r\n      main_room_exits\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit alias=\"east\" to=\"room to the east of the first room\">\r\n      <inherit name=\"eastdirection\" />\r\n      <scenery type=\"boolean\">false</scenery>\r\n    </exit>\r\n    <exit alias=\"west\" to=\"room to the west of the first room\">\r\n      <inherit name=\"westdirection\" />\r\n      <scenery type=\"boolean\">false</scenery>\r\n    </exit>\r\n  </object>\r\n  <object name=\"room to the east of the first room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"west\" to=\"the first room\">\r\n      <inherit name=\"westdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room to the west of the first room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"east\" to=\"the first room\">\r\n      <inherit name=\"eastdirection\" />\r\n    </exit>\r\n  </object>\r\n  \r\n  <function name=\"main_room_exits\"><![CDATA[\r\n    msg (\"The sky above is dominated by dark cloud... its not going to be friendly.</b>\")\r\n    get input {\r\n      if (LCase (result) = \"e\" or LCase (result) = \"east\") {\r\n        msg (\"&gt; \"+result+\"<br/>Against your better judgement, you decide to head east...\")\r\n        HandleSingleCommand (\"e\")\r\n      }\r\n      else if (LCase (result) = \"w\" or LCase (result) = \"west\") {\r\n        msg (\"&gt; \"+result+\"<br/>Alternatively you go west.\")\r\n        HandleSingleCommand (\"w\")\r\n      }\r\n      else {\r\n        msg (\"&gt; {result}<br/>Wrong input. Try again.\")\r\n        main_room_exits\r\n      }\r\n    }\r\n  ]]></function>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Alright, HK! Thanks much!</p>\n<p>I believe I've got it going on now! (I hope JK does too!)</p>\n<hr>\n<p>This is a function named <code>main_room_exits</code></p>\n<p>The first room calls it in its <code>After entering the room</code>script.</p>\n<p>Here we go:</p>\n<pre><code>\nmsg (\"The sky above is dominated by dark cloud... its not going to be friendly.&lt;/b&gt;\")\nget input {\n  if (LCase (result) = \"e\" or LCase (result) = \"east\") {\n    msg (\"&amp;gt; \"+result+\"&lt;br/&gt;Against your better judgement, you decide to head east...\")\n    HandleSingleCommand (\"e\")\n  }\n  else if (LCase (result) = \"w\" or LCase (result) = \"west\") {\n    msg (\"&amp;gt; \"+result+\"&lt;br/&gt;Alternatively you go west.\")\n    HandleSingleCommand (\"w\")\n  }\n  else {\n    msg (\"&amp;gt; {result}&lt;br/&gt;Wrong input. Try again.\")\n    main_room_exits //    &lt;--INQUIRY Is this tail recursion?\n  }\n}\n</code></pre>\n<hr>\n<details><summary>Click to view STDOUT</summary>\n&gt;You are in the first room.\nYou can go east or west.\nThe sky above is dominated by dark cloud... its not going to be friendly.\n&gt;\\&gt;e\nAgainst your better judgement, you decide to head east...\n&gt;\n&gt;You are in a room to the east of the first room.\nYou can go west.\n&gt;\n&gt; \\&gt;w\n&gt;\n&gt;You are in the first room.\nYou can go east or west.\nThe sky above is dominated by dark cloud... its not going to be friendly.\n&gt;\\&gt; w\nAlternatively you go west.\n&gt;\n&gt;You are in a room to the west of the first room.\nYou can go east.\n&gt;\n&gt;\\&gt; e\n&gt;\n&gt;You are in the first room.\nYou can go east or west.\nThe sky above is dominated by dark cloud... its not going to be friendly.\n &gt;\\&gt;dilly dally\nWrong input. Try again.\nThe sky above is dominated by dark cloud... its not going to be friendly.\n&gt;\\&gt; jump\nWrong input. Try again.\nThe sky above is dominated by dark cloud... its not going to be friendly.\n&gt; \\&gt;e\nAgainst your better judgement, you decide to head east...\n&gt;\n&gt;You are in a room to the east of the first room.\nYou can go west.\n</details>\n<details><summary>Click here to view the code for the entire, three room game</summary>\n<pre><code>\n\n&lt;!--Saved by Quest 5.6.6108.15891--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"tester2\"&gt;\n    &lt;gameid&gt;22411e75-0166-4656-a7a1-bf7c320fb92b&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;/game&gt;\n  &lt;object name=\"the first room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;description type=\"script\"&gt;\n    &lt;/description&gt;\n    &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n    &lt;enter type=\"script\"&gt;\n      main_room_exits\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"east\" to=\"room to the east of the first room\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n      &lt;scenery type=\"boolean\"&gt;false&lt;/scenery&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"west\" to=\"room to the west of the first room\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n      &lt;scenery type=\"boolean\"&gt;false&lt;/scenery&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room to the east of the first room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"west\" to=\"the first room\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room to the west of the first room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"east\" to=\"the first room\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  \n  &lt;function name=\"main_room_exits\"&gt;&lt;![CDATA[\n    msg (\"The sky above is dominated by dark cloud... its not going to be friendly.&lt;/b&gt;\")\n    get input {\n      if (LCase (result) = \"e\" or LCase (result) = \"east\") {\n        msg (\"&amp;gt; \"+result+\"&lt;br/&gt;Against your better judgement, you decide to head east...\")\n        HandleSingleCommand (\"e\")\n      }\n      else if (LCase (result) = \"w\" or LCase (result) = \"west\") {\n        msg (\"&amp;gt; \"+result+\"&lt;br/&gt;Alternatively you go west.\")\n        HandleSingleCommand (\"w\")\n      }\n      else {\n        msg (\"&amp;gt; {result}&lt;br/&gt;Wrong input. Try again.\")\n        main_room_exits\n      }\n    }\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2017-07-18T01:09:43.0071272Z",
      "LastEditDate": "2017-07-18T01:46:19.7788848Z",
      "link": null
    },
    {
      "PostId": "7d98650f-e161-411f-9dae-8165e81ce051",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Umm...\r\n\r\nI just used tail recursion; didn't I?\r\n\r\nWhen I ended the function by calling the same function again in the ```else``` statement?\r\n\r\n(Trying to read up on tail recursion online and going cross-eyed... They explain the basics of recursion, which I comprehend, in detail. Then all the sites flip to examples of tail recursion which are all written in programming languages I don't speak (yet).)",
      "EditableFormat": "markdown",
      "HTML": "<p>Umm...</p>\n<p>I just used tail recursion; didn't I?</p>\n<p>When I ended the function by calling the same function again in the <code>else</code> statement?</p>\n<p>(Trying to read up on tail recursion online and going cross-eyed... They explain the basics of recursion, which I comprehend, in detail. Then all the sites flip to examples of tail recursion which are all written in programming languages I don't speak (yet).)</p>\n\n",
      "PostDate": "2017-07-18T01:41:36.1718379Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "50ff96ab-a275-4995-abc1-641a205938ed",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "really irritating are these post editing restrictions...  argh... come on.... update this post....\r\n\r\n-----------\r\n\r\nya, 'tail recursion', in quest is the easiest way to do looping: you just call the function (using Functions as an example) again at the end of your Function's scripting (a bit more nuanced as, you can have mulitple 'ends' of scripting, which are not at the physical end-bottom of them, but hopefully you get the idea).\r\n\r\nyou can use tail-recursion (or if you don't like the use of the name of it, just think of it as looping instead) looping without any likely notice'able performance (slowness) issues. Don't worry of it being more 'inefficient', as I'm just talking about at micro/macro level or extremes of complex programs (doing ka zillions of operations, which isn't the case with game making with quest, lol).\r\n\r\nhere's an example:\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    hi_function // in the GUI/Editor this is: run as script -> add new script -> 'scripts' section/category -> 'call function' Script -> Name: hi_function, (do NOT 'ADD' in any Parameters, for this case, as our 'hi_function' Function doesn't use any inputs)\r\n  </attr>\r\n</game>\r\n\r\n<function name=\"hi_function\">\r\n  msg (\"hi\")\r\n  if (RandomChance (50)) { // this 'if check' is just so it's not an infinite loop (which would crash quest)\r\n    hi_function // calling the function again (looping it) (tail-recursion looping)\r\n  }\r\n</function>\r\n```\r\n\r\n-------------------\r\n\r\ndon't worry about the example code they give in other programming languages:\r\n\r\nas there's LOTS of scripting languages out there and (not too many) full-bore programming languages\r\n\r\npeople usually just specialize in one full-bore programming language, while being able to quickly learn (as you see more and more code, you can at least quickly read/understand whatever scripting language --- though it still takes some time to get familiar with their syntax structures and etc other stuff for writing them) whatever scripting language(s) as they need/want to use them, as scripting is scripting (you just got to learn that scripting language's syntax and etc stuff).",
      "EditableFormat": "markdown",
      "HTML": "<p>really irritating are these post editing restrictions...  argh... come on.... update this post....</p>\n<hr>\n<p>ya, 'tail recursion', in quest is the easiest way to do looping: you just call the function (using Functions as an example) again at the end of your Function's scripting (a bit more nuanced as, you can have mulitple 'ends' of scripting, which are not at the physical end-bottom of them, but hopefully you get the idea).</p>\n<p>you can use tail-recursion (or if you don't like the use of the name of it, just think of it as looping instead) looping without any likely notice'able performance (slowness) issues. Don't worry of it being more 'inefficient', as I'm just talking about at micro/macro level or extremes of complex programs (doing ka zillions of operations, which isn't the case with game making with quest, lol).</p>\n<p>here's an example:</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    hi_function // in the GUI/Editor this is: run as script -&gt; add new script -&gt; 'scripts' section/category -&gt; 'call function' Script -&gt; Name: hi_function, (do NOT 'ADD' in any Parameters, for this case, as our 'hi_function' Function doesn't use any inputs)\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"hi_function\"&gt;\n  msg (\"hi\")\n  if (RandomChance (50)) { // this 'if check' is just so it's not an infinite loop (which would crash quest)\n    hi_function // calling the function again (looping it) (tail-recursion looping)\n  }\n&lt;/function&gt;\n</code></pre>\n<hr>\n<p>don't worry about the example code they give in other programming languages:</p>\n<p>as there's LOTS of scripting languages out there and (not too many) full-bore programming languages</p>\n<p>people usually just specialize in one full-bore programming language, while being able to quickly learn (as you see more and more code, you can at least quickly read/understand whatever scripting language --- though it still takes some time to get familiar with their syntax structures and etc other stuff for writing them) whatever scripting language(s) as they need/want to use them, as scripting is scripting (you just got to learn that scripting language's syntax and etc stuff).</p>\n\n",
      "PostDate": "2017-07-18T02:22:41.5032269Z",
      "LastEditDate": "2017-07-18T02:35:37.5992805Z",
      "link": null
    },
    {
      "PostId": "2683e601-9441-48ed-9436-ff53b31108bc",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "update my post... argh\r\n\r\n----------------\r\n\r\nhere's my own older (and poor/bad/ineffient) example use of tail-recursion for the character creation system I'm still currently working on for my RPG (laughs):\r\n\r\n(at the time, I was brain-dead, not realizing to simply make one dynamic function, via parameters, to handle the different actions I wanted, but instead I made multiple redundent functions, all doing the same thing... as I said, I was brain dead, at the time, lol)\r\n\r\nht.tp://textadventures.co.uk/forum/samples/topic/4988/character-creation-crude-code-and-sample-game\r\n\r\n--------------\r\n\r\nin general, visually this is how recursion works:\r\n\r\nht.tp://www.cs.princeton.edu/courses/archive/spr03/cs320/notes/7-1.pdf (anytime you do a function, it's like you created an Attribute/Object, called an 'Activation Record', which holds the data involved in that function, so recursion, while powerful for problem solving, due to its nature of operation, does a lot of functions, and thus a lot of activation records, which quickly eats of memory)\r\n\r\nrecursive_function_A\r\n-> recursive_function_B\r\n->-> recursive_function_C\r\n->->-> recursive_function_d\r\n->->->-> base_case reached, go back to previous recursive function (plugging in the base case / value) to finish it\r\n<-<-<- recursive_function_d (use its value to plug into the previous recursive function to finsih it) // activation record (funct d is now done/finished/completed) destroyed (get back the memory it was using up)\r\n<-<- recursive_function_C (use its value to plug into the previous recursive function to finish it) // activation record (funct c is now done/finished/completed) destroyed (get back the memory it was using up)\r\n<- recursive_function_B (use its value to plug into the previous recursive function to finish it) // activation record (funct b is now done/finished/compelted) destroyed (get back the memory it was using up)\r\nrecursive_function_A // activation record (funct a is now done/finished/completed) destroyed (get back the memory it was using up) ------> final value (the \"answer/result\")\r\n\r\nI wish I could find this as a drawing... with boxes... (as it's done in one of my school class programming books) but I've not come across it yet...\r\n\r\nWOOT....\r\n\r\nfound a link that has it:\r\n\r\nht.tp://compsci.hunter.cuny.edu/~sweiss/course_materials/csci235/lecture_notes/chapter_02.pdf\r\n\r\njust read on down a bit... you'll get to the box diagrams of how recursion works",
      "EditableFormat": "markdown",
      "HTML": "<p>update my post... argh</p>\n<hr>\n<p>here's my own older (and poor/bad/ineffient) example use of tail-recursion for the character creation system I'm still currently working on for my RPG (laughs):</p>\n<p>(at the time, I was brain-dead, not realizing to simply make one dynamic function, via parameters, to handle the different actions I wanted, but instead I made multiple redundent functions, all doing the same thing... as I said, I was brain dead, at the time, lol)</p>\n<p>ht.tp://textadventures.co.uk/forum/samples/topic/4988/character-creation-crude-code-and-sample-game</p>\n<hr>\n<p>in general, visually this is how recursion works:</p>\n<p>ht.tp://www.cs.princeton.edu/courses/archive/spr03/cs320/notes/7-1.pdf (anytime you do a function, it's like you created an Attribute/Object, called an 'Activation Record', which holds the data involved in that function, so recursion, while powerful for problem solving, due to its nature of operation, does a lot of functions, and thus a lot of activation records, which quickly eats of memory)</p>\n<p>recursive_function_A<br>\n-&gt; recursive_function_B<br>\n-&gt;-&gt; recursive_function_C<br>\n-&gt;-&gt;-&gt; recursive_function_d<br>\n-&gt;-&gt;-&gt;-&gt; base_case reached, go back to previous recursive function (plugging in the base case / value) to finish it<br>\n&lt;-&lt;-&lt;- recursive_function_d (use its value to plug into the previous recursive function to finsih it) // activation record (funct d is now done/finished/completed) destroyed (get back the memory it was using up)<br>\n&lt;-&lt;- recursive_function_C (use its value to plug into the previous recursive function to finish it) // activation record (funct c is now done/finished/completed) destroyed (get back the memory it was using up)<br>\n&lt;- recursive_function_B (use its value to plug into the previous recursive function to finish it) // activation record (funct b is now done/finished/compelted) destroyed (get back the memory it was using up)<br>\nrecursive_function_A // activation record (funct a is now done/finished/completed) destroyed (get back the memory it was using up) ------&gt; final value (the \"answer/result\")</p>\n<p>I wish I could find this as a drawing... with boxes... (as it's done in one of my school class programming books) but I've not come across it yet...</p>\n<p>WOOT....</p>\n<p>found a link that has it:</p>\n<p>ht.tp://compsci.hunter.cuny.edu/~sweiss/course_materials/csci235/lecture_notes/chapter_02.pdf</p>\n<p>just read on down a bit... you'll get to the box diagrams of how recursion works</p>\n\n",
      "PostDate": "2017-07-18T02:56:41.9042874Z",
      "LastEditDate": "2017-07-18T03:28:38.4471687Z",
      "link": null
    },
    {
      "PostId": "380cd45f-b99e-4659-80df-23bcf40ec1c7",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, okay: so it's cool to use tail recursion in Quest...\r\n\r\nI misread your earlier post. I thought you said NEVER use tail recursion.\r\n\r\nYou __**actually**__ said:\r\n\r\n>using iteration for looping in quest (if this can be done, NEVER use tail recursion):\r\n>\r\n>I HAVE NO IDEA HOW THIS IS DONE (if it can even be done)\r\n\r\n(Sometimes I'm skimming when I think I'm actually reading.)\r\n\r\n---\r\nIteration...\r\n\r\nIs that something like this?\r\n\r\n```\r\n<turnscript name=\"iteration\">\r\n      <enabled />\r\n      <script>\r\n        x = 5\r\n        while (not x = 1) {\r\n          x = x -1\r\n          msg (\"Just subtracted 1. Now x is \"+x+\".\")\r\n        }\r\n      </script>\r\n    </turnscript\r\n```\r\n\r\nWhen that script is enabled, you get this output in 1 turn:\r\n\r\n>\\> e\r\nAgainst your better judgement, you decide to head east...\r\n>\r\n>You are in a room to the east of the first room.\r\nYou can go west.\r\nJust subtracted 1. Now x is 4.\r\nJust subtracted 1. Now x is 3.\r\nJust subtracted 1. Now x is 2.\r\nJust subtracted 1. Now x is 1.\r\n\r\n\r\n<hr style=\"border-top: 14px solid blue\"/>\r\n\r\n### **@Jennifer**\r\n#### Sorry, I didn't mean to take over your thread, but I'm addicted to learning how to do things in Quest!\r\n\r\n(At least we pretty much kept on topic...)\r\n<hr style=\"border-top: 14px solid blue\"/>",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, okay: so it's cool to use tail recursion in Quest...</p>\n<p>I misread your earlier post. I thought you said NEVER use tail recursion.</p>\n<p>You <strong><strong>actually</strong></strong> said:</p>\n<blockquote>\n<p>using iteration for looping in quest (if this can be done, NEVER use tail recursion):</p>\n<p>I HAVE NO IDEA HOW THIS IS DONE (if it can even be done)</p>\n</blockquote>\n<p>(Sometimes I'm skimming when I think I'm actually reading.)</p>\n<hr>\n<p>Iteration...</p>\n<p>Is that something like this?</p>\n<pre><code>&lt;turnscript name=\"iteration\"&gt;\n      &lt;enabled /&gt;\n      &lt;script&gt;\n        x = 5\n        while (not x = 1) {\n          x = x -1\n          msg (\"Just subtracted 1. Now x is \"+x+\".\")\n        }\n      &lt;/script&gt;\n    &lt;/turnscript\n</code></pre>\n<p>When that script is enabled, you get this output in 1 turn:</p>\n<blockquote>\n<p>&gt; e<br>\nAgainst your better judgement, you decide to head east...</p>\n<p>You are in a room to the east of the first room.<br>\nYou can go west.<br>\nJust subtracted 1. Now x is 4.<br>\nJust subtracted 1. Now x is 3.<br>\nJust subtracted 1. Now x is 2.<br>\nJust subtracted 1. Now x is 1.</p>\n</blockquote>\n<hr style=\"border-top: 14px solid blue\">\n<h3><strong>@Jennifer</strong></h3>\n<h4>Sorry, I didn't mean to take over your thread, but I'm addicted to learning how to do things in Quest!</h4>\n<p>(At least we pretty much kept on topic...)</p>\n<hr style=\"border-top: 14px solid blue\">\n\n",
      "PostDate": "2017-07-18T03:22:32.7787466Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a221dda4-67c7-46b8-867d-24d129c126be",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I should have said it like this:\r\n\r\nif there is noticable slow-down, and it's unbearable, then don't use tail-recursion, and instead use a less performance-hurting (less slow-down / more fast) design/operation, such as maybe the 'while' Function and/or however iteration would be done in quest (if it can be done)\r\n\r\n--------------------------------------\r\n\r\nI'm actually not even sure now how iteration for doing looping (instead of tail recursion) would be done in the full-bore programming languages now... (forgetting stuff... stupid summer break, lol)... or maybe I never knew how... meh, lol.\r\n\r\n-------------------------------------\r\n\r\nin general, this is iteration in quest:\r\n\r\n```\r\nforeach (item_variable, LIST) {\r\n  // whatever\r\n}\r\n\r\nor\r\n\r\nht.tp://docs.textadventures.co.uk/quest/scripts/for.html\r\n\r\nfor (optionally_used_variable, MIN, MAX, optional_:_interval/skip/count-step_value) {\r\n  // whatever\r\n}\r\n\r\nfor examples:\r\n\r\nfor (var = 0, 1, 10, 1) {\r\n  var = var + 1\r\n}\r\nmsg (var)\r\n\r\n// result/display: 10\r\n\r\n-------\r\n\r\nfor (var = 0, 1, 10, 2) {\r\n  var = var + 1\r\n}\r\nmsg (var)\r\n\r\n// result/display: 5\r\n\r\n-----\r\n\r\nfor (var = 0, 1, 10, 10) { // or maybe its: for (var = 0, 1, 10, 9), meh\r\n  var = var + 1\r\n}\r\nmsg (var)\r\n\r\n// result/display: 2\r\n\r\n-----\r\n\r\nfor (var = 0, 1, 10, 100) {\r\n  var = var + 1\r\n}\r\nmsg (var)\r\n\r\n// result/display: 1\r\n\r\n----\r\n\r\nfor (var, 1, 10, 1) {\r\n  // we don't have to use the Variable VARIABLE (my 'var' in these examples) at all, it's optional\r\n  msg (\"hi\")\r\n}\r\n\r\n// result/output:\r\n\r\nhi\r\nhi\r\nhi\r\nhi\r\nhi\r\nhi\r\nhi\r\nhi\r\nhi\r\nhi\r\n// I think that's 10 hi's, lol\r\n\r\n---\r\n\r\nso... I have no clue on how to implement a scripting's looping via using iteration.... (which can/should be done instead of tail-recursion). I'm totally baffled here.\r\n\r\nHow do we 'reset' the iteration (or either 'foreach' or 'for'), which would do the desired looping of it ??? I'm totally baffled (or blind...mind blind, lol), I'm totally stumped.",
      "EditableFormat": "markdown",
      "HTML": "<p>I should have said it like this:</p>\n<p>if there is noticable slow-down, and it's unbearable, then don't use tail-recursion, and instead use a less performance-hurting (less slow-down / more fast) design/operation, such as maybe the 'while' Function and/or however iteration would be done in quest (if it can be done)</p>\n<hr>\n<p>I'm actually not even sure now how iteration for doing looping (instead of tail recursion) would be done in the full-bore programming languages now... (forgetting stuff... stupid summer break, lol)... or maybe I never knew how... meh, lol.</p>\n<hr>\n<p>in general, this is iteration in quest:</p>\n<pre><code>foreach (item_variable, LIST) {\n  // whatever\n}\n\nor\n\nht.tp://docs.textadventures.co.uk/quest/scripts/for.html\n\nfor (optionally_used_variable, MIN, MAX, optional_:_interval/skip/count-step_value) {\n  // whatever\n}\n\nfor examples:\n\nfor (var = 0, 1, 10, 1) {\n  var = var + 1\n}\nmsg (var)\n\n// result/display: 10\n\n-------\n\nfor (var = 0, 1, 10, 2) {\n  var = var + 1\n}\nmsg (var)\n\n// result/display: 5\n\n-----\n\nfor (var = 0, 1, 10, 10) { // or maybe its: for (var = 0, 1, 10, 9), meh\n  var = var + 1\n}\nmsg (var)\n\n// result/display: 2\n\n-----\n\nfor (var = 0, 1, 10, 100) {\n  var = var + 1\n}\nmsg (var)\n\n// result/display: 1\n\n----\n\nfor (var, 1, 10, 1) {\n  // we don't have to use the Variable VARIABLE (my 'var' in these examples) at all, it's optional\n  msg (\"hi\")\n}\n\n// result/output:\n\nhi\nhi\nhi\nhi\nhi\nhi\nhi\nhi\nhi\nhi\n// I think that's 10 hi's, lol\n\n---\n\nso... I have no clue on how to implement a scripting's looping via using iteration.... (which can/should be done instead of tail-recursion). I'm totally baffled here.\n\nHow do we 'reset' the iteration (or either 'foreach' or 'for'), which would do the desired looping of it ??? I'm totally baffled (or blind...mind blind, lol), I'm totally stumped.\n</code></pre>\n\n",
      "PostDate": "2017-07-18T03:41:28.4091316Z",
      "LastEditDate": "2017-07-18T03:54:15.3442657Z",
      "link": null
    },
    {
      "PostId": "28f0b847-bf1c-4dba-8bcd-057b8010a616",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the 'while' is a type of 'loop', whereas 'iteration' is 'iteration' (not a 'loop')\r\n\r\nin some of the other full-bore programming languages the also got:\r\n\r\na 'do-while' loop: it DOES the scripting at least once, but multiple times depends on the 'while' condition being met:\r\n\r\n```\r\nC++ : ht.tps://www.tutorialspoint.com/cplusplus/cpp_do_while_loop.htm\r\n\r\nbool handled_boolean_variable = false;\r\n\r\ndo {\r\n  cout << \"hi\";\r\n  handled_boolean_variable = true;\r\n} while (!handled_boolean_variable);\r\n\r\n// -------------------------\r\n\r\nJava: ht.tps://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html\r\n\r\nbool handled_boolean_variable = false;\r\n\r\ndo {\r\n  System.out.println (\"hi\");\r\n  handled_boolean_variable = true;\r\n} while (!handled_boolean_variable);\r\n\r\n// ----------------\r\n\r\nPython: ht.tps://www.python.org/\r\n\r\n(I don't know it that well yet)\r\n\r\n(it's more, stream-lined: less typing, than C++/Java: no use of braces/brackets/etc)\r\n```\r\n\r\n--------\r\n\r\nerrr.....\r\n\r\nI guess the 'for' is considered as a 'loop', so iteration is 'looping' (or at least the 'for' iteration is considered as 'looping'), meh. I'm confusing myself too, lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>the 'while' is a type of 'loop', whereas 'iteration' is 'iteration' (not a 'loop')</p>\n<p>in some of the other full-bore programming languages the also got:</p>\n<p>a 'do-while' loop: it DOES the scripting at least once, but multiple times depends on the 'while' condition being met:</p>\n<pre><code>C++ : ht.tps://www.tutorialspoint.com/cplusplus/cpp_do_while_loop.htm\n\nbool handled_boolean_variable = false;\n\ndo {\n  cout &lt;&lt; \"hi\";\n  handled_boolean_variable = true;\n} while (!handled_boolean_variable);\n\n// -------------------------\n\nJava: ht.tps://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html\n\nbool handled_boolean_variable = false;\n\ndo {\n  System.out.println (\"hi\");\n  handled_boolean_variable = true;\n} while (!handled_boolean_variable);\n\n// ----------------\n\nPython: ht.tps://www.python.org/\n\n(I don't know it that well yet)\n\n(it's more, stream-lined: less typing, than C++/Java: no use of braces/brackets/etc)\n</code></pre>\n<hr>\n<p>errr.....</p>\n<p>I guess the 'for' is considered as a 'loop', so iteration is 'looping' (or at least the 'for' iteration is considered as 'looping'), meh. I'm confusing myself too, lol.</p>\n\n",
      "PostDate": "2017-07-18T04:10:11.4685541Z",
      "LastEditDate": "2017-07-18T04:28:25.1993777Z",
      "link": null
    },
    {
      "PostId": "8d2e82b9-63ce-4e2a-893f-8e8501b0a4c5",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK,\r\n\r\nSee if you think I've got the basics of  ```for``` figured out, please, sir:\r\n\r\n[http://textadventures.co.uk/forum/quest/topic/g8afycheqeydadaqkkc8pg/learning-or-trying-to-learn-how-to-use-for](http://textadventures.co.uk/forum/quest/topic/g8afycheqeydadaqkkc8pg/learning-or-trying-to-learn-how-to-use-for)",
      "EditableFormat": "markdown",
      "HTML": "<p>HK,</p>\n<p>See if you think I've got the basics of  <code>for</code> figured out, please, sir:</p>\n<p><a href=\"http://textadventures.co.uk/forum/quest/topic/g8afycheqeydadaqkkc8pg/learning-or-trying-to-learn-how-to-use-for\">http://textadventures.co.uk/forum/quest/topic/g8afycheqeydadaqkkc8pg/learning-or-trying-to-learn-how-to-use-for</a></p>\n\n",
      "PostDate": "2017-07-18T04:52:16.4228769Z",
      "LastEditDate": "2017-07-18T18:30:33.6946847Z",
      "link": null
    },
    {
      "PostId": "516d3555-0efb-4126-910c-fcc3dbd10625",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "yep, you got it correct, I messed up in my post above, as I get confused from quest's documentation of the use of 'for', in that the Variable is an Integer Variable and that it's defaulted to start at 0 (maybe you can still specify it's initial value: for (var = 8, min,max), not sure if this is built into quest or not for 'for', lol), thinking that 'for' in quest is different than it is in other languages, but it's not.\r\n\r\n-------\r\n\r\n'for' enables you to specify the number of iterations/loops (whereas 'foreach' iterates through all the items in a list: the 'ListCount' determines the number of iterations/loops for the 'foreach'), along with also being able to do some fancy stuff with it, too.",
      "EditableFormat": "markdown",
      "HTML": "<p>yep, you got it correct, I messed up in my post above, as I get confused from quest's documentation of the use of 'for', in that the Variable is an Integer Variable and that it's defaulted to start at 0 (maybe you can still specify it's initial value: for (var = 8, min,max), not sure if this is built into quest or not for 'for', lol), thinking that 'for' in quest is different than it is in other languages, but it's not.</p>\n<hr>\n<p>'for' enables you to specify the number of iterations/loops (whereas 'foreach' iterates through all the items in a list: the 'ListCount' determines the number of iterations/loops for the 'foreach'), along with also being able to do some fancy stuff with it, too.</p>\n\n",
      "PostDate": "2017-07-18T07:30:40.3083512Z",
      "LastEditDate": "2017-07-18T07:32:48.3951534Z",
      "link": null
    },
    {
      "PostId": "4896f87f-1c42-476b-9bf6-bf39209fa59b",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> you typed wrongly: LCASE (result)\r\n> there is no 'LCASE' Function in quest, hence the (unfortunately mis-leading/poor worded) error message\r\n> but, there is a 'LCase' Function, so to correct it, using this example of yours (fixed up):\r\n\r\nActually there is, kind of. Some functions are not case sensitive, and LCase is one, so it can be written LCASE. Eval is the same, and I do not know why. It is only the functions written in C#, but not all of them, for example msg _is_ case sensitive.\r\n\r\n> you do NOT want to be doing the 'foreach' design, that's very inefficient, for what we're trying to do with the directional stuff.\r\n\r\n`foreach`is often the easiest way, and when it goes to game development, creating code that is simple to write and to read is more efficient than writing complex code that you cannot understand when you look at it again in three months.\r\n\r\nIf you are worried about the speed your game is executed, the difference between `for` and `foreach` will be negligible. Quest probably runs about a dozen `foreach` every turn anyway as it updates the panes on the right, runs turn scripts, etc.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>you typed wrongly: LCASE (result)<br>\nthere is no 'LCASE' Function in quest, hence the (unfortunately mis-leading/poor worded) error message<br>\nbut, there is a 'LCase' Function, so to correct it, using this example of yours (fixed up):</p>\n</blockquote>\n<p>Actually there is, kind of. Some functions are not case sensitive, and LCase is one, so it can be written LCASE. Eval is the same, and I do not know why. It is only the functions written in C#, but not all of them, for example msg <em>is</em> case sensitive.</p>\n<blockquote>\n<p>you do NOT want to be doing the 'foreach' design, that's very inefficient, for what we're trying to do with the directional stuff.</p>\n</blockquote>\n<p><code>foreach</code>is often the easiest way, and when it goes to game development, creating code that is simple to write and to read is more efficient than writing complex code that you cannot understand when you look at it again in three months.</p>\n<p>If you are worried about the speed your game is executed, the difference between <code>for</code> and <code>foreach</code> will be negligible. Quest probably runs about a dozen <code>foreach</code> every turn anyway as it updates the panes on the right, runs turn scripts, etc.</p>\n\n",
      "PostDate": "2017-07-18T07:36:59.8445798Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "482fd5ec-9570-4c80-a433-b16042ba82e1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was refering to:\r\n\r\n```\r\nget input {\r\n  if (LCase (result) = \"e\" or LCase (result) = \"east\")  {\r\n  } else if (LCase (result) = \"w\" or LCase (result) = \"west\")  {\r\n  } else if (LCase (result) = \"s\" or LCase (result) = \"south\")  {\r\n  } else if (LCase (result) = \"n\" or LCase (result) = \"north\")  {\r\n  } else {\r\n  }\r\n}\r\n\r\n// ---------------------------\r\n\r\nvs (YUCK!):\r\n\r\neast_list = split (\"e;east\", \";\")\r\nwest_list = split (\"w;west\", \";\")\r\nnorth_list = split (\"n;north\", \";\")\r\nsouth_list = split (\"s;south\", \";\")\r\n\r\nhandled = false\r\n\r\nget input {\r\n  foreach (string_variable, east_list) {\r\n    if (LCase (result) = string_variable) {\r\n      handled = true\r\n    }\r\n  }\r\n  if (not handled) {\r\n    foreach (string_variable, west_list) {\r\n      if (LCase (result) = string_variable) {\r\n        handled = true\r\n      }\r\n    }\r\n  }\r\n  if (not handled) {\r\n    foreach (string_variable, north_list) {\r\n      if (LCase (result) = string_variable) {\r\n        handled = true\r\n      }\r\n    }\r\n  }\r\n  if (not handled) {\r\n    foreach (string_variable, south_list) {\r\n      if (LCase (result) = string_variable) {\r\n        handled = true\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n---------\r\n\r\nor, is the 'foreach' design, actually better? (doesn't seem like it can be, though I'm still a noob at knowing what algorithm designs are better/faster than others) (also, the 'foreach' design, is at least more work/typing, and maybe more confusing also for human understanding, I think than using the 'if' block design, but I could be wrong)",
      "EditableFormat": "markdown",
      "HTML": "<p>I was refering to:</p>\n<pre><code>get input {\n  if (LCase (result) = \"e\" or LCase (result) = \"east\")  {\n  } else if (LCase (result) = \"w\" or LCase (result) = \"west\")  {\n  } else if (LCase (result) = \"s\" or LCase (result) = \"south\")  {\n  } else if (LCase (result) = \"n\" or LCase (result) = \"north\")  {\n  } else {\n  }\n}\n\n// ---------------------------\n\nvs (YUCK!):\n\neast_list = split (\"e;east\", \";\")\nwest_list = split (\"w;west\", \";\")\nnorth_list = split (\"n;north\", \";\")\nsouth_list = split (\"s;south\", \";\")\n\nhandled = false\n\nget input {\n  foreach (string_variable, east_list) {\n    if (LCase (result) = string_variable) {\n      handled = true\n    }\n  }\n  if (not handled) {\n    foreach (string_variable, west_list) {\n      if (LCase (result) = string_variable) {\n        handled = true\n      }\n    }\n  }\n  if (not handled) {\n    foreach (string_variable, north_list) {\n      if (LCase (result) = string_variable) {\n        handled = true\n      }\n    }\n  }\n  if (not handled) {\n    foreach (string_variable, south_list) {\n      if (LCase (result) = string_variable) {\n        handled = true\n      }\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>or, is the 'foreach' design, actually better? (doesn't seem like it can be, though I'm still a noob at knowing what algorithm designs are better/faster than others) (also, the 'foreach' design, is at least more work/typing, and maybe more confusing also for human understanding, I think than using the 'if' block design, but I could be wrong)</p>\n\n",
      "PostDate": "2017-07-18T07:48:37.851594Z",
      "LastEditDate": "2017-07-18T07:51:58.234826Z",
      "link": null
    },
    {
      "PostId": "df8e4174-96cb-4ff5-ba9d-2f653070f904",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Or:\r\n```\r\nget input {\r\n  switch(LCase(result)) {\r\n    case (\"e\", \"east\") {\r\n      msg(\"You go east\")\r\n    }\r\n    case (\"n\", \"north\") {\r\n      msg(\"You go north\")\r\n    }\r\n    case (\"w\", \"west\") {\r\n      msg(\"You go west\")\r\n    }\r\n    case (\"s\", \"south\") {\r\n      msg(\"You go south\")\r\n    }\r\n    default {\r\n      AskTheDirection\r\n    }\r\n  }\r\n}\r\n```\r\nThis would need to be done in a function, `AskTheDirection`, which gets called recursively if the player types in something else.\r\n\r\nOr use a menu...",
      "EditableFormat": "markdown",
      "HTML": "<p>Or:</p>\n<pre><code>get input {\n  switch(LCase(result)) {\n    case (\"e\", \"east\") {\n      msg(\"You go east\")\n    }\n    case (\"n\", \"north\") {\n      msg(\"You go north\")\n    }\n    case (\"w\", \"west\") {\n      msg(\"You go west\")\n    }\n    case (\"s\", \"south\") {\n      msg(\"You go south\")\n    }\n    default {\n      AskTheDirection\n    }\n  }\n}\n</code></pre>\n<p>This would need to be done in a function, <code>AskTheDirection</code>, which gets called recursively if the player types in something else.</p>\n<p>Or use a menu...</p>\n\n",
      "PostDate": "2017-07-18T11:36:55.0668644Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "723da057-b89b-432f-b182-85632bacc9b3",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Didn't know you could do that in a switch -- have multiple instances separated by commas for a single case.  That wasn't covered in the tutorial : )",
      "EditableFormat": "markdown",
      "HTML": "<p>Didn't know you could do that in a switch -- have multiple instances separated by commas for a single case.  That wasn't covered in the tutorial : )</p>\n\n",
      "PostDate": "2017-07-20T03:59:33.1128944Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
