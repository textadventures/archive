{
  "Topic": {
    "TopicId": "rdfkjqd_ue_rgqbm3kzipq",
    "ForumId": "10",
    "Title": "Attaching and changing attributes of player ",
    "LastUpdated": "2018-07-11T06:14:05.1189189Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a1300347-303c-410a-bd56-8fae64e559c2",
      "UserId": 297354,
      "Username": "BROin_64",
      "AvatarUrl": "https://secure.gravatar.com/avatar/098171ed21f4d46a706ae5f3221ab313?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Greetings ! I start to make new game recently and ran into one problem.\r\nI'm not entiarly shure how exacly work attributes and how change them.\r\nWhat I whant to do is change player \"form\\status\" by using an item, but every time I use a debug menu, it's doesn't work properly as I want.\r\nI will gladly accept any help, thanks.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Greetings ! I start to make new game recently and ran into one problem.<br>\nI'm not entiarly shure how exacly work attributes and how change them.<br>\nWhat I whant to do is change player \"form\\status\" by using an item, but every time I use a debug menu, it's doesn't work properly as I want.<br>\nI will gladly accept any help, thanks.</p>\n\n",
      "PostDate": "2018-07-11T06:14:05.1189189Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d15778de-7d83-4b57-bd36-4220c27cb85d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n--------------------------------\r\n\r\nhere's some links to get you started (in particular, for Attribute usage and the 'if' Script usage, see my 'HK attributes and if script usage guide' link):\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c\r\n\r\n--------\r\n\r\nAttributes:\r\n\r\nin the GUI/Editor:\r\n\r\nadd new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = [EXPRESSION] VALUE_OR_EXPRESSION\r\n\r\nfor examples:\r\n\r\n(quest can parse/examine the Value, to know what type of Attribute you want it to be if the Attribute doesn't exist yet, as the Value Type must match up with the Attribute Type)\r\n\r\nset variable player.strength = [EXPRESSION] 100 // Integer Attribute storing an Integer Value\r\n\r\nset variable player.condition = [EXPRESSION] \"normal\" // String Attribute storing a String Value\r\n\r\nset variable orc.dead = [EXPRESSION] false // Boolean Attribute storing a Boolean Value\r\n\r\n// create (\"katana\") // for Object (pointer/reference) Attributes, the Value used, must be an actual existing Object, hence showing this line which would create a 'katana' Object, if the '//' comment symbols were removed to the left of 'create'\r\n\r\nset variable player.weapon = [EXPRESSION] katana // Object (pointer/reference) Attribute storing an Object (pointer/reference) Value\r\n\r\n----------------\r\n\r\nhuman brains do this automatically, but computers need to be helped with data types, as they do matter, we just handle them automatically with our brains, lol:\r\n\r\nData Types:\r\n\r\nStrings:\r\n\r\n(aka: text): a collection of characters (alphabet and numeric) and/or symbols (some, not all)\r\n\r\nanything within double quotes, is a String Value:\r\n\r\n\"1\" --- this is a String Value, and NOT an amount Value\r\n1 --- is an amount Value (an Integer)\r\n\r\nIntegers:\r\n\r\nany non-decimal/fractional number\r\n\r\nDoubles (Floats, Floating Points, decimal/fractional numbers):\r\n\r\nany decimal/fractional number\r\n\r\nBooleans:\r\n\r\neither it's a 'true' or 'false' Value\r\n\r\n---------------\r\n\r\nhere's an example for you:\r\n\r\n```\r\n<game name=\"NAME_OF_GAME\">\r\n</game>\r\n\r\n<object name=\"room\">\r\n\r\n  <inherit name=\"editor_room\" />\r\n\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"condition\" type=\"string\">normal</attr>\r\n\r\n  <attr name=\"changedcondition\" type=\"script\">\r\n\r\n    if (player.condition = \"poisoned\") {\r\n\r\n      poison_turnscript.enabled = true\r\n\r\n    } else {\r\n\r\n      if (poison_turnscript.enabled) {\r\n\r\n        poison_turnscript.enabled = false\r\n\r\n      }\r\n\r\n      if (player.condition = \"dead\") {\r\n\r\n        msg (\"You died or were killed\")\r\n\r\n        msg (\"GAME OVER\")\r\n\r\n        finish\r\n\r\n      }\r\n\r\n    }\r\n\r\n  </attr>\r\n\r\n  <attr name=\"life\" type=\"string\">999/999</attr>\r\n\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (player.current_life > player.maximum_life) {\r\n\r\n        player.current_life = player.maximum_life\r\n\r\n      } \r\n\r\n      player.life = player.current_life + \"/\" + player.maximum_life\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (player.current_life > player.maximum_life) {\r\n\r\n        player.current_life = player.maximum_life\r\n\r\n      } else if (player.current_life < 0) {\r\n\r\n        player.current_life = 0\r\n\r\n      }\r\n\r\n      player.life = player.current_life + \"/\" + player.maximum_life\r\n\r\n      if (player.current_life = 0) {\r\n\r\n        player.condition = \"dead\"\r\n\r\n      }\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n  <statusattributes type=\"stringdictionary\">\r\n\r\n    <item>\r\n\r\n      <key>life</key>\r\n\r\n      <value>Life: !</value>\r\n\r\n    </item>\r\n\r\n    <item>\r\n\r\n      <key>condition</key>\r\n\r\n      <value>Condition: !</value>\r\n\r\n    </item>\r\n\r\n  </statusattributes>\r\n\r\n</object>\r\n\r\n<object name=\"poisoned_apple\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"alias\" type=\"string\">poisoned apple</attr>\r\n\r\n  <attr name=\"eat\" type=\"script\">\r\n\r\n    if (player.condition = \"normal\")\r\n\r\n      player.condition = \"poisoned\"\r\n\r\n      msg (\"You eat the poisoned apple, poisoning yourself\")\r\n\r\n      poisoned_apple.parent = internal_storage\r\n\r\n    } else if (player.condition = \"poisoned\")\r\n\r\n      msg (\"You're already poisoned, silly\")\r\n\r\n    }\r\n\r\n    // handling another condition that prevent being poisoned, or that you don't want to be over-ridden/over-rided by it: you don't want your current condition to change to being the 'poisoned' condition:\r\n\r\n    // optional: \r\n    // else if (CONDITION_EXPRESSION) {\r\n    // }\r\n    // optional: more/additional else ifs\r\n    // optional:\r\n    // else {\r\n    // }\r\n\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"cure_poison_potion\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"alias\" type=\"string\">cure poison potion</attr>\r\n\r\n  <attr name=\"drink\" type=\"script\">\r\n\r\n    if (player.condition = \"poisoned\") {\r\n\r\n      player.condition = \"normal\"\r\n\r\n      msg (\"You use the pure poison item, curing you of poison\")\r\n\r\n      cure_poison_potion.parent = internal_storage\r\n\r\n    } else {\r\n\r\n      msg (\"You realize you're NOT poisoned, just in time, preventing you from wasting this item when it wasn't needed to be used\")\r\n\r\n    }\r\n\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"internal_storage\">\r\n</object>\r\n\r\n<verb>\r\n\r\n  <property>eat</property>\r\n\r\n  <pattern>eat</pattern>\r\n\r\n  <defaultexpression>You can't eat that!</defaultexpression>\r\n\r\n</verb>\r\n\r\n<verb>\r\n\r\n  <property>drink</property>\r\n\r\n  <pattern>drink</pattern>\r\n\r\n  <defaultexpression>You can't drink that!</defaultexpression>\r\n\r\n</verb>\r\n\r\n<turnscript name=\"poison_turnscript\">\r\n\r\n  <attr name=\"enabled\" type=\"boolean\">false</attr>\r\n\r\n  <script>\r\n\r\n      player.current_life = player.current_life - 100\r\n\r\n      msg (\"The poisoning takes its toll on you! (-100 current life)\")\r\n\r\n  </script>\r\n\r\n</turnscript>\r\n```\r\n\r\n------------------\r\n\r\nP.S.\r\n\r\nif you want to be able to have multiple conditions at the same time, then we'd need to use List/Dictionary Attributes for our 'condition' Attribute, and add/remove the condition items from our 'condition' List/Dictionary Attribute/s\r\n\r\n(or you can also instead do Boolean Attributes for each condition... which is easier than learning to use Lists/Dictionaries, but not as effective... if you got a lot of conditions and etc functionality with/involving them)\r\n\r\n(in my example, our single 'condition' Attribute is a String Attribute, which can only hold 1 Value, so only one condition at a time for this specific 'condition' String Attribute)",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>here's some links to get you started (in particular, for Attribute usage and the 'if' Script usage, see my 'HK attributes and if script usage guide' link):</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n<hr>\n<p>Attributes:</p>\n<p>in the GUI/Editor:</p>\n<p>add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)</p>\n<p>set variable NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = [EXPRESSION] VALUE_OR_EXPRESSION</p>\n<p>for examples:</p>\n<p>(quest can parse/examine the Value, to know what type of Attribute you want it to be if the Attribute doesn't exist yet, as the Value Type must match up with the Attribute Type)</p>\n<p>set variable player.strength = [EXPRESSION] 100 // Integer Attribute storing an Integer Value</p>\n<p>set variable player.condition = [EXPRESSION] \"normal\" // String Attribute storing a String Value</p>\n<p>set variable orc.dead = [EXPRESSION] false // Boolean Attribute storing a Boolean Value</p>\n<p>// create (\"katana\") // for Object (pointer/reference) Attributes, the Value used, must be an actual existing Object, hence showing this line which would create a 'katana' Object, if the '//' comment symbols were removed to the left of 'create'</p>\n<p>set variable player.weapon = [EXPRESSION] katana // Object (pointer/reference) Attribute storing an Object (pointer/reference) Value</p>\n<hr>\n<p>human brains do this automatically, but computers need to be helped with data types, as they do matter, we just handle them automatically with our brains, lol:</p>\n<p>Data Types:</p>\n<p>Strings:</p>\n<p>(aka: text): a collection of characters (alphabet and numeric) and/or symbols (some, not all)</p>\n<p>anything within double quotes, is a String Value:</p>\n<p>\"1\" --- this is a String Value, and NOT an amount Value<br>\n1 --- is an amount Value (an Integer)</p>\n<p>Integers:</p>\n<p>any non-decimal/fractional number</p>\n<p>Doubles (Floats, Floating Points, decimal/fractional numbers):</p>\n<p>any decimal/fractional number</p>\n<p>Booleans:</p>\n<p>either it's a 'true' or 'false' Value</p>\n<hr>\n<p>here's an example for you:</p>\n<pre><code>&lt;game name=\"NAME_OF_GAME\"&gt;\n&lt;/game&gt;\n\n&lt;object name=\"room\"&gt;\n\n  &lt;inherit name=\"editor_room\" /&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"condition\" type=\"string\"&gt;normal&lt;/attr&gt;\n\n  &lt;attr name=\"changedcondition\" type=\"script\"&gt;\n\n    if (player.condition = \"poisoned\") {\n\n      poison_turnscript.enabled = true\n\n    } else {\n\n      if (poison_turnscript.enabled) {\n\n        poison_turnscript.enabled = false\n\n      }\n\n      if (player.condition = \"dead\") {\n\n        msg (\"You died or were killed\")\n\n        msg (\"GAME OVER\")\n\n        finish\n\n      }\n\n    }\n\n  &lt;/attr&gt;\n\n  &lt;attr name=\"life\" type=\"string\"&gt;999/999&lt;/attr&gt;\n\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (player.current_life &gt; player.maximum_life) {\n\n        player.current_life = player.maximum_life\n\n      } \n\n      player.life = player.current_life + \"/\" + player.maximum_life\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (player.current_life &gt; player.maximum_life) {\n\n        player.current_life = player.maximum_life\n\n      } else if (player.current_life &lt; 0) {\n\n        player.current_life = 0\n\n      }\n\n      player.life = player.current_life + \"/\" + player.maximum_life\n\n      if (player.current_life = 0) {\n\n        player.condition = \"dead\"\n\n      }\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n  &lt;statusattributes type=\"stringdictionary\"&gt;\n\n    &lt;item&gt;\n\n      &lt;key&gt;life&lt;/key&gt;\n\n      &lt;value&gt;Life: !&lt;/value&gt;\n\n    &lt;/item&gt;\n\n    &lt;item&gt;\n\n      &lt;key&gt;condition&lt;/key&gt;\n\n      &lt;value&gt;Condition: !&lt;/value&gt;\n\n    &lt;/item&gt;\n\n  &lt;/statusattributes&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"poisoned_apple\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;poisoned apple&lt;/attr&gt;\n\n  &lt;attr name=\"eat\" type=\"script\"&gt;\n\n    if (player.condition = \"normal\")\n\n      player.condition = \"poisoned\"\n\n      msg (\"You eat the poisoned apple, poisoning yourself\")\n\n      poisoned_apple.parent = internal_storage\n\n    } else if (player.condition = \"poisoned\")\n\n      msg (\"You're already poisoned, silly\")\n\n    }\n\n    // handling another condition that prevent being poisoned, or that you don't want to be over-ridden/over-rided by it: you don't want your current condition to change to being the 'poisoned' condition:\n\n    // optional: \n    // else if (CONDITION_EXPRESSION) {\n    // }\n    // optional: more/additional else ifs\n    // optional:\n    // else {\n    // }\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"cure_poison_potion\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;cure poison potion&lt;/attr&gt;\n\n  &lt;attr name=\"drink\" type=\"script\"&gt;\n\n    if (player.condition = \"poisoned\") {\n\n      player.condition = \"normal\"\n\n      msg (\"You use the pure poison item, curing you of poison\")\n\n      cure_poison_potion.parent = internal_storage\n\n    } else {\n\n      msg (\"You realize you're NOT poisoned, just in time, preventing you from wasting this item when it wasn't needed to be used\")\n\n    }\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"internal_storage\"&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n\n  &lt;property&gt;eat&lt;/property&gt;\n\n  &lt;pattern&gt;eat&lt;/pattern&gt;\n\n  &lt;defaultexpression&gt;You can't eat that!&lt;/defaultexpression&gt;\n\n&lt;/verb&gt;\n\n&lt;verb&gt;\n\n  &lt;property&gt;drink&lt;/property&gt;\n\n  &lt;pattern&gt;drink&lt;/pattern&gt;\n\n  &lt;defaultexpression&gt;You can't drink that!&lt;/defaultexpression&gt;\n\n&lt;/verb&gt;\n\n&lt;turnscript name=\"poison_turnscript\"&gt;\n\n  &lt;attr name=\"enabled\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n  &lt;script&gt;\n\n      player.current_life = player.current_life - 100\n\n      msg (\"The poisoning takes its toll on you! (-100 current life)\")\n\n  &lt;/script&gt;\n\n&lt;/turnscript&gt;\n</code></pre>\n<hr>\n<p>P.S.</p>\n<p>if you want to be able to have multiple conditions at the same time, then we'd need to use List/Dictionary Attributes for our 'condition' Attribute, and add/remove the condition items from our 'condition' List/Dictionary Attribute/s</p>\n<p>(or you can also instead do Boolean Attributes for each condition... which is easier than learning to use Lists/Dictionaries, but not as effective... if you got a lot of conditions and etc functionality with/involving them)</p>\n<p>(in my example, our single 'condition' Attribute is a String Attribute, which can only hold 1 Value, so only one condition at a time for this specific 'condition' String Attribute)</p>\n\n",
      "PostDate": "2018-07-11T08:46:14.5134878Z",
      "LastEditDate": "2018-07-11T09:28:25.8552147Z",
      "link": null
    },
    {
      "PostId": "369d51ba-7984-47a4-8198-63433eb3c3f0",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It depends on if you are using online or offline version and what type of attribute it is. First it must be added to the players attributes then when wanting to change it you just call player.attribute  = (x) or if doing maths \r\nplayer.attribute = player.attribute  + 6 using maths you can use any math sign doesn't have to just add.",
      "EditableFormat": "markdown",
      "HTML": "<p>It depends on if you are using online or offline version and what type of attribute it is. First it must be added to the players attributes then when wanting to change it you just call player.attribute  = (x) or if doing maths<br>\nplayer.attribute = player.attribute  + 6 using maths you can use any math sign doesn't have to just add.</p>\n\n",
      "PostDate": "2018-07-12T11:31:53.9594497Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
