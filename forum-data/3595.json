{
  "Topic": {
    "TopicId": "3595",
    "ForumId": "18",
    "Title": "Expression operators",
    "LastUpdated": "2013-07-15T09:28:59+01:00",
    "ReplyCount": 22
  },
  "Posts": [
    {
      "PostId": "23852",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I have not been able to find a comprehensive list of the operators available in a Quest expression, but Quest uses FLEE (<!-- m --><a class=\"postlink\" href=\"http://flee.codeplex.com\">http://flee.codeplex.com</a><!-- m -->) and this page lists some of them:\n\n<!-- m --><a class=\"postlink\" href=\"http://flee.codeplex.com/wikipage?title=LanguageReference&amp;referringTitle=Home\">http://flee.codeplex.com/wikipage?title ... Title=Home</a><!-- m -->\n\nIronically, the one I needed the other day and discovered by testing is &quot;floor&quot;, which is not listed. So I'd say, if in doubt, experiment!\n\nI was surprised to see the conditional operator. It's a tertiary operator known as ?: in C-like languages. It can be a more compact form then the equivalent if/then/else statements, especially for assignments. I have some code to simplify!",
      "EditableFormat": "bbcode",
      "HTML": "I have not been able to find a comprehensive list of the operators available in a Quest expression, but Quest uses FLEE (<!-- m --><a class=\"postlink\" href=\"http://flee.codeplex.com\">http://flee.codeplex.com</a><!-- m -->) and this page lists some of them:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://flee.codeplex.com/wikipage?title=LanguageReference&amp;referringTitle=Home\">http://flee.codeplex.com/wikipage?title ... Title=Home</a><!-- m --><br/><br/>Ironically, the one I needed the other day and discovered by testing is &quot;floor&quot;, which is not listed. So I'd say, if in doubt, experiment!<br/><br/>I was surprised to see the conditional operator. It's a tertiary operator known as ?: in C-like languages. It can be a more compact form then the equivalent if/then/else statements, especially for assignments. I have some code to simplify!",
      "PostDate": "2013-04-02T00:55:37+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23853",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "For those interested in the conditional operator, here's an example (since the syntax is odd and unexpected, and it took a couple of tries to work it out):\n\n[code:3nxgader]cond = true\n\ns = if(cond, &quot;The truth shall set you free&quot;, &quot;Liar, liar, pants on fire&#46;&quot;)\n\nmsg(s)[/code:3nxgader]\n\nIt's a bit contrived (e.g. &quot;cond&quot; is jammed to true), but it shows how it works. This will print out &quot;The truth shall set you free&quot; since cond is true. If cond is set to false, it will print out the other string...",
      "EditableFormat": "bbcode",
      "HTML": "For those interested in the conditional operator, here's an example (since the syntax is odd and unexpected, and it took a couple of tries to work it out):<br/><br/><pre><code>cond = true<br/><br/>s = if(cond, &quot;The truth shall set you free&quot;, &quot;Liar, liar, pants on fire&#46;&quot;)<br/><br/>msg(s)</code></pre><br/><br/>It's a bit contrived (e.g. &quot;cond&quot; is jammed to true), but it shows how it works. This will print out &quot;The truth shall set you free&quot; since cond is true. If cond is set to false, it will print out the other string...",
      "PostDate": "2013-04-02T01:06:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23854",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Some more experimentation:\n\n[code:2zzini62]msg(pi)[/code:2zzini62]\n3.14159265358979\n\n[code:2zzini62]msg(e)[/code:2zzini62]\n2.71828182845905\n\n[code:2zzini62]msg(sqrt(2))[/code:2zzini62]\n1.4142135623731\n\n[code:2zzini62]msg(asin(1))[/code:2zzini62]\n1.5707963267949 (which is pi/2)\n\n[code:2zzini62]msg(abs(-3))[/code:2zzini62]\n3\n\n[code:2zzini62]msg(floor(2&#46;5))[/code:2zzini62]\n2\n\n[code:2zzini62]msg(ceiling(2&#46;5))[/code:2zzini62]\n3\n\n[code:2zzini62]msg(pow(2, 3))[/code:2zzini62]\n8\n\n[code:2zzini62]msg(log(e))[/code:2zzini62]\n1\n\nIt also supports trig functions like sin, cos, and tan, and even more exotic ones like sinh and cosh. (Note these use radians, not degrees.)",
      "EditableFormat": "bbcode",
      "HTML": "Some more experimentation:<br/><br/><pre><code>msg(pi)</code></pre><br/>3.14159265358979<br/><br/><pre><code>msg(e)</code></pre><br/>2.71828182845905<br/><br/><pre><code>msg(sqrt(2))</code></pre><br/>1.4142135623731<br/><br/><pre><code>msg(asin(1))</code></pre><br/>1.5707963267949 (which is pi/2)<br/><br/><pre><code>msg(abs(-3))</code></pre><br/>3<br/><br/><pre><code>msg(floor(2&#46;5))</code></pre><br/>2<br/><br/><pre><code>msg(ceiling(2&#46;5))</code></pre><br/>3<br/><br/><pre><code>msg(pow(2, 3))</code></pre><br/>8<br/><br/><pre><code>msg(log(e))</code></pre><br/>1<br/><br/>It also supports trig functions like sin, cos, and tan, and even more exotic ones like sinh and cosh. (Note these use radians, not degrees.)",
      "PostDate": "2013-04-02T01:18:33+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23856",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Holy smokes...\n\n[code:3296lecd]l = NewStringList()\nlist add(l, &quot;A&quot;)\nlist add(l, &quot;B&quot;)\nlist add(l, &quot;C&quot;)\nlist add(l, &quot;D&quot;)\nmsg(l&#91;2&#93;)[/code:3296lecd]\nC\n\n[code:3296lecd]d = NewDictionary()\ndictionary add(d, &quot;Name&quot;, &quot;Quest&quot;)\ndictionary add(d, &quot;Author&quot;, &quot;Alex Warren&quot;)\nmsg(d&#91;&quot;Name&quot;&#93;)[/code:3296lecd]\nQuest\n\nLife just got a whole lot simpler...",
      "EditableFormat": "bbcode",
      "HTML": "Holy smokes...<br/><br/><pre><code>l = NewStringList()<br/>list add(l, &quot;A&quot;)<br/>list add(l, &quot;B&quot;)<br/>list add(l, &quot;C&quot;)<br/>list add(l, &quot;D&quot;)<br/>msg(l&#91;2&#93;)</code></pre><br/>C<br/><br/><pre><code>d = NewDictionary()<br/>dictionary add(d, &quot;Name&quot;, &quot;Quest&quot;)<br/>dictionary add(d, &quot;Author&quot;, &quot;Alex Warren&quot;)<br/>msg(d&#91;&quot;Name&quot;&#93;)</code></pre><br/>Quest<br/><br/>Life just got a whole lot simpler...",
      "PostDate": "2013-04-02T01:39:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23862",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "yes indeed! Thank you for discovering this!\n\nnow, I just need to make use of lists and dictionaries more often, to save me the trouble of writing out long msg scripts!",
      "EditableFormat": "bbcode",
      "HTML": "yes indeed! Thank you for discovering this!<br/><br/>now, I just need to make use of lists and dictionaries more often, to save me the trouble of writing out long msg scripts!",
      "PostDate": "2013-04-02T03:02:11+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23869",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "The list and dictionary indexing is new to me too <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nThat's a lot neater than using the ListItem and DictionaryItem functions.\n\nThe math functions that are available are those from .NET's System.Math: <!-- m --><a class=\"postlink\" href=\"http://msdn.microsoft.com/en-us/library/system.math.aspx\">http://msdn.microsoft.com/en-us/library ... .math.aspx</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "The list and dictionary indexing is new to me too <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>That's a lot neater than using the ListItem and DictionaryItem functions.<br/><br/>The math functions that are available are those from .NET's System.Math: <!-- m --><a class=\"postlink\" href=\"http://msdn.microsoft.com/en-us/library/system.math.aspx\">http://msdn.microsoft.com/en-us/library ... .math.aspx</a><!-- m -->",
      "PostDate": "2013-04-02T11:04:42+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23872",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Great! Just what I was looking for. And I'm glad to see max and min in there, too. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (Not that I don't like Quest's if/then/else statements...)",
      "EditableFormat": "bbcode",
      "HTML": "Great! Just what I was looking for. And I'm glad to see max and min in there, too. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (Not that I don't like Quest's if/then/else statements...)",
      "PostDate": "2013-04-02T11:54:15+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23945",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Some bad news: some of the cooler aspects of this (like being able to use dict[key] for accessing dictionary values and the ternary comma operator) do *not* work in published games. What works fine from the Quest editor gives odd error messages when the .quest game is run (even locally). So be sure if you want to use any of the above that you test it in a .quest game before getting in too deep.\n\nI'm not sure if this is a bug or a &quot;feature&quot;. I'll open an issue for it.",
      "EditableFormat": "bbcode",
      "HTML": "Some bad news: some of the cooler aspects of this (like being able to use dict[key] for accessing dictionary values and the ternary comma operator) do *not* work in published games. What works fine from the Quest editor gives odd error messages when the .quest game is run (even locally). So be sure if you want to use any of the above that you test it in a .quest game before getting in too deep.<br/><br/>I'm not sure if this is a bug or a &quot;feature&quot;. I'll open an issue for it.",
      "PostDate": "2013-04-05T23:11:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23948",
      "UserId": 0,
      "Username": "homeeman",
      "UserAvatar": null,
      "UserGravatar": "4c7b0e689de0b974bfe447478a40fb60",
      "EditableText": "This is all great, jaynabonne!  You've done us all a service!",
      "EditableFormat": "bbcode",
      "HTML": "This is all great, jaynabonne!  You've done us all a service!",
      "PostDate": "2013-04-06T02:33:18+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23963",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Thanks homeeman. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nOne more correction (going the other way now): the ternary operator works fine. It's just the expression syntax with brackets that Quest doesn't like. My original code had combined one of those with the ternary operator, which made it look the latter was at fault. But I think it's all to do with brackets.\n\nIf you put this code in a .aslx file:\n\nmsg(mydict[&quot;key&quot;])\n\nthen Quest will change it to:\n\nmsg(mydict{UNKNOWN TEMPLATE: &quot;key&quot;})\n\nIt actually will change your source file. If the code is in a library, it fails at runtime the same, even though it doesn't touch the source (since it can't).\n\nI've logged an issue for this. Hopefully, the rest of the (non-bracket) expressons work fine.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks homeeman. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>One more correction (going the other way now): the ternary operator works fine. It's just the expression syntax with brackets that Quest doesn't like. My original code had combined one of those with the ternary operator, which made it look the latter was at fault. But I think it's all to do with brackets.<br/><br/>If you put this code in a .aslx file:<br/><br/>msg(mydict[&quot;key&quot;])<br/><br/>then Quest will change it to:<br/><br/>msg(mydict{UNKNOWN TEMPLATE: &quot;key&quot;})<br/><br/>It actually will change your source file. If the code is in a library, it fails at runtime the same, even though it doesn't touch the source (since it can't).<br/><br/>I've logged an issue for this. Hopefully, the rest of the (non-bracket) expressons work fine.",
      "PostDate": "2013-04-07T11:21:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24486",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "An update: with Quest 5.4.1, this issue has been fixed. I have successfully used this [index] syntax successfully in my code.",
      "EditableFormat": "bbcode",
      "HTML": "An update: with Quest 5.4.1, this issue has been fixed. I have successfully used this [index] syntax successfully in my code.",
      "PostDate": "2013-05-08T11:08:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24515",
      "UserId": 0,
      "Username": "Sora574",
      "UserAvatar": null,
      "UserGravatar": "5691c27a3aa3e56e879a3f8545b28ef2",
      "EditableText": "I was going to create another thread, but it seems better to put it in this one.\n\nWhen using the list indexing, (list[0], list[1], etc) if the value is a string and you put it into a function parameter, like 'dictionary add (d, list[0], list[1])' then Quest will throw an error saying something like 'Error running script&#058; Error compiling expression 'list[0]': RootExpressionElement: Cannot convert type 'Object' to expression result of 'String''.\nHowever, it will convert it to a string with ToString(list[0])... So it seems like Quest is being lazy and not converting it automatically. Is this what's supposed to happen?",
      "EditableFormat": "bbcode",
      "HTML": "I was going to create another thread, but it seems better to put it in this one.<br/><br/>When using the list indexing, (list[0], list[1], etc) if the value is a string and you put it into a function parameter, like 'dictionary add (d, list[0], list[1])' then Quest will throw an error saying something like 'Error running script&#058; Error compiling expression 'list[0]': RootExpressionElement: Cannot convert type 'Object' to expression result of 'String''.<br/>However, it will convert it to a string with ToString(list[0])... So it seems like Quest is being lazy and not converting it automatically. Is this what's supposed to happen?",
      "PostDate": "2013-05-11T03:55:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24522",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I had asked Alex this myself. See <!-- m --><a class=\"postlink\" href=\"https://quest.codeplex.com/workitem/1280\">https://quest.codeplex.com/workitem/1280</a><!-- m -->.\n\nThe answer (for those too lazy to click):\n\n[quote:1c6ql1ub]Anything defined by Quest itself that can return any type (e.g. ListItem in this case) will have an &quot;unknown&quot; return type - in the C# code, anything that returns &quot;object&quot;.\n \nThis is why functions like StringListItem exist, as that will have a known return type of string.[/quote:1c6ql1ub]\n\nSo the problem is that something like &quot;list[0]&quot; can have any type, which confuses things. Ironically, if you put it into a variable first, it works fine.",
      "EditableFormat": "bbcode",
      "HTML": "I had asked Alex this myself. See <!-- m --><a class=\"postlink\" href=\"https://quest.codeplex.com/workitem/1280\">https://quest.codeplex.com/workitem/1280</a><!-- m -->.<br/><br/>The answer (for those too lazy to click):<br/><br/><blockquote><p>Anything defined by Quest itself that can return any type (e.g. ListItem in this case) will have an &quot;unknown&quot; return type - in the C# code, anything that returns &quot;object&quot;.<br/> <br/>This is why functions like StringListItem exist, as that will have a known return type of string.</p></blockquote><br/><br/>So the problem is that something like &quot;list[0]&quot; can have any type, which confuses things. Ironically, if you put it into a variable first, it works fine.",
      "PostDate": "2013-05-11T09:10:32+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24523",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "More fun with expressions...\n\nThe trick to all of this is to keep in mind that any code you write that involves an expression will use FLEE. Code that doesn't won't. (I'm not sure what the boundary is for that.) And the two don't always behave the same.\n\n[b:81spdkoj]Parameter checking[/b:81spdkoj]\n\nGiven this (fairly pointless) function definition:\n\n[code:81spdkoj]  &lt;function name=&quot;MyFunc&quot; parameters=&quot;f1,f2&quot; type=&quot;string&quot;&gt;\n  \tmsg(&quot;f1 is&#58; &quot; + f1)\n  \treturn (&quot;Howdy!&quot;)\n  &lt;/function&gt;[/code:81spdkoj]\n\nWhat will the following calls print out?\n\nA) MyFunc(1,2)\nB) msg(MyFunc(1,2))\nC) MyFunc(1)\nD) msg(MyFunc(1))\n\nAnswers:\n\nA) f1 is: 1\nB) f1 is: 1\nHowdy!\nC) Error running script&#058; Too few parameters passed to MyFunc function - only 1 passed, but 2 expected\nD) f1 is: 1\nHowdy!\n\nThat last one is the interesting one. If you try to use f2, you will find that it's undefined in that case. What seems to happen is that a non-expression function call checks parameters. One inside an expression is invoked by FLEE and does not do parameter checking  - and any unpassed parameters will be undefined.  You could, in theory, use IsDefined to check for whether the parameter has been passed... but I would say stay away from taking advantage of this (undocumented) behavior unless you're willing to possibly pay the price down the road.\n\n[b:81spdkoj]Delegates[/b:81spdkoj]\n\nrundelegate can only be used outside an expression.\nRunDelegateFunction can only be used inside an expression.\n\nFor example, you can do either of these:\n\n[code:81spdkoj]rundelegate(obj, &quot;Method&quot;)\nx = RunDelegateFunction(obj, &quot;Method2&quot;)[/code:81spdkoj]\nbut you can't do either of:\n\n[code:81spdkoj]x = rundelegate(obj, &quot;Method2&quot;)\nRunDelegateFunction(obj, &quot;Method&quot;)[/code:81spdkoj]\n\n[b:81spdkoj]Eval[/b:81spdkoj]\n\n&quot;Eval&quot; (or &quot;eval&quot;) can only be used inside an expression. And it can only evaluate an expression (something that has an ultimate value).  For instance, you can do this:\n\n[code:81spdkoj]x = eval(&quot;1+1&quot;)\nx = eval(&quot;RunDelegateFunction(player, \\&quot;doit\\&quot;)&quot;)[/code:81spdkoj]\n\nBut you can't do:\n\n[code:81spdkoj]x = eval(&quot;msg(\\&quot;Howdy!\\&quot;)&quot;)[/code:81spdkoj]\n\nYou can do this, however:\n\n[code:81spdkoj]&lt;function name=&quot;MyMsg&quot; parameters=&quot;s&quot; type=&quot;boolean&quot;&gt;\n  msg(s)\n  return (true)\n&lt;/function&gt;\n\nx = eval(&quot;MyMsg(\\&quot;Howdy!\\&quot;)&quot;)[/code:81spdkoj]",
      "EditableFormat": "bbcode",
      "HTML": "More fun with expressions...<br/><br/>The trick to all of this is to keep in mind that any code you write that involves an expression will use FLEE. Code that doesn't won't. (I'm not sure what the boundary is for that.) And the two don't always behave the same.<br/><br/><span style=\"font-weight:bold;\">Parameter checking</span><br/><br/>Given this (fairly pointless) function definition:<br/><br/><pre><code>  &lt;function name=&quot;MyFunc&quot; parameters=&quot;f1,f2&quot; type=&quot;string&quot;&gt;<br/>  \tmsg(&quot;f1 is&#58; &quot; + f1)<br/>  \treturn (&quot;Howdy!&quot;)<br/>  &lt;/function&gt;</code></pre><br/><br/>What will the following calls print out?<br/><br/>A) MyFunc(1,2)<br/>B) msg(MyFunc(1,2))<br/>C) MyFunc(1)<br/>D) msg(MyFunc(1))<br/><br/>Answers:<br/><br/>A) f1 is: 1<br/>B) f1 is: 1<br/>Howdy!<br/>C) Error running script&#058; Too few parameters passed to MyFunc function - only 1 passed, but 2 expected<br/>D) f1 is: 1<br/>Howdy!<br/><br/>That last one is the interesting one. If you try to use f2, you will find that it's undefined in that case. What seems to happen is that a non-expression function call checks parameters. One inside an expression is invoked by FLEE and does not do parameter checking  - and any unpassed parameters will be undefined.  You could, in theory, use IsDefined to check for whether the parameter has been passed... but I would say stay away from taking advantage of this (undocumented) behavior unless you're willing to possibly pay the price down the road.<br/><br/><span style=\"font-weight:bold;\">Delegates</span><br/><br/>rundelegate can only be used outside an expression.<br/>RunDelegateFunction can only be used inside an expression.<br/><br/>For example, you can do either of these:<br/><br/><pre><code>rundelegate(obj, &quot;Method&quot;)<br/>x = RunDelegateFunction(obj, &quot;Method2&quot;)</code></pre><br/>but you can't do either of:<br/><br/><pre><code>x = rundelegate(obj, &quot;Method2&quot;)<br/>RunDelegateFunction(obj, &quot;Method&quot;)</code></pre><br/><br/><span style=\"font-weight:bold;\">Eval</span><br/><br/>&quot;Eval&quot; (or &quot;eval&quot;) can only be used inside an expression. And it can only evaluate an expression (something that has an ultimate value).  For instance, you can do this:<br/><br/><pre><code>x = eval(&quot;1+1&quot;)<br/>x = eval(&quot;RunDelegateFunction(player, \\&quot;doit\\&quot;)&quot;)</code></pre><br/><br/>But you can't do:<br/><br/><pre><code>x = eval(&quot;msg(\\&quot;Howdy!\\&quot;)&quot;)</code></pre><br/><br/>You can do this, however:<br/><br/><pre><code>&lt;function name=&quot;MyMsg&quot; parameters=&quot;s&quot; type=&quot;boolean&quot;&gt;<br/>  msg(s)<br/>  return (true)<br/>&lt;/function&gt;<br/><br/>x = eval(&quot;MyMsg(\\&quot;Howdy!\\&quot;)&quot;)</code></pre>",
      "PostDate": "2013-05-11T09:49:41+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24525",
      "UserId": 0,
      "Username": "Sora574",
      "UserAvatar": null,
      "UserGravatar": "5691c27a3aa3e56e879a3f8545b28ef2",
      "EditableText": "[quote=&quot;jaynabonne&quot;:tqftg342]So the problem is that something like &quot;list[0]&quot; can have any type, which confuses things. Ironically, if you put it into a variable first, it works fine.[/quote:tqftg342]\nHmm... So would it be possible to make/use something like 'list[0].toString'?\n\nProbably not, right? Because it would try to use list[0] like an object and toString as an attribute\nWhat about list[0.toString]? I think that would just search for the string '0', right?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite>So the problem is that something like &quot;list[0]&quot; can have any type, which confuses things. Ironically, if you put it into a variable first, it works fine.</blockquote><br/>Hmm... So would it be possible to make/use something like 'list[0].toString'?<br/><br/>Probably not, right? Because it would try to use list[0] like an object and toString as an attribute<br/>What about list[0.toString]? I think that would just search for the string '0', right?",
      "PostDate": "2013-05-11T13:43:18+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24527",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Besides ToString(list[0]), you can also do this:\n\n[code:3axthkqr]    \tdictionary add(d, cast(list&#91;0&#93;, String), list&#91;1&#93;)[/code:3axthkqr]\n\n&quot;cast&quot; is a FLEE built-in function.",
      "EditableFormat": "bbcode",
      "HTML": "Besides ToString(list[0]), you can also do this:<br/><br/><pre><code>    \tdictionary add(d, cast(list&#91;0&#93;, String), list&#91;1&#93;)</code></pre><br/><br/>&quot;cast&quot; is a FLEE built-in function.",
      "PostDate": "2013-05-11T14:00:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24528",
      "UserId": 0,
      "Username": "Sora574",
      "UserAvatar": null,
      "UserGravatar": "5691c27a3aa3e56e879a3f8545b28ef2",
      "EditableText": "Hmm... That's even longer than just using ToString()\nIt's not that big of a deal, though. I was just wondering.",
      "EditableFormat": "bbcode",
      "HTML": "Hmm... That's even longer than just using ToString()<br/>It's not that big of a deal, though. I was just wondering.",
      "PostDate": "2013-05-11T14:07:22+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25401",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Another point of note regarding expressions:\n\nFor those of you who would like to do bitwise operations, it turns out that FLEE does support them - they are actually overloads of the standard AND, OR, and NOT operators, which are usually used for Boolean operations. The operator behaviors depend on the types of the operands (just as &quot;+&quot; differs depending on whether you are &quot;plus'ing&quot; ints or strings). If the operands are Boolean, you get the standard logical operators. If the operators are ints, then you get bitwise operations.\n\nHere are some examples:\n\n[code:expb46p8]msg (1 and 3)[/code:expb46p8]\n1\n\n[code:expb46p8]msg(0xf7 and 0xcf)[/code:expb46p8]\n199 (= 0xc7)\n\n[code:expb46p8]msg(0x30 or 0x1e)[/code:expb46p8]\n62 ( = 0x3e)\n\n[code:expb46p8]msg(not 255)[/code:expb46p8]\n-1 (note that ints are signed!)\n\n[code:expb46p8]msg(0x1234 and not 0xff)[/code:expb46p8]\n4608 (= 0x1200)\n\n[code:expb46p8]msg(0x1234 xor 0x1230)[/code:expb46p8]\n4\n\n(Note that xor works for logical operands as well, though that is just the same as &quot;not equals&quot;!)\n\nEnjoy! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Another point of note regarding expressions:<br/><br/>For those of you who would like to do bitwise operations, it turns out that FLEE does support them - they are actually overloads of the standard AND, OR, and NOT operators, which are usually used for Boolean operations. The operator behaviors depend on the types of the operands (just as &quot;+&quot; differs depending on whether you are &quot;plus'ing&quot; ints or strings). If the operands are Boolean, you get the standard logical operators. If the operators are ints, then you get bitwise operations.<br/><br/>Here are some examples:<br/><br/><pre><code>msg (1 and 3)</code></pre><br/>1<br/><br/><pre><code>msg(0xf7 and 0xcf)</code></pre><br/>199 (= 0xc7)<br/><br/><pre><code>msg(0x30 or 0x1e)</code></pre><br/>62 ( = 0x3e)<br/><br/><pre><code>msg(not 255)</code></pre><br/>-1 (note that ints are signed!)<br/><br/><pre><code>msg(0x1234 and not 0xff)</code></pre><br/>4608 (= 0x1200)<br/><br/><pre><code>msg(0x1234 xor 0x1230)</code></pre><br/>4<br/><br/>(Note that xor works for logical operands as well, though that is just the same as &quot;not equals&quot;!)<br/><br/>Enjoy! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-07-12T16:04:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25404",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Interesting, but I'd be wary of using any of these that don't work unchanged in JavaScript!",
      "EditableFormat": "bbcode",
      "HTML": "Interesting, but I'd be wary of using any of these that don't work unchanged in JavaScript!",
      "PostDate": "2013-07-13T13:38:37+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25408",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Could you explain that? I'm not sure what you mean. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nWhich ones &quot;don't work unchanged&quot; (?) in Javascript? Or I guess more importantly, what is the issue and how would I know?",
      "EditableFormat": "bbcode",
      "HTML": "Could you explain that? I'm not sure what you mean. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>Which ones &quot;don't work unchanged&quot; (?) in Javascript? Or I guess more importantly, what is the issue and how would I know?",
      "PostDate": "2013-07-13T15:50:10+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25411",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "When a game is converted to JS, there are a few standard transformations that are applied to turn FLEE format expressions into ones which are compatible with JS. Anything that's not used in Quest won't have a conversion, so I'd advise against doing anything clever that is FLEE-specific. We convert &quot;and&quot; in an expression to &quot;&amp;&amp;&quot; for example, which will break any bitwise operations. The converter won't know ahead of time which elements are int and which are boolean, so it will be hard to update the converter to handle this correctly.",
      "EditableFormat": "bbcode",
      "HTML": "When a game is converted to JS, there are a few standard transformations that are applied to turn FLEE format expressions into ones which are compatible with JS. Anything that's not used in Quest won't have a conversion, so I'd advise against doing anything clever that is FLEE-specific. We convert &quot;and&quot; in an expression to &quot;&amp;&amp;&quot; for example, which will break any bitwise operations. The converter won't know ahead of time which elements are int and which are boolean, so it will be hard to update the converter to handle this correctly.",
      "PostDate": "2013-07-14T10:02:42+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25417",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Hmm. Ok. That's too bad but good to know!\n\nJust one more question: since it works fine at least in the desktop player, when is a game converted to JS?",
      "EditableFormat": "bbcode",
      "HTML": "Hmm. Ok. That's too bad but good to know!<br/><br/>Just one more question: since it works fine at least in the desktop player, when is a game converted to JS?",
      "PostDate": "2013-07-14T20:24:31+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25436",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "When a game is converted into a mobile app (potentially in the future, also stand-alone web pages or desktop apps).",
      "EditableFormat": "bbcode",
      "HTML": "When a game is converted into a mobile app (potentially in the future, also stand-alone web pages or desktop apps).",
      "PostDate": "2013-07-15T09:28:59+01:00",
      "LastEditDate": null
    }
  ]
}
