{
  "Topic": {
    "TopicId": "_lnsflduhuuunldnldo1mq",
    "ForumId": "10",
    "Title": "Popup Question",
    "LastUpdated": "2019-09-05T09:04:15.1887886Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "835177c7-5c63-47ca-9171-efc784642a77",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to make Quest's built-in popup box appear manually via a script.  So I want to call the built-in function ```ProcessTextCommand_Popup```.  This function uses two parameters, ```section``` and ```data```.  I think what goes into ```section``` is the text processor popup directive, i.e., ```{popup:somelink:someimageandtext}```.  My question is -- what goes into ```data```?\r\n\r\nHere is Quest's built-in popup function.  ```section``` is only listed at the beginning, and ```data``` is only listed at the very end:\r\n```\r\nsection = Mid(section, 7)\r\nary = Split(section, \":\")\r\ns1 = StringListItem(ary, 0)\r\nlist remove (ary, s1)\r\ns2 = Join (ary, \":\")\r\nid = JSSafe(s1) + GetRandomInt(0, 999999999)\r\nlink = game.defaultlinkforeground\r\nif (HasString(game, \"altlinkforeground\")) {\r\n  link = game.altlinkforeground\r\n}\r\ns = \"<span  style=\\\"cursor:pointer;color:\" + link + \";\\\" onclick=\\\"$('#\" + id + \"').css('display', 'block');\\\">\" + s1 + \"</span><div id=\\\"\" + id + \"\\\" class=\\\"w3-theme-border\\\" style=\\\"position:fixed;z-index:9999;display:none;cursor:pointer;left:50px;top:40%;width:40%;background-color:\" + game.defaultbackground + \";border:2px solid \" + game.defaultforeground + \";color:\" + link + \";border-radius:5px;padding:5px;\\\" onclick=\\\"$('#\" + id + \"').css('display', 'none');\\\"><p>\"\r\ns = s + s2 + \"</p></div>\"\r\nreturn (ProcessTextSection(s, data))\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to make Quest's built-in popup box appear manually via a script.  So I want to call the built-in function <code>ProcessTextCommand_Popup</code>.  This function uses two parameters, <code>section</code> and <code>data</code>.  I think what goes into <code>section</code> is the text processor popup directive, i.e., <code>{popup:somelink:someimageandtext}</code>.  My question is -- what goes into <code>data</code>?</p>\n<p>Here is Quest's built-in popup function.  <code>section</code> is only listed at the beginning, and <code>data</code> is only listed at the very end:</p>\n<pre><code>section = Mid(section, 7)\nary = Split(section, \":\")\ns1 = StringListItem(ary, 0)\nlist remove (ary, s1)\ns2 = Join (ary, \":\")\nid = JSSafe(s1) + GetRandomInt(0, 999999999)\nlink = game.defaultlinkforeground\nif (HasString(game, \"altlinkforeground\")) {\n  link = game.altlinkforeground\n}\ns = \"&lt;span  style=\\\"cursor:pointer;color:\" + link + \";\\\" onclick=\\\"$('#\" + id + \"').css('display', 'block');\\\"&gt;\" + s1 + \"&lt;/span&gt;&lt;div id=\\\"\" + id + \"\\\" class=\\\"w3-theme-border\\\" style=\\\"position:fixed;z-index:9999;display:none;cursor:pointer;left:50px;top:40%;width:40%;background-color:\" + game.defaultbackground + \";border:2px solid \" + game.defaultforeground + \";color:\" + link + \";border-radius:5px;padding:5px;\\\" onclick=\\\"$('#\" + id + \"').css('display', 'none');\\\"&gt;&lt;p&gt;\"\ns = s + s2 + \"&lt;/p&gt;&lt;/div&gt;\"\nreturn (ProcessTextSection(s, data))\n</code></pre>\n\n",
      "PostDate": "2019-09-05T09:04:15.1887886Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "66cb1a12-2de3-40f0-92f3-87eb341ef668",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think data is a dictionary that holds information some text processor directive use, for example (and I am getting less certain at this point), the `once` directive uses it to track what has already been printed and so whether this is new text or not.\r\n\r\nIt has to be passed around in case one of those is inside the text that ProcessTextSection is handling. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I think data is a dictionary that holds information some text processor directive use, for example (and I am getting less certain at this point), the <code>once</code> directive uses it to track what has already been printed and so whether this is new text or not.</p>\n<p>It has to be passed around in case one of those is inside the text that ProcessTextSection is handling.</p>\n\n",
      "PostDate": "2019-09-05T10:38:56.0298313Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "18f8cedb-62d7-4aa8-9a2c-cb2d958daafa",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "`data` is a dictionary. If you're creating new text processor directives to do something like draw a table, you could use it to pass data between directives in the same string.\r\n\r\nThe only value that is put in the dictionary by default has the key `fulltext`, and the value is the full string that was passed to the text processor. This is used by the `{once:` directive to recognise whether this string has been parsed before.\r\n\r\nIf you're not using `{once:` in your string, you can just pass `NewDictionary()` as the data parameter and it won't make any difference.\r\n\r\nHowever, I would suggest that calling ProcessTextCommand_Popup manually is probably overkill.\r\nYou could easily do:\r\n*     ProcessTextCommand_Popup (\"somelink:someimageandtext\", NewDictionary())\r\nor you could do:\r\n*     ProcessText (\"{popup:somelink:someimageandtext}\")\r\n\r\nThe first is slightly more efficient code; the second is easier to read. And if you're more concerned with execution time, then you'd be better making your own function so you can skip the code that splits your string up into the two parameters.",
      "EditableFormat": "markdown",
      "HTML": "<p><code>data</code> is a dictionary. If you're creating new text processor directives to do something like draw a table, you could use it to pass data between directives in the same string.</p>\n<p>The only value that is put in the dictionary by default has the key <code>fulltext</code>, and the value is the full string that was passed to the text processor. This is used by the <code>{once:</code> directive to recognise whether this string has been parsed before.</p>\n<p>If you're not using <code>{once:</code> in your string, you can just pass <code>NewDictionary()</code> as the data parameter and it won't make any difference.</p>\n<p>However, I would suggest that calling ProcessTextCommand_Popup manually is probably overkill.<br>\nYou could easily do:</p>\n<ul>\n<li>\n<pre><code>ProcessTextCommand_Popup (\"somelink:someimageandtext\", NewDictionary())\n</code></pre>\n</li>\n</ul>\n<p>or you could do:</p>\n<ul>\n<li>\n<pre><code>ProcessText (\"{popup:somelink:someimageandtext}\")\n</code></pre>\n</li>\n</ul>\n<p>The first is slightly more efficient code; the second is easier to read. And if you're more concerned with execution time, then you'd be better making your own function so you can skip the code that splits your string up into the two parameters.</p>\n\n",
      "PostDate": "2019-09-05T11:39:02.3276648Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7256fcea-5105-4444-96cd-c9dd5be8c802",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel -\r\n\r\nHmm.....I tried your two methods with an object's ```look at``` command and they didn't work:\r\n```\r\nProcessTextCommand_Popup (\"somelink:someimageandtext\", NewDictionary())\r\n\r\nProcessText (\"{popup:somelink:someimageandtext}\")\r\n```\r\nQuest would print out \"look at <u>sword</u>\", for example, but the popup wouldn't display.\r\n\r\nI tried it this way too, with the same result:\r\n```\r\nProcessTextCommand_Popup (\"{popup:somelink:someimageandtext}\", NewDictionary())\r\n```\r\nHmm.....",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel -</p>\n<p>Hmm.....I tried your two methods with an object's <code>look at</code> command and they didn't work:</p>\n<pre><code>ProcessTextCommand_Popup (\"somelink:someimageandtext\", NewDictionary())\n\nProcessText (\"{popup:somelink:someimageandtext}\")\n</code></pre>\n<p>Quest would print out \"look at <u>sword</u>\", for example, but the popup wouldn't display.</p>\n<p>I tried it this way too, with the same result:</p>\n<pre><code>ProcessTextCommand_Popup (\"{popup:somelink:someimageandtext}\", NewDictionary())\n</code></pre>\n<p>Hmm.....</p>\n\n",
      "PostDate": "2019-09-05T21:04:37.3860513Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4abec1b6-5620-4f20-91ae-342fd72b5f85",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What do you mean by \"wouldn't display\"?\r\n\r\nDoes the link appear? Does clicking on it do nothing, or generate an error in the javascript console?\r\n\r\nAre you changing the string returned by ProcessText at all before sending it to the frontend? You might be doing something that breaks the script?\r\n\r\n(and if you're not changing it, then it's easier to use `msg (\"{popup:somelink:someimageandtext}\")`; because `msg` calls `ProcessText` automatically)",
      "EditableFormat": "markdown",
      "HTML": "<p>What do you mean by \"wouldn't display\"?</p>\n<p>Does the link appear? Does clicking on it do nothing, or generate an error in the javascript console?</p>\n<p>Are you changing the string returned by ProcessText at all before sending it to the frontend? You might be doing something that breaks the script?</p>\n<p>(and if you're not changing it, then it's easier to use <code>msg (\"{popup:somelink:someimageandtext}\")</code>; because <code>msg</code> calls <code>ProcessText</code> automatically)</p>\n\n",
      "PostDate": "2019-09-05T22:40:29.7599924Z",
      "LastEditDate": "2019-09-05T22:43:00.3220904Z",
      "link": null
    },
    {
      "PostId": "2055bcb4-7911-4fa7-a70d-736c8833f119",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Are you printing it with ```msg```?\r\n\r\nAlso, it seems that you still have to lead off with \"popup:\".\r\n\r\n---\r\nThis works for me (EDITED TO USE VARIABLE):\r\n\r\n```\r\nx = ProcessTextCommand_Popup (\"popup:somelink:someimageandtext\", NewDictionary())\r\nmsg(x)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Are you printing it with <code>msg</code>?</p>\n<p>Also, it seems that you still have to lead off with \"popup:\".</p>\n<hr>\n<p>This works for me (EDITED TO USE VARIABLE):</p>\n<pre><code>x = ProcessTextCommand_Popup (\"popup:somelink:someimageandtext\", NewDictionary())\nmsg(x)\n</code></pre>\n\n",
      "PostDate": "2019-09-05T22:43:06.5940255Z",
      "LastEditDate": "2019-09-05T23:23:48.9840177Z",
      "link": null
    },
    {
      "PostId": "a04fe1fc-c1d8-43d4-8368-44ed0889a4f0",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What I'm trying to do is call the ```ProcessTextCommand_Popup``` function directly from an object's ```look``` command (under the object's description).  So when \"look at sword\" is typed, or clicked on in the object's object link, or clicked on in the object's display/inventory verbs links, the popup itself will display immediately (instead of some text and the link displaying, and then you have to click on the link to display the popup).",
      "EditableFormat": "markdown",
      "HTML": "<p>What I'm trying to do is call the <code>ProcessTextCommand_Popup</code> function directly from an object's <code>look</code> command (under the object's description).  So when \"look at sword\" is typed, or clicked on in the object's object link, or clicked on in the object's display/inventory verbs links, the popup itself will display immediately (instead of some text and the link displaying, and then you have to click on the link to display the popup).</p>\n\n",
      "PostDate": "2019-09-05T23:33:13.0096614Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "95ac5166-9436-4a0e-a4b2-9eb075257c2a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The `ProcessTextCommand_Popup` command generates the HTML code to display a link which spawns a popup; exactly the same as putting a `{popup:` directive in the object's description.\r\n\r\nYou probably want to create your own function to do this. I'd suggest that a JS function would be more efficient for working with popups.\r\n\r\nOff the top of my head, the code in your UI initialisation script to set this up would look like:\r\n```\r\nlink = game.defaultlinkforeground\r\nif (HasString(game, \"altlinkforeground\")) {\r\n  link = game.altlinkforeground\r\n}\r\nJS.eval(\"$(function () {ShowPopup = function (id, contents) {var popup;if (! $('#'+id).length) {$('<div>', {id: id, style: 'position:fixed;z-index:9999;cursor:pointer;left:50px;top:40%;width:40%;background-color:\" + game.defaultbackground + \";border:2px solid \" + game.defaultforeground + \";color:\" + link + \";border-radius:5px;padding:5px'}).appendTo('#divOutput').bind('click', function (e) {popup.hide();});}popup = $('#'+id);popup.html(contents).show();};});\")\r\n```\r\n\r\nThen when you want to show a popup, you should be able to display it with:\r\n```\r\nJS.ShowPopup (\"somename\", \"someimageandtext\")\r\n```\r\n\r\n(I'm using the colour/style information from ProcessTextCommand_Popup because I assume that's what you want it to look like. If you want the player to be able to drag the popup around, resize it, or do more than just close it, you'd probably be better off using `dialog`)",
      "EditableFormat": "markdown",
      "HTML": "<p>The <code>ProcessTextCommand_Popup</code> command generates the HTML code to display a link which spawns a popup; exactly the same as putting a <code>{popup:</code> directive in the object's description.</p>\n<p>You probably want to create your own function to do this. I'd suggest that a JS function would be more efficient for working with popups.</p>\n<p>Off the top of my head, the code in your UI initialisation script to set this up would look like:</p>\n<pre><code>link = game.defaultlinkforeground\nif (HasString(game, \"altlinkforeground\")) {\n  link = game.altlinkforeground\n}\nJS.eval(\"$(function () {ShowPopup = function (id, contents) {var popup;if (! $('#'+id).length) {$('&lt;div&gt;', {id: id, style: 'position:fixed;z-index:9999;cursor:pointer;left:50px;top:40%;width:40%;background-color:\" + game.defaultbackground + \";border:2px solid \" + game.defaultforeground + \";color:\" + link + \";border-radius:5px;padding:5px'}).appendTo('#divOutput').bind('click', function (e) {popup.hide();});}popup = $('#'+id);popup.html(contents).show();};});\")\n</code></pre>\n<p>Then when you want to show a popup, you should be able to display it with:</p>\n<pre><code>JS.ShowPopup (\"somename\", \"someimageandtext\")\n</code></pre>\n<p>(I'm using the colour/style information from ProcessTextCommand_Popup because I assume that's what you want it to look like. If you want the player to be able to drag the popup around, resize it, or do more than just close it, you'd probably be better off using <code>dialog</code>)</p>\n\n",
      "PostDate": "2019-09-06T01:07:58.1642085Z",
      "LastEditDate": "2019-09-07T10:18:24.523999Z",
      "link": null
    },
    {
      "PostId": "653de9cf-7ce8-4246-8f72-2bc5bf3ea0ab",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, I didn't realize that ```ProcessTextCommand_Popup``` only displays the link, rather than the popup.  I'll play around with your code later.  Thanks people!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, I didn't realize that <code>ProcessTextCommand_Popup</code> only displays the link, rather than the popup.  I'll play around with your code later.  Thanks people!</p>\n\n",
      "PostDate": "2019-09-06T21:18:48.2128992Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dac3ecc3-237d-4aff-86bc-cb852a07faff",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there another function that would display the popup, like ```ProcessTextSection```?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there another function that would display the popup, like <code>ProcessTextSection</code>?</p>\n\n",
      "PostDate": "2019-09-06T21:42:08.4670786Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e7acc7ce-f534-4418-a069-9cc03c4b8556",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel -\r\n\r\nI tried your code, and the popup box opens up, but is blank (devoid of any text or images).\r\n\r\nI noticed that your 2nd parameter in ShowPopup is \"contents\", but the last part of your JS function ends with the variable \"content\":\r\n```\r\nShowPopup = function (id, contents)\r\n\r\npopup.html(content).show();\r\n```\r\nSo I changed \"content\" to \"contents\", so that they are consistent (both say \"contents\").  Surprisingly, that made no difference.",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel -</p>\n<p>I tried your code, and the popup box opens up, but is blank (devoid of any text or images).</p>\n<p>I noticed that your 2nd parameter in ShowPopup is \"contents\", but the last part of your JS function ends with the variable \"content\":</p>\n<pre><code>ShowPopup = function (id, contents)\n\npopup.html(content).show();\n</code></pre>\n<p>So I changed \"content\" to \"contents\", so that they are consistent (both say \"contents\").  Surprisingly, that made no difference.</p>\n\n",
      "PostDate": "2019-09-07T08:07:25.1692345Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4ee080d7-6882-401b-b1ed-c6c4d1e9a66e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry about that; two silly mistakes because I was typing on my phone and not giving it my full attention. I've updated the post above.\r\n\r\nYou spotted the `contents`error; I also mishandled the `#` before the element ID in a selector (resulting in an invalid id)\r\n\r\n(Note that while `ProcessTextCommand_Popup` uses the game's colour settings each time it is called, my code puts the current values into the javascript function when it is first called; so if you change `game.defaultbackground` or similar during the game, the popups from this code will keep using the old value until you reload a saved game)",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry about that; two silly mistakes because I was typing on my phone and not giving it my full attention. I've updated the post above.</p>\n<p>You spotted the <code>contents</code>error; I also mishandled the <code>#</code> before the element ID in a selector (resulting in an invalid id)</p>\n<p>(Note that while <code>ProcessTextCommand_Popup</code> uses the game's colour settings each time it is called, my code puts the current values into the javascript function when it is first called; so if you change <code>game.defaultbackground</code> or similar during the game, the popups from this code will keep using the old value until you reload a saved game)</p>\n\n",
      "PostDate": "2019-09-07T10:22:12.4000297Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "18051815-302d-4263-8ab8-a97fb2cfd007",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It seems to work now, thank you.",
      "EditableFormat": "markdown",
      "HTML": "<p>It seems to work now, thank you.</p>\n\n",
      "PostDate": "2019-09-07T23:51:47.5978807Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
