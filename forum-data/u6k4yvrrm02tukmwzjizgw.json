{
  "Topic": {
    "TopicId": "u6k4yvrrm02tukmwzjizgw",
    "ForumId": "10",
    "Title": "Can't find this typo: saies",
    "LastUpdated": "2020-02-21T05:40:10.8652599Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "cbcb1e53-90b4-4c17-b229-4d9607d1cb10",
      "UserId": 454880,
      "Username": "cfiggis",
      "AvatarUrl": "https://i.imgur.com/iklL754b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think this is a general setting, but I can't find it. When my player talks to someone that I don't have a response set up, that character responses \"she saies nothing\".\r\n\r\nI converted my game to code and did a search for text, but it's not there. How do I fix this typo, please?",
      "EditableFormat": "markdown",
      "HTML": "<p>I think this is a general setting, but I can't find it. When my player talks to someone that I don't have a response set up, that character responses \"she saies nothing\".</p>\n<p>I converted my game to code and did a search for text, but it's not there. How do I fix this typo, please?</p>\n\n",
      "PostDate": "2020-02-21T05:40:10.8652599Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f7e64613-fc18-499c-8964-9295bbb1754d",
      "UserId": 5574,
      "Username": "R2T1",
      "AvatarUrl": "http://i.imgur.com/32ogfqMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There was some discussion about this a while ago. (I  can't find the thread at the moment) If I recall, it was something to do with the way QUEST creates plurals. Most English words that end in 'Y' are generally pluralised by changing the 'y' to 'i' and adding 'es'. Unfortunately Say is one of the exceptions. I don't remember if there was a way to override it or not. It may be in one of the core library files. Sorry I can't be more accurate than that but perhaps ThePixie can look into it. (that's if he is still around?)",
      "EditableFormat": "markdown",
      "HTML": "<p>There was some discussion about this a while ago. (I  can't find the thread at the moment) If I recall, it was something to do with the way QUEST creates plurals. Most English words that end in 'Y' are generally pluralised by changing the 'y' to 'i' and adding 'es'. Unfortunately Say is one of the exceptions. I don't remember if there was a way to override it or not. It may be in one of the core library files. Sorry I can't be more accurate than that but perhaps ThePixie can look into it. (that's if he is still around?)</p>\n\n",
      "PostDate": "2020-02-21T10:58:44.7281015Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d62c666d-4f46-48aa-976a-9ccbea64d59c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I posted a fix for this a while back; but it's a little convoluted.\r\n\r\nReplace the core function `Conjugate` with this one:\r\n```\r\n      genders = LCase(obj.gender)\r\n      if (genders = \"he\" or genders = \"she\") {\r\n          genders = genders + \";it\"\r\n      }\r\n      cmd = GetObject (verb)\r\n      foreach (gender, Split(genders)) {\r\n          if (not cmd = null and HasString (cmd, \"conjugate_\"+gender)) {\r\n              return (GetString (cmd, \"conjugate_\"+gender))\r\n          }\r\n          dict = GetAttribute (game, \"conjugations_\"+gender)\r\n          if (not dict = null) {\r\n              if (DictionaryContains (dict, verb)) {\r\n                  return (DictionaryItem (dict, verb))\r\n              }\r\n              foreach (ending, game.conjugations) {\r\n                  if (Left (ending, 1) = \"@\" and EndsWith (verb, Mid (ending, 2))) {\r\n                    return (Conjugate (obj, Left (verb, LengthOf(verb) - LengthOf(ending) + 1)) + DictionaryItem (dict, ending))\r\n                  }\r\n                  else if (Left (ending, 1) = \"*\" and EndsWith (verb, Mid (ending, 2))) {\r\n                      return (Left (verb, LengthOf(verb) - LengthOf(ending) + 1) + DictionaryItem (dict, ending))\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      return (verb)\r\n```\r\n\r\nThen add a few stringdictionary attributes to the `game` object to contain the actual verbs:\r\n```\r\n    <attr name=\"conjugations_i\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>am</value></item>\r\n      <item><key>'be</key><value>'m</value></item>\r\n    </attr>\r\n\r\n    <attr name=\"conjugations_you\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>are</value></item>\r\n      <item><key>'be</key><value>'re</value></item>\r\n    </attr>\r\n\r\n    <attr name=\"conjugations_we\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>are</value></item>\r\n      <item><key>'be</key><value>'re</value></item>\r\n    </attr>\r\n\r\n    <attr name=\"conjugations_they\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>are</value></item>\r\n      <item><key>'be</key><value>'re</value></item>\r\n    </attr>\r\n\r\n    <attr name=\"conjugations_it\" type=\"stringdictionary\">\r\n      <item><key>be</key><value>is</value></item>\r\n      <item><key>have</key><value>has</value></item>\r\n      <item><key>mould</key><value>moulds</value></item>\r\n      <item><key>*ould</key><value>ould</value></item>\r\n      <item><key>must</key><value>must</value></item>\r\n      <item><key>won't</key><value>won't</value></item>\r\n      <item><key>@n't</key><value>n't</value></item>\r\n      <item><key>'ve</key><value>'s</value></item>\r\n      <item><key>'be</key><value>'s</value></item>\r\n      <item><key>*ay</key><value>ays</value></item>\r\n      <item><key>*oy</key><value>oys</value></item>\r\n      <item><key>*ey</key><value>eys</value></item>\r\n      <item><key>*y</key><value>ies</value></item>\r\n      <item><key>*ss</key><value>sses</value></item>\r\n      <item><key>*s</key><value>sses</value></item>\r\n      <item><key>*sh</key><value>shes</value></item>\r\n      <item><key>*ch</key><value>ches</value></item>\r\n      <item><key>*o</key><value>oes</value></item>\r\n      <item><key>*x</key><value>xes</value></item>\r\n      <item><key>*z</key><value>zes</value></item>\r\n      <item><key>*</key><value>s</value></item>\r\n    </attr>\r\n```\r\n\r\nThis should make the `Conjugate` and `WriteVerb` functions work correctly in most cases, and you can easily add any special cases to the dictionary. Just note that the WriteVerb function shouldn't be used for \"can\" and \"can't\" (I would add them as special cases for the principle of least surprise, but there is also a verb \"can\". As in canning fruit or similar)",
      "EditableFormat": "markdown",
      "HTML": "<p>I posted a fix for this a while back; but it's a little convoluted.</p>\n<p>Replace the core function <code>Conjugate</code> with this one:</p>\n<pre><code>      genders = LCase(obj.gender)\n      if (genders = \"he\" or genders = \"she\") {\n          genders = genders + \";it\"\n      }\n      cmd = GetObject (verb)\n      foreach (gender, Split(genders)) {\n          if (not cmd = null and HasString (cmd, \"conjugate_\"+gender)) {\n              return (GetString (cmd, \"conjugate_\"+gender))\n          }\n          dict = GetAttribute (game, \"conjugations_\"+gender)\n          if (not dict = null) {\n              if (DictionaryContains (dict, verb)) {\n                  return (DictionaryItem (dict, verb))\n              }\n              foreach (ending, game.conjugations) {\n                  if (Left (ending, 1) = \"@\" and EndsWith (verb, Mid (ending, 2))) {\n                    return (Conjugate (obj, Left (verb, LengthOf(verb) - LengthOf(ending) + 1)) + DictionaryItem (dict, ending))\n                  }\n                  else if (Left (ending, 1) = \"*\" and EndsWith (verb, Mid (ending, 2))) {\n                      return (Left (verb, LengthOf(verb) - LengthOf(ending) + 1) + DictionaryItem (dict, ending))\n                  }\n              }\n          }\n      }\n      return (verb)\n</code></pre>\n<p>Then add a few stringdictionary attributes to the <code>game</code> object to contain the actual verbs:</p>\n<pre><code>    &lt;attr name=\"conjugations_i\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;am&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'m&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"conjugations_you\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;are&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'re&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"conjugations_we\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;are&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'re&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"conjugations_they\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;are&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'re&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"conjugations_it\" type=\"stringdictionary\"&gt;\n      &lt;item&gt;&lt;key&gt;be&lt;/key&gt;&lt;value&gt;is&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;have&lt;/key&gt;&lt;value&gt;has&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;mould&lt;/key&gt;&lt;value&gt;moulds&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ould&lt;/key&gt;&lt;value&gt;ould&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;must&lt;/key&gt;&lt;value&gt;must&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;won't&lt;/key&gt;&lt;value&gt;won't&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;@n't&lt;/key&gt;&lt;value&gt;n't&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'ve&lt;/key&gt;&lt;value&gt;'s&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;'be&lt;/key&gt;&lt;value&gt;'s&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ay&lt;/key&gt;&lt;value&gt;ays&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*oy&lt;/key&gt;&lt;value&gt;oys&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ey&lt;/key&gt;&lt;value&gt;eys&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*y&lt;/key&gt;&lt;value&gt;ies&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ss&lt;/key&gt;&lt;value&gt;sses&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*s&lt;/key&gt;&lt;value&gt;sses&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*sh&lt;/key&gt;&lt;value&gt;shes&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*ch&lt;/key&gt;&lt;value&gt;ches&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*o&lt;/key&gt;&lt;value&gt;oes&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*x&lt;/key&gt;&lt;value&gt;xes&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*z&lt;/key&gt;&lt;value&gt;zes&lt;/value&gt;&lt;/item&gt;\n      &lt;item&gt;&lt;key&gt;*&lt;/key&gt;&lt;value&gt;s&lt;/value&gt;&lt;/item&gt;\n    &lt;/attr&gt;\n</code></pre>\n<p>This should make the <code>Conjugate</code> and <code>WriteVerb</code> functions work correctly in most cases, and you can easily add any special cases to the dictionary. Just note that the WriteVerb function shouldn't be used for \"can\" and \"can't\" (I would add them as special cases for the principle of least surprise, but there is also a verb \"can\". As in canning fruit or similar)</p>\n\n",
      "PostDate": "2020-02-21T11:44:57.8719313Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8fc1df1b-32ef-46d2-a864-a9fcfd089857",
      "UserId": 454880,
      "Username": "cfiggis",
      "AvatarUrl": "https://i.imgur.com/iklL754b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for this complete reply!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for this complete reply!</p>\n\n",
      "PostDate": "2020-02-21T21:44:06.5258209Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1cb1978e-58e4-4796-9960-2cec064545f7",
      "UserId": 103764,
      "Username": "s.manghani",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9aff2cc85ba4ff7c0e520708c5b015f8?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It is great if this fix works! Can you explain a bit Lee specifically how/where these pieces of code go?\r\n\r\nWhat does it mean, or more specifically ‘where’ are you supposed to ‘’replace the core function Conjugate...’ - can this be done on the web version?\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>It is great if this fix works! Can you explain a bit Lee specifically how/where these pieces of code go?</p>\n<p>What does it mean, or more specifically ‘where’ are you supposed to ‘’replace the core function Conjugate...’ - can this be done on the web version?</p>\n\n",
      "PostDate": "2020-02-23T00:52:53.6450634Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4197cfaa-c07d-47c6-8448-a96a0abae77a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Unfortunately, replacing core functions is not possible on the web editor; you'd have to wait for a fix.",
      "EditableFormat": "markdown",
      "HTML": "<p>Unfortunately, replacing core functions is not possible on the web editor; you'd have to wait for a fix.</p>\n\n",
      "PostDate": "2020-02-23T08:56:39.4945319Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
