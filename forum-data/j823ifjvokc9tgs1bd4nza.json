{
  "Topic": {
    "TopicId": "j823ifjvokc9tgs1bd4nza",
    "ForumId": "10",
    "Title": "Scope functions and containers",
    "LastUpdated": "2019-01-29T10:04:22.5552378Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "fc88e2aa-122e-4eae-90e8-1fc2b11ecea2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm thinking again about how scope is handled for containers. `isopen` and `transparent` are pretty simple, but I was wondering if it might make sense to have a system that gives users a little more flexibility. For example, allowing an object to have a child scope script, working in the same way as the backdrop scope script, which returns a list of its visible and/or reachable children.\r\n\r\nThe scope functions could call this script to populate item lists; or use the existing system as a default if it isn't found. This would introduce minimal overhead where not used (just checking for the existence of an attribute), and would allow things like a box which has buttons on it, or a partly-open container that only reveals some items.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm thinking again about how scope is handled for containers. <code>isopen</code> and <code>transparent</code> are pretty simple, but I was wondering if it might make sense to have a system that gives users a little more flexibility. For example, allowing an object to have a child scope script, working in the same way as the backdrop scope script, which returns a list of its visible and/or reachable children.</p>\n<p>The scope functions could call this script to populate item lists; or use the existing system as a default if it isn't found. This would introduce minimal overhead where not used (just checking for the existence of an attribute), and would allow things like a box which has buttons on it, or a partly-open container that only reveals some items.</p>\n\n",
      "PostDate": "2019-01-29T10:04:22.5552378Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "72e0554d-620b-443f-9a5f-2b4ba68a9edd",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sounds good.\r\n\r\nI think an easy way to list (and/or run scripts for) child objects would be a good thing to have for all objects.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sounds good.</p>\n<p>I think an easy way to list (and/or run scripts for) child objects would be a good thing to have for all objects.</p>\n\n",
      "PostDate": "2019-01-29T14:40:23.7595894Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "94b298f7-63b9-4d41-9bc6-df609a2560c5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was thinking about a script attribute (or delegate; though it's probably not worth the overhead) which can be called, and adds items to a list. Maybe with parameters so that it can include/exclude visible-but-unreachable items, and/or scenery objects.\r\n\r\nMaybe also a similar script attribute that generates the `\"(It contains foo, bar, and baz)\"` string for object lists; so a refrigerator could say \"(It contains <u>beef</u>, <u>onions</u>, and <u>peppers</u>, and there is a <u>note</u> stuck on the front)\"\r\n\r\nI *think* I can see how I'd implement this, but not 100% yet.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was thinking about a script attribute (or delegate; though it's probably not worth the overhead) which can be called, and adds items to a list. Maybe with parameters so that it can include/exclude visible-but-unreachable items, and/or scenery objects.</p>\n<p>Maybe also a similar script attribute that generates the <code>\"(It contains foo, bar, and baz)\"</code> string for object lists; so a refrigerator could say \"(It contains <u>beef</u>, <u>onions</u>, and <u>peppers</u>, and there is a <u>note</u> stuck on the front)\"</p>\n<p>I <em>think</em> I can see how I'd implement this, but not 100% yet.</p>\n\n",
      "PostDate": "2019-01-29T17:59:48.9156539Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
