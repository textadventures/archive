{
  "Topic": {
    "TopicId": "rr1nw_ol6u2umpkoquvycg",
    "ForumId": "10",
    "Title": "Help with creating a container where you can add stuff in it",
    "LastUpdated": "2018-01-03T07:05:19.2963323Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3f2099ec-2e46-49f1-8cd3-d347994444b1",
      "UserId": 338589,
      "Username": "JustAnotherTeenageGuy",
      "AvatarUrl": "https://i.imgur.com/UYj3YdLb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello everyone, I need some advice or guide in order to make this happen. I am creating an RPG about an apocalypse and I want to make a backpack that you can carry around so that you can add stuff that you find in the way on it. \r\n\r\nAnd it would be much better if I could do so with first displaying a list that shows you your inventory and you choose from there what to add to it (I know there is a _ScopeInventory_ thing but I am not familiar with it, I would be glad if you helped me with that as well). How can I make this happen?\r\n\r\nSo far I am only concerned about the adding stuff to it part, that's the most important thing I need. \r\n\r\nThanks for reading and I appreciate your help.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello everyone, I need some advice or guide in order to make this happen. I am creating an RPG about an apocalypse and I want to make a backpack that you can carry around so that you can add stuff that you find in the way on it.</p>\n<p>And it would be much better if I could do so with first displaying a list that shows you your inventory and you choose from there what to add to it (I know there is a <em>ScopeInventory</em> thing but I am not familiar with it, I would be glad if you helped me with that as well). How can I make this happen?</p>\n<p>So far I am only concerned about the adding stuff to it part, that's the most important thing I need.</p>\n<p>Thanks for reading and I appreciate your help.</p>\n\n",
      "PostDate": "2018-01-03T07:05:19.2963323Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e43b4df2-8abf-40f1-a1ae-56a440705272",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not quite sure I understand the question right. Are you saying you want to make a point-and-click interface to the \"Put #object1# in #object2#\" command?\r\n\r\nIf you give the backpack a 'pack' verb, it'd probably look something like:\r\n```\r\nShowMenu (\"What do you want to put in your backpack?\", ScopeReachableInventory(), true) {\r\n  o = GetObject(result)\r\n  if (o = Backpack) {\r\n    msg (\"You can't put the backpack in itself!\")\r\n  }\r\n  else if (not o = null) {\r\n    o.parent = Backpack\r\n  }\r\n}\r\n```\r\n\r\nIn this case, I used ScopeReachableInventory() rather than ScopeInventory(); so that if you're carrying a locked box, it won't let the player put the box's contents in their backpack.\r\n\r\nIf the backpack has a capacity limit, or there are objects that you can't put down, you might want to call the default \"put ___ in ___\" command in place of `o.parent = Backpack`. That way, it'll check whether or not you're allowed to put that object in something else, and whether the pack is full, and give the standard messages back to the player.\r\n\r\nIf the backpack is in your inventory, you might want to prevent the list showing things that are already in it. In that case, you'd replace `ScopeReachableInventory()` with `ListExclude(ScopeReachableInventory(), GetAllChildObjects(Backpack))`\r\n\r\nSorry for any errors, I can't get at Quest from here, so am answering off the top of my head.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not quite sure I understand the question right. Are you saying you want to make a point-and-click interface to the \"Put #object1# in #object2#\" command?</p>\n<p>If you give the backpack a 'pack' verb, it'd probably look something like:</p>\n<pre><code>ShowMenu (\"What do you want to put in your backpack?\", ScopeReachableInventory(), true) {\n  o = GetObject(result)\n  if (o = Backpack) {\n    msg (\"You can't put the backpack in itself!\")\n  }\n  else if (not o = null) {\n    o.parent = Backpack\n  }\n}\n</code></pre>\n<p>In this case, I used ScopeReachableInventory() rather than ScopeInventory(); so that if you're carrying a locked box, it won't let the player put the box's contents in their backpack.</p>\n<p>If the backpack has a capacity limit, or there are objects that you can't put down, you might want to call the default \"put ___ in ___\" command in place of <code>o.parent = Backpack</code>. That way, it'll check whether or not you're allowed to put that object in something else, and whether the pack is full, and give the standard messages back to the player.</p>\n<p>If the backpack is in your inventory, you might want to prevent the list showing things that are already in it. In that case, you'd replace <code>ScopeReachableInventory()</code> with <code>ListExclude(ScopeReachableInventory(), GetAllChildObjects(Backpack))</code></p>\n<p>Sorry for any errors, I can't get at Quest from here, so am answering off the top of my head.</p>\n\n",
      "PostDate": "2018-01-03T11:39:17.0400881Z",
      "LastEditDate": "2018-01-03T11:40:18.7142473Z",
      "link": null
    },
    {
      "PostId": "fef976dd-57c9-4f43-83d3-0a907af419ee",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n-----------------------------\r\n\r\njust to add some more info, as 'mrangel' has it covered:\r\n\r\nthe 'scope' Scripts/Functions, create and return an Object List Variable VARIABLE\r\n\r\nA List VARIABLE is similar to a String/Object VARIABLE, except it can hold/store multiple values:\r\n\r\nString Attribute VARIABLE, example: player.alias = \"HK\"\r\nObject (reference/pointer) Attribute VARIABLE, example: player.weapon = katana // the 'katana' has to be an actual existing Object\r\n\r\nas can be seen, these can only hold/store a single value at a time: \"HK\" and 'katana'\r\n\r\nwhereas, a List VARIABLE, can store/hold multiple values at a time:\r\n\r\nplayer.alias_stringlist_attribute = split (\"HK; Joe; Jim; Jeff\", \";\")\r\n// or:\r\nplayer.alias_stringlist_attribute = NewStringList ()\r\nlist add (player.alias_stringlist_attribute, \"HK\")\r\nlist add (player.alias_stringlist_attribute, \"Joe\")\r\nlist add (player.alias_stringlist_attribute, \"Jim\")\r\nlist add (player.alias_stringlist_attribute, \"Jeff\")\r\n\r\n// the 'katana', 'claymore', 'battle_hammer', and 'battle_axe', all have to be actual existing Objects:\r\nplayer.weapon_objectlist_attribute = NewObjectList ()\r\nlist add (player.weapon_objectlist_attribute, katana)\r\nlist add (player.weapon_objectlist_attribute, claymore)\r\nlist add (player.weapon_objectlist_attribute, battle_hammer)\r\nlist add (player.weapon_objectlist_attribute, battle_axe)\r\n\r\n------------\r\n\r\nwhat makes Lists so useful, is that you can then iterate through their items:\r\n\r\n```\r\nforeach (item_variable, LIST) {\r\n  // scripting using as for this example: 'item_variable'\r\n}\r\n\r\nfor an example:\r\n\r\ncreate (\"joe\")\r\njoe.run_laps => msg (\"Joe runs laps\")\r\n\r\ncreate (\"jim\")\r\njim.run_laps => msg (\"Jim runs laps\")\r\n\r\ncreate (\"jeff\")\r\njeff.run_laps => msg (\"Jeff runs laps\")\r\n\r\ncreate (\"jack\")\r\njack.run_laps => msg (\"Jack runs laps\")\r\n\r\ncreate (\"team_object\")\r\nteam_object.team_list = NewObjectList ()\r\nlist add (team_object.team_list, joe)\r\nlist add (team_object.team_list, jim)\r\nlist add (team_object.team_list, jeff)\r\nlist add (team_object.team_list, jack)\r\n\r\nforeach (team_member, team_object.team_list) {\r\n  do (team_member, \"run_laps\")\r\n}\r\n\r\n// --------------------------\r\n\r\nconceptually, how 'foreach' works:\r\n\r\n// team_member = joe\r\ndo (team_member, \"run_laps\")\r\n// do (joe, \"run_laps\")\r\n\r\n// team_member = jim\r\ndo (team_member, \"run_laps\")\r\n// do (jim, \"run_laps\")\r\n\r\n// team_member = jeff\r\ndo (team_member, \"run_laps\")\r\n// do (jeff, \"run_laps\")\r\n\r\n// team_member = jack\r\ndo (team_member, \"run_laps\")\r\n// do (jack, \"run_laps\")\r\n```\r\n\r\nand for selecting which/what range of items (what/which items) to iterate through, there's the: 'for' Script/Function, as well.\r\n\r\nThe 'foreach' does ALL ('each/every/all' --- 'for-EACH') items\r\n\r\n-------------\r\n\r\nhere's more detailed guides:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk\r\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk\r\n\r\nask if you need help with anything",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>just to add some more info, as 'mrangel' has it covered:</p>\n<p>the 'scope' Scripts/Functions, create and return an Object List Variable VARIABLE</p>\n<p>A List VARIABLE is similar to a String/Object VARIABLE, except it can hold/store multiple values:</p>\n<p>String Attribute VARIABLE, example: player.alias = \"HK\"<br>\nObject (reference/pointer) Attribute VARIABLE, example: player.weapon = katana // the 'katana' has to be an actual existing Object</p>\n<p>as can be seen, these can only hold/store a single value at a time: \"HK\" and 'katana'</p>\n<p>whereas, a List VARIABLE, can store/hold multiple values at a time:</p>\n<p>player.alias_stringlist_attribute = split (\"HK; Joe; Jim; Jeff\", \";\")<br>\n// or:<br>\nplayer.alias_stringlist_attribute = NewStringList ()<br>\nlist add (player.alias_stringlist_attribute, \"HK\")<br>\nlist add (player.alias_stringlist_attribute, \"Joe\")<br>\nlist add (player.alias_stringlist_attribute, \"Jim\")<br>\nlist add (player.alias_stringlist_attribute, \"Jeff\")</p>\n<p>// the 'katana', 'claymore', 'battle_hammer', and 'battle_axe', all have to be actual existing Objects:<br>\nplayer.weapon_objectlist_attribute = NewObjectList ()<br>\nlist add (player.weapon_objectlist_attribute, katana)<br>\nlist add (player.weapon_objectlist_attribute, claymore)<br>\nlist add (player.weapon_objectlist_attribute, battle_hammer)<br>\nlist add (player.weapon_objectlist_attribute, battle_axe)</p>\n<hr>\n<p>what makes Lists so useful, is that you can then iterate through their items:</p>\n<pre><code>foreach (item_variable, LIST) {\n  // scripting using as for this example: 'item_variable'\n}\n\nfor an example:\n\ncreate (\"joe\")\njoe.run_laps =&gt; msg (\"Joe runs laps\")\n\ncreate (\"jim\")\njim.run_laps =&gt; msg (\"Jim runs laps\")\n\ncreate (\"jeff\")\njeff.run_laps =&gt; msg (\"Jeff runs laps\")\n\ncreate (\"jack\")\njack.run_laps =&gt; msg (\"Jack runs laps\")\n\ncreate (\"team_object\")\nteam_object.team_list = NewObjectList ()\nlist add (team_object.team_list, joe)\nlist add (team_object.team_list, jim)\nlist add (team_object.team_list, jeff)\nlist add (team_object.team_list, jack)\n\nforeach (team_member, team_object.team_list) {\n  do (team_member, \"run_laps\")\n}\n\n// --------------------------\n\nconceptually, how 'foreach' works:\n\n// team_member = joe\ndo (team_member, \"run_laps\")\n// do (joe, \"run_laps\")\n\n// team_member = jim\ndo (team_member, \"run_laps\")\n// do (jim, \"run_laps\")\n\n// team_member = jeff\ndo (team_member, \"run_laps\")\n// do (jeff, \"run_laps\")\n\n// team_member = jack\ndo (team_member, \"run_laps\")\n// do (jack, \"run_laps\")\n</code></pre>\n<p>and for selecting which/what range of items (what/which items) to iterate through, there's the: 'for' Script/Function, as well.</p>\n<p>The 'foreach' does ALL ('each/every/all' --- 'for-EACH') items</p>\n<hr>\n<p>here's more detailed guides:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk<br>\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk</p>\n<p>ask if you need help with anything</p>\n\n",
      "PostDate": "2018-01-03T17:40:37.4174965Z",
      "LastEditDate": "2018-01-03T17:47:04.2915642Z",
      "link": null
    },
    {
      "PostId": "0eff449b-e1ed-499f-9da8-0bb4d3988cac",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/3s3Ekp2b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "After testing out mrangel's code (which works out of the box), I added and changed a few things (just because he noted his lack of Quest access):\r\n\r\n---\r\n\r\n<details>\r\n\r\n```\r\n    <object name=\"Backpack\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_open\" />\r\n      <feature_container />\r\n      <pack type=\"script\"><![CDATA[\r\n        objects = ListExclude(ScopeReachableInventory(), GetAllChildObjects(Backpack))\r\n        objects = ListExclude(objects,Backpack)\r\n        if (ListCount(objects)>=1) {\r\n        }\r\n        ShowMenu (\"What do you want to put in your backpack?\", objects, true) {\r\n          o = GetObject(result)\r\n          if (o = Backpack) {\r\n            msg (\"You can't put the backpack in itself!\")\r\n          }\r\n          else if (not o = null) {\r\n            PackBackpack (o)\r\n          }\r\n        }\r\n      ]]></pack>\r\n      <take />\r\n      <alias>backpack</alias>\r\n      <listchildren />\r\n    </object>\r\n```\r\n\r\n```\r\n  <function name=\"PackBackpack\" parameters=\"object1\">\r\n    // put object1 in/on object 2\r\n    object2 = Backpack\r\n    canbedropped = true\r\n    if (HasBoolean(object1, \"drop\")) {\r\n      if (not object1.drop) {\r\n        canbedropped = false\r\n      }\r\n    }\r\n    if (object1.parent = object2) {\r\n      msg (DynamicTemplate(\"AlreadyThere\", object1))\r\n    }\r\n    else if (not ListContains(ScopeInventory(), object1)) {\r\n      msg (DynamicTemplate(\"NotCarrying\", object1))\r\n    }\r\n    else if (not canbedropped) {\r\n      msg (DynamicTemplate(\"ObjectCannotBeStored\", object1))\r\n    }\r\n    else if (not ListContains(ScopeReachable(), object1)) {\r\n      msg (DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object1)))\r\n    }\r\n    else if (not ListContains(ScopeReachable(), object2)) {\r\n      msg (DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object2)))\r\n    }\r\n    else if (not object2.container) {\r\n      msg (Template(\"CannotDoThat\"))\r\n    }\r\n    else if (not object2.isopen) {\r\n      msg (DynamicTemplate(\"ObjectNotOpen\", object2))\r\n    }\r\n    else {\r\n      if (GetBoolean(object2, \"hidechildren\")) {\r\n        object2.hidechildren = false\r\n      }\r\n      // if (HasDelegateImplementation(object2, \"addscript\")) {\r\n        // rundelegate (object2, \"addscript\", object1)\r\n        // }\r\n      params = NewDictionary()\r\n      dictionary add (params, \"object\", object1)\r\n      dictionary add (params, \"destination\", object2)\r\n      if (HasScript(object2, \"addscript\")) {\r\n        do (object2, \"addscript\", params)\r\n      }\r\n      else if (HasScript(object1, \"drop\")) {\r\n        do (object1, \"drop\", params)\r\n      }\r\n      else {\r\n        object1.parent = object2\r\n        msg (Template(\"Done\"))\r\n      }\r\n    }\r\n    // must be carrying object1\r\n    // item cannot be dropped\r\n    // object1 must not be inside a closed container\r\n    // object2 must not be inside a closed container\r\n    // object2 must be an open container or surface\r\n  </function>\r\n```\r\n\r\n\r\n\r\n\r\n---\r\nThe function is the script from the \"put ___ in ___\" command, but I modified it just a little bit and made it a function, so there's no need to use ```HandleSingleCommand(\"put \"+GetDisplayAlias(o)+\" in backpack\")```.\r\n\r\n\r\n---\r\n\r\n</details>\r\n\r\n---\r\nNOTE:\r\n\r\nThis is pending mrangel's approval.",
      "EditableFormat": "markdown",
      "HTML": "<p>After testing out mrangel's code (which works out of the box), I added and changed a few things (just because he noted his lack of Quest access):</p>\n<hr>\n<details>\n<pre><code>    &lt;object name=\"Backpack\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_open\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;pack type=\"script\"&gt;&lt;![CDATA[\n        objects = ListExclude(ScopeReachableInventory(), GetAllChildObjects(Backpack))\n        objects = ListExclude(objects,Backpack)\n        if (ListCount(objects)&gt;=1) {\n        }\n        ShowMenu (\"What do you want to put in your backpack?\", objects, true) {\n          o = GetObject(result)\n          if (o = Backpack) {\n            msg (\"You can't put the backpack in itself!\")\n          }\n          else if (not o = null) {\n            PackBackpack (o)\n          }\n        }\n      ]]&gt;&lt;/pack&gt;\n      &lt;take /&gt;\n      &lt;alias&gt;backpack&lt;/alias&gt;\n      &lt;listchildren /&gt;\n    &lt;/object&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"PackBackpack\" parameters=\"object1\"&gt;\n    // put object1 in/on object 2\n    object2 = Backpack\n    canbedropped = true\n    if (HasBoolean(object1, \"drop\")) {\n      if (not object1.drop) {\n        canbedropped = false\n      }\n    }\n    if (object1.parent = object2) {\n      msg (DynamicTemplate(\"AlreadyThere\", object1))\n    }\n    else if (not ListContains(ScopeInventory(), object1)) {\n      msg (DynamicTemplate(\"NotCarrying\", object1))\n    }\n    else if (not canbedropped) {\n      msg (DynamicTemplate(\"ObjectCannotBeStored\", object1))\n    }\n    else if (not ListContains(ScopeReachable(), object1)) {\n      msg (DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object1)))\n    }\n    else if (not ListContains(ScopeReachable(), object2)) {\n      msg (DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object2)))\n    }\n    else if (not object2.container) {\n      msg (Template(\"CannotDoThat\"))\n    }\n    else if (not object2.isopen) {\n      msg (DynamicTemplate(\"ObjectNotOpen\", object2))\n    }\n    else {\n      if (GetBoolean(object2, \"hidechildren\")) {\n        object2.hidechildren = false\n      }\n      // if (HasDelegateImplementation(object2, \"addscript\")) {\n        // rundelegate (object2, \"addscript\", object1)\n        // }\n      params = NewDictionary()\n      dictionary add (params, \"object\", object1)\n      dictionary add (params, \"destination\", object2)\n      if (HasScript(object2, \"addscript\")) {\n        do (object2, \"addscript\", params)\n      }\n      else if (HasScript(object1, \"drop\")) {\n        do (object1, \"drop\", params)\n      }\n      else {\n        object1.parent = object2\n        msg (Template(\"Done\"))\n      }\n    }\n    // must be carrying object1\n    // item cannot be dropped\n    // object1 must not be inside a closed container\n    // object2 must not be inside a closed container\n    // object2 must be an open container or surface\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>The function is the script from the \"put ___ in ___\" command, but I modified it just a little bit and made it a function, so there's no need to use <code>HandleSingleCommand(\"put \"+GetDisplayAlias(o)+\" in backpack\")</code>.</p>\n<hr>\n</details>\n<hr>\n<p>NOTE:</p>\n<p>This is pending mrangel's approval.</p>\n\n",
      "PostDate": "2018-01-03T22:45:03.4349515Z",
      "LastEditDate": "2018-01-03T22:46:05.1309058Z",
      "link": null
    },
    {
      "PostId": "803f9521-bc81-48e8-9a9e-745ad575ac0a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The function is the script from the \"put ___ in ___\" command, but I modified it just a little bit and made it a function, so there's no need to use `HandleSingleCommand(\"put \"+GetDisplayAlias(o)+\" in backpack\")`.\r\n\r\nI wouldn't have used that anyway; calling the parser is probably the slowest part of any script, and we already know which command's script we need to call. I'd likely have done something like:\r\n```\r\nparams = NewDictionary()\r\ndictionary add (params, \"object1\", o)\r\ndictionary add (params, \"object2\", backpack)\r\ninvoke (put.script, params)\r\n```\r\n\r\n(assuming `put` is the name of the \"put ___ in ___\" command. But now I'm wondering, would it be better to use `do(put, \"script\", params)`?)\r\n\r\nIn the case of KV's code, there's a little redundancy. As you're removing the backpack from the list of objects before you show the menu, it can't be selected. So the `if (o = Backpack)` check will never be true. (The check for o being null is unlikely to be true; but could be if a timer script destroys the object while the player is looking at the menu)\r\n\r\n`PackBackpack` also does some checks that initially seem redundant: That you're carrying object1, that it's not the backpack, and that it isn't already in the backpack. But I'd say it's better to have those, because it's possible for a timer event to move objects after the list has been displayed but before the player chose an option.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The function is the script from the \"put ___ in ___\" command, but I modified it just a little bit and made it a function, so there's no need to use <code>HandleSingleCommand(\"put \"+GetDisplayAlias(o)+\" in backpack\")</code>.</p>\n</blockquote>\n<p>I wouldn't have used that anyway; calling the parser is probably the slowest part of any script, and we already know which command's script we need to call. I'd likely have done something like:</p>\n<pre><code>params = NewDictionary()\ndictionary add (params, \"object1\", o)\ndictionary add (params, \"object2\", backpack)\ninvoke (put.script, params)\n</code></pre>\n<p>(assuming <code>put</code> is the name of the \"put ___ in ___\" command. But now I'm wondering, would it be better to use <code>do(put, \"script\", params)</code>?)</p>\n<p>In the case of KV's code, there's a little redundancy. As you're removing the backpack from the list of objects before you show the menu, it can't be selected. So the <code>if (o = Backpack)</code> check will never be true. (The check for o being null is unlikely to be true; but could be if a timer script destroys the object while the player is looking at the menu)</p>\n<p><code>PackBackpack</code> also does some checks that initially seem redundant: That you're carrying object1, that it's not the backpack, and that it isn't already in the backpack. But I'd say it's better to have those, because it's possible for a timer event to move objects after the list has been displayed but before the player chose an option.</p>\n\n",
      "PostDate": "2018-01-04T13:03:26.4860627Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "de81d11b-7e19-41a9-a01f-53d83197f0c1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/3s3Ekp2b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Aha!\r\n\r\nUsing invoke is very slick!\r\n\r\nI'll be right back...\r\n\r\n\r\n---\r\nEDIT\r\n\r\nI can't believe I've been using HandleSingleCommand() all this time instead of doing that!  (KV trashes the room.  ...then nonchalantly straightens everything back up and pretends it didn't just happen.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Aha!</p>\n<p>Using invoke is very slick!</p>\n<p>I'll be right back...</p>\n<hr>\n<p>EDIT</p>\n<p>I can't believe I've been using HandleSingleCommand() all this time instead of doing that!  (KV trashes the room.  ...then nonchalantly straightens everything back up and pretends it didn't just happen.)</p>\n\n",
      "PostDate": "2018-01-04T14:48:59.6896459Z",
      "LastEditDate": "2018-01-04T23:19:33.1903289Z",
      "link": null
    },
    {
      "PostId": "3890524c-8d17-4700-9e44-6a53510e898a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/3s3Ekp2b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How about this, mrangel?\r\n\r\nIt works well for me:\r\n\r\n```\r\nobjects = ListExclude(ListExclude(ScopeReachableInventory(), GetAllChildObjects(backpack)),backpack)\r\nif (ListCount(objects)>=1) {\r\n  ShowMenu (\"What do you want to put in your backpack?\", objects, true) {\r\n    o = GetObject(result)\r\n    params = NewDictionary()\r\n    dictionary add (params, \"object1\", o)\r\n    dictionary add (params, \"object2\", backpack)\r\n    invoke (put.script, params)\r\n  }\r\n}\r\nelse {\r\n  msg (\"You're not carrying anything you can pack at the moment.\")\r\n}\r\n```\r\n\r\n---\r\nThe backpack object:\r\n\r\n<details>\r\n\r\n```\r\n<object name=\"backpack\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_open\" />\r\n      <feature_container />\r\n      <take />\r\n      <alias>backpack</alias>\r\n      <listchildren />\r\n      <pack type=\"script\"><![CDATA[\r\n        objects = ListExclude(ListExclude(ScopeReachableInventory(), GetAllChildObjects(backpack)),backpack)\r\n        if (ListCount(objects)>=1) {\r\n          ShowMenu (\"What do you want to put in your backpack?\", objects, true) {\r\n            o = GetObject(result)\r\n            params = NewDictionary()\r\n            dictionary add (params, \"object1\", o)\r\n            dictionary add (params, \"object2\", backpack)\r\n            invoke (put.script, params)\r\n          }\r\n        }\r\n        else {\r\n          msg (\"You're not carrying anything you can pack at the moment.\")\r\n        }\r\n      ]]></pack>\r\n      <alt type=\"stringlist\">\r\n        <value>back pack</value>\r\n      </alt>\r\n    </object>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>How about this, mrangel?</p>\n<p>It works well for me:</p>\n<pre><code>objects = ListExclude(ListExclude(ScopeReachableInventory(), GetAllChildObjects(backpack)),backpack)\nif (ListCount(objects)&gt;=1) {\n  ShowMenu (\"What do you want to put in your backpack?\", objects, true) {\n    o = GetObject(result)\n    params = NewDictionary()\n    dictionary add (params, \"object1\", o)\n    dictionary add (params, \"object2\", backpack)\n    invoke (put.script, params)\n  }\n}\nelse {\n  msg (\"You're not carrying anything you can pack at the moment.\")\n}\n</code></pre>\n<hr>\n<p>The backpack object:</p>\n<details>\n<pre><code>&lt;object name=\"backpack\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_open\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;take /&gt;\n      &lt;alias&gt;backpack&lt;/alias&gt;\n      &lt;listchildren /&gt;\n      &lt;pack type=\"script\"&gt;&lt;![CDATA[\n        objects = ListExclude(ListExclude(ScopeReachableInventory(), GetAllChildObjects(backpack)),backpack)\n        if (ListCount(objects)&gt;=1) {\n          ShowMenu (\"What do you want to put in your backpack?\", objects, true) {\n            o = GetObject(result)\n            params = NewDictionary()\n            dictionary add (params, \"object1\", o)\n            dictionary add (params, \"object2\", backpack)\n            invoke (put.script, params)\n          }\n        }\n        else {\n          msg (\"You're not carrying anything you can pack at the moment.\")\n        }\n      ]]&gt;&lt;/pack&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;back pack&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-01-04T23:00:04.8996504Z",
      "LastEditDate": "2018-01-04T23:16:37.0219276Z",
      "link": null
    },
    {
      "PostId": "33367676-a727-4859-9735-58abe07e288f",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually I have an idea.\r\n\r\nYou have a room where you store all the items in.\r\nYou have an object with a verb to move other objects to your inventory.\r\n\r\nYou'd just have to send the objects to the other room. Then with the object in your inventory, you use it to send other objects you want to your inventory.\r\n\r\nI might actually use that.",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually I have an idea.</p>\n<p>You have a room where you store all the items in.<br>\nYou have an object with a verb to move other objects to your inventory.</p>\n<p>You'd just have to send the objects to the other room. Then with the object in your inventory, you use it to send other objects you want to your inventory.</p>\n<p>I might actually use that.</p>\n\n",
      "PostDate": "2018-01-05T01:53:10.823296Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "78d01c18-d530-4ffb-809c-5ef38701c804",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "KV: Yep, that's exactly what I was thinking :) I didn't post it myself because I wasn't sure the name of the command (like I think the look command is named \"lookat\" or something, so I wasn't sure if it was \"put\" or \"putin\")",
      "EditableFormat": "markdown",
      "HTML": "<p>KV: Yep, that's exactly what I was thinking :) I didn't post it myself because I wasn't sure the name of the command (like I think the look command is named \"lookat\" or something, so I wasn't sure if it was \"put\" or \"putin\")</p>\n\n",
      "PostDate": "2018-01-05T13:03:45.2398968Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "573ab822-4723-4e1b-a3d8-00bbf976c75f",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/3s3Ekp2b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Awesome!\r\n\r\nYou said you couldn't test it.  So, I thought I'd be Pinky to your Brain.\r\n\r\nSo... what are we gonna do today, Brain?\r\n\r\n---\r\nWe all like Pinky and the Brain from Animaniacs, right?\r\n\r\n---\r\nIn the key of C:\r\n\r\nmrangel is a genius.\r\n\r\nKV's insane.",
      "EditableFormat": "markdown",
      "HTML": "<p>Awesome!</p>\n<p>You said you couldn't test it.  So, I thought I'd be Pinky to your Brain.</p>\n<p>So... what are we gonna do today, Brain?</p>\n<hr>\n<p>We all like Pinky and the Brain from Animaniacs, right?</p>\n<hr>\n<p>In the key of C:</p>\n<p>mrangel is a genius.</p>\n<p>KV's insane.</p>\n\n",
      "PostDate": "2018-01-05T15:40:18.1344023Z",
      "LastEditDate": "2018-01-05T17:06:48.6082358Z",
      "link": null
    }
  ]
}
