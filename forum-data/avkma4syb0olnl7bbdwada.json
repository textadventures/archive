{
  "Topic": {
    "TopicId": "avkma4syb0olnl7bbdwada",
    "ForumId": "18",
    "Title": "Grid inventory - take 2",
    "LastUpdated": "2020-04-05T17:14:32.91892Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3d7fbd4b-ac10-4d21-bcbf-cf315c2556d4",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Exactly two months on from my musings about this subject - as seen here; http://textadventures.co.uk/forum/quest/topic/ncyrvbqk90ifgqmx6ev0_a/visual-player-inventory\r\n\r\nI'm back on trying to implement it, after relaxing my time constraints and deciding that the current unsortable list-based system is an obstacle to a user-friendly large-scale RPG game.\r\n\r\nAs my knowledge on js frankly wouldn't fill one side of a sticky note, I'm starting from the beginning - making a grid - and moving on from there. I have the grid made, I have the dimensions of everything set - 40px columns/rows, 2px grid gap, 3px padding, totally 214px in width and height, where 214 px is the current size of my panes. Grid items have a border of 1px with modifiable colours, which I can probably use to highlight the item last clicked on, or colour code items by their type - consumable, armour, weapon, etc.\r\n\r\nNext up is figuring out how to append objects and thumbnails to those grid items, and how to get them to drag and drop around the grid, along with swapping.\r\n\r\n... Easier said than done with no knowledge of the topic at hand, but what better time to learn than during a lockdown! If anyone thinks they can help, I'd more than welcome it - ideally I'd like to make this a library available for anyone to use, as I think it's something Quest could sorely use!\r\n\r\nGoals -\r\n- 5x5 grid inventory system, support for drag and drop reorganizing, support for item swapping on dropping on a filled space.\r\n- Support for tying existing game objects to the new inventory system - appending small images to each item.\r\n- Support for the game recording and displaying this information on game save/load.\r\n- Stacking of consumable items - e.g rather than 2 Health Potions taking up 2 slots, they should take up 1 slot with a '2' in the corner.\r\n- Clicking on an item in the inventory will display its verbs as normal, but must also display the item's alias. Hovering over an item should display the item's name above the cursor.\r\n\r\n- Optional but desired - Support for item 'weight', wherein weight is a number of slots. Displayed as a number in the bottom left opposite stack count, grays out a grid slot starting from the last row and column and moving down the row for each weight above '1'. Automatically moves items caught in these greyed slots into an open slot or, if there aren't enough open slots, cancels and action and informs the player they must make room.\r\n\r\n- Optional - A sort button, sorting by item type/class first, then by alphabetical order. (eg; Consumable, Weapon, Armour, Outfit. Apple, Banana, Orange, Dagger, Sword, Leather Armour, Steel Plate, Noble Gown, Villager Rags.)\r\n\r\n- Not desired - Items taking up different grid sizes/shapes. Too complicated, as fond as my memories of Deus Ex inventory Tetris are.",
      "EditableFormat": "markdown",
      "HTML": "<p>Exactly two months on from my musings about this subject - as seen here; http://textadventures.co.uk/forum/quest/topic/ncyrvbqk90ifgqmx6ev0_a/visual-player-inventory</p>\n<p>I'm back on trying to implement it, after relaxing my time constraints and deciding that the current unsortable list-based system is an obstacle to a user-friendly large-scale RPG game.</p>\n<p>As my knowledge on js frankly wouldn't fill one side of a sticky note, I'm starting from the beginning - making a grid - and moving on from there. I have the grid made, I have the dimensions of everything set - 40px columns/rows, 2px grid gap, 3px padding, totally 214px in width and height, where 214 px is the current size of my panes. Grid items have a border of 1px with modifiable colours, which I can probably use to highlight the item last clicked on, or colour code items by their type - consumable, armour, weapon, etc.</p>\n<p>Next up is figuring out how to append objects and thumbnails to those grid items, and how to get them to drag and drop around the grid, along with swapping.</p>\n<p>... Easier said than done with no knowledge of the topic at hand, but what better time to learn than during a lockdown! If anyone thinks they can help, I'd more than welcome it - ideally I'd like to make this a library available for anyone to use, as I think it's something Quest could sorely use!</p>\n<p>Goals -</p>\n<ul>\n<li>\n<p>5x5 grid inventory system, support for drag and drop reorganizing, support for item swapping on dropping on a filled space.</p>\n</li>\n<li>\n<p>Support for tying existing game objects to the new inventory system - appending small images to each item.</p>\n</li>\n<li>\n<p>Support for the game recording and displaying this information on game save/load.</p>\n</li>\n<li>\n<p>Stacking of consumable items - e.g rather than 2 Health Potions taking up 2 slots, they should take up 1 slot with a '2' in the corner.</p>\n</li>\n<li>\n<p>Clicking on an item in the inventory will display its verbs as normal, but must also display the item's alias. Hovering over an item should display the item's name above the cursor.</p>\n</li>\n<li>\n<p>Optional but desired - Support for item 'weight', wherein weight is a number of slots. Displayed as a number in the bottom left opposite stack count, grays out a grid slot starting from the last row and column and moving down the row for each weight above '1'. Automatically moves items caught in these greyed slots into an open slot or, if there aren't enough open slots, cancels and action and informs the player they must make room.</p>\n</li>\n<li>\n<p>Optional - A sort button, sorting by item type/class first, then by alphabetical order. (eg; Consumable, Weapon, Armour, Outfit. Apple, Banana, Orange, Dagger, Sword, Leather Armour, Steel Plate, Noble Gown, Villager Rags.)</p>\n</li>\n<li>\n<p>Not desired - Items taking up different grid sizes/shapes. Too complicated, as fond as my memories of Deus Ex inventory Tetris are.</p>\n</li>\n</ul>\n\n",
      "PostDate": "2020-04-05T17:14:32.91892Z",
      "LastEditDate": "2020-04-06T13:04:35.2658721Z",
      "link": null
    },
    {
      "PostId": "21edf3d3-b407-4003-9ca3-9ecd78d7c001",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For images, I'd suggest using filenames of the form `inventory_(objectname).png` - this system will need to be mostly written in javascript, and JS code only has access to an object's name, alias, and current verbs, so using the name avoids any need to have a turnscript passing filenames to the javascript every time you pick up an item.\r\n\r\nTo link your script to the inventory, you want to look at the existing `updateList` function:\r\n```\r\nfunction updateList(listName, listData) {\r\n    var listElement = \"\";\r\n    var buttonPrefix = \"\";\r\n\r\n    if (listName == \"inventory\") {\r\n        listElement = \"#lstInventory\";\r\n        inventoryVerbs = new Array();\r\n        buttonPrefix = \"cmdInventory\";\r\n    }\r\n\r\n    if (listName == \"placesobjects\") {\r\n        listElement = \"#lstPlacesObjects\";\r\n        placesObjectsVerbs = new Array();\r\n        buttonPrefix = \"cmdPlacesObjects\";\r\n    }\r\n\r\n    var previousSelectionText = \"\";\r\n    var previousSelectionKey = \"\";\r\n    var foundPreviousSelection = false;\r\n\r\n    var $selected = $(listElement + \" .ui-selected\");\r\n    if ($selected.length > 0) {\r\n        previousSelectionText = $selected.first().text();\r\n        previousSelectionKey = $selected.first().data(\"key\");\r\n    }\r\n\r\n    $(listElement).empty();\r\n    var count = 0;\r\n    $.each(listData, function (key, value) {\r\n        var data = JSON.parse(value);\r\n        var objectDisplayName = data[\"Text\"];\r\n        var verbsArray, idPrefix;\r\n\r\n        if (listName == \"inventory\") {\r\n            verbsArray = inventoryVerbs;\r\n            idPrefix = \"cmdInventory\";\r\n        } else {\r\n            verbsArray = placesObjectsVerbs;\r\n            idPrefix = \"cmdPlacesObjects\";\r\n        }\r\n\r\n        verbsArray.push(data);\r\n\r\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n            var $newItem = $(\"<li/>\").data(\"key\", key).data(\"elementid\", data[\"ElementId\"]).data(\"elementname\", data[\"ElementName\"]).data(\"index\", count).html(objectDisplayName);\r\n            if (objectDisplayName == previousSelectionText && key == previousSelectionKey) {\r\n                $newItem.addClass(\"ui-selected\");\r\n                foundPreviousSelection = true;\r\n                updateVerbButtons($newItem, verbsArray, idPrefix);\r\n            }\r\n            $(listElement).append($newItem);\r\n            count++;\r\n        }\r\n    });\r\n\r\n    var selectSize = count;\r\n    if (selectSize < 3) selectSize = 3;\r\n    if (selectSize > 12) selectSize = 12;\r\n    $(listElement).attr(\"size\", selectSize);\r\n\r\n    if (!foundPreviousSelection) {\r\n        for (var i = 1; i <= verbButtonCount; i++) {\r\n            var target = $(\"#\" + buttonPrefix + i);\r\n            target.hide();\r\n        }\r\n    }\r\n}\r\n```\r\nThis is the code responsible for the current panes.\r\n\r\nI presume that you would modify this to behave differently when `listName` is \"inventory\"; in this case `listData` is a plain object whose members are objects with the keys \"ElementId\" (Quest name), \"ElementName\" (alias), and \"Text\" (listalias).\r\n\r\nYou will need to ensure that any objects in this data that aren't already in the inventory are displayed, and any objects in the inventory that aren't in this list are removed.",
      "EditableFormat": "markdown",
      "HTML": "<p>For images, I'd suggest using filenames of the form <code>inventory_(objectname).png</code> - this system will need to be mostly written in javascript, and JS code only has access to an object's name, alias, and current verbs, so using the name avoids any need to have a turnscript passing filenames to the javascript every time you pick up an item.</p>\n<p>To link your script to the inventory, you want to look at the existing <code>updateList</code> function:</p>\n<pre><code>function updateList(listName, listData) {\n    var listElement = \"\";\n    var buttonPrefix = \"\";\n\n    if (listName == \"inventory\") {\n        listElement = \"#lstInventory\";\n        inventoryVerbs = new Array();\n        buttonPrefix = \"cmdInventory\";\n    }\n\n    if (listName == \"placesobjects\") {\n        listElement = \"#lstPlacesObjects\";\n        placesObjectsVerbs = new Array();\n        buttonPrefix = \"cmdPlacesObjects\";\n    }\n\n    var previousSelectionText = \"\";\n    var previousSelectionKey = \"\";\n    var foundPreviousSelection = false;\n\n    var $selected = $(listElement + \" .ui-selected\");\n    if ($selected.length &gt; 0) {\n        previousSelectionText = $selected.first().text();\n        previousSelectionKey = $selected.first().data(\"key\");\n    }\n\n    $(listElement).empty();\n    var count = 0;\n    $.each(listData, function (key, value) {\n        var data = JSON.parse(value);\n        var objectDisplayName = data[\"Text\"];\n        var verbsArray, idPrefix;\n\n        if (listName == \"inventory\") {\n            verbsArray = inventoryVerbs;\n            idPrefix = \"cmdInventory\";\n        } else {\n            verbsArray = placesObjectsVerbs;\n            idPrefix = \"cmdPlacesObjects\";\n        }\n\n        verbsArray.push(data);\n\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n            var $newItem = $(\"&lt;li/&gt;\").data(\"key\", key).data(\"elementid\", data[\"ElementId\"]).data(\"elementname\", data[\"ElementName\"]).data(\"index\", count).html(objectDisplayName);\n            if (objectDisplayName == previousSelectionText &amp;&amp; key == previousSelectionKey) {\n                $newItem.addClass(\"ui-selected\");\n                foundPreviousSelection = true;\n                updateVerbButtons($newItem, verbsArray, idPrefix);\n            }\n            $(listElement).append($newItem);\n            count++;\n        }\n    });\n\n    var selectSize = count;\n    if (selectSize &lt; 3) selectSize = 3;\n    if (selectSize &gt; 12) selectSize = 12;\n    $(listElement).attr(\"size\", selectSize);\n\n    if (!foundPreviousSelection) {\n        for (var i = 1; i &lt;= verbButtonCount; i++) {\n            var target = $(\"#\" + buttonPrefix + i);\n            target.hide();\n        }\n    }\n}\n</code></pre>\n<p>This is the code responsible for the current panes.</p>\n<p>I presume that you would modify this to behave differently when <code>listName</code> is \"inventory\"; in this case <code>listData</code> is a plain object whose members are objects with the keys \"ElementId\" (Quest name), \"ElementName\" (alias), and \"Text\" (listalias).</p>\n<p>You will need to ensure that any objects in this data that aren't already in the inventory are displayed, and any objects in the inventory that aren't in this list are removed.</p>\n\n",
      "PostDate": "2020-04-05T19:33:03.0228322Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9a705e36-2cd7-4cc0-bef0-64e471efa335",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just the person I wanted to hear from, haha. That should come in handy when I get that far, thank you!\r\n\r\nFor now I'm continuing to tackle things in order, which means now I'm trying to apply Sortable functionality to my existing grid. The sample code for JQuery's swappable, unfortunately, pulls from existing stylesheets for most of the setup, making it kind of... difficult to learn from. That's going slowly. Might take a break for now, then come back. \r\n\r\nAt the bottom is what I have so far, which simply generates a grid with the correct dimensions I need (and some placeholder colours). Only 3 of the items are actually filled. Now to figure out where to insert the Sortable functionality, and what I need to rewrite to get it to all point in the right directions. (Can you tell I'm new to this?!) \r\n\r\nTrying to learn that from the example code found here; https://jqueryui.com/sortable/#display-grid\r\nBut, as I said, it pulls from existing style sheets, which complicates things a bit.\r\n\r\n(Oh, and this isn't going anywhere near Quest itself, yet. Gunna wrap my head around setting it up before I complicate things.)\r\n\r\n```<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<style>\r\n.grid-container {\r\n  display: inline-grid;\r\n  grid-gap: 2px;\r\n  grid-template-columns: 40px 40px 40px 40px 40px;\r\n  grid-template-rows: 40px 40px 40px 40px 40px;\r\n  background-color: black;\r\n  padding: 3px;\r\n}\r\n\r\n.grid-item {\r\n  background-color: rgba(255, 100, 255, 0.8);\r\n  border: 1px solid rgba(0, 0, 0, 0.8);\r\n  padding: 0px;\r\n  font-size: 36px;\r\n  text-align: center;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<h1>The grid-gap Property:</h1>\r\n\r\n<div class=\"grid-container\">\r\n  <div class=\"grid-item\">1</div>\r\n  <div class=\"grid-item\">2</div>\r\n  <div class=\"grid-item\">3</div>  \r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>  \r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div> \r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n</div>\r\n\r\n\r\n</body>\r\n</html>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Just the person I wanted to hear from, haha. That should come in handy when I get that far, thank you!</p>\n<p>For now I'm continuing to tackle things in order, which means now I'm trying to apply Sortable functionality to my existing grid. The sample code for JQuery's swappable, unfortunately, pulls from existing stylesheets for most of the setup, making it kind of... difficult to learn from. That's going slowly. Might take a break for now, then come back.</p>\n<p>At the bottom is what I have so far, which simply generates a grid with the correct dimensions I need (and some placeholder colours). Only 3 of the items are actually filled. Now to figure out where to insert the Sortable functionality, and what I need to rewrite to get it to all point in the right directions. (Can you tell I'm new to this?!)</p>\n<p>Trying to learn that from the example code found here; https://jqueryui.com/sortable/#display-grid<br>\nBut, as I said, it pulls from existing style sheets, which complicates things a bit.</p>\n<p>(Oh, and this isn't going anywhere near Quest itself, yet. Gunna wrap my head around setting it up before I complicate things.)</p>\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\n.grid-container {\n  display: inline-grid;\n  grid-gap: 2px;\n  grid-template-columns: 40px 40px 40px 40px 40px;\n  grid-template-rows: 40px 40px 40px 40px 40px;\n  background-color: black;\n  padding: 3px;\n}\n\n.grid-item {\n  background-color: rgba(255, 100, 255, 0.8);\n  border: 1px solid rgba(0, 0, 0, 0.8);\n  padding: 0px;\n  font-size: 36px;\n  text-align: center;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;The grid-gap Property:&lt;/h1&gt;\n\n&lt;div class=\"grid-container\"&gt;\n  &lt;div class=\"grid-item\"&gt;1&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;2&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;3&lt;/div&gt;  \n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;  \n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt; \n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n",
      "PostDate": "2020-04-05T19:55:13.2762681Z",
      "LastEditDate": "2020-04-05T19:58:47.2272144Z",
      "link": null
    },
    {
      "PostId": "2c3dfc9b-901f-477e-8259-d149b9616898",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The forum isn't letting me update my post, not sure what's going on there. (Big red 'You can't post that here' shows up after captcha verification.)\r\n\r\nScrapped the above code. After a day of screaming and cannibalizing a dozen different examples from across the web, I have my grid, I have a placeholder image pulled from a placeholder image website, and I have the ability to drag it about into different positions in said grid. It's a start. Going to bed, but I did notice that if I made a second fill item, dragging it would reposition the first one, instead. A puzzle for tomorrow...\r\n\r\nUpdate; After a lot of help from a new friend, the grid now accepts multiple objects, supports dragging and dropping them, and even supports swapping them in place. I've also started using a codepen for ease of sharing it with people - https://codepen.io/Pykrete/pen/ExjqawG\r\nThough, it seems codepen likes to preview zoomed in slightly, which makes the formatting look a little... off. The same code in other previews looks fine and to scale at 214px wide, though.\r\n\r\n(OUTDATED)\r\n```//HTML//\r\n<div class=\"grid-container\">\r\n  <div class=\"grid-item\">\r\n  <div class=\"fill\" draggable=\"true\"> </div>\r\n  </div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n  <div class=\"grid-item\"></div>\r\n</div>\r\n\r\n//CSS//\r\nbody {\r\n  background: black;\r\n}\r\n\r\n.grid-container {\r\n  display: grid;\r\n  grid-gap: 2px;\r\n  grid-template-columns: 40px 40px 40px 40px 40px;\r\n  grid-template-rows: 40px 40px 40px 40px 40px;\r\n  background-color: black;\r\n  padding: 3px;\r\n}\r\n\r\n.grid-item {\r\n  background-color: rgba(255, 100, 255, 0.8);\r\n  border: 1px solid rgba(0, 0, 0, 0.8);\r\n  padding: 0px;\r\n  font-size: 36px;\r\n  text-align: center;\r\n}\r\n\r\n.fill {\r\n  background-image: url(\"https://source.unsplash.com/random/150x150\");\r\n  position: relative;\r\n  height: 38px;\r\n  width: 38px;\r\n  top: 0px;\r\n  left: 0px;\r\n  cursor: pointer;\r\n}\r\n\r\n.hold {\r\n  border: solid 2px #ccc;\r\n}\r\n\r\n.hovered {\r\n  background: #f4f4f4;\r\n  border-style: dashed;\r\n}\r\n\r\n//JS//\r\n\r\nconst fill = document.querySelector('.fill');\r\nconst empties = document.querySelectorAll('.grid-item');\r\n\r\n// Fill listeners\r\nfill.addEventListener('dragstart', dragStart);\r\nfill.addEventListener('dragend', dragEnd);\r\n\r\n// Loop through empty boxes and add listeners\r\nfor (const empty of empties) {\r\n  empty.addEventListener('dragover', dragOver);\r\n  empty.addEventListener('dragenter', dragEnter);\r\n  empty.addEventListener('dragleave', dragLeave);\r\n  empty.addEventListener('drop', dragDrop);\r\n}\r\n\r\n// Drag Functions\r\n\r\nfunction dragStart() {\r\n  this.className += ' hold';\r\n  setTimeout(() => (this.className = 'invisible'), 0);\r\n}\r\n\r\nfunction dragEnd() {\r\n  this.className = 'fill';\r\n}\r\n\r\nfunction dragOver(e) {\r\n  e.preventDefault();\r\n}\r\n\r\nfunction dragEnter(e) {\r\n  e.preventDefault();\r\n  this.className += ' hovered';\r\n}\r\n\r\nfunction dragLeave() {\r\n  this.className = 'grid-item';\r\n}\r\n\r\nfunction dragDrop() {\r\n  this.className = 'grid-item';\r\n  this.append(fill);\r\n}```",
      "EditableFormat": "markdown",
      "HTML": "<p>The forum isn't letting me update my post, not sure what's going on there. (Big red 'You can't post that here' shows up after captcha verification.)</p>\n<p>Scrapped the above code. After a day of screaming and cannibalizing a dozen different examples from across the web, I have my grid, I have a placeholder image pulled from a placeholder image website, and I have the ability to drag it about into different positions in said grid. It's a start. Going to bed, but I did notice that if I made a second fill item, dragging it would reposition the first one, instead. A puzzle for tomorrow...</p>\n<p>Update; After a lot of help from a new friend, the grid now accepts multiple objects, supports dragging and dropping them, and even supports swapping them in place. I've also started using a codepen for ease of sharing it with people - https://codepen.io/Pykrete/pen/ExjqawG<br>\nThough, it seems codepen likes to preview zoomed in slightly, which makes the formatting look a little... off. The same code in other previews looks fine and to scale at 214px wide, though.</p>\n<p>(OUTDATED)</p>\n<pre><code>&lt;div class=\"grid-container\"&gt;\n  &lt;div class=\"grid-item\"&gt;\n  &lt;div class=\"fill\" draggable=\"true\"&gt; &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n//CSS//\nbody {\n  background: black;\n}\n\n.grid-container {\n  display: grid;\n  grid-gap: 2px;\n  grid-template-columns: 40px 40px 40px 40px 40px;\n  grid-template-rows: 40px 40px 40px 40px 40px;\n  background-color: black;\n  padding: 3px;\n}\n\n.grid-item {\n  background-color: rgba(255, 100, 255, 0.8);\n  border: 1px solid rgba(0, 0, 0, 0.8);\n  padding: 0px;\n  font-size: 36px;\n  text-align: center;\n}\n\n.fill {\n  background-image: url(\"https://source.unsplash.com/random/150x150\");\n  position: relative;\n  height: 38px;\n  width: 38px;\n  top: 0px;\n  left: 0px;\n  cursor: pointer;\n}\n\n.hold {\n  border: solid 2px #ccc;\n}\n\n.hovered {\n  background: #f4f4f4;\n  border-style: dashed;\n}\n\n//JS//\n\nconst fill = document.querySelector('.fill');\nconst empties = document.querySelectorAll('.grid-item');\n\n// Fill listeners\nfill.addEventListener('dragstart', dragStart);\nfill.addEventListener('dragend', dragEnd);\n\n// Loop through empty boxes and add listeners\nfor (const empty of empties) {\n  empty.addEventListener('dragover', dragOver);\n  empty.addEventListener('dragenter', dragEnter);\n  empty.addEventListener('dragleave', dragLeave);\n  empty.addEventListener('drop', dragDrop);\n}\n\n// Drag Functions\n\nfunction dragStart() {\n  this.className += ' hold';\n  setTimeout(() =&gt; (this.className = 'invisible'), 0);\n}\n\nfunction dragEnd() {\n  this.className = 'fill';\n}\n\nfunction dragOver(e) {\n  e.preventDefault();\n}\n\nfunction dragEnter(e) {\n  e.preventDefault();\n  this.className += ' hovered';\n}\n\nfunction dragLeave() {\n  this.className = 'grid-item';\n}\n\nfunction dragDrop() {\n  this.className = 'grid-item';\n  this.append(fill);\n}```\n</code></pre>\n\n",
      "PostDate": "2020-04-06T04:10:18.8457091Z",
      "LastEditDate": "2020-04-07T03:28:28.8081951Z",
      "link": null
    },
    {
      "PostId": "ef0e3a38-f173-466a-ba89-79a4c0e0cc09",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Took a break, back at it again. Current functionality creates a grid of a set size (currently 25, in rows/columns of 5), creates some placeholder items which can be moved around and swapped, and has a button to simulate picking up additional items, dropping them into the first available slot. Currently trying to upgrade this functionality to run both ways - i.e., if a heavy object is picked up which would remove end slots, and one of those end slots is filled, the object occupying it would be moved back into the last available slot instead. Those newly added items currently don't sort/drag properly, either, need to set up the listeners for them.\r\n\r\nI've only gotten this far thanks to a very patient person helping me out, heh. \r\n\r\nhttps://www.w3schools.com/code/tryit.asp?filename=GDVYFBANV8P2",
      "EditableFormat": "markdown",
      "HTML": "<p>Took a break, back at it again. Current functionality creates a grid of a set size (currently 25, in rows/columns of 5), creates some placeholder items which can be moved around and swapped, and has a button to simulate picking up additional items, dropping them into the first available slot. Currently trying to upgrade this functionality to run both ways - i.e., if a heavy object is picked up which would remove end slots, and one of those end slots is filled, the object occupying it would be moved back into the last available slot instead. Those newly added items currently don't sort/drag properly, either, need to set up the listeners for them.</p>\n<p>I've only gotten this far thanks to a very patient person helping me out, heh.</p>\n<p>https://www.w3schools.com/code/tryit.asp?filename=GDVYFBANV8P2</p>\n\n",
      "PostDate": "2020-04-16T14:00:59.4429097Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d62af5e3-8833-447f-b39e-9eef5d019668",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "looks great. made a change. To conceptualize the end result\r\n\r\nhttps://www.w3schools.com/code/tryit.asp?filename=GDWFOSN5LRN4",
      "EditableFormat": "markdown",
      "HTML": "<p>looks great. made a change. To conceptualize the end result</p>\n<p>https://www.w3schools.com/code/tryit.asp?filename=GDWFOSN5LRN4</p>\n\n",
      "PostDate": "2020-04-16T23:59:05.668129Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "021b5fbb-d1cb-4cd9-b191-33f848885a6d",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yup, that's the idea. 32x32 icons with, iirc, a 3 pixel border which changes colour based on item type, for quick visual identification. Gold for precious sellable treasure items, red for weapons, etc.\r\n\r\nHovering over an item should display the name of it above the cursor, hopefully that can just directly draw from the object's .alias. The existing portion of the inventory screen where when you click on an object and the verbs pop up below, might port that intact - why fix what isn't broken? Make it so the last clicked-on item's border changes to something obvious, like giving it a dash effect.\r\n\r\nMind you, I've still not a clue how I'm going to handle removing items from the grid, heh. Everything should have a unique ID based off of the object's .name , but past that... (Did I mention I have no idea what I'm doing?)",
      "EditableFormat": "markdown",
      "HTML": "<p>Yup, that's the idea. 32x32 icons with, iirc, a 3 pixel border which changes colour based on item type, for quick visual identification. Gold for precious sellable treasure items, red for weapons, etc.</p>\n<p>Hovering over an item should display the name of it above the cursor, hopefully that can just directly draw from the object's .alias. The existing portion of the inventory screen where when you click on an object and the verbs pop up below, might port that intact - why fix what isn't broken? Make it so the last clicked-on item's border changes to something obvious, like giving it a dash effect.</p>\n<p>Mind you, I've still not a clue how I'm going to handle removing items from the grid, heh. Everything should have a unique ID based off of the object's .name , but past that... (Did I mention I have no idea what I'm doing?)</p>\n\n",
      "PostDate": "2020-04-17T14:56:21.4825486Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "60d874ed-e510-47c8-b68a-1a01158298f6",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow! It is really awesome! I have been wondering how visually integrating it to a Quest game.",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow! It is really awesome! I have been wondering how visually integrating it to a Quest game.</p>\n\n",
      "PostDate": "2020-04-17T15:16:36.4563472Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "78e4cbb0-3281-41d3-a298-6ee57cb27a39",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "one step further: https://www.w3schools.com/code/tryit.asp?filename=GDY0P53GWXNS",
      "EditableFormat": "markdown",
      "HTML": "<p>one step further: https://www.w3schools.com/code/tryit.asp?filename=GDY0P53GWXNS</p>\n\n",
      "PostDate": "2020-04-18T14:03:08.3979567Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ff7a52b3-add9-4faa-a6b2-2e88e336783b",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Great job! But when I did spawn more swords the trash can just disappeared.",
      "EditableFormat": "markdown",
      "HTML": "<p>Great job! But when I did spawn more swords the trash can just disappeared.</p>\n\n",
      "PostDate": "2020-04-18T22:48:41.6768193Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0b4c78bb-8626-4da3-8547-4594a03d5734",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, fancy stuff! Though Deckrect is right, there's something up with the Delete trash can, but I couldn't replicate it disappearing with item spawning. What I -did- notice is that if you drag an item over the trash can, then drag it off without dropping it, the trash can disappears and the grid square it was occupying becomes a normal slot.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, fancy stuff! Though Deckrect is right, there's something up with the Delete trash can, but I couldn't replicate it disappearing with item spawning. What I -did- notice is that if you drag an item over the trash can, then drag it off without dropping it, the trash can disappears and the grid square it was occupying becomes a normal slot.</p>\n\n",
      "PostDate": "2020-04-19T01:27:40.5826508Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cbb4f64a-0e50-4ceb-9e08-4a32766b91e5",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "These are only small problems https://www.w3schools.com/code/tryit.asp?filename=GDZ7V9SIDDL9\r\nThe real problem is to integrate this into Quest and this does not work with a tablet",
      "EditableFormat": "markdown",
      "HTML": "<p>These are only small problems https://www.w3schools.com/code/tryit.asp?filename=GDZ7V9SIDDL9<br>\nThe real problem is to integrate this into Quest and this does not work with a tablet</p>\n\n",
      "PostDate": "2020-04-19T09:12:24.9825831Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eb4b98c3-ee52-42c0-8063-68220cbc1cdc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The real problem is to integrate this into Quest\r\n\r\nI'd suggest modifying `UpdateObjectLinks` rather than relying on `updateList`. Or using a turnscript that passes a stringdictionary of icon URIs every turn.\r\n\r\nThe JS can then `$.each` over this dictionary, pseudocode something like:\r\n```\r\n$.each(data, function (name, uri) {\r\n  if (object with this name isn't visible) {\r\n    create it\r\n  }\r\n  set object's image to uri\r\n  set an 'updated' flag on the object\r\n});\r\nremove any objects without the 'updated' flag\r\nremove the 'updated' flag from all objects\r\n```\r\n\r\n> and this does not work with a tablet\r\n\r\nIf you use jQueryUI's `draggable` function, there is <a href=\"https://github.com/ajlkn/jquery.touch\">a library available</a> which patches it to work with most mobile devices. I'm surprised to see that this apparently isn't standard yet.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The real problem is to integrate this into Quest</p>\n</blockquote>\n<p>I'd suggest modifying <code>UpdateObjectLinks</code> rather than relying on <code>updateList</code>. Or using a turnscript that passes a stringdictionary of icon URIs every turn.</p>\n<p>The JS can then <code>$.each</code> over this dictionary, pseudocode something like:</p>\n<pre><code>$.each(data, function (name, uri) {\n  if (object with this name isn't visible) {\n    create it\n  }\n  set object's image to uri\n  set an 'updated' flag on the object\n});\nremove any objects without the 'updated' flag\nremove the 'updated' flag from all objects\n</code></pre>\n<blockquote>\n<p>and this does not work with a tablet</p>\n</blockquote>\n<p>If you use jQueryUI's <code>draggable</code> function, there is <a href=\"https://github.com/ajlkn/jquery.touch\">a library available</a> which patches it to work with most mobile devices. I'm surprised to see that this apparently isn't standard yet.</p>\n\n",
      "PostDate": "2020-04-19T10:07:56.2220617Z",
      "LastEditDate": "2020-04-19T10:15:51.3556501Z",
      "link": null
    },
    {
      "PostId": "734f1081-691a-4997-b8ab-1d251627fdb6",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The trash button is cute, but it's not really something I think the system needs. My hope is that clicking on an item will bring up its verbs as it works in the current system, and that should include the ability to drop an item - a trash icon with no 'are you sure?' warning sounds like a recipe for frustration. That, and it would require increasing the default size of the inventory pane to accommodate for it, while part of the focus of this project is to provide an inventory system that can handle a large inventory without creating a dizzyingly long inventory list.\r\n\r\nRegardless, currently fiddling with the code, trying to combine it with my existing one.\r\n\r\nAs for JQuery, given that I have no experience, I thought it would be best to start with basic vanilla JS, get everything figured out in terms of basic functionality, then see what I can replace/rewrite to utilize JQuery, as I remember you telling me that Quest utilizes it, Angel.\r\n\r\nhttps://www.w3schools.com/code/tryit.asp?filename=GDZI80QS835O -- Current progress, newly added items have their listeners set up, now. I think next I'll play around with setting up a hover that displays the item name.",
      "EditableFormat": "markdown",
      "HTML": "<p>The trash button is cute, but it's not really something I think the system needs. My hope is that clicking on an item will bring up its verbs as it works in the current system, and that should include the ability to drop an item - a trash icon with no 'are you sure?' warning sounds like a recipe for frustration. That, and it would require increasing the default size of the inventory pane to accommodate for it, while part of the focus of this project is to provide an inventory system that can handle a large inventory without creating a dizzyingly long inventory list.</p>\n<p>Regardless, currently fiddling with the code, trying to combine it with my existing one.</p>\n<p>As for JQuery, given that I have no experience, I thought it would be best to start with basic vanilla JS, get everything figured out in terms of basic functionality, then see what I can replace/rewrite to utilize JQuery, as I remember you telling me that Quest utilizes it, Angel.</p>\n<p>https://www.w3schools.com/code/tryit.asp?filename=GDZI80QS835O -- Current progress, newly added items have their listeners set up, now. I think next I'll play around with setting up a hover that displays the item name.</p>\n\n",
      "PostDate": "2020-04-19T15:35:57.9663446Z",
      "LastEditDate": "2020-04-19T16:13:04.5206952Z",
      "link": null
    },
    {
      "PostId": "fdd9f8d4-ee5a-4795-919c-622d378608ab",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think it might be easier learning jQuery; it does quite a bit of stuff for you, meaning it takes less code to do the same thing.\r\n\r\nHere's a quick jQueryUI version, tweaked to do the same thing. I defined the 'grid-item's to be \"droppable\" targets, and the 'fill's to be \"draggable\"\r\n\r\nhttps://www.w3schools.com/code/tryit.asp?filename=GDZSS5077UBE",
      "EditableFormat": "markdown",
      "HTML": "<p>I think it might be easier learning jQuery; it does quite a bit of stuff for you, meaning it takes less code to do the same thing.</p>\n<p>Here's a quick jQueryUI version, tweaked to do the same thing. I defined the 'grid-item's to be \"droppable\" targets, and the 'fill's to be \"draggable\"</p>\n<p>https://www.w3schools.com/code/tryit.asp?filename=GDZSS5077UBE</p>\n\n",
      "PostDate": "2020-04-19T21:49:45.5320095Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "687983f5-faea-4f81-9833-5628f84e529c",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh! Well, that's a start, thank you! The problem I ran into with trying to learn through JQuery is precisely the part where it does so much for you, heh. If that makes sense? Maybe I'm at the point where I can transition over, now.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh! Well, that's a start, thank you! The problem I ran into with trying to learn through JQuery is precisely the part where it does so much for you, heh. If that makes sense? Maybe I'm at the point where I can transition over, now.</p>\n\n",
      "PostDate": "2020-04-19T22:24:00.1351758Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5dc81731-fac1-4ea2-b319-7d9cd369bf9c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<a href=\"https://www.w3schools.com/code/tryit.asp?filename=GDZV827KRLQL\">Now with mobile/touchscreen support</a>",
      "EditableFormat": "markdown",
      "HTML": "<p><a href=\"https://www.w3schools.com/code/tryit.asp?filename=GDZV827KRLQL\">Now with mobile/touchscreen support</a></p>\n\n",
      "PostDate": "2020-04-19T23:12:51.7382019Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2545bb69-e330-4746-a6ca-915993376528",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I had this in my head when I went to bed last night, and I couldn't sleep. So here's a chunk of script off the top of my head; as yet untested, and written when sleep deprived.\r\n\r\nFirst, the stylesheet (mostly yours, just with class names changed):\r\n```\r\n#inventoryAccordion {\r\n  display: grid;\r\n  grid-gap: 2px;\r\n  grid-template-columns: 40px 40px 40px 40px 40px;\r\n  grid-template-rows: 40px 40px 40px 40px 40px;\r\n  background-color: black;padding: 3px;\r\n}\r\n.igrid-slot {\r\n  background-color: rgba(255, 100, 255, 0.8);\r\n  border: 1px solid rgba(0, 0, 0, 0.8);\r\n  padding: 0px; text-align: center;\r\n}\r\n.igrid-item {\r\n  background-image: url('inventory_icons.png');\r\n  height: 38px;\r\n  width: 38px;\r\n  cursor: pointer;\r\n}\r\n.igrid-active {\r\n  border: solid 2px #ccc;\r\n}\r\n.ui-droppable-hover {\r\n  background: #f4f4f4;\r\n  border-style: dashed;\r\n}\r\n```\r\n\r\nThe UI initialisation script (note that you need to pass it a stringlist containing the stylesheet above. Probably stored in a string attribute somewhere):\r\n```\r\nJS.initialiseGridInventory(styles)\r\n```\r\n\r\nA turnscript to update the inventory (though it would be better to put this into the `FinishTurn` or `UpdateObjectLinks` functions so that it still runs when turnscripts are suppressed):\r\n```\r\nicons = NewStringDictionary()\r\nforeach (obj, ScopeInventory()) {\r\n  if (not HasString (obj, \"inventoryicon\")) obj.inventoryicon = \"0,0\"\r\n  dictionary add (icons, obj.name, obj.inventoryicon)\r\n  JS.updateInventoryIcons (icons)\r\n}\r\n```\r\n\r\nAnd a chunk of javascript. You can probably tell how tired I was from the illegibility:\r\n```\r\ninitialiseGridInventory = (style) => $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js', function () {\r\n  var layout = $('#outputData').data('igrid-layout');\r\n  if (layout) {\r\n    $.each(layout.split(':'), (i, val) => addItem.apply(this, val.split('=')).appendTo(addCells(1)));\r\n  } else {\r\n    addCells(25, $('#inventoryAccordion').empty());\r\n  }\r\n  $('<style>').appendTo('head').text(style.join(\"\\n\"));\r\n});\r\n\r\n$(function () {\r\n  updateInventoryIcons = function (data) {\r\n    var oldItems = $('#inventoryAccordion .igrid-item');\r\n    var pending = $();\r\n    $.each(data, function (id, icon) {\r\n      var element = $('#igrid-item-'+id);\r\n      if (element.length) {\r\n        oldItems = oldItems.not(element);\r\n        element.css({backgroundImage: icon});\r\n      } else {\r\n        pending = pending.add(addItem('id', 'icon'));\r\n      }\r\n    });\r\n    oldItems.remove();\r\n    pending.each(function (index, item) {\r\n      var slot = $('#inventoryAccordion .grid-item:empty');\r\n      if (slot.length == 0) {\r\n        slot = addCells(1);\r\n      }\r\n      slot.first().append(item);\r\n    });\r\n  };\r\n\r\n  function addCells (number, container) {\r\n    var prevCount = container.find('.grid-item').length;\r\n    return $($.map(Array(number),\r\n      num => $('<div>', {id: 'gridcellcell'+(prevCount+num), class: 'igrid-slot'}).appendTo(container).droppable({\r\n        drop: function (ev, ui) {\r\n          $(this).children().appendTo(ui.draggable.parent());\r\n          $(ui.draggable).appendTo(this);\r\n          var serialised = $('#inventoryAccordion .grid-slot').map(\r\n            (i, slot) => $(slot).children().map(\r\n              (j, item) => ($(item).data('ElementId') + '=' + $(item).css('background-image'))\r\n            ).get()\r\n          ).get().join(':');\r\n          $('#outputData').data('igrid-layout', serialised).attr('data-igrid-layout', serialised);\r\n        }\r\n      }).get()\r\n    )).appendTo(container);\r\n  }\r\n\r\n  function addItem(id, icon) {\r\n    if (!item) { return $(); }\r\n    var cell = $('#inventoryAccordion .grid-item:empty').first();\r\n    var item = $('<div>', {class: 'igrid-item cmdlink elementmenu', id: 'igrid-item-'+id}).data('ElementId', 'id').draggable({\r\n      containment: cell.parent(),\r\n      helper: 'clone',\r\n      zIndex: 100,\r\n      revert: 'invalid',\r\n      start: () => o.addClass('igrid-active'),\r\n      stop: () => o.removeClass('igrid-active')\r\n    }).attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, (match, x, y) => ('background-position: -'+(x*40)+'px -'+((y||0)*40)+'px;'))).appendTo(cell);\r\n    return (cell.length ? $() : item);\r\n  }\r\n\r\n  var originalUpdateList = updateList;\r\n  updateList = function (name, listdata) {\r\n    if (name == 'inventory') {\r\n      $.each(listData, function (key, value) {\r\n        var objdata = JSON.parse(value);\r\n        var item = $('#igrid-item-'+objdata['ElementId']);\r\n        if (objdata['Text']) {\r\n          item.prop('title', objdata['Text']);\r\n        }\r\n        if (objdata['Verbs']) {\r\n          item.removeClass('disabled').data('verbs', objdata['Verbs']);\r\n        } else {\r\n          item.addClass('disabled');\r\n        }\r\n      });\r\n    } else {\r\n      originalUpdateList(name, listdata);\r\n    }\r\n  };\r\n});\r\n```\r\n\r\nIf you wanted to put this all in the UI Initialisation script (for example if you're using the web editor) it would look like:\r\n```\r\nJS.eval(\"initialiseGridInventory=a=>$.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js',function(){var b=$('#outputData').data('igrid-layout');b?$.each(b.split(':'),(a,b)=>addItem.apply(this,b.split('=')).appendTo(addCells(1))):addCells(25,$('#inventoryAccordion').empty()),$('<style>').appendTo('head').text(a)}),$(function(){function a(a,b){var c=b.find('.grid-item').length;return $($.map(Array(a),a=>$('<div>',{id:'gridcellcell'+(c+a),class:'igrid-slot'}).appendTo(b).droppable({drop:function(a,b){$(this).children().appendTo(b.draggable.parent()),$(b.draggable).appendTo(this);var c=$('#inventoryAccordion .grid-slot').map((a,b)=>$(b).children().map((a,b)=>$(b).data('ElementId')+'='+$(b).css('background-image')).get()).get().join(':');$('#outputData').data('igrid-layout',c).attr('data-igrid-layout',c)}}).get())).appendTo(b)}function b(a,b){return $();var c=$('#inventoryAccordion .grid-item:empty').first(),d=$('<div>',{class:'igrid-item cmdlink elementmenu',id:'igrid-item-'+a}).data('ElementId','id').draggable({containment:c.parent(),helper:'clone',zIndex:100,revert:'invalid',start:()=>o.addClass('igrid-active'),stop:()=>o.removeClass('igrid-active')}).attr('style',b.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,(a,b,c)=>'background-position: -'+40*b+'px -'+40*(c||0)+'px;')).appendTo(c)}updateInventoryIcons=function(c){var d=$('#inventoryAccordion .igrid-item'),e=$();$.each(c,function(a,c){var f=$('#igrid-item-'+a);f.length?(d=d.not(f),f.css({backgroundImage:c})):e=e.add(b('id','icon'))}),d.remove(),e.each(function(b,c){var d=$('#inventoryAccordion .grid-item:empty');0==d.length&&(d=a(1)),d.first().append(c)})};var c=updateList;updateList=function(a,b){'inventory'==a?$.each(listData,function(a,b){var c=JSON.parse(b),d=$('#igrid-item-'+c.ElementId);c.Text&&d.prop('title',c.Text),c.Verbs?d.removeClass('disabled').data('verbs',c.Verbs):d.addClass('disabled')}):c(a,b)}});\")\r\nJS.initialiseGridInventory(\"#inventoryAccordion{display:grid;grid-gap:2px;grid-template-columns:40px 40px 40px 40px 40px;grid-template-rows:40px 40px 40px 40px 40px;background-color:#000;padding:3px}.igrid-slot{background-color:rgba(255,100,255,.8);border:1px solid rgba(0,0,0,.8);padding:0;text-align:center}.igrid-item{background-image:url('\"+GetFileURL(\"inventory_icons.png\")+\"');height:38px;width:38px;cursor:pointer}.igrid-active{border:solid 2px #ccc}.ui-droppable-hover{background:#f4f4f4;border-style:dashed}\")\r\ncreate turnscript (\"igrid_update\")\r\nSetTurnScript (GetObject (\"igrid_update\")) {\r\n  icons = NewStringDictionary()\r\n  foreach (obj, ScopeInventory()) {\r\n    if (not HasString (obj, \"inventoryicon\")) obj.inventoryicon = \"0,0\"\r\n    dictionary add (icons, obj.name, obj.inventoryicon)\r\n    JS.updateInventoryIcons (icons)\r\n  }\r\n}\r\n```\r\n\r\nIn theory, this expects the game to contain a single image `inventory_icons.png` which contains a 40×40 grid of icons. Each item which can be collected should have an attribute `inventoryicon`, which is a string like `\"3,5\"` specifying which image to choose from the grid. This avoids lag when a new item is added, because cutting an item out of an already-downloaded image can't be delayed by momentary network latency.",
      "EditableFormat": "markdown",
      "HTML": "<p>I had this in my head when I went to bed last night, and I couldn't sleep. So here's a chunk of script off the top of my head; as yet untested, and written when sleep deprived.</p>\n<p>First, the stylesheet (mostly yours, just with class names changed):</p>\n<pre><code>#inventoryAccordion {\n  display: grid;\n  grid-gap: 2px;\n  grid-template-columns: 40px 40px 40px 40px 40px;\n  grid-template-rows: 40px 40px 40px 40px 40px;\n  background-color: black;padding: 3px;\n}\n.igrid-slot {\n  background-color: rgba(255, 100, 255, 0.8);\n  border: 1px solid rgba(0, 0, 0, 0.8);\n  padding: 0px; text-align: center;\n}\n.igrid-item {\n  background-image: url('inventory_icons.png');\n  height: 38px;\n  width: 38px;\n  cursor: pointer;\n}\n.igrid-active {\n  border: solid 2px #ccc;\n}\n.ui-droppable-hover {\n  background: #f4f4f4;\n  border-style: dashed;\n}\n</code></pre>\n<p>The UI initialisation script (note that you need to pass it a stringlist containing the stylesheet above. Probably stored in a string attribute somewhere):</p>\n<pre><code>JS.initialiseGridInventory(styles)\n</code></pre>\n<p>A turnscript to update the inventory (though it would be better to put this into the <code>FinishTurn</code> or <code>UpdateObjectLinks</code> functions so that it still runs when turnscripts are suppressed):</p>\n<pre><code>icons = NewStringDictionary()\nforeach (obj, ScopeInventory()) {\n  if (not HasString (obj, \"inventoryicon\")) obj.inventoryicon = \"0,0\"\n  dictionary add (icons, obj.name, obj.inventoryicon)\n  JS.updateInventoryIcons (icons)\n}\n</code></pre>\n<p>And a chunk of javascript. You can probably tell how tired I was from the illegibility:</p>\n<pre><code>initialiseGridInventory = (style) =&gt; $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js', function () {\n  var layout = $('#outputData').data('igrid-layout');\n  if (layout) {\n    $.each(layout.split(':'), (i, val) =&gt; addItem.apply(this, val.split('=')).appendTo(addCells(1)));\n  } else {\n    addCells(25, $('#inventoryAccordion').empty());\n  }\n  $('&lt;style&gt;').appendTo('head').text(style.join(\"\\n\"));\n});\n\n$(function () {\n  updateInventoryIcons = function (data) {\n    var oldItems = $('#inventoryAccordion .igrid-item');\n    var pending = $();\n    $.each(data, function (id, icon) {\n      var element = $('#igrid-item-'+id);\n      if (element.length) {\n        oldItems = oldItems.not(element);\n        element.css({backgroundImage: icon});\n      } else {\n        pending = pending.add(addItem('id', 'icon'));\n      }\n    });\n    oldItems.remove();\n    pending.each(function (index, item) {\n      var slot = $('#inventoryAccordion .grid-item:empty');\n      if (slot.length == 0) {\n        slot = addCells(1);\n      }\n      slot.first().append(item);\n    });\n  };\n\n  function addCells (number, container) {\n    var prevCount = container.find('.grid-item').length;\n    return $($.map(Array(number),\n      num =&gt; $('&lt;div&gt;', {id: 'gridcellcell'+(prevCount+num), class: 'igrid-slot'}).appendTo(container).droppable({\n        drop: function (ev, ui) {\n          $(this).children().appendTo(ui.draggable.parent());\n          $(ui.draggable).appendTo(this);\n          var serialised = $('#inventoryAccordion .grid-slot').map(\n            (i, slot) =&gt; $(slot).children().map(\n              (j, item) =&gt; ($(item).data('ElementId') + '=' + $(item).css('background-image'))\n            ).get()\n          ).get().join(':');\n          $('#outputData').data('igrid-layout', serialised).attr('data-igrid-layout', serialised);\n        }\n      }).get()\n    )).appendTo(container);\n  }\n\n  function addItem(id, icon) {\n    if (!item) { return $(); }\n    var cell = $('#inventoryAccordion .grid-item:empty').first();\n    var item = $('&lt;div&gt;', {class: 'igrid-item cmdlink elementmenu', id: 'igrid-item-'+id}).data('ElementId', 'id').draggable({\n      containment: cell.parent(),\n      helper: 'clone',\n      zIndex: 100,\n      revert: 'invalid',\n      start: () =&gt; o.addClass('igrid-active'),\n      stop: () =&gt; o.removeClass('igrid-active')\n    }).attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, (match, x, y) =&gt; ('background-position: -'+(x*40)+'px -'+((y||0)*40)+'px;'))).appendTo(cell);\n    return (cell.length ? $() : item);\n  }\n\n  var originalUpdateList = updateList;\n  updateList = function (name, listdata) {\n    if (name == 'inventory') {\n      $.each(listData, function (key, value) {\n        var objdata = JSON.parse(value);\n        var item = $('#igrid-item-'+objdata['ElementId']);\n        if (objdata['Text']) {\n          item.prop('title', objdata['Text']);\n        }\n        if (objdata['Verbs']) {\n          item.removeClass('disabled').data('verbs', objdata['Verbs']);\n        } else {\n          item.addClass('disabled');\n        }\n      });\n    } else {\n      originalUpdateList(name, listdata);\n    }\n  };\n});\n</code></pre>\n<p>If you wanted to put this all in the UI Initialisation script (for example if you're using the web editor) it would look like:</p>\n<pre><code>JS.eval(\"initialiseGridInventory=a=&gt;$.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js',function(){var b=$('#outputData').data('igrid-layout');b?$.each(b.split(':'),(a,b)=&gt;addItem.apply(this,b.split('=')).appendTo(addCells(1))):addCells(25,$('#inventoryAccordion').empty()),$('&lt;style&gt;').appendTo('head').text(a)}),$(function(){function a(a,b){var c=b.find('.grid-item').length;return $($.map(Array(a),a=&gt;$('&lt;div&gt;',{id:'gridcellcell'+(c+a),class:'igrid-slot'}).appendTo(b).droppable({drop:function(a,b){$(this).children().appendTo(b.draggable.parent()),$(b.draggable).appendTo(this);var c=$('#inventoryAccordion .grid-slot').map((a,b)=&gt;$(b).children().map((a,b)=&gt;$(b).data('ElementId')+'='+$(b).css('background-image')).get()).get().join(':');$('#outputData').data('igrid-layout',c).attr('data-igrid-layout',c)}}).get())).appendTo(b)}function b(a,b){return $();var c=$('#inventoryAccordion .grid-item:empty').first(),d=$('&lt;div&gt;',{class:'igrid-item cmdlink elementmenu',id:'igrid-item-'+a}).data('ElementId','id').draggable({containment:c.parent(),helper:'clone',zIndex:100,revert:'invalid',start:()=&gt;o.addClass('igrid-active'),stop:()=&gt;o.removeClass('igrid-active')}).attr('style',b.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,(a,b,c)=&gt;'background-position: -'+40*b+'px -'+40*(c||0)+'px;')).appendTo(c)}updateInventoryIcons=function(c){var d=$('#inventoryAccordion .igrid-item'),e=$();$.each(c,function(a,c){var f=$('#igrid-item-'+a);f.length?(d=d.not(f),f.css({backgroundImage:c})):e=e.add(b('id','icon'))}),d.remove(),e.each(function(b,c){var d=$('#inventoryAccordion .grid-item:empty');0==d.length&amp;&amp;(d=a(1)),d.first().append(c)})};var c=updateList;updateList=function(a,b){'inventory'==a?$.each(listData,function(a,b){var c=JSON.parse(b),d=$('#igrid-item-'+c.ElementId);c.Text&amp;&amp;d.prop('title',c.Text),c.Verbs?d.removeClass('disabled').data('verbs',c.Verbs):d.addClass('disabled')}):c(a,b)}});\")\nJS.initialiseGridInventory(\"#inventoryAccordion{display:grid;grid-gap:2px;grid-template-columns:40px 40px 40px 40px 40px;grid-template-rows:40px 40px 40px 40px 40px;background-color:#000;padding:3px}.igrid-slot{background-color:rgba(255,100,255,.8);border:1px solid rgba(0,0,0,.8);padding:0;text-align:center}.igrid-item{background-image:url('\"+GetFileURL(\"inventory_icons.png\")+\"');height:38px;width:38px;cursor:pointer}.igrid-active{border:solid 2px #ccc}.ui-droppable-hover{background:#f4f4f4;border-style:dashed}\")\ncreate turnscript (\"igrid_update\")\nSetTurnScript (GetObject (\"igrid_update\")) {\n  icons = NewStringDictionary()\n  foreach (obj, ScopeInventory()) {\n    if (not HasString (obj, \"inventoryicon\")) obj.inventoryicon = \"0,0\"\n    dictionary add (icons, obj.name, obj.inventoryicon)\n    JS.updateInventoryIcons (icons)\n  }\n}\n</code></pre>\n<p>In theory, this expects the game to contain a single image <code>inventory_icons.png</code> which contains a 40×40 grid of icons. Each item which can be collected should have an attribute <code>inventoryicon</code>, which is a string like <code>\"3,5\"</code> specifying which image to choose from the grid. This avoids lag when a new item is added, because cutting an item out of an already-downloaded image can't be delayed by momentary network latency.</p>\n\n",
      "PostDate": "2020-04-20T14:21:10.3778919Z",
      "LastEditDate": "2020-04-20T14:36:42.5245735Z",
      "link": null
    },
    {
      "PostId": "c19184da-e51f-4c96-8fac-e965c6fab75b",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh *wow*, ok, I need to read through this. Is this the start of what I'd need to integrate the system into Quest?!\r\n\r\nThe icon grid thing is a solid shout, I know a lot of pixel-based games utilize that method. 40x40 should be plenty, too. I was thinking of creating borders for each item based on their 'class' - key item, weapon, etc - but come to think of it, it would be easier and more sensible to just make that border on the icon itself.\r\n\r\nEdit; Oh, wait, as in a grid of icons that are 40px in size, or a grid of icons that is 40 columns by 40 rows?",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh <em>wow</em>, ok, I need to read through this. Is this the start of what I'd need to integrate the system into Quest?!</p>\n<p>The icon grid thing is a solid shout, I know a lot of pixel-based games utilize that method. 40x40 should be plenty, too. I was thinking of creating borders for each item based on their 'class' - key item, weapon, etc - but come to think of it, it would be easier and more sensible to just make that border on the icon itself.</p>\n<p>Edit; Oh, wait, as in a grid of icons that are 40px in size, or a grid of icons that is 40 columns by 40 rows?</p>\n\n",
      "PostDate": "2020-04-20T14:32:47.5703597Z",
      "LastEditDate": "2020-04-20T14:44:57.3381248Z",
      "link": null
    },
    {
      "PostId": "06433283-8904-4695-812c-10a60ff9c56e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Are you familiar with the latest version of javascript? I've used arrow notation quite a lot, which is a fairly new addition.\r\n\r\nIf you've not come across it yet, it basically means that:\r\n```\r\nvar a = b => c;\r\n```\r\nis shorthand for:\r\n```\r\nfunction a (b) {\r\n  return c;\r\n}\r\n```\r\n\r\nI've also abused scope frames somewhat to make the code smaller, which is kind of a bad habit (in JS, a function defined inside another function can access its parent function's local variables).\r\n\r\nIf there's any parts that don't make sense (or that don't work), I can try to explain.\r\n\r\nOther parts likely to confuse a sane coder:\r\n```\r\naddItem.apply(this, val.split('='))\r\n```\r\nis a slightly faster way of doing:\r\n```\r\nvar params = val.split('=');\r\naddItem(params[0], params[1]);\r\n```\r\n\r\nI used the `data-igrid-layout` attribute of `#outputData` to preserve the layout in a saved game.",
      "EditableFormat": "markdown",
      "HTML": "<p>Are you familiar with the latest version of javascript? I've used arrow notation quite a lot, which is a fairly new addition.</p>\n<p>If you've not come across it yet, it basically means that:</p>\n<pre><code>var a = b =&gt; c;\n</code></pre>\n<p>is shorthand for:</p>\n<pre><code>function a (b) {\n  return c;\n}\n</code></pre>\n<p>I've also abused scope frames somewhat to make the code smaller, which is kind of a bad habit (in JS, a function defined inside another function can access its parent function's local variables).</p>\n<p>If there's any parts that don't make sense (or that don't work), I can try to explain.</p>\n<p>Other parts likely to confuse a sane coder:</p>\n<pre><code>addItem.apply(this, val.split('='))\n</code></pre>\n<p>is a slightly faster way of doing:</p>\n<pre><code>var params = val.split('=');\naddItem(params[0], params[1]);\n</code></pre>\n<p>I used the <code>data-igrid-layout</code> attribute of <code>#outputData</code> to preserve the layout in a saved game.</p>\n\n",
      "PostDate": "2020-04-20T14:49:33.3365375Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "be947c57-60b1-4efa-9c47-53092826f2b8",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'll be honest with you buddy, I'm not familiar with *any* version of javascript, ahah.  But, good to know, thank you!\r\n\r\nUm, I popped everything into UI Initialisation in a fresh project (offline editor), and while no errors are being tossed up it also doesn't seem to have changed anything. Inventory pane is present and normal. Is it reliant on anything outside of the UI Ini script that I glossed over above?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'll be honest with you buddy, I'm not familiar with <em>any</em> version of javascript, ahah.  But, good to know, thank you!</p>\n<p>Um, I popped everything into UI Initialisation in a fresh project (offline editor), and while no errors are being tossed up it also doesn't seem to have changed anything. Inventory pane is present and normal. Is it reliant on anything outside of the UI Ini script that I glossed over above?</p>\n\n",
      "PostDate": "2020-04-20T15:05:02.0288033Z",
      "LastEditDate": "2020-04-20T15:08:41.3887077Z",
      "link": null
    },
    {
      "PostId": "5bdb3eb8-dd4e-4478-bcc7-96802f6d49da",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Could still be errors; I wrote this on my phone when I should have been sleeping.\r\n\r\nI'll take a look; but I've got a couple of books free on Kindle that I haven't done any promotion for yet, so I really need to find some time to work today.",
      "EditableFormat": "markdown",
      "HTML": "<p>Could still be errors; I wrote this on my phone when I should have been sleeping.</p>\n<p>I'll take a look; but I've got a couple of books free on Kindle that I haven't done any promotion for yet, so I really need to find some time to work today.</p>\n\n",
      "PostDate": "2020-04-20T15:15:36.1383777Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c3719215-ec67-4c31-b230-6118a81215d7",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No pressure! This is certainly a start, so thank you! <3",
      "EditableFormat": "markdown",
      "HTML": "<p>No pressure! This is certainly a start, so thank you! &lt;3</p>\n\n",
      "PostDate": "2020-04-20T15:18:38.124669Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "13d25e1c-4d48-40ec-9a14-532f033f15bc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK… couple of dumb mistakes.\r\n\r\nEither `addCells` and `addItem` need to be global functions (in which case I should probably rename them to avoid colliding with other functions), or the definition of `intialiseGridInventory` needs to be inside the same function.\r\n\r\nI've got a typo; `listData` and `listdata` aren't the same.\r\n\r\nNow it displays; and the handlers all seem to be attached. But it's not displaying items :S",
      "EditableFormat": "markdown",
      "HTML": "<p>OK… couple of dumb mistakes.</p>\n<p>Either <code>addCells</code> and <code>addItem</code> need to be global functions (in which case I should probably rename them to avoid colliding with other functions), or the definition of <code>intialiseGridInventory</code> needs to be inside the same function.</p>\n<p>I've got a typo; <code>listData</code> and <code>listdata</code> aren't the same.</p>\n<p>Now it displays; and the handlers all seem to be attached. But it's not displaying items :S</p>\n\n",
      "PostDate": "2020-04-20T15:28:51.9356057Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2b94e47a-3ad0-4e8d-acf8-c41932907288",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah… I was testing it in the javascript console, so the turnscript wasn't running.\r\n\r\nI'll have to create an actual game to test further; and I don't think I have time right now. Will get back to you later :) But the JS seems to be mostly working.\r\n\r\nAlso, after renaming the class `fill` to `igrid-item`, and `grid-item` to `igrid-slot` (which makes more sense to me), I missed a few of them in the code.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah… I was testing it in the javascript console, so the turnscript wasn't running.</p>\n<p>I'll have to create an actual game to test further; and I don't think I have time right now. Will get back to you later :) But the JS seems to be mostly working.</p>\n<p>Also, after renaming the class <code>fill</code> to <code>igrid-item</code>, and <code>grid-item</code> to <code>igrid-slot</code> (which makes more sense to me), I missed a few of them in the code.</p>\n\n",
      "PostDate": "2020-04-20T15:45:15.5282441Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b9640623-6eb1-4986-a728-a2393e0910af",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No rush at all, I'm a bit swamped with work myself but I'm trying to fiddle with this project at least once a day to force myself to get at least a basic handle on JS, as well as force myself to get back to sprite art practice (gonna need to make those icons, after all). And god, ok, that's something I can relate to. \"Wait, why did I call this 'x'? 'y' makes much more sense!\" *Entire Quest project breaks*\r\n\r\nAs for not displaying items, I assume it wouldn't until it has icons to draw from... right? If it's trying to pull from a sheet that doesn't exist, would that not interrupt the creation process? EDIT -- nevermind, didn't focus on the second post!\r\n\r\nAaah I'm stuck in something but I'm excited!",
      "EditableFormat": "markdown",
      "HTML": "<p>No rush at all, I'm a bit swamped with work myself but I'm trying to fiddle with this project at least once a day to force myself to get at least a basic handle on JS, as well as force myself to get back to sprite art practice (gonna need to make those icons, after all). And god, ok, that's something I can relate to. \"Wait, why did I call this 'x'? 'y' makes much more sense!\" <em>Entire Quest project breaks</em></p>\n<p>As for not displaying items, I assume it wouldn't until it has icons to draw from... right? If it's trying to pull from a sheet that doesn't exist, would that not interrupt the creation process? EDIT -- nevermind, didn't focus on the second post!</p>\n<p>Aaah I'm stuck in something but I'm excited!</p>\n\n",
      "PostDate": "2020-04-20T15:51:46.5754922Z",
      "LastEditDate": "2020-04-20T16:02:18.100908Z",
      "link": null
    },
    {
      "PostId": "b2dc1aa8-4748-42b3-ae1f-930b637b9982",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, this works as far as I can tell. Haven't properly tested the Quest integration (just pasted it into the JS console on an existing game), but it seems to work.\r\n\r\nSo many typos, or getting my `i` and `j` confused…\r\n\r\nUpdated javascript:\r\n```\r\n$(function () {\r\n  initialiseGridInventory = (style) => $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js', function () {\r\n    var layout = $('#outputData').data('igrid-layout');\r\n    if (layout) {\r\n      $.each(layout, function(i, val) {\r\n        if (val.length) {\r\n          addItem.apply(this, val);\r\n          $('#igrid-item-'+val[0]).appendTo(addCells(1, $('#inventoryAccordion')));\r\n        } else {\r\n            addCells(1, $('#inventoryAccordion'));\r\n        }\r\n      });\r\n    } else {\r\n      addCells(25, $('#inventoryAccordion').empty());\r\n    }\r\n    $('<style>').appendTo('head').text(style);\r\n  });\r\n\r\n  var grid_icons = {};\r\n  updateInventoryIcons = function (data) {\r\n    $.each(data, function (id, icon) {\r\n      $('#igrid-item-'+id).attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, (match, x, y) => ('background-position: -'+(x*40)+'px -'+((y||0)*40)+'px;')))\r\n    });\r\n    grid_icons[id] = icon;\r\n  };\r\n\r\n  function addCells (number, container) {\r\n    var count = container.find('.igrid-slot').length;\r\n    return $($.map(Array(number),\r\n      num => $('<div>', {id: 'igrid-cell-'+(count++), class: 'igrid-slot'}).appendTo(container).droppable({\r\n        drop: function (ev, ui) {\r\n          $(this).children().appendTo(ui.draggable.parent());\r\n          $(ui.draggable).appendTo(this);\r\n          $('#outputData').attr('data-igrid-layout', JSON.stringify($('#inventoryAccordion .igrid-slot').map(\r\n            (i, slot) => [[$(slot).children().map(\r\n              (j, item) => ($(item).data('ElementId'), $(item).attr('style'))\r\n            )]]\r\n          )));\r\n        }\r\n      })\r\n    ));\r\n  }\r\n\r\n  function addItem(id, icon) {\r\n    if (!id) { return $(); }\r\n    var cell = $('#inventoryAccordion .igrid-slot:empty').first();\r\n    var item = $('<div>', {class: 'igrid-item', id: 'igrid-item-'+id}).data('ElementId', 'id').appendTo(cell).draggable({\r\n      containment: cell.parent(),\r\n      helper: 'clone',\r\n      zIndex: 100,\r\n      revert: 'invalid',\r\n      start: () => item.addClass('igrid-active'),\r\n      stop: () => item.removeClass('igrid-active')\r\n    }).click(function (event) {\r\n      if (!item.hasClass(\"disabled\")) {\r\n        var metadata = {};\r\n        var alias = (item.prop('title') || id).toLowerCase();\r\n        metadata[alias] = id;\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        item.blur().jjmenu_popup($.map(item.data('verbs'), verb => {return {\r\n          title: verb,\r\n          action: {callback: i => sendCommand(verb.toLowerCase() + ' ' + alias, metadata)}\r\n        }}));\r\n        return false;\r\n      }\r\n    }).attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, (match, x, y) => ('background-position: -'+(x*40)+'px -'+((y||0)*40)+'px;')));\r\n    return item;\r\n  }\r\n\r\n  updateInventoryItem = function (id, alias, verbs) {\r\n    var item = $('#igrid-item-'+id);\r\n    if (alias) {\r\n      item.prop('title', alias);\r\n    }\r\n    if (verbs) {\r\n      item.data('verbs', verbs);\r\n    }\r\n  };\r\n\r\n  var originalUpdateList = updateList;\r\n  updateList = function (name, listdata) {\r\n    if (name == 'inventory') {\r\n      var oldItems = $('#inventoryAccordion .igrid-item');\r\n      var pending = $();\r\n      $.each(listdata, function (key, value) {\r\n        var objdata = JSON.parse(value);\r\n        var id = objdata['ElementId'];\r\n        var item = $('#igrid-item-'+id);\r\n        if (item.length) {\r\n          oldItems = oldItems.not(item);\r\n        } else {\r\n          item = addItem(id, grid_icons[id] || '0,0');\r\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\r\n          if (item.parent().length == 0) {\r\n            pending = pending.add(item);\r\n          }\r\n        }\r\n        if (objdata['Text']) {\r\n          item.prop('title', objdata['Text']);\r\n        }\r\n        if (objdata['Verbs']) {\r\n          item.data('verbs', objdata['Verbs']).removeClass('disabled');\r\n        } else {\r\n          item.addClass('disabled');\r\n        }\r\n      });\r\n      oldItems.remove();\r\n      pending.each(function (index, item) {\r\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\r\n        if (slot.length == 0) {\r\n          slot = addCells(1);\r\n        }\r\n        slot.first().append(item);\r\n      });  \r\n    } else {\r\n      originalUpdateList(name, listdata);\r\n    }\r\n  };\r\n});\r\n```\r\n\r\nOr compressed for Quest:\r\n```\r\nJS.eval(\"$(function(){function a(a,b){var c=b.find('.igrid-slot').length;return $($.map(Array(a),()=>$('<div>',{id:'igrid-cell-'+c++,class:'igrid-slot'}).appendTo(b).droppable({drop:function(a,b){$(this).children().appendTo(b.draggable.parent()),$(b.draggable).appendTo(this),$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-slot').map((a,b)=>[[$(b).children().map((a,b)=>($(b).data('ElementId'),$(b).attr('style')))]])))}})))}function b(a,b){if(!a)return $();var c=$('#inventoryAccordion .igrid-slot:empty').first(),d=$('<div>',{class:'igrid-item',id:'igrid-item-'+a}).data('ElementId','id').appendTo(c).draggable({containment:c.parent(),helper:'clone',zIndex:100,revert:'invalid',start:()=>d.addClass('igrid-active'),stop:()=>d.removeClass('igrid-active')}).click(function(b){if(!d.hasClass('disabled')){var c={},e=(d.prop('title')||a).toLowerCase();return c[e]=a,b.preventDefault(),b.stopPropagation(),d.blur().jjmenu_popup($.map(d.data('verbs'),a=>({title:a,action:{callback:()=>sendCommand(a.toLowerCase()+' '+e,c)}}))),!1}}).attr('style',b.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,(a,b,c)=>'background-position: -'+40*b+'px -'+40*(c||0)+'px;'));return d}initialiseGridInventory=c=>$.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js',function(){var d=$('#outputData').data('igrid-layout');d?$.each(d,function(c,d){d.length?(b.apply(this,d),$('#igrid-item-'+d[0]).appendTo(a(1,$('#inventoryAccordion')))):a(1,$('#inventoryAccordion'))}):a(25,$('#inventoryAccordion').empty()),$('<style>').appendTo('head').text(c)});var c={};updateInventoryIcons=function(a){$.each(a,function(a,b){$('#igrid-item-'+a).attr('style',b.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,(a,b,c)=>'background-position: -'+40*b+'px -'+40*(c||0)+'px;'))}),c[id]=icon},updateInventoryItem=function(a,b,c){var d=$('#igrid-item-'+a);b&&d.prop('title',b),c&&d.data('verbs',c)};var d=updateList;updateList=function(e,f){if('inventory'==e){var g=$('#inventoryAccordion .igrid-item'),h=$();$.each(f,function(a,d){var e=JSON.parse(d),f=e.ElementId,i=$('#igrid-item-'+f);i.length?g=g.not(i):(i=b(f,c[f]||'0,0'),0==i.parent().length&&(h=h.add(i))),e.Text&&i.prop('title',e.Text),e.Verbs?i.data('verbs',e.Verbs).removeClass('disabled'):i.addClass('disabled')}),g.remove(),h.each(function(b,c){var d=$('#inventoryAccordion .igrid-slot:empty');0==d.length&&(d=a(1)),d.first().append(c)})}else d(e,f)}});\")\r\n```\r\n\r\nCan confirm:\r\n* Clicking an object and using its verbs works\r\n* Dragging objects works\r\n* Objects are added and removed when they would be for the default inventory pane\r\n     * Note: This unfortunately means that it's not guaranteed to update immediately if an object's listalias or inventoryverbs changes. If this is a problem, you can use `JS.updateInventoryItem (name, alias, verbs)` to make sure an item is displayed correctly.\r\n* Object's listalias is used when hovering the mouse over an object; and in the echoed command when using the verbs menu.\r\n\r\n> As for not displaying items, I assume it wouldn't until it has icons to draw from... right? If it's trying to pull from a sheet that doesn't exist, would that not interrupt the creation process?\r\n\r\nI haven't tested the icons yet. If the icon sheet doesn't exist at all, the items appear as a draggable transparent box. Maybe I should have added a `background-color: yellow` to the `.igrid-item` class in the stylesheet for testing purposes.\r\n\r\nOnce the icon sheet exists, any object which doesn't give itself a specific icon will display icon `0,0` (the top left one) instead; so it might be good to use that space as a generic placeholder.\r\n\r\nIf you want items with the same icon but a different background (for example to distinguish a common sword from a rare sword), you could set the `inventoryicon` property to a string like `1,4 background-color: red` - it does a search and replace to turn `1,4` at the beginning into `background-position: -40px -160px;` and then applies it to the item's \"style\" attribute.\r\n\r\nHope that's helpful.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, this works as far as I can tell. Haven't properly tested the Quest integration (just pasted it into the JS console on an existing game), but it seems to work.</p>\n<p>So many typos, or getting my <code>i</code> and <code>j</code> confused…</p>\n<p>Updated javascript:</p>\n<pre><code>$(function () {\n  initialiseGridInventory = (style) =&gt; $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js', function () {\n    var layout = $('#outputData').data('igrid-layout');\n    if (layout) {\n      $.each(layout, function(i, val) {\n        if (val.length) {\n          addItem.apply(this, val);\n          $('#igrid-item-'+val[0]).appendTo(addCells(1, $('#inventoryAccordion')));\n        } else {\n            addCells(1, $('#inventoryAccordion'));\n        }\n      });\n    } else {\n      addCells(25, $('#inventoryAccordion').empty());\n    }\n    $('&lt;style&gt;').appendTo('head').text(style);\n  });\n\n  var grid_icons = {};\n  updateInventoryIcons = function (data) {\n    $.each(data, function (id, icon) {\n      $('#igrid-item-'+id).attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, (match, x, y) =&gt; ('background-position: -'+(x*40)+'px -'+((y||0)*40)+'px;')))\n    });\n    grid_icons[id] = icon;\n  };\n\n  function addCells (number, container) {\n    var count = container.find('.igrid-slot').length;\n    return $($.map(Array(number),\n      num =&gt; $('&lt;div&gt;', {id: 'igrid-cell-'+(count++), class: 'igrid-slot'}).appendTo(container).droppable({\n        drop: function (ev, ui) {\n          $(this).children().appendTo(ui.draggable.parent());\n          $(ui.draggable).appendTo(this);\n          $('#outputData').attr('data-igrid-layout', JSON.stringify($('#inventoryAccordion .igrid-slot').map(\n            (i, slot) =&gt; [[$(slot).children().map(\n              (j, item) =&gt; ($(item).data('ElementId'), $(item).attr('style'))\n            )]]\n          )));\n        }\n      })\n    ));\n  }\n\n  function addItem(id, icon) {\n    if (!id) { return $(); }\n    var cell = $('#inventoryAccordion .igrid-slot:empty').first();\n    var item = $('&lt;div&gt;', {class: 'igrid-item', id: 'igrid-item-'+id}).data('ElementId', 'id').appendTo(cell).draggable({\n      containment: cell.parent(),\n      helper: 'clone',\n      zIndex: 100,\n      revert: 'invalid',\n      start: () =&gt; item.addClass('igrid-active'),\n      stop: () =&gt; item.removeClass('igrid-active')\n    }).click(function (event) {\n      if (!item.hasClass(\"disabled\")) {\n        var metadata = {};\n        var alias = (item.prop('title') || id).toLowerCase();\n        metadata[alias] = id;\n        event.preventDefault();\n        event.stopPropagation();\n        item.blur().jjmenu_popup($.map(item.data('verbs'), verb =&gt; {return {\n          title: verb,\n          action: {callback: i =&gt; sendCommand(verb.toLowerCase() + ' ' + alias, metadata)}\n        }}));\n        return false;\n      }\n    }).attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, (match, x, y) =&gt; ('background-position: -'+(x*40)+'px -'+((y||0)*40)+'px;')));\n    return item;\n  }\n\n  updateInventoryItem = function (id, alias, verbs) {\n    var item = $('#igrid-item-'+id);\n    if (alias) {\n      item.prop('title', alias);\n    }\n    if (verbs) {\n      item.data('verbs', verbs);\n    }\n  };\n\n  var originalUpdateList = updateList;\n  updateList = function (name, listdata) {\n    if (name == 'inventory') {\n      var oldItems = $('#inventoryAccordion .igrid-item');\n      var pending = $();\n      $.each(listdata, function (key, value) {\n        var objdata = JSON.parse(value);\n        var id = objdata['ElementId'];\n        var item = $('#igrid-item-'+id);\n        if (item.length) {\n          oldItems = oldItems.not(item);\n        } else {\n          item = addItem(id, grid_icons[id] || '0,0');\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\n          if (item.parent().length == 0) {\n            pending = pending.add(item);\n          }\n        }\n        if (objdata['Text']) {\n          item.prop('title', objdata['Text']);\n        }\n        if (objdata['Verbs']) {\n          item.data('verbs', objdata['Verbs']).removeClass('disabled');\n        } else {\n          item.addClass('disabled');\n        }\n      });\n      oldItems.remove();\n      pending.each(function (index, item) {\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\n        if (slot.length == 0) {\n          slot = addCells(1);\n        }\n        slot.first().append(item);\n      });  \n    } else {\n      originalUpdateList(name, listdata);\n    }\n  };\n});\n</code></pre>\n<p>Or compressed for Quest:</p>\n<pre><code>JS.eval(\"$(function(){function a(a,b){var c=b.find('.igrid-slot').length;return $($.map(Array(a),()=&gt;$('&lt;div&gt;',{id:'igrid-cell-'+c++,class:'igrid-slot'}).appendTo(b).droppable({drop:function(a,b){$(this).children().appendTo(b.draggable.parent()),$(b.draggable).appendTo(this),$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-slot').map((a,b)=&gt;[[$(b).children().map((a,b)=&gt;($(b).data('ElementId'),$(b).attr('style')))]])))}})))}function b(a,b){if(!a)return $();var c=$('#inventoryAccordion .igrid-slot:empty').first(),d=$('&lt;div&gt;',{class:'igrid-item',id:'igrid-item-'+a}).data('ElementId','id').appendTo(c).draggable({containment:c.parent(),helper:'clone',zIndex:100,revert:'invalid',start:()=&gt;d.addClass('igrid-active'),stop:()=&gt;d.removeClass('igrid-active')}).click(function(b){if(!d.hasClass('disabled')){var c={},e=(d.prop('title')||a).toLowerCase();return c[e]=a,b.preventDefault(),b.stopPropagation(),d.blur().jjmenu_popup($.map(d.data('verbs'),a=&gt;({title:a,action:{callback:()=&gt;sendCommand(a.toLowerCase()+' '+e,c)}}))),!1}}).attr('style',b.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,(a,b,c)=&gt;'background-position: -'+40*b+'px -'+40*(c||0)+'px;'));return d}initialiseGridInventory=c=&gt;$.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js',function(){var d=$('#outputData').data('igrid-layout');d?$.each(d,function(c,d){d.length?(b.apply(this,d),$('#igrid-item-'+d[0]).appendTo(a(1,$('#inventoryAccordion')))):a(1,$('#inventoryAccordion'))}):a(25,$('#inventoryAccordion').empty()),$('&lt;style&gt;').appendTo('head').text(c)});var c={};updateInventoryIcons=function(a){$.each(a,function(a,b){$('#igrid-item-'+a).attr('style',b.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,(a,b,c)=&gt;'background-position: -'+40*b+'px -'+40*(c||0)+'px;'))}),c[id]=icon},updateInventoryItem=function(a,b,c){var d=$('#igrid-item-'+a);b&amp;&amp;d.prop('title',b),c&amp;&amp;d.data('verbs',c)};var d=updateList;updateList=function(e,f){if('inventory'==e){var g=$('#inventoryAccordion .igrid-item'),h=$();$.each(f,function(a,d){var e=JSON.parse(d),f=e.ElementId,i=$('#igrid-item-'+f);i.length?g=g.not(i):(i=b(f,c[f]||'0,0'),0==i.parent().length&amp;&amp;(h=h.add(i))),e.Text&amp;&amp;i.prop('title',e.Text),e.Verbs?i.data('verbs',e.Verbs).removeClass('disabled'):i.addClass('disabled')}),g.remove(),h.each(function(b,c){var d=$('#inventoryAccordion .igrid-slot:empty');0==d.length&amp;&amp;(d=a(1)),d.first().append(c)})}else d(e,f)}});\")\n</code></pre>\n<p>Can confirm:</p>\n<ul>\n<li>Clicking an object and using its verbs works</li>\n<li>Dragging objects works</li>\n<li>Objects are added and removed when they would be for the default inventory pane\n<ul>\n<li>Note: This unfortunately means that it's not guaranteed to update immediately if an object's listalias or inventoryverbs changes. If this is a problem, you can use <code>JS.updateInventoryItem (name, alias, verbs)</code> to make sure an item is displayed correctly.</li>\n</ul>\n</li>\n<li>Object's listalias is used when hovering the mouse over an object; and in the echoed command when using the verbs menu.</li>\n</ul>\n<blockquote>\n<p>As for not displaying items, I assume it wouldn't until it has icons to draw from... right? If it's trying to pull from a sheet that doesn't exist, would that not interrupt the creation process?</p>\n</blockquote>\n<p>I haven't tested the icons yet. If the icon sheet doesn't exist at all, the items appear as a draggable transparent box. Maybe I should have added a <code>background-color: yellow</code> to the <code>.igrid-item</code> class in the stylesheet for testing purposes.</p>\n<p>Once the icon sheet exists, any object which doesn't give itself a specific icon will display icon <code>0,0</code> (the top left one) instead; so it might be good to use that space as a generic placeholder.</p>\n<p>If you want items with the same icon but a different background (for example to distinguish a common sword from a rare sword), you could set the <code>inventoryicon</code> property to a string like <code>1,4 background-color: red</code> - it does a search and replace to turn <code>1,4</code> at the beginning into <code>background-position: -40px -160px;</code> and then applies it to the item's \"style\" attribute.</p>\n<p>Hope that's helpful.</p>\n\n",
      "PostDate": "2020-04-20T19:57:02.9137315Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "67327644-8ad1-4e73-8665-9cd57cc93979",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm... Well, I opened up that fresh game and tried out the code, and nothing is appearing on my end - either with items already in inventory, or starting with it empty and picking up items anew, it's still the original inventory panel.\r\n\r\nhttps://i.gyazo.com/b6047d90d41c9e69e739413cd53126a6.png\r\n^ Here's how it looks in the advanced scripts tab of game, that's all the javascript compressed on one line (directly copied as above, from eval to else d(e,f)}});\") -- is there something I was meant to place elsewhere, like a rewritten core inventory function, or turning off the inventory panel in settings?\r\n\r\nThank you again!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm... Well, I opened up that fresh game and tried out the code, and nothing is appearing on my end - either with items already in inventory, or starting with it empty and picking up items anew, it's still the original inventory panel.</p>\n<p>https://i.gyazo.com/b6047d90d41c9e69e739413cd53126a6.png<br>\n^ Here's how it looks in the advanced scripts tab of game, that's all the javascript compressed on one line (directly copied as above, from eval to else d(e,f)}});\") -- is there something I was meant to place elsewhere, like a rewritten core inventory function, or turning off the inventory panel in settings?</p>\n<p>Thank you again!</p>\n\n",
      "PostDate": "2020-04-20T20:13:04.8624066Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "82344724-57e8-440d-82c7-3e67c9f18a2f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Have you got the stylesheet line? I don't see it in that screenshot.\r\n\r\nIt should be:\r\n<pre><code>JS.initialiseGridInventory(\"#inventoryAccordion{display:grid;grid-gap:2px;grid-template-columns:40px 40px 40px 40px 40px;grid-template-rows:40px 40px 40px 40px 40px;background-color:#000;padding:3px}.igrid-slot{background-color:rgba(255,100,255,.8);border:1px solid rgba(0,0,0,.8);padding:0;text-align:center}.igrid-item{background-image:url('\"+<em style=\"color: blue\">GetFileURL(\"inventory_icons.png\")</em>+\"');height:38px;width:38px;cursor:pointer}.igrid-active{border:solid 2px #ccc}.ui-droppable-hover{background:#f4f4f4;border-style:dashed}\")</code></pre>\r\n\r\nThat's the line that actually switches to the grid layout (as well as containing all the style information). It should come after the `eval`. You can also change the filename if necessary.\r\n\r\nIf you're using the desktop editor, you might also want to remove the link to a library on my webserver so that the game can be played offline.\r\nI believe the desktop editor allows you to add javascript files to a game, so you could include the non-compressed version of the javascript code and change the line\r\n```\r\n  initialiseGridInventory = (style) => $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js', function () {\r\n```\r\nto\r\n```\r\n  initialiseGridInventory = (function (style) {\r\n```\r\nif the file `jquery.ui.touch-punch.min.js` is in your project. (The touch-punch library just makes jQuery's `draggable` work neatly with touchscreen devices, by generating artificial mouse movement events when it receives touch movement events)",
      "EditableFormat": "markdown",
      "HTML": "<p>Have you got the stylesheet line? I don't see it in that screenshot.</p>\n<p>It should be:</p>\n<pre><code>JS.initialiseGridInventory(\"#inventoryAccordion{display:grid;grid-gap:2px;grid-template-columns:40px 40px 40px 40px 40px;grid-template-rows:40px 40px 40px 40px 40px;background-color:#000;padding:3px}.igrid-slot{background-color:rgba(255,100,255,.8);border:1px solid rgba(0,0,0,.8);padding:0;text-align:center}.igrid-item{background-image:url('\"+<em style=\"color: blue\">GetFileURL(\"inventory_icons.png\")</em>+\"');height:38px;width:38px;cursor:pointer}.igrid-active{border:solid 2px #ccc}.ui-droppable-hover{background:#f4f4f4;border-style:dashed}\")</code></pre>\n<p>That's the line that actually switches to the grid layout (as well as containing all the style information). It should come after the <code>eval</code>. You can also change the filename if necessary.</p>\n<p>If you're using the desktop editor, you might also want to remove the link to a library on my webserver so that the game can be played offline.<br>\nI believe the desktop editor allows you to add javascript files to a game, so you could include the non-compressed version of the javascript code and change the line</p>\n<pre><code>  initialiseGridInventory = (style) =&gt; $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js', function () {\n</code></pre>\n<p>to</p>\n<pre><code>  initialiseGridInventory = (function (style) {\n</code></pre>\n<p>if the file <code>jquery.ui.touch-punch.min.js</code> is in your project. (The touch-punch library just makes jQuery's <code>draggable</code> work neatly with touchscreen devices, by generating artificial mouse movement events when it receives touch movement events)</p>\n\n",
      "PostDate": "2020-04-20T20:37:42.0602978Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "59a62539-2eb3-455d-b943-3c280ce8c706",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I didn't have the stylesheet line, no! But now it's in after the eval chunk as a new JS line, but it's still not displaying anything different. I have a placeholder image in place named inventory_icons.png, too. \r\n\r\nAnd oh, god, yeah, I want this to be played offline. I had people complaining to me about my Gamebooks not being stable online, I don't wanna think about my text RPGs having that reliance. Quest can add javascript files? I had no idea!... nor do I know how to do that, argh. I know images is as simple as dropping the image in the game's project folder - same deal?\r\n\r\nWill changing that line in the compressed version work, or no?\r\n\r\n... Actually, when you say play offline, do you mean this code currently won't work at all in the editor/player? That would certainly explain why it's still not working!",
      "EditableFormat": "markdown",
      "HTML": "<p>I didn't have the stylesheet line, no! But now it's in after the eval chunk as a new JS line, but it's still not displaying anything different. I have a placeholder image in place named inventory_icons.png, too.</p>\n<p>And oh, god, yeah, I want this to be played offline. I had people complaining to me about my Gamebooks not being stable online, I don't wanna think about my text RPGs having that reliance. Quest can add javascript files? I had no idea!... nor do I know how to do that, argh. I know images is as simple as dropping the image in the game's project folder - same deal?</p>\n<p>Will changing that line in the compressed version work, or no?</p>\n<p>... Actually, when you say play offline, do you mean this code currently won't work at all in the editor/player? That would certainly explain why it's still not working!</p>\n\n",
      "PostDate": "2020-04-20T20:59:26.4732157Z",
      "LastEditDate": "2020-04-20T22:07:04.9480263Z",
      "link": null
    },
    {
      "PostId": "8aa3d178-60ad-43ef-a80d-c664c1069e0e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Will changing that line in the compressed version work, or no?\r\n\r\nIt should work. But making the draggable functionality work with touchscreens will need either the `$.getScript` call, or the file `jquery.ui.touch-punch.min.js` included in your project. (It's basically a library that waits for touch movement events, and changes their type to mouse movement events within jQuery's event stack, so that draggable sees them)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Will changing that line in the compressed version work, or no?</p>\n</blockquote>\n<p>It should work. But making the draggable functionality work with touchscreens will need either the <code>$.getScript</code> call, or the file <code>jquery.ui.touch-punch.min.js</code> included in your project. (It's basically a library that waits for touch movement events, and changes their type to mouse movement events within jQuery's event stack, so that draggable sees them)</p>\n\n",
      "PostDate": "2020-04-20T22:07:49.1003652Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a9577210-f074-4a08-a5e1-0fe33cd41eb2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can't work out what's different; the script as posted is certainly working for me.\r\n\r\nAre there any errors in the javascript console? (Ctrl+Shift+J if you're playing in a browser; not sure if that will work in the desktop player or not)",
      "EditableFormat": "markdown",
      "HTML": "<p>I can't work out what's different; the script as posted is certainly working for me.</p>\n<p>Are there any errors in the javascript console? (Ctrl+Shift+J if you're playing in a browser; not sure if that will work in the desktop player or not)</p>\n\n",
      "PostDate": "2020-04-20T22:10:01.104765Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "04538fb8-772e-4e4b-bd8c-b09cb3b20aab",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Uh... well. I uploaded the test 'game' and, upon opening it online...\r\nhttps://i.gyazo.com/33d6bf6100bb3058d42be8940c671b4d.png\r\n\r\nThere's the grid. It's completely janked out of the pane, but there it is. That isn't appearing -at all- in the editor, as so;\r\n\r\nhttps://i.gyazo.com/5fe841d452109235189c64406cf908f0.png\r\n\r\nAaaand if I open the published file in the offline player, same result. So, currently it only works in online web mode.\r\n\r\nNow comes the relief of 'oh, I'm not missing something blindingly obvious', mixed with the despair of 'but whyyyyy??'\r\n\r\nAlso, no js errors of relevance to the game, just one of my extensions that I need to remove that no longer functions, I think. The ctrl-shift-j shortcut doesn't work in the game editor/player.\r\n\r\nedit; heading to bed for now, but feeling positive.",
      "EditableFormat": "markdown",
      "HTML": "<p>Uh... well. I uploaded the test 'game' and, upon opening it online...<br>\nhttps://i.gyazo.com/33d6bf6100bb3058d42be8940c671b4d.png</p>\n<p>There's the grid. It's completely janked out of the pane, but there it is. That isn't appearing -at all- in the editor, as so;</p>\n<p>https://i.gyazo.com/5fe841d452109235189c64406cf908f0.png</p>\n<p>Aaaand if I open the published file in the offline player, same result. So, currently it only works in online web mode.</p>\n<p>Now comes the relief of 'oh, I'm not missing something blindingly obvious', mixed with the despair of 'but whyyyyy??'</p>\n<p>Also, no js errors of relevance to the game, just one of my extensions that I need to remove that no longer functions, I think. The ctrl-shift-j shortcut doesn't work in the game editor/player.</p>\n<p>edit; heading to bed for now, but feeling positive.</p>\n\n",
      "PostDate": "2020-04-20T22:17:42.4926906Z",
      "LastEditDate": "2020-04-20T22:50:24.7924784Z",
      "link": null
    },
    {
      "PostId": "0c52f399-1767-4464-b1c5-c6562c8ccb52",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'll have to look up what version of Chromium is bundled with Quest… arrow notation has been supported since version 45, grid layout since 57, and draggable since 81.\r\n\r\nHad a poke around, but I can't find the version number, so not sure how much of the code will need changing. We might end up needing to arrange the grid using a table, or handle dragging by catching individual mousebutton press/release events (but I *think* jQuery did that before 'draggable' was a thing)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'll have to look up what version of Chromium is bundled with Quest… arrow notation has been supported since version 45, grid layout since 57, and draggable since 81.</p>\n<p>Had a poke around, but I can't find the version number, so not sure how much of the code will need changing. We might end up needing to arrange the grid using a table, or handle dragging by catching individual mousebutton press/release events (but I <em>think</em> jQuery did that before 'draggable' was a thing)</p>\n\n",
      "PostDate": "2020-04-21T08:34:18.5150766Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6d339b4b-9c07-444d-85f1-4570381e5f39",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yikes... that's not good. Sounds like Quest is due for an update in that department :S That also leaves me even further out of my depth than before.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yikes... that's not good. Sounds like Quest is due for an update in that department :S That also leaves me even further out of my depth than before.</p>\n\n",
      "PostDate": "2020-04-21T08:40:18.0669405Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "566b9291-2bdb-486c-9b77-37509254fba2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Looks like the desktop player is using Cefsharp 39.0.1 … so there'll be a few changes required.",
      "EditableFormat": "markdown",
      "HTML": "<p>Looks like the desktop player is using Cefsharp 39.0.1 … so there'll be a few changes required.</p>\n\n",
      "PostDate": "2020-04-21T08:45:22.8154066Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e5ba421b-3c49-45f7-9620-5a39efb2ccc7",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "2015, huh. I was hobbling my way with guides and a lot of help from others, but 'don't implement anything introduced in the last 5 years' is a bit too much of a hurdle, heh. So- I'm assuming a greater reliance on HTML, at least for the grid?",
      "EditableFormat": "markdown",
      "HTML": "<p>2015, huh. I was hobbling my way with guides and a lot of help from others, but 'don't implement anything introduced in the last 5 years' is a bit too much of a hurdle, heh. So- I'm assuming a greater reliance on HTML, at least for the grid?</p>\n\n",
      "PostDate": "2020-04-21T08:49:59.8647542Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fb34f4a6-677e-44cc-bd8e-52a982d8efe4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's a 2015 browser… so no HTML5 draggable, no arrow functions, and no `display: grid`.\r\n\r\nDraggable: until HTML5 introduced the draggable attribute, jQuery implemented the draggable and droppable types by listening for mousedown, mouseup, and mousemoved events. Quest includes jQuery UI 1.11, so this should just work.\r\n\r\nGrid: We can put the items in a table. Or, because we've got a container for each slot in the inventory, we could just make `.igrid-slot` a fixed size and rely on the browser to arrange them.\r\n\r\nArrow functions: This is just a syntax change; it'll take a little time to update.\r\n\r\nI really should have thought about this, because I had a similar issue when I used `position: sticky` in a game. (Check out the game 'Circus' on my profile; see the difference on web/desktop. That needs Chrome 57 or later to display properly)",
      "EditableFormat": "markdown",
      "HTML": "<p>That's a 2015 browser… so no HTML5 draggable, no arrow functions, and no <code>display: grid</code>.</p>\n<p>Draggable: until HTML5 introduced the draggable attribute, jQuery implemented the draggable and droppable types by listening for mousedown, mouseup, and mousemoved events. Quest includes jQuery UI 1.11, so this should just work.</p>\n<p>Grid: We can put the items in a table. Or, because we've got a container for each slot in the inventory, we could just make <code>.igrid-slot</code> a fixed size and rely on the browser to arrange them.</p>\n<p>Arrow functions: This is just a syntax change; it'll take a little time to update.</p>\n<p>I really should have thought about this, because I had a similar issue when I used <code>position: sticky</code> in a game. (Check out the game 'Circus' on my profile; see the difference on web/desktop. That needs Chrome 57 or later to display properly)</p>\n\n",
      "PostDate": "2020-04-21T09:02:57.0954204Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e684a966-bd27-4650-b0ad-1e610acfbf0a",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Honestly, this might go some ways to explaining some issues I had a while back with js, where things simply weren't working until I separated the whole block line by line, at which point it all inexplicably started showing up. I never even thought to test it online, maybe it worked just fine there!\r\n\r\nIt might be worth seeing if we can get in touch with Pixie about updating things, because being stuck in 2015 is surely going to cause problems at some point. Mind you, I've no idea how much work that would entail, let alone how much it might break...\r\n\r\nWhen you say rely on the browser to arrange them, how do you mean?",
      "EditableFormat": "markdown",
      "HTML": "<p>Honestly, this might go some ways to explaining some issues I had a while back with js, where things simply weren't working until I separated the whole block line by line, at which point it all inexplicably started showing up. I never even thought to test it online, maybe it worked just fine there!</p>\n<p>It might be worth seeing if we can get in touch with Pixie about updating things, because being stuck in 2015 is surely going to cause problems at some point. Mind you, I've no idea how much work that would entail, let alone how much it might break...</p>\n<p>When you say rely on the browser to arrange them, how do you mean?</p>\n\n",
      "PostDate": "2020-04-21T09:22:23.2205367Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ea4314b9-5871-484b-bbf6-9ac4d2eafc22",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> When you say rely on the browser to arrange them, how do you mean?\r\n\r\nIf you have a bunch of `<div>`s with `display: inline-block`, they will be arranged like text characters. For example:\r\n```\r\n<div style=\"background-color:yellow; display:block; width:160px; line-height: 0px;\">\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n  <div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/>\r\n</div>\r\n```\r\n\r\nDisplays like:\r\n<div style=\"background-color:yellow; display:block; width:160px; line-height:0px\"><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div><div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"></div>\r\n</div>\r\n\r\nEach div has a fixed height and width, and the container has a fixed width, so they'll just wrap to having 5 on each line. You can't  easily put spacing between them (you'd need to use a table for that), but I think it would work well enough for this.\r\n\r\nIf one of the icons was too big, it would mess up positioning of all the ones after it… but in our case, that isn't going to happen. You really only need to use `grid` if there's a chance of text being longer than you expected, or user stylesheets causing a problem.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>When you say rely on the browser to arrange them, how do you mean?</p>\n</blockquote>\n<p>If you have a bunch of <code>&lt;div&gt;</code>s with <code>display: inline-block</code>, they will be arranged like text characters. For example:</p>\n<pre><code>&lt;div style=\"background-color:yellow; display:block; width:160px; line-height: 0px;\"&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n  &lt;div style=\"display: inline-block; background-color: purple; border:2px solid black; height:40px; width:40px\"/&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Displays like:</p>\n<div style=\"background-color: yellow; display: block; width: 160px; line-height: 0px\"><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div><div style=\"display: inline-block; background-color: purple; border: 2px solid black; height: 40px; width: 40px\"></div>\n</div>\n<p>Each div has a fixed height and width, and the container has a fixed width, so they'll just wrap to having 5 on each line. You can't  easily put spacing between them (you'd need to use a table for that), but I think it would work well enough for this.</p>\n<p>If one of the icons was too big, it would mess up positioning of all the ones after it… but in our case, that isn't going to happen. You really only need to use <code>grid</code> if there's a chance of text being longer than you expected, or user stylesheets causing a problem.</p>\n\n",
      "PostDate": "2020-04-21T11:17:42.8536675Z",
      "LastEditDate": "2020-04-21T11:26:44.0046255Z",
      "link": null
    },
    {
      "PostId": "9b1a03bd-3614-4dfd-99c9-a83fbebff976",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Edited to make it display correctly (the forum doesn't like `<div/>` so I had to change them all to `<div></div>` syntax. It seems the forum still parses HTML as SGML-style rather than XML-style.",
      "EditableFormat": "markdown",
      "HTML": "<p>Edited to make it display correctly (the forum doesn't like <code>&lt;div/&gt;</code> so I had to change them all to <code>&lt;div&gt;&lt;/div&gt;</code> syntax. It seems the forum still parses HTML as SGML-style rather than XML-style.</p>\n\n",
      "PostDate": "2020-04-21T11:25:04.7681017Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bbd58bea-61e4-4d1b-b660-9a2bd16923f0",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Honestly, if it works, it works! So, in the example above, if the width was changed to 200px instead of 160px, would they start displaying in lines of 5 instead of 4? (Probably blitheringly obvious, but...)",
      "EditableFormat": "markdown",
      "HTML": "<p>Honestly, if it works, it works! So, in the example above, if the width was changed to 200px instead of 160px, would they start displaying in lines of 5 instead of 4? (Probably blitheringly obvious, but...)</p>\n\n",
      "PostDate": "2020-04-21T11:51:07.6637294Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4fb7a15b-26b1-4b7b-b0db-a66bb537b6d1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**Not tested yet** (on my phone), but here's an updated version. A few tweaks; as I'd changed the way it works while debugging.\r\n\r\nThe CSS:\r\n```\r\n#inventoryAccordion {\r\n  text-align: center;\r\n  line-height: 0px;\r\n}\r\n.igrid-slot {\r\n  display: inline-block;\r\n  background-color: purple;\r\n  border: 1px solid black;\r\n  padding: 0px;\r\n  width: 40px;\r\n  height: 40px;\r\n  margin: 0px;\r\n}\r\n\r\n.igrid-item {\r\n  background-image: url('inventory_icons.png');\r\n  background-color: yellow;\r\n  height: 38px;\r\n  width: 38px;\r\n  cursor: pointer;\r\n}\r\n\r\n.igrid-active {\r\n  border: solid 2px #ccc;\r\n}\r\n\r\n.ui-droppable-hover {\r\n  background: #f4f4f4;\r\n  border-style: dashed;\r\n}\r\n```\r\n\r\nThe start script:\r\n```\r\nstyle = \"#inventoryAccordion {text-align: center; line-height: 0px;} .igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 0px; width: 40px; height: 40px; margin: 0px;}\r\n.igrid-item {background-image: url('\"+GetFileURL(\"inventory_icons.png\")+\"'); background-color: yellow; height: 38px; width: 38px; cursor: pointer;}\r\n.igrid-active {border: solid 2px #ccc; background-color: green;}\r\n.ui-droppable-hover {background: #f4f4f4; border-style: dashed; background-color: red}\"\r\n\r\nJS.initialiseGridInventory(style)\r\n```\r\n\r\nThe turnscript:\r\n```\r\nicons = NewStringDictionary()\r\nforeach (obj, ScopeInventory()) {\r\n  if (HasString (obj, \"inventoryicon\")) {\r\n    dictionary add (icons, obj.name, obj.inventoryicon)\r\n  }\r\n}\r\nJS.updateInventoryIcons (icons)\r\n```\r\n\r\nThe javascript:\r\n```\r\n$(function() {\r\n  initialiseGridInventory = function(style) {\r\n    $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js', function() {\r\n      var layout = $('#outputData')\r\n        .data('igrid-layout');\r\n      if (layout) {\r\n        $.each(layout, function(i, val) {\r\n          if (val.length) {\r\n            addItem.apply(this, val);\r\n            $('#igrid-item-' + val[0])\r\n              .appendTo(addCells(1, $('#inventoryAccordion')));\r\n          } else {\r\n            addCells(1, $('#inventoryAccordion'));\r\n          }\r\n        });\r\n      } else {\r\n        addCells(25, $('#inventoryAccordion')\r\n          .empty());\r\n      }\r\n      $('<style>')\r\n        .appendTo('head')\r\n        .text(style);\r\n    })\r\n  };\r\n\r\n  var grid_icons = {};\r\n  updateInventoryIcons = function(data) {\r\n    $.each(data, function(id, icon) {\r\n      $('#igrid-item-' + id)\r\n        .attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function(match, x, y) {\r\n          return ('background-position: -' + (x * 40) + 'px -' + ((y || 0) * 40) + 'px;')\r\n        }))\r\n    });\r\n    grid_icons[id] = icon;\r\n  };\r\n\r\n  function addCells(number, container) {\r\n    var count = container.find('.igrid-slot')\r\n      .length;\r\n    return $($.map(Array(number), function() {\r\n      return $('<div>', {\r\n          id: 'igrid-cell-' + (count++),\r\n          class: 'igrid-slot'\r\n        })\r\n        .appendTo(container)\r\n        .droppable({\r\n          drop: function(ev, ui) {\r\n            $(this)\r\n              .children()\r\n              .appendTo(ui.draggable.parent());\r\n            $(ui.draggable)\r\n              .appendTo(this);\r\n            $('#outputData')\r\n              .attr('data-igrid-layout', JSON.stringify($('#inventoryAccordion .igrid-slot')\r\n                .map(\r\n                  function(i, slot) {\r\n                    return [\r\n                      [$(slot)\r\n                        .children()\r\n                        .map(\r\n                          function(j, item) {\r\n                            return ($(item)\r\n                              .data('ElementId'), $(item)\r\n                              .attr('style'));\r\n                          }\r\n                        )\r\n                      ]\r\n                    ];\r\n                  }\r\n                )));\r\n          }\r\n        });\r\n    }));\r\n  }\r\n\r\n  function addItem(id, icon) {\r\n    if (!id) {\r\n      return $();\r\n    }\r\n    var cell = $('#inventoryAccordion .igrid-slot:empty')\r\n      .first();\r\n    var item = $('<div>', {\r\n        class: 'igrid-item',\r\n        id: 'igrid-item-' + id\r\n      })\r\n      .data('ElementId', 'id')\r\n      .appendTo(cell)\r\n      .draggable({\r\n        containment: cell.parent(),\r\n        helper: 'clone',\r\n        zIndex: 100,\r\n        revert: 'invalid',\r\n        start: function() {\r\n          item.addClass('igrid-active');\r\n        },\r\n        stop: function() {\r\n          item.removeClass('igrid-active');\r\n        }\r\n      })\r\n      .click(function(event) {\r\n        if (!item.hasClass(\"disabled\")) {\r\n          var metadata = {};\r\n          var alias = (item.prop('title') || id)\r\n            .toLowerCase();\r\n          metadata[alias] = id;\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          item.blur()\r\n            .jjmenu_popup($.map(item.data('verbs'), function(verb) {\r\n              return {\r\n                title: verb,\r\n                action: {\r\n                  callback: function() {\r\n                    sendCommand(verb.toLowerCase() + ' ' + alias, metadata);\r\n                  }\r\n                }\r\n              };\r\n            }));\r\n          return false;\r\n        }\r\n      })\r\n      .attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function(match, x, y) {\r\n        return ('background-position: -' + (x * 40) + 'px -' + ((y || 0) * 40) + 'px;')\r\n      }));\r\n    return item;\r\n  }\r\n\r\n  updateInventoryItem = function(id, alias, verbs) {\r\n    var item = $('#igrid-item-' + id);\r\n    if (alias) {\r\n      item.prop('title', alias);\r\n    }\r\n    if (verbs) {\r\n      item.data('verbs', verbs);\r\n    }\r\n  };\r\n\r\n  var originalUpdateList = updateList;\r\n  updateList = function(name, listdata) {\r\n    if (name == 'inventory') {\r\n      var oldItems = $('#inventoryAccordion .igrid-item');\r\n      var pending = $();\r\n      $.each(listdata, function(key, value) {\r\n        var objdata = JSON.parse(value);\r\n        var id = objdata['ElementId'];\r\n        var item = $('#igrid-item-' + id);\r\n        if (item.length) {\r\n          oldItems = oldItems.not(item);\r\n        } else {\r\n          item = addItem(id, grid_icons[id] || '0,0');\r\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\r\n          if (item.parent()\r\n            .length == 0) {\r\n            pending = pending.add(item);\r\n          }\r\n        }\r\n        if (objdata['Text']) {\r\n          item.prop('title', objdata['Text']);\r\n        }\r\n        if (objdata['Verbs']) {\r\n          item.data('verbs', objdata['Verbs'])\r\n            .removeClass('disabled');\r\n        } else {\r\n          item.addClass('disabled');\r\n        }\r\n      });\r\n      oldItems.remove();\r\n      pending.each(function(index, item) {\r\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\r\n        if (slot.length == 0) {\r\n          slot = addCells(1);\r\n        }\r\n        slot.first()\r\n          .append(item);\r\n      });\r\n    } else {\r\n      originalUpdateList(name, listdata);\r\n    }\r\n  };\r\n});\r\n```\r\n\r\n**All in one script for web-editor UI Initialisation:**\r\n```\r\nJS.eval(\"$(function(){initialiseGridInventory=function(n){$.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js',function(){var t=$('#outputData').data('igrid-layout');t?$.each(t,function(t,n){n.length?(c.apply(this,n),$('#igrid-item-'+n[0]).appendTo(e(1,$('#inventoryAccordion')))):e(1,$('#inventoryAccordion'))}):e(25,$('#inventoryAccordion').empty()),$('<style>').appendTo('head').text(n)})};var d={};function e(t,n){var i=n.find('.igrid-slot').length;return $($.map(Array(t),function(){return $('<div>',{id:'igrid-cell-'+i++,class:'igrid-slot'}).appendTo(n).droppable({drop:function(t,n){$(this).children().appendTo(n.draggable.parent()),$(n.draggable).appendTo(this),$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-slot').map(function(t,n){return[[$(n).children().map(function(t,n){return $(n).data('ElementId'),$(n).attr('style')})]]})))}})}))}function c(e,t){if(!e)return $();var n=$('#inventoryAccordion .igrid-slot:empty').first(),r=$('<div>',{class:'igrid-item',id:'igrid-item-'+e}).data('ElementId','id').appendTo(n).draggable({containment:n.parent(),helper:'clone',zIndex:100,revert:'invalid',start:function(){r.addClass('igrid-active')},stop:function(){r.removeClass('igrid-active')}}).click(function(t){if(!r.hasClass('disabled')){var n={},i=(r.prop('title')||e).toLowerCase();return n[i]=e,t.preventDefault(),t.stopPropagation(),r.blur().jjmenu_popup($.map(r.data('verbs'),function(t){return{title:t,action:{callback:function(){sendCommand(t.toLowerCase()+' '+i,n)}}}})),!1}}).attr('style',t.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,n,i){return'background-position: -'+40*n+'px -'+40*(i||0)+'px;'}));return r}updateInventoryIcons=function(t){$.each(t,function(t,n){$('#igrid-item-'+t).attr('style',n.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,n,i){return'background-position: -'+40*n+'px -'+40*(i||0)+'px;'}))}),d[id]=icon},updateInventoryItem=function(t,n,i){var e=$('#igrid-item-'+t);n&&e.prop('title',n),i&&e.data('verbs',i)};var i=updateList;updateList=function(t,n){if('inventory'==t){var a=$('#inventoryAccordion .igrid-item'),o=$();$.each(n,function(t,n){var i=JSON.parse(n),e=i.ElementId.replace(/\\\\s/g,'-'),r=$('#igrid-item-'+e);r.length?a=a.not(r):0==(r=c(e,d[e]||'0,0')).parent().length&&(o=o.add(r)),i.Text&&r.prop('title',i.Text),i.Verbs?r.data('verbs',i.Verbs).removeClass('disabled'):r.addClass('disabled')}),a.remove(),o.each(function(t,n){var i=$('#inventoryAccordion .igrid-slot:empty');0==i.length&&(i=e(1)),i.first().append(n)})}else i(t,n)}});\")\r\n\r\ncreate turnscript (\"igrid_update\")\r\nSetTurnScript (GetObject (\"igrid_update\")) {\r\n  icons = NewStringDictionary()\r\n  foreach (obj, ScopeInventory()) {\r\n    if (HasString (obj, \"inventoryicon\")) {\r\n      dictionary add (icons, obj.name, obj.inventoryicon)\r\n    }\r\n  }\r\n  JS.updateInventoryIcons (icons)\r\n}\r\n\r\nstyle = \"#inventoryAccordion{line-height:0px;} .igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 0px; width: 40px; height: 40px; margin: 0px;} .igrid-item {background-image: url('\"+GetFileURL(\"inventory_icons.png\")+\"'); background-color: yellow; height: 38px; width: 38px; cursor: pointer;} .igrid-active {border: solid 2px #ccc;} .ui-droppable-hover {background: #f4f4f4; border-style: dashed;}\"\r\n\r\nJS.initialiseGridInventory(style)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>Not tested yet</strong> (on my phone), but here's an updated version. A few tweaks; as I'd changed the way it works while debugging.</p>\n<p>The CSS:</p>\n<pre><code>#inventoryAccordion {\n  text-align: center;\n  line-height: 0px;\n}\n.igrid-slot {\n  display: inline-block;\n  background-color: purple;\n  border: 1px solid black;\n  padding: 0px;\n  width: 40px;\n  height: 40px;\n  margin: 0px;\n}\n\n.igrid-item {\n  background-image: url('inventory_icons.png');\n  background-color: yellow;\n  height: 38px;\n  width: 38px;\n  cursor: pointer;\n}\n\n.igrid-active {\n  border: solid 2px #ccc;\n}\n\n.ui-droppable-hover {\n  background: #f4f4f4;\n  border-style: dashed;\n}\n</code></pre>\n<p>The start script:</p>\n<pre><code>style = \"#inventoryAccordion {text-align: center; line-height: 0px;} .igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 0px; width: 40px; height: 40px; margin: 0px;}\n.igrid-item {background-image: url('\"+GetFileURL(\"inventory_icons.png\")+\"'); background-color: yellow; height: 38px; width: 38px; cursor: pointer;}\n.igrid-active {border: solid 2px #ccc; background-color: green;}\n.ui-droppable-hover {background: #f4f4f4; border-style: dashed; background-color: red}\"\n\nJS.initialiseGridInventory(style)\n</code></pre>\n<p>The turnscript:</p>\n<pre><code>icons = NewStringDictionary()\nforeach (obj, ScopeInventory()) {\n  if (HasString (obj, \"inventoryicon\")) {\n    dictionary add (icons, obj.name, obj.inventoryicon)\n  }\n}\nJS.updateInventoryIcons (icons)\n</code></pre>\n<p>The javascript:</p>\n<pre><code>$(function() {\n  initialiseGridInventory = function(style) {\n    $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js', function() {\n      var layout = $('#outputData')\n        .data('igrid-layout');\n      if (layout) {\n        $.each(layout, function(i, val) {\n          if (val.length) {\n            addItem.apply(this, val);\n            $('#igrid-item-' + val[0])\n              .appendTo(addCells(1, $('#inventoryAccordion')));\n          } else {\n            addCells(1, $('#inventoryAccordion'));\n          }\n        });\n      } else {\n        addCells(25, $('#inventoryAccordion')\n          .empty());\n      }\n      $('&lt;style&gt;')\n        .appendTo('head')\n        .text(style);\n    })\n  };\n\n  var grid_icons = {};\n  updateInventoryIcons = function(data) {\n    $.each(data, function(id, icon) {\n      $('#igrid-item-' + id)\n        .attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function(match, x, y) {\n          return ('background-position: -' + (x * 40) + 'px -' + ((y || 0) * 40) + 'px;')\n        }))\n    });\n    grid_icons[id] = icon;\n  };\n\n  function addCells(number, container) {\n    var count = container.find('.igrid-slot')\n      .length;\n    return $($.map(Array(number), function() {\n      return $('&lt;div&gt;', {\n          id: 'igrid-cell-' + (count++),\n          class: 'igrid-slot'\n        })\n        .appendTo(container)\n        .droppable({\n          drop: function(ev, ui) {\n            $(this)\n              .children()\n              .appendTo(ui.draggable.parent());\n            $(ui.draggable)\n              .appendTo(this);\n            $('#outputData')\n              .attr('data-igrid-layout', JSON.stringify($('#inventoryAccordion .igrid-slot')\n                .map(\n                  function(i, slot) {\n                    return [\n                      [$(slot)\n                        .children()\n                        .map(\n                          function(j, item) {\n                            return ($(item)\n                              .data('ElementId'), $(item)\n                              .attr('style'));\n                          }\n                        )\n                      ]\n                    ];\n                  }\n                )));\n          }\n        });\n    }));\n  }\n\n  function addItem(id, icon) {\n    if (!id) {\n      return $();\n    }\n    var cell = $('#inventoryAccordion .igrid-slot:empty')\n      .first();\n    var item = $('&lt;div&gt;', {\n        class: 'igrid-item',\n        id: 'igrid-item-' + id\n      })\n      .data('ElementId', 'id')\n      .appendTo(cell)\n      .draggable({\n        containment: cell.parent(),\n        helper: 'clone',\n        zIndex: 100,\n        revert: 'invalid',\n        start: function() {\n          item.addClass('igrid-active');\n        },\n        stop: function() {\n          item.removeClass('igrid-active');\n        }\n      })\n      .click(function(event) {\n        if (!item.hasClass(\"disabled\")) {\n          var metadata = {};\n          var alias = (item.prop('title') || id)\n            .toLowerCase();\n          metadata[alias] = id;\n          event.preventDefault();\n          event.stopPropagation();\n          item.blur()\n            .jjmenu_popup($.map(item.data('verbs'), function(verb) {\n              return {\n                title: verb,\n                action: {\n                  callback: function() {\n                    sendCommand(verb.toLowerCase() + ' ' + alias, metadata);\n                  }\n                }\n              };\n            }));\n          return false;\n        }\n      })\n      .attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function(match, x, y) {\n        return ('background-position: -' + (x * 40) + 'px -' + ((y || 0) * 40) + 'px;')\n      }));\n    return item;\n  }\n\n  updateInventoryItem = function(id, alias, verbs) {\n    var item = $('#igrid-item-' + id);\n    if (alias) {\n      item.prop('title', alias);\n    }\n    if (verbs) {\n      item.data('verbs', verbs);\n    }\n  };\n\n  var originalUpdateList = updateList;\n  updateList = function(name, listdata) {\n    if (name == 'inventory') {\n      var oldItems = $('#inventoryAccordion .igrid-item');\n      var pending = $();\n      $.each(listdata, function(key, value) {\n        var objdata = JSON.parse(value);\n        var id = objdata['ElementId'];\n        var item = $('#igrid-item-' + id);\n        if (item.length) {\n          oldItems = oldItems.not(item);\n        } else {\n          item = addItem(id, grid_icons[id] || '0,0');\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\n          if (item.parent()\n            .length == 0) {\n            pending = pending.add(item);\n          }\n        }\n        if (objdata['Text']) {\n          item.prop('title', objdata['Text']);\n        }\n        if (objdata['Verbs']) {\n          item.data('verbs', objdata['Verbs'])\n            .removeClass('disabled');\n        } else {\n          item.addClass('disabled');\n        }\n      });\n      oldItems.remove();\n      pending.each(function(index, item) {\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\n        if (slot.length == 0) {\n          slot = addCells(1);\n        }\n        slot.first()\n          .append(item);\n      });\n    } else {\n      originalUpdateList(name, listdata);\n    }\n  };\n});\n</code></pre>\n<p><strong>All in one script for web-editor UI Initialisation:</strong></p>\n<pre><code>JS.eval(\"$(function(){initialiseGridInventory=function(n){$.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js',function(){var t=$('#outputData').data('igrid-layout');t?$.each(t,function(t,n){n.length?(c.apply(this,n),$('#igrid-item-'+n[0]).appendTo(e(1,$('#inventoryAccordion')))):e(1,$('#inventoryAccordion'))}):e(25,$('#inventoryAccordion').empty()),$('&lt;style&gt;').appendTo('head').text(n)})};var d={};function e(t,n){var i=n.find('.igrid-slot').length;return $($.map(Array(t),function(){return $('&lt;div&gt;',{id:'igrid-cell-'+i++,class:'igrid-slot'}).appendTo(n).droppable({drop:function(t,n){$(this).children().appendTo(n.draggable.parent()),$(n.draggable).appendTo(this),$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-slot').map(function(t,n){return[[$(n).children().map(function(t,n){return $(n).data('ElementId'),$(n).attr('style')})]]})))}})}))}function c(e,t){if(!e)return $();var n=$('#inventoryAccordion .igrid-slot:empty').first(),r=$('&lt;div&gt;',{class:'igrid-item',id:'igrid-item-'+e}).data('ElementId','id').appendTo(n).draggable({containment:n.parent(),helper:'clone',zIndex:100,revert:'invalid',start:function(){r.addClass('igrid-active')},stop:function(){r.removeClass('igrid-active')}}).click(function(t){if(!r.hasClass('disabled')){var n={},i=(r.prop('title')||e).toLowerCase();return n[i]=e,t.preventDefault(),t.stopPropagation(),r.blur().jjmenu_popup($.map(r.data('verbs'),function(t){return{title:t,action:{callback:function(){sendCommand(t.toLowerCase()+' '+i,n)}}}})),!1}}).attr('style',t.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,n,i){return'background-position: -'+40*n+'px -'+40*(i||0)+'px;'}));return r}updateInventoryIcons=function(t){$.each(t,function(t,n){$('#igrid-item-'+t).attr('style',n.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,n,i){return'background-position: -'+40*n+'px -'+40*(i||0)+'px;'}))}),d[id]=icon},updateInventoryItem=function(t,n,i){var e=$('#igrid-item-'+t);n&amp;&amp;e.prop('title',n),i&amp;&amp;e.data('verbs',i)};var i=updateList;updateList=function(t,n){if('inventory'==t){var a=$('#inventoryAccordion .igrid-item'),o=$();$.each(n,function(t,n){var i=JSON.parse(n),e=i.ElementId.replace(/\\\\s/g,'-'),r=$('#igrid-item-'+e);r.length?a=a.not(r):0==(r=c(e,d[e]||'0,0')).parent().length&amp;&amp;(o=o.add(r)),i.Text&amp;&amp;r.prop('title',i.Text),i.Verbs?r.data('verbs',i.Verbs).removeClass('disabled'):r.addClass('disabled')}),a.remove(),o.each(function(t,n){var i=$('#inventoryAccordion .igrid-slot:empty');0==i.length&amp;&amp;(i=e(1)),i.first().append(n)})}else i(t,n)}});\")\n\ncreate turnscript (\"igrid_update\")\nSetTurnScript (GetObject (\"igrid_update\")) {\n  icons = NewStringDictionary()\n  foreach (obj, ScopeInventory()) {\n    if (HasString (obj, \"inventoryicon\")) {\n      dictionary add (icons, obj.name, obj.inventoryicon)\n    }\n  }\n  JS.updateInventoryIcons (icons)\n}\n\nstyle = \"#inventoryAccordion{line-height:0px;} .igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 0px; width: 40px; height: 40px; margin: 0px;} .igrid-item {background-image: url('\"+GetFileURL(\"inventory_icons.png\")+\"'); background-color: yellow; height: 38px; width: 38px; cursor: pointer;} .igrid-active {border: solid 2px #ccc;} .ui-droppable-hover {background: #f4f4f4; border-style: dashed;}\"\n\nJS.initialiseGridInventory(style)\n</code></pre>\n\n",
      "PostDate": "2020-04-21T11:53:06.2149959Z",
      "LastEditDate": "2020-04-21T17:11:55.6327318Z",
      "link": null
    },
    {
      "PostId": "e24f3ad4-4483-491a-a331-5f4f2390e807",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No dice on the all-in-one UI in script, but then I remembered the issues I mentioned earlier, when last I tried to utilize js in my project. The bizarre workaround, in the end, was to do every line as a separate entry - style = \"line one\", style = style + \"line two\", etc.\r\n\r\nso, I fiddled around with that, and...\r\n\r\nhttps://i.gyazo.com/e910b741164035dfba152e8cee6ee54a.png\r\n\r\nWell, not exactly 'bingo', but it's showing up, at least. Unfortunately, picking up an item has done nothing - it disappears from the room, but doesn't appear in the new inventory.\r\n\r\nstyle = \".igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 1px; width: 40px; height: 40px; margin: 0px;})\"\r\nstyle = style + \".igrid-item {background-image: url('\"+GetFileURL(\"inventory_icons.png\")+\"'); height: 38px; width: 38px; cursor: pointer;}\"\r\nstyle = style + \".igrid-active {border: solid 2px #ccc;}\"\r\nstyle = style + \".ui-droppable-hover {background: #f4f4f4; border-style: dashed;}\"\r\n\r\nRemoving the padding (or, reducing it to 0px) got me here;\r\nhttps://i.gyazo.com/0ba4f88a803b94835f527d95f833ee4b.png\r\n\r\nTrying the style = stuff without spacing it out into separate lines just threw a nasty error at me in preview on the editor, while trying to implement the code into the online editor threw a generic 'an error has occured' popup, froze the tab for about a minute, then rebooted itself back blank.",
      "EditableFormat": "markdown",
      "HTML": "<p>No dice on the all-in-one UI in script, but then I remembered the issues I mentioned earlier, when last I tried to utilize js in my project. The bizarre workaround, in the end, was to do every line as a separate entry - style = \"line one\", style = style + \"line two\", etc.</p>\n<p>so, I fiddled around with that, and...</p>\n<p>https://i.gyazo.com/e910b741164035dfba152e8cee6ee54a.png</p>\n<p>Well, not exactly 'bingo', but it's showing up, at least. Unfortunately, picking up an item has done nothing - it disappears from the room, but doesn't appear in the new inventory.</p>\n<p>style = \".igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 1px; width: 40px; height: 40px; margin: 0px;})\"<br>\nstyle = style + \".igrid-item {background-image: url('\"+GetFileURL(\"inventory_icons.png\")+\"'); height: 38px; width: 38px; cursor: pointer;}\"<br>\nstyle = style + \".igrid-active {border: solid 2px #ccc;}\"<br>\nstyle = style + \".ui-droppable-hover {background: #f4f4f4; border-style: dashed;}\"</p>\n<p>Removing the padding (or, reducing it to 0px) got me here;<br>\nhttps://i.gyazo.com/0ba4f88a803b94835f527d95f833ee4b.png</p>\n<p>Trying the style = stuff without spacing it out into separate lines just threw a nasty error at me in preview on the editor, while trying to implement the code into the online editor threw a generic 'an error has occured' popup, froze the tab for about a minute, then rebooted itself back blank.</p>\n\n",
      "PostDate": "2020-04-21T12:25:29.2200948Z",
      "LastEditDate": "2020-04-21T12:44:15.7508172Z",
      "link": null
    },
    {
      "PostId": "1f0be84f-9087-4b0a-98e1-2c7a7bec9000",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think in the online editor it would be a real pain, because code view throws a wobbler trying to save a string with a `<` in it.\r\n\r\nI'll try debugging again and see if I've introduced any new errors when removing the arrows.\r\n\r\nIf you add `#inventoryAccordion {line-height: 38px;}` to the style sheet, it should remove the additional space between rows of cells. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I think in the online editor it would be a real pain, because code view throws a wobbler trying to save a string with a <code>&lt;</code> in it.</p>\n<p>I'll try debugging again and see if I've introduced any new errors when removing the arrows.</p>\n<p>If you add <code>#inventoryAccordion {line-height: 38px;}</code> to the style sheet, it should remove the additional space between rows of cells.</p>\n\n",
      "PostDate": "2020-04-21T16:15:32.3016132Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "147105d3-ae92-40ee-b292-e209dd12f0aa",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I eventually figured out how to do that, but 38px is just making the gaps increase in size dramatically.\r\n\r\nLowering it down to, say, 0, eliminates the gaps, but then makes the grid 4/4/4/4/4/4/1 instead of 5/5/5/5/5.\r\n\r\nAt the original 38px; https://i.gyazo.com/3273046e784016cb489e70cd0f98801e.png\r\n\r\nAt 0; https://i.gyazo.com/32f63dea51db418c006be790e016b99c.png",
      "EditableFormat": "markdown",
      "HTML": "<p>I eventually figured out how to do that, but 38px is just making the gaps increase in size dramatically.</p>\n<p>Lowering it down to, say, 0, eliminates the gaps, but then makes the grid 4/4/4/4/4/4/1 instead of 5/5/5/5/5.</p>\n<p>At the original 38px; https://i.gyazo.com/3273046e784016cb489e70cd0f98801e.png</p>\n<p>At 0; https://i.gyazo.com/32f63dea51db418c006be790e016b99c.png</p>\n\n",
      "PostDate": "2020-04-21T16:49:54.6172361Z",
      "LastEditDate": "2020-04-21T16:53:11.5443951Z",
      "link": null
    },
    {
      "PostId": "4680a977-e9f4-49c2-b17e-12e6ee66932e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> No dice on the all-in-one UI in script, but then I remembered the issues I mentioned earlier, when last I tried to utilize js in my project. The bizarre workaround, in the end, was to do every line as a separate entry - style = \"line one\", style = style + \"line two\", etc.\r\n\r\nIs that a specific problem in the desktop editor? Because using one big line works for me.\r\n\r\nOK… a new game created on the web editor, using the \"UI Initialisation\" short form (the most recent copy I posted above).\r\n\r\n<img src=\"https://bolshevik.mrangel.info/igrid_editor.png\" style=\"border: 1px solid purple; max-width: 95%\"><br>\r\n<img src=\"https://bolshevik.mrangel.info/igrid_screenshot_1.png\" style=\"border: 1px solid purple; max-width: 95%\"><br>\r\n<img src=\"https://bolshevik.mrangel.info/igrid_screenshot_2.png\" style=\"border: 1px solid purple; max-width: 95%\">\r\n\r\nI notice a small bug when playing with this: items that are initially in your inventory aren't shown until you pick something up. I guess that the first call to `updateList` is done from c# code before handing off to Quest's `InitInterface`.\r\n\r\nI didn't notice this when I was pasting the script into the Javascript Console on someone else's game (quickest way to test JS) because that game has an \"intro room\" before the game starts, after which the initial items are moved to your inventory by script. I'll have to add a function which scans the original inventory list to get the verbs for any items you start with. Maybe tomorrow.\r\n\r\nBut at least it's working :)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>No dice on the all-in-one UI in script, but then I remembered the issues I mentioned earlier, when last I tried to utilize js in my project. The bizarre workaround, in the end, was to do every line as a separate entry - style = \"line one\", style = style + \"line two\", etc.</p>\n</blockquote>\n<p>Is that a specific problem in the desktop editor? Because using one big line works for me.</p>\n<p>OK… a new game created on the web editor, using the \"UI Initialisation\" short form (the most recent copy I posted above).</p>\n<p><img src=\"https://bolshevik.mrangel.info/igrid_editor.png\" style=\"border: 1px solid purple; max-width: 95%\"><br><br>\n<img src=\"https://bolshevik.mrangel.info/igrid_screenshot_1.png\" style=\"border: 1px solid purple; max-width: 95%\"><br><br>\n<img src=\"https://bolshevik.mrangel.info/igrid_screenshot_2.png\" style=\"border: 1px solid purple; max-width: 95%\"></p>\n<p>I notice a small bug when playing with this: items that are initially in your inventory aren't shown until you pick something up. I guess that the first call to <code>updateList</code> is done from c# code before handing off to Quest's <code>InitInterface</code>.</p>\n<p>I didn't notice this when I was pasting the script into the Javascript Console on someone else's game (quickest way to test JS) because that game has an \"intro room\" before the game starts, after which the initial items are moved to your inventory by script. I'll have to add a function which scans the original inventory list to get the verbs for any items you start with. Maybe tomorrow.</p>\n<p>But at least it's working :)</p>\n\n",
      "PostDate": "2020-04-21T17:26:32.3681615Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "91ea1f22-4372-44c2-8ceb-2761ea908393",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I use, and only use, the desktop editor, because we're told time and time again on this site to use the desktop editor due to issues with the online editor. (I have no idea why it's working for you and not for me, I just tried again and it immediately threw this; https://i.gyazo.com/fb8e48143d460258f43d58000ac3beba.png then crash-reset the tab.)\r\n\r\nTried uploading the game to see what would happen, and playing online it... almost works, except the white space is still visible in between rows.\r\n\r\nTrying to play the game through the desktop application, which was and remains to be my intended method of play due to a single internet hiccup booting you off of the online version (unless that got fixed since I started using Quest), results in... well. \r\n\r\nhttps://i.gyazo.com/02104029e5c83075e9cfb24a7577e473.png -- For some reason the first item picked up (nothing starting in the inventory) is dropped into slot 2, and moving it anywhere results in the drop function never quite finishing, the item becoming completely non-interactive.\r\n\r\nI'm assuming you've made edits since the last code you posted, given the drastic differences. At least it's working for someone!... But unless it works in desktop...\r\n\r\n-- Edit --\r\nFresh game, created the js.eval, left it blank, copied in everything else, THEN added in the js.eval portion straight into the box instead of in code view.\r\n\r\nRunning and playing the game online works - it works almost perfectly. Only error I found is that if you drop an item into -any- of the bottom 5 slots in the final row, then pick it up against, the css freaks out and turns into that awful 4/4/4/4/4/4/1 grid again until you drop it.\r\n\r\nTaking the same project file into the offline editor and then playing it just breaks everything, again, as described above. Starts in slot 2, breaks after a single movement.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I use, and only use, the desktop editor, because we're told time and time again on this site to use the desktop editor due to issues with the online editor. (I have no idea why it's working for you and not for me, I just tried again and it immediately threw this; https://i.gyazo.com/fb8e48143d460258f43d58000ac3beba.png then crash-reset the tab.)</p>\n<p>Tried uploading the game to see what would happen, and playing online it... almost works, except the white space is still visible in between rows.</p>\n<p>Trying to play the game through the desktop application, which was and remains to be my intended method of play due to a single internet hiccup booting you off of the online version (unless that got fixed since I started using Quest), results in... well.</p>\n<p>https://i.gyazo.com/02104029e5c83075e9cfb24a7577e473.png -- For some reason the first item picked up (nothing starting in the inventory) is dropped into slot 2, and moving it anywhere results in the drop function never quite finishing, the item becoming completely non-interactive.</p>\n<p>I'm assuming you've made edits since the last code you posted, given the drastic differences. At least it's working for someone!... But unless it works in desktop...</p>\n<p>-- Edit --<br>\nFresh game, created the js.eval, left it blank, copied in everything else, THEN added in the js.eval portion straight into the box instead of in code view.</p>\n<p>Running and playing the game online works - it works almost perfectly. Only error I found is that if you drop an item into -any- of the bottom 5 slots in the final row, then pick it up against, the css freaks out and turns into that awful 4/4/4/4/4/4/1 grid again until you drop it.</p>\n<p>Taking the same project file into the offline editor and then playing it just breaks everything, again, as described above. Starts in slot 2, breaks after a single movement.</p>\n\n",
      "PostDate": "2020-04-21T17:46:42.8680972Z",
      "LastEditDate": "2020-04-21T18:15:16.4123516Z",
      "link": null
    },
    {
      "PostId": "e6caa160-5e15-4040-8647-15596089dbc4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> (I have no idea why it's working for you and not for me, I just tried again and it immediately threw this; https://i.gyazo.com/fb8e48143d460258f43d58000ac3beba.png then crash-reset the tab.)\r\n\r\nThat's a known bug in the web editor when switching from code view to GUI. To get around it I included a line like `JS.eval(\"placeholder\")` and then paste the actual minified javascript into the box in GUI view.\r\n\r\nNot ideal, but usable.\r\n\r\n\r\nI've been going through the code, checking all the functions I've used and when they were added; but can't find anything that should shut it down. I can imagine it possibly failing on the `getScript` if it takes too long to load, possibly? Maybe I could include the file directly?\r\n\r\nWould be something like:\r\n```\r\n//\r\n// jQuery UI Touch Punch 0.2.3\r\n//\r\n// Copyright 2011â€“2014, Dave Furfero\r\n// Dual licensed under the MIT or GPL Version 2 licenses.\r\n//\r\n//Depends:\r\n//  jquery.ui.widget.js\r\n//  jquery.ui.mouse.js\r\n//\r\nJS.eval(\"!function(a){function f(a,b){if(!(a.originalEvent.touches.length>1)){a.preventDefault();var c=a.originalEvent.changedTouches[0],d=document.createEvent('MouseEvents');d.initMouseEvent(b,!0,!0,window,1,c.screenX,c.screenY,c.clientX,c.clientY,!1,!1,!1,!1,0,null),a.target.dispatchEvent(d)}}if(a.support.touch='ontouchend'in document,a.support.touch){var e,b=a.ui.mouse.prototype,c=b._mouseInit,d=b._mouseDestroy;b._touchStart=function(a){var b=this;!e&&b._mouseCapture(a.originalEvent.changedTouches[0])&&(e=!0,b._touchMoved=!1,f(a,'mouseover'),f(a,'mousemove'),f(a,'mousedown'))},b._touchMove=function(a){e&&(this._touchMoved=!0,f(a,'mousemove'))},b._touchEnd=function(a){e&&(f(a,'mouseup'),f(a,'mouseout'),this._touchMoved||f(a,'click'),e=!1)},b._mouseInit=function(){var b=this;b.element.bind({touchstart:a.proxy(b,'_touchStart'),touchmove:a.proxy(b,'_touchMove'),touchend:a.proxy(b,'_touchEnd')}),c.call(b)},b._mouseDestroy=function(){var b=this;b.element.unbind({touchstart:a.proxy(b,'_touchStart'),touchmove:a.proxy(b,'_touchMove'),touchend:a.proxy(b,'_touchEnd')}),d.call(b)}}}(jQuery);\")\r\n\r\nJS.eval(\"$(function(){initialiseGridInventory=function(t){var n=$('#outputData').data('igrid-layout');n?$.each(n,function(t,n){n.length?(c.apply(this,n),$('#igrid-item-'+n[0]).appendTo(e(1,$('#inventoryAccordion')))):e(1,$('#inventoryAccordion'))}):e(25,$('#inventoryAccordion').empty()),$('<style>').appendTo('head').text(t)};var d={};function e(t,n){var i=n.find('.igrid-slot').length;return $($.map(Array(t),function(){return $('<div>',{id:'igrid-cell-'+i++,class:'igrid-slot'}).appendTo(n).droppable({drop:function(t,n){$(this).children().appendTo(n.draggable.parent()),$(n.draggable).appendTo(this),$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-slot').map(function(t,n){return[[$(n).children().map(function(t,n){return $(n).data('ElementId'),$(n).attr('style')})]]})))}})}))}function c(e,t){if(!e)return $();var n=$('#inventoryAccordion .igrid-slot:empty').first(),r=$('<div>',{class:'igrid-item',id:'igrid-item-'+e}).data('ElementId','id').appendTo(n).draggable({containment:n.parent(),helper:'clone',zIndex:100,revert:'invalid',start:function(){r.addClass('igrid-active')},stop:function(){r.removeClass('igrid-active')}}).click(function(t){if(!r.hasClass('disabled')){var n={},i=(r.prop('title')||e).toLowerCase();return n[i]=e,t.preventDefault(),t.stopPropagation(),r.blur().jjmenu_popup($.map(r.data('verbs'),function(t){return{title:t,action:{callback:function(){sendCommand(t.toLowerCase()+' '+i,n)}}}})),!1}}).attr('style',t.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,n,i){return'background-position: -'+40*n+'px -'+40*(i||0)+'px;'}));return r}updateInventoryIcons=function(t){$.each(t,function(t,n){$('#igrid-item-'+t).attr('style',n.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,n,i){return'background-position: -'+40*n+'px -'+40*(i||0)+'px;'}))}),d[id]=icon},updateInventoryItem=function(t,n,i){var e=$('#igrid-item-'+t);n&&e.prop('title',n),i&&e.data('verbs',i)};var i=updateList;updateList=function(t,n){if('inventory'==t){var a=$('#inventoryAccordion .igrid-item'),o=$();$.each(n,function(t,n){var i=JSON.parse(n),e=i.ElementId,r=$('#igrid-item-'+e);r.length?a=a.not(r):0==(r=c(e,d[e]||'0,0')).parent().length&&(o=o.add(r)),i.Text&&r.prop('title',i.Text),i.Verbs?r.data('verbs',i.Verbs).removeClass('disabled'):r.addClass('disabled')}),a.remove(),o.each(function(t,n){var i=$('#inventoryAccordion .igrid-slot:empty');0==i.length&&(i=e(1)),i.first().append(n)})}else i(t,n)}});\")\r\n```\r\n\r\n\r\nI'm running out of ideas now.\r\nDo you know if the desktop version gives you any way to access the console, or to see javascript errors?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>(I have no idea why it's working for you and not for me, I just tried again and it immediately threw this; https://i.gyazo.com/fb8e48143d460258f43d58000ac3beba.png then crash-reset the tab.)</p>\n</blockquote>\n<p>That's a known bug in the web editor when switching from code view to GUI. To get around it I included a line like <code>JS.eval(\"placeholder\")</code> and then paste the actual minified javascript into the box in GUI view.</p>\n<p>Not ideal, but usable.</p>\n<p>I've been going through the code, checking all the functions I've used and when they were added; but can't find anything that should shut it down. I can imagine it possibly failing on the <code>getScript</code> if it takes too long to load, possibly? Maybe I could include the file directly?</p>\n<p>Would be something like:</p>\n<pre><code>//\n// jQuery UI Touch Punch 0.2.3\n//\n// Copyright 2011â€“2014, Dave Furfero\n// Dual licensed under the MIT or GPL Version 2 licenses.\n//\n//Depends:\n//  jquery.ui.widget.js\n//  jquery.ui.mouse.js\n//\nJS.eval(\"!function(a){function f(a,b){if(!(a.originalEvent.touches.length&gt;1)){a.preventDefault();var c=a.originalEvent.changedTouches[0],d=document.createEvent('MouseEvents');d.initMouseEvent(b,!0,!0,window,1,c.screenX,c.screenY,c.clientX,c.clientY,!1,!1,!1,!1,0,null),a.target.dispatchEvent(d)}}if(a.support.touch='ontouchend'in document,a.support.touch){var e,b=a.ui.mouse.prototype,c=b._mouseInit,d=b._mouseDestroy;b._touchStart=function(a){var b=this;!e&amp;&amp;b._mouseCapture(a.originalEvent.changedTouches[0])&amp;&amp;(e=!0,b._touchMoved=!1,f(a,'mouseover'),f(a,'mousemove'),f(a,'mousedown'))},b._touchMove=function(a){e&amp;&amp;(this._touchMoved=!0,f(a,'mousemove'))},b._touchEnd=function(a){e&amp;&amp;(f(a,'mouseup'),f(a,'mouseout'),this._touchMoved||f(a,'click'),e=!1)},b._mouseInit=function(){var b=this;b.element.bind({touchstart:a.proxy(b,'_touchStart'),touchmove:a.proxy(b,'_touchMove'),touchend:a.proxy(b,'_touchEnd')}),c.call(b)},b._mouseDestroy=function(){var b=this;b.element.unbind({touchstart:a.proxy(b,'_touchStart'),touchmove:a.proxy(b,'_touchMove'),touchend:a.proxy(b,'_touchEnd')}),d.call(b)}}}(jQuery);\")\n\nJS.eval(\"$(function(){initialiseGridInventory=function(t){var n=$('#outputData').data('igrid-layout');n?$.each(n,function(t,n){n.length?(c.apply(this,n),$('#igrid-item-'+n[0]).appendTo(e(1,$('#inventoryAccordion')))):e(1,$('#inventoryAccordion'))}):e(25,$('#inventoryAccordion').empty()),$('&lt;style&gt;').appendTo('head').text(t)};var d={};function e(t,n){var i=n.find('.igrid-slot').length;return $($.map(Array(t),function(){return $('&lt;div&gt;',{id:'igrid-cell-'+i++,class:'igrid-slot'}).appendTo(n).droppable({drop:function(t,n){$(this).children().appendTo(n.draggable.parent()),$(n.draggable).appendTo(this),$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-slot').map(function(t,n){return[[$(n).children().map(function(t,n){return $(n).data('ElementId'),$(n).attr('style')})]]})))}})}))}function c(e,t){if(!e)return $();var n=$('#inventoryAccordion .igrid-slot:empty').first(),r=$('&lt;div&gt;',{class:'igrid-item',id:'igrid-item-'+e}).data('ElementId','id').appendTo(n).draggable({containment:n.parent(),helper:'clone',zIndex:100,revert:'invalid',start:function(){r.addClass('igrid-active')},stop:function(){r.removeClass('igrid-active')}}).click(function(t){if(!r.hasClass('disabled')){var n={},i=(r.prop('title')||e).toLowerCase();return n[i]=e,t.preventDefault(),t.stopPropagation(),r.blur().jjmenu_popup($.map(r.data('verbs'),function(t){return{title:t,action:{callback:function(){sendCommand(t.toLowerCase()+' '+i,n)}}}})),!1}}).attr('style',t.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,n,i){return'background-position: -'+40*n+'px -'+40*(i||0)+'px;'}));return r}updateInventoryIcons=function(t){$.each(t,function(t,n){$('#igrid-item-'+t).attr('style',n.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,n,i){return'background-position: -'+40*n+'px -'+40*(i||0)+'px;'}))}),d[id]=icon},updateInventoryItem=function(t,n,i){var e=$('#igrid-item-'+t);n&amp;&amp;e.prop('title',n),i&amp;&amp;e.data('verbs',i)};var i=updateList;updateList=function(t,n){if('inventory'==t){var a=$('#inventoryAccordion .igrid-item'),o=$();$.each(n,function(t,n){var i=JSON.parse(n),e=i.ElementId,r=$('#igrid-item-'+e);r.length?a=a.not(r):0==(r=c(e,d[e]||'0,0')).parent().length&amp;&amp;(o=o.add(r)),i.Text&amp;&amp;r.prop('title',i.Text),i.Verbs?r.data('verbs',i.Verbs).removeClass('disabled'):r.addClass('disabled')}),a.remove(),o.each(function(t,n){var i=$('#inventoryAccordion .igrid-slot:empty');0==i.length&amp;&amp;(i=e(1)),i.first().append(n)})}else i(t,n)}});\")\n</code></pre>\n<p>I'm running out of ideas now.<br>\nDo you know if the desktop version gives you any way to access the console, or to see javascript errors?</p>\n\n",
      "PostDate": "2020-04-21T18:31:25.078075Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "07af7dde-dbcd-4204-abe4-a0e3622c2c4a",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, that's what I did after I posted, as shown in the edit.\r\n\r\nThrowing in the direct javascript rather than linking to it didn't break anything any worse, but didn't fix things either.\r\n\r\nhttps://i.gyazo.com/3f2e48faf917217c8103a8bc9a3d63bc.png\r\n\r\nHere's a screenshot which shows what tools I have, along with an example of the behaviour offline - it drops the item into the right square, but the dragged image remains overlaid on top of it. Doing anything to the original object - using, etc - resets it to the original position afterwards.\r\n\r\nDebugger sounds exciting, but that's purely for looking into existing scripts, variables, etc. Log I've never known what the hell it is, as it's blank. HTML tools is, I hope, what you're looking for... here's a shot.\r\n\r\nhttps://i.gyazo.com/c02f5afb19e027b78d2927456120a6ed.png\r\n\r\nEDIT:\r\n\r\nhttps://i.gyazo.com/a6952f3c011e6dca292d5596e092b335.png found the damn console. This is what happens when an item is dragged and dropped offline, even if it's into the same square.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, that's what I did after I posted, as shown in the edit.</p>\n<p>Throwing in the direct javascript rather than linking to it didn't break anything any worse, but didn't fix things either.</p>\n<p>https://i.gyazo.com/3f2e48faf917217c8103a8bc9a3d63bc.png</p>\n<p>Here's a screenshot which shows what tools I have, along with an example of the behaviour offline - it drops the item into the right square, but the dragged image remains overlaid on top of it. Doing anything to the original object - using, etc - resets it to the original position afterwards.</p>\n<p>Debugger sounds exciting, but that's purely for looking into existing scripts, variables, etc. Log I've never known what the hell it is, as it's blank. HTML tools is, I hope, what you're looking for... here's a shot.</p>\n<p>https://i.gyazo.com/c02f5afb19e027b78d2927456120a6ed.png</p>\n<p>EDIT:</p>\n<p>https://i.gyazo.com/a6952f3c011e6dca292d5596e092b335.png found the damn console. This is what happens when an item is dragged and dropped offline, even if it's into the same square.</p>\n\n",
      "PostDate": "2020-04-21T18:48:30.1234986Z",
      "LastEditDate": "2020-04-21T19:00:08.4475691Z",
      "link": null
    },
    {
      "PostId": "97a30535-0529-46f9-8119-b496c73b852d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Aha, I think we're getting somewhere.\r\n\r\nAfter moving an object, it generates a string representation of the state of the grid, which is saved as an attribute of an invisible element in the output so that it can be loaded by a saved game. I assume that if that's generating an error, it's preventing the 'drop' from finishing.\r\n\r\nIt looks like I missed out a `.get()` somewhere in the script, so it's attempting to serialise a jQuery array… and the version of `JSON.stringify` running on desktop can't handle that.\r\n\r\nI'll tidy up that bit of the code.",
      "EditableFormat": "markdown",
      "HTML": "<p>Aha, I think we're getting somewhere.</p>\n<p>After moving an object, it generates a string representation of the state of the grid, which is saved as an attribute of an invisible element in the output so that it can be loaded by a saved game. I assume that if that's generating an error, it's preventing the 'drop' from finishing.</p>\n<p>It looks like I missed out a <code>.get()</code> somewhere in the script, so it's attempting to serialise a jQuery array… and the version of <code>JSON.stringify</code> running on desktop can't handle that.</p>\n<p>I'll tidy up that bit of the code.</p>\n\n",
      "PostDate": "2020-04-21T19:30:42.0497201Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bf2b12c6-a259-4951-8968-38b4d1b262a3",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What a runaround! Sounds like Quest is definitely due for an update in this regard :S\r\n\r\nI would never have figured any of this out alone, god...",
      "EditableFormat": "markdown",
      "HTML": "<p>What a runaround! Sounds like Quest is definitely due for an update in this regard :S</p>\n<p>I would never have figured any of this out alone, god...</p>\n\n",
      "PostDate": "2020-04-21T19:36:35.8290927Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "40dd2d7f-7424-48c1-9fdf-1f78d6babd99",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK… have managed to replicate the error on my end (by turning a \"not supported by this old version of jQuery\" into an actual typo), and confirmed that a bug in that function causes exactly the behaviour you described.\r\n\r\nNow I just have to fix that bug.",
      "EditableFormat": "markdown",
      "HTML": "<p>OK… have managed to replicate the error on my end (by turning a \"not supported by this old version of jQuery\" into an actual typo), and confirmed that a bug in that function causes exactly the behaviour you described.</p>\n<p>Now I just have to fix that bug.</p>\n\n",
      "PostDate": "2020-04-21T20:10:37.5428895Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e8ee1bc6-8334-4fa0-8d2d-c707ed86b8c5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK… does this version fix that?\r\n\r\n```\r\nJS.eval(\"$(function(){initialiseGridInventory=function(t){var e=$('#outputData').data('igrid-layout');e&&e.length?$.each(e,function(t,e){var n=i(1,$('#inventoryAccordion'));e.id&&(updateInventoryItem(e.id,e.alias,e.verbs),c(e.id,e.icon).appendTo(n))}):i(25,$('#inventoryAccordion').empty()),$('<style>').appendTo('head').text(t)};var d={};function i(t,e){var n=e.find('.igrid-slot').length;return $($.map(Array(t),function(){return $('<div>',{id:'igrid-cell-'+n++,class:'igrid-slot'}).appendTo(e).droppable({drop:function(t,e){$(this).children().appendTo(e.draggable.parent()),$(e.draggable).appendTo(this),r()}})}))}function r(){$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-slot').map(function(t,e){var n=$(e).children();return n.length&&!n.hasClass('ui-draggable-dragging')?{id:$(n).data('ElementId'),icon:d[$(n).data('ElementId').replace(/\\\\s/g,'-')],alias:$(n).attr('title'),verbs:$(n).data('verbs')}:{}}).get()))}function c(i,t){var r=i.replace(/\\\\s/g,'-');if(!r)return $();t&&(d[r]=t);var e=$('#inventoryAccordion .igrid-slot:empty').first(),a=$('<div>',{class:'igrid-item',id:'igrid-item-'+r}).data('ElementId',i).appendTo(e).draggable({containment:e.parent(),helper:'clone',zIndex:100,revert:'invalid',start:function(){a.addClass('igrid-active')},stop:function(){a.removeClass('igrid-active')}}).click(function(t){if(!a.hasClass('disabled')){var e={},n=(a.prop('title')||r).toLowerCase();return e[n]=i||r,t.preventDefault(),t.stopPropagation(),a.blur().jjmenu_popup($.map(a.data('verbs'),function(t){return{title:t,action:{callback:function(){sendCommand(t.toLowerCase()+' '+n,e)}}}})),!1}}).attr('style',t.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,e,n){return'background-position: -'+40*e+'px -'+40*(n||0)+'px;'}));return a}updateInventoryIcons=function(t){$.each(t,function(t,e){t=t.replace(/\\\\s/g,'-'),$('#igrid-item-'+t).attr('style',e.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,e,n){return'background-position: -'+40*e+'px -'+40*n+'px;'})),d[t]=e})},updateInventoryItem=function(t,e,n){t=t.replace(/\\\\s/g,'-');var i=$('#igrid-item-'+t);e&&i.prop('title',e),n&&i.data('verbs',n)};var n=updateList;updateList=function(t,e){if('inventory'==t){var a=$('#inventoryAccordion .igrid-item'),o=$();$.each(e,function(t,e){var n=JSON.parse(e),i=n.ElementId.replace(/\\\\s/g,'-'),r=$('#igrid-item-'+i);r.length?a=a.not(r):0==(r=c(i,d[i]||'0,0')).parent().length&&(o=o.add(r)),n.Text&&r.prop('title',n.Text),n.Verbs?r.data('verbs',n.Verbs).removeClass('disabled'):r.addClass('disabled')}),a.remove(),o.each(function(t,e){var n=$('#inventoryAccordion .igrid-slot:empty');0==n.length&&(n=i(5,$('#inventoryAccordion'))),n.first().append(e)}),r()}else n(t,e)}});\")\r\n```\r\n\r\nStill need to work out how to get the initial inventory items… might have to have the initialisation script search for them manually :S\r\nHaven't tested the save/load functionality yet, but think it should work.",
      "EditableFormat": "markdown",
      "HTML": "<p>OK… does this version fix that?</p>\n<pre><code>JS.eval(\"$(function(){initialiseGridInventory=function(t){var e=$('#outputData').data('igrid-layout');e&amp;&amp;e.length?$.each(e,function(t,e){var n=i(1,$('#inventoryAccordion'));e.id&amp;&amp;(updateInventoryItem(e.id,e.alias,e.verbs),c(e.id,e.icon).appendTo(n))}):i(25,$('#inventoryAccordion').empty()),$('&lt;style&gt;').appendTo('head').text(t)};var d={};function i(t,e){var n=e.find('.igrid-slot').length;return $($.map(Array(t),function(){return $('&lt;div&gt;',{id:'igrid-cell-'+n++,class:'igrid-slot'}).appendTo(e).droppable({drop:function(t,e){$(this).children().appendTo(e.draggable.parent()),$(e.draggable).appendTo(this),r()}})}))}function r(){$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-slot').map(function(t,e){var n=$(e).children();return n.length&amp;&amp;!n.hasClass('ui-draggable-dragging')?{id:$(n).data('ElementId'),icon:d[$(n).data('ElementId').replace(/\\\\s/g,'-')],alias:$(n).attr('title'),verbs:$(n).data('verbs')}:{}}).get()))}function c(i,t){var r=i.replace(/\\\\s/g,'-');if(!r)return $();t&amp;&amp;(d[r]=t);var e=$('#inventoryAccordion .igrid-slot:empty').first(),a=$('&lt;div&gt;',{class:'igrid-item',id:'igrid-item-'+r}).data('ElementId',i).appendTo(e).draggable({containment:e.parent(),helper:'clone',zIndex:100,revert:'invalid',start:function(){a.addClass('igrid-active')},stop:function(){a.removeClass('igrid-active')}}).click(function(t){if(!a.hasClass('disabled')){var e={},n=(a.prop('title')||r).toLowerCase();return e[n]=i||r,t.preventDefault(),t.stopPropagation(),a.blur().jjmenu_popup($.map(a.data('verbs'),function(t){return{title:t,action:{callback:function(){sendCommand(t.toLowerCase()+' '+n,e)}}}})),!1}}).attr('style',t.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,e,n){return'background-position: -'+40*e+'px -'+40*(n||0)+'px;'}));return a}updateInventoryIcons=function(t){$.each(t,function(t,e){t=t.replace(/\\\\s/g,'-'),$('#igrid-item-'+t).attr('style',e.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,e,n){return'background-position: -'+40*e+'px -'+40*n+'px;'})),d[t]=e})},updateInventoryItem=function(t,e,n){t=t.replace(/\\\\s/g,'-');var i=$('#igrid-item-'+t);e&amp;&amp;i.prop('title',e),n&amp;&amp;i.data('verbs',n)};var n=updateList;updateList=function(t,e){if('inventory'==t){var a=$('#inventoryAccordion .igrid-item'),o=$();$.each(e,function(t,e){var n=JSON.parse(e),i=n.ElementId.replace(/\\\\s/g,'-'),r=$('#igrid-item-'+i);r.length?a=a.not(r):0==(r=c(i,d[i]||'0,0')).parent().length&amp;&amp;(o=o.add(r)),n.Text&amp;&amp;r.prop('title',n.Text),n.Verbs?r.data('verbs',n.Verbs).removeClass('disabled'):r.addClass('disabled')}),a.remove(),o.each(function(t,e){var n=$('#inventoryAccordion .igrid-slot:empty');0==n.length&amp;&amp;(n=i(5,$('#inventoryAccordion'))),n.first().append(e)}),r()}else n(t,e)}});\")\n</code></pre>\n<p>Still need to work out how to get the initial inventory items… might have to have the initialisation script search for them manually :S<br>\nHaven't tested the save/load functionality yet, but think it should work.</p>\n\n",
      "PostDate": "2020-04-21T20:20:16.2422767Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "872ba3ce-7657-4005-bd8e-ad1a99be7ed7",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ALMOST!\r\n\r\nhttps://i.gyazo.com/d236bad182c59a188ef820106163677f.png\r\n\r\nStill got the massive white space between rows (which can be eliminated by turning line-height to 0, but then the grid turns weird as mentioned), and there's this new error in the transcript, but things seemed to be functioning fine regardless?...\r\n\r\n```Error running script: Error compiling expression 'turnscript': RootExpressionElement: Cannot convert type 'Object' to expression result of 'Element'```",
      "EditableFormat": "markdown",
      "HTML": "<p>ALMOST!</p>\n<p>https://i.gyazo.com/d236bad182c59a188ef820106163677f.png</p>\n<p>Still got the massive white space between rows (which can be eliminated by turning line-height to 0, but then the grid turns weird as mentioned), and there's this new error in the transcript, but things seemed to be functioning fine regardless?...</p>\n<p><code>Error running script: Error compiling expression 'turnscript': RootExpressionElement: Cannot convert type 'Object' to expression result of 'Element'</code></p>\n\n",
      "PostDate": "2020-04-21T20:43:12.503147Z",
      "LastEditDate": "2020-04-21T20:44:10.7634423Z",
      "link": null
    },
    {
      "PostId": "6b9f1d5a-5743-4a6e-a42b-885b751762c5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've got line-height set to 0, and it seems to work fine.\r\n\r\nIf the layout's changing when you drag things, it could be because it's overflowing? Like, it makes the whole grid a pixel taller, which causes a scrollbar to appear, pushing all the rightmost boxes onto the next line…\r\n\r\nTry adding `height: 200px; overflow: hidden;`on the `#inventoryAccordion` style?",
      "EditableFormat": "markdown",
      "HTML": "<p>I've got line-height set to 0, and it seems to work fine.</p>\n<p>If the layout's changing when you drag things, it could be because it's overflowing? Like, it makes the whole grid a pixel taller, which causes a scrollbar to appear, pushing all the rightmost boxes onto the next line…</p>\n<p>Try adding <code>height: 200px; overflow: hidden;</code>on the <code>#inventoryAccordion</code> style?</p>\n\n",
      "PostDate": "2020-04-21T21:34:51.7451718Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "54797f50-c6b7-4525-9a58-df869486d646",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, ok, I thought were were still going with line height 38 as originally posted. Set that to 0, then added the height and overflow settings to the accordion, now tweaking those around... Almost perfect, just got a little bit of an irritating border around the bottom and right of the pane, which if I can centralize the squares will make a nice even border instead, as I've set the pane's background colour to black.\r\n\r\nIs that doable? Setting the 'grid''s style to centralize within the pane?\r\n\r\nhttps://i.gyazo.com/1d05ac9b0702d29ca55859ae8a8fb8d3.png\r\n\r\n-- Also, still getting that error message, but stuff still works! Getting rid of Overflow was the right call, I knew it was probably something like that but didn't have the jargon to hand to put it in words.\r\n\r\nLooking at the icons being slightly out of alignment, I'm just going to make the igrid-items 40x40 and do their border/background in the tile art, I think. Setting them to 40x40 looks snug as hell~.\r\n\r\nAlso, thank you so much for all your help! There's still more I want to do with the system, but I have enough 'overcomplex but functional hacks' knowledge to implement most of them in a way I'll understand, albeit non-optimally. Eheh.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, ok, I thought were were still going with line height 38 as originally posted. Set that to 0, then added the height and overflow settings to the accordion, now tweaking those around... Almost perfect, just got a little bit of an irritating border around the bottom and right of the pane, which if I can centralize the squares will make a nice even border instead, as I've set the pane's background colour to black.</p>\n<p>Is that doable? Setting the 'grid''s style to centralize within the pane?</p>\n<p>https://i.gyazo.com/1d05ac9b0702d29ca55859ae8a8fb8d3.png</p>\n<p>-- Also, still getting that error message, but stuff still works! Getting rid of Overflow was the right call, I knew it was probably something like that but didn't have the jargon to hand to put it in words.</p>\n<p>Looking at the icons being slightly out of alignment, I'm just going to make the igrid-items 40x40 and do their border/background in the tile art, I think. Setting them to 40x40 looks snug as hell~.</p>\n<p>Also, thank you so much for all your help! There's still more I want to do with the system, but I have enough 'overcomplex but functional hacks' knowledge to implement most of them in a way I'll understand, albeit non-optimally. Eheh.</p>\n\n",
      "PostDate": "2020-04-21T22:08:21.9112047Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b0e5e0ce-7789-4c73-aa9f-94949e5614fe",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That should be doable in CSS. Setting `text-align: center;` on the accordion will center the cells within it. Vertically, you can tweak the numbers as necessary.\r\n\r\nOn my test game I'm currently using:\r\n```\r\nstyle = \"#inventoryAccordion{line-height:0px; text-align: center; overflow: hidden;} .igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 0px; width: 40px; height: 40px; margin: 0px; overflow: hidden;} .igrid-item {background-image: url('http://icons.iconarchive.com/icons/pixture/board-game/icons-390.jpg'); background-color: yellow; height: 38px; width: 38px; cursor: pointer;} .igrid-active {border: solid 2px #ccc;} .ui-droppable-hover {background: #f4f4f4; border-style: dashed;}\"\r\n```\r\n(I'm just using a random image from the web for testing purposes; as I'm in no way artistic)\r\n\r\nI'm not that good at visual design; but I hope that at least the coding side of this is working. I'll take a look at the initial objects when I've got my current video uploaded; would be good if you could let me know if load/save works.",
      "EditableFormat": "markdown",
      "HTML": "<p>That should be doable in CSS. Setting <code>text-align: center;</code> on the accordion will center the cells within it. Vertically, you can tweak the numbers as necessary.</p>\n<p>On my test game I'm currently using:</p>\n<pre><code>style = \"#inventoryAccordion{line-height:0px; text-align: center; overflow: hidden;} .igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 0px; width: 40px; height: 40px; margin: 0px; overflow: hidden;} .igrid-item {background-image: url('http://icons.iconarchive.com/icons/pixture/board-game/icons-390.jpg'); background-color: yellow; height: 38px; width: 38px; cursor: pointer;} .igrid-active {border: solid 2px #ccc;} .ui-droppable-hover {background: #f4f4f4; border-style: dashed;}\"\n</code></pre>\n<p>(I'm just using a random image from the web for testing purposes; as I'm in no way artistic)</p>\n<p>I'm not that good at visual design; but I hope that at least the coding side of this is working. I'll take a look at the initial objects when I've got my current video uploaded; would be good if you could let me know if load/save works.</p>\n\n",
      "PostDate": "2020-04-21T22:25:31.4479127Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "203fbef2-80b4-4e08-847f-014186e0c706",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "text-align center worked just dandy, after some more height tweaking!\r\n\r\nI'll test save/load now! As for initial objects, I do have a hacky workaround for that... executing the items pick up verbs upon entering the first room in the game, clearing the screen, then running the introduction/ using ShowRoomDescription. So, if we can't figure that one out, not the end of the world!\r\n\r\nFor the actual image, it's a grid of 40x40 icons, yes? does that need to be a specific size, or can it just be any multiple of 40 in height and width? \r\n\r\n--- alright, testing save/load. The good news is, items in the inventory are saved! On load, they still appear in the inventory, and everything appears to remain functional.\r\n\r\nBad news is, items are reordered from first slot onwards in **the order they were picked up**! Not alphabetical, as I originally thought. They also won't all crowd into one cell, thankfully.\r\n\r\nAlso, you reminded me of the icons thing. I gave both items a different inventoryicon string (3,5 and 1,2 respectively), and both icons generated are 0,0 from my test image. (File name is correct, I believe.)",
      "EditableFormat": "markdown",
      "HTML": "<p>text-align center worked just dandy, after some more height tweaking!</p>\n<p>I'll test save/load now! As for initial objects, I do have a hacky workaround for that... executing the items pick up verbs upon entering the first room in the game, clearing the screen, then running the introduction/ using ShowRoomDescription. So, if we can't figure that one out, not the end of the world!</p>\n<p>For the actual image, it's a grid of 40x40 icons, yes? does that need to be a specific size, or can it just be any multiple of 40 in height and width?</p>\n<p>--- alright, testing save/load. The good news is, items in the inventory are saved! On load, they still appear in the inventory, and everything appears to remain functional.</p>\n<p>Bad news is, items are reordered from first slot onwards in <strong>the order they were picked up</strong>! Not alphabetical, as I originally thought. They also won't all crowd into one cell, thankfully.</p>\n<p>Also, you reminded me of the icons thing. I gave both items a different inventoryicon string (3,5 and 1,2 respectively), and both icons generated are 0,0 from my test image. (File name is correct, I believe.)</p>\n\n",
      "PostDate": "2020-04-21T22:39:23.3648781Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ece04f8d-283b-4ea0-973f-1de576305fb5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Looks like save/load isn't working properly, then. I'm not sure what order different things are executed; it should save the position of objects in the grid when a game is saved. I haven't tested that because on the web editor, you can't save a game without publishing it.\r\n\r\nThe icon selection should work. It sounds like your turnscript isn't running; have you changed that code at all?\r\nCan you check that the turnscript is enabled? (I assume the debugger thing lets you test stuff like that).\r\n\r\nEdit: Looks like I missed a line when pasting the code here. `igrid_update.enabled = true`.\r\n\r\nIf you're creating the turnscript normally in the editor, you can just tick the \"enabled\" box.",
      "EditableFormat": "markdown",
      "HTML": "<p>Looks like save/load isn't working properly, then. I'm not sure what order different things are executed; it should save the position of objects in the grid when a game is saved. I haven't tested that because on the web editor, you can't save a game without publishing it.</p>\n<p>The icon selection should work. It sounds like your turnscript isn't running; have you changed that code at all?<br>\nCan you check that the turnscript is enabled? (I assume the debugger thing lets you test stuff like that).</p>\n<p>Edit: Looks like I missed a line when pasting the code here. <code>igrid_update.enabled = true</code>.</p>\n<p>If you're creating the turnscript normally in the editor, you can just tick the \"enabled\" box.</p>\n\n",
      "PostDate": "2020-04-21T23:37:27.8437853Z",
      "LastEditDate": "2020-04-21T23:44:28.5850915Z",
      "link": null
    },
    {
      "PostId": "ae559c9a-5f68-4a87-ba94-2ada8eeccc37",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm, it didn't like me trying to enable it that way. I scrapped the UI ini turn script generation code and just made a turn script (called igrid_update -- I noticed the other one was called GetObject (igrid_update), was that important?\r\n\r\nThe original error message is gone now, but when an item is in the player inventory it starts throwing an error every turn.\r\n\r\nhttps://i.imgur.com/W5PuVtP.png\r\n\r\nUnrecognized dictionary type must, I assume, refer to;\r\n``dictionary add (icons, obj.name, obj.inventoryicon)``\r\n\r\nAlso, I noticed that the turn script's code changed a few iterations back, was that intentional? It used to be;\r\n\r\nicons = NewStringDictionary()\r\nforeach (obj, ScopeInventory()) {\r\n  if (not HasString (obj, \"inventoryicon\")) obj.inventoryicon = \"0,0\"\r\n  dictionary add (icons, obj.name, obj.inventoryicon)\r\n  JS.updateInventoryIcons (icons)\r\n}\r\n\r\nand became\r\n\r\nicons = NewStringDictionary()\r\nforeach (obj, ScopeInventory()) {\r\n  if (HasString (obj, \"inventoryicon\")) {\r\n    dictionary add (icons, obj.name, obj.inventoryicon)\r\n  }\r\n}\r\nJS.updateInventoryIcons (icons)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm, it didn't like me trying to enable it that way. I scrapped the UI ini turn script generation code and just made a turn script (called igrid_update -- I noticed the other one was called GetObject (igrid_update), was that important?</p>\n<p>The original error message is gone now, but when an item is in the player inventory it starts throwing an error every turn.</p>\n<p>https://i.imgur.com/W5PuVtP.png</p>\n<p>Unrecognized dictionary type must, I assume, refer to;<br>\n<code>dictionary add (icons, obj.name, obj.inventoryicon)</code></p>\n<p>Also, I noticed that the turn script's code changed a few iterations back, was that intentional? It used to be;</p>\n<p>icons = NewStringDictionary()<br>\nforeach (obj, ScopeInventory()) {<br>\nif (not HasString (obj, \"inventoryicon\")) obj.inventoryicon = \"0,0\"<br>\ndictionary add (icons, obj.name, obj.inventoryicon)<br>\nJS.updateInventoryIcons (icons)<br>\n}</p>\n<p>and became</p>\n<p>icons = NewStringDictionary()<br>\nforeach (obj, ScopeInventory()) {<br>\nif (HasString (obj, \"inventoryicon\")) {<br>\ndictionary add (icons, obj.name, obj.inventoryicon)<br>\n}<br>\n}<br>\nJS.updateInventoryIcons (icons)</p>\n\n",
      "PostDate": "2020-04-22T00:05:14.1110169Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "666a55fb-af26-42db-937f-accc0e4c07e1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I noticed the other one was called GetObject (igrid_update), was that important?\r\n\r\nThe hazards of coding at 4am. GetObject there is completely unnecessary, no idea why it was there. I think I removed it from later versions.\r\n\r\n> The original error message is gone now, but when an item is in the player inventory it starts throwing an error every turn.\r\n\r\nUnrecognised dictionary type most often means you're trying to pass a scriptdictionary to a `JS.` function (it only understands stringdictionary and objectdictionary).\r\nI'm not sure why that would be failing; I can't see any way for the dictionary to end up as another type there.\r\nI'm really hoping there isn't some dumb restriction like the playercontroller not handling dictionaries properly. We could serialise the data manually, but that's going to be tedious and time-consuming.\r\n\r\n> Also, I noticed that the turn script's code changed a few iterations back, was that intentional?\r\n\r\nYes. When I changed the script to work with Chrome versions before 45, it ended up being simpler to check for an object with no icon specified in the JS. So it's no longer necessary for the turnscript to repeat the same job; it can just send over data for the objects that have the attribute.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I noticed the other one was called GetObject (igrid_update), was that important?</p>\n</blockquote>\n<p>The hazards of coding at 4am. GetObject there is completely unnecessary, no idea why it was there. I think I removed it from later versions.</p>\n<blockquote>\n<p>The original error message is gone now, but when an item is in the player inventory it starts throwing an error every turn.</p>\n</blockquote>\n<p>Unrecognised dictionary type most often means you're trying to pass a scriptdictionary to a <code>JS.</code> function (it only understands stringdictionary and objectdictionary).<br>\nI'm not sure why that would be failing; I can't see any way for the dictionary to end up as another type there.<br>\nI'm really hoping there isn't some dumb restriction like the playercontroller not handling dictionaries properly. We could serialise the data manually, but that's going to be tedious and time-consuming.</p>\n<blockquote>\n<p>Also, I noticed that the turn script's code changed a few iterations back, was that intentional?</p>\n</blockquote>\n<p>Yes. When I changed the script to work with Chrome versions before 45, it ended up being simpler to check for an object with no icon specified in the JS. So it's no longer necessary for the turnscript to repeat the same job; it can just send over data for the objects that have the attribute.</p>\n\n",
      "PostDate": "2020-04-22T00:32:54.6960441Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "61fc9de6-d681-409a-a13f-774c9df9d5e0",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Right, right. Well, I'm as stumped as you, then. :S\r\n\r\n... Well, almost. There's one thing that's caught my eye. The current code sets icons = new string list...\r\n\r\nShould that be = new string dictionary? https://i.imgur.com/qBecj1e.png\r\n\r\nUpdate; I changed it to New String Dictionary, and... error messages gone! Grid icons are now generated based on the item's string (3,5, 2,1 both gave different sections!)\r\n\r\nUpon saving and loading, the items are still shunted back to positions 1 and 2, and they also both change to 0,0 icon. A single action will kick the turn script into action and return the correct icons.",
      "EditableFormat": "markdown",
      "HTML": "<p>Right, right. Well, I'm as stumped as you, then. :S</p>\n<p>... Well, almost. There's one thing that's caught my eye. The current code sets icons = new string list...</p>\n<p>Should that be = new string dictionary? https://i.imgur.com/qBecj1e.png</p>\n<p>Update; I changed it to New String Dictionary, and... error messages gone! Grid icons are now generated based on the item's string (3,5, 2,1 both gave different sections!)</p>\n<p>Upon saving and loading, the items are still shunted back to positions 1 and 2, and they also both change to 0,0 icon. A single action will kick the turn script into action and return the correct icons.</p>\n\n",
      "PostDate": "2020-04-22T00:42:36.2171001Z",
      "LastEditDate": "2020-04-22T00:45:23.5580353Z",
      "link": null
    },
    {
      "PostId": "af6876bf-21e5-4bc1-acdf-19e327ca61bf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> ... Well, almost. There's one thing that's caught my eye. The current code sets icons = new string list...\r\n\r\nNo, it says NewStringDictionary().\r\n\r\nIt said List in the first post; careless typo. I changed it, and mentioned that I'd changed it.\r\nI did think that you might have missed that post, but the code that you posted 45 minutes ago has `NewStringDictionary`, so I assumed that was the one you're using.\r\n\r\n> Upon saving and loading, the items are still shunted back to positions 1 and 2, and they also both change to 0,0 icon. A single action will kick the turn script into action and return the correct icons.\r\n\r\nYou can put `do (igrid_update, \"script\")` at the end of the UI Initialisation script if you want, to force it to run immediately when loading a saved game. But I'm not sure why it isn't saving the layout. I'll take another look at that.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>... Well, almost. There's one thing that's caught my eye. The current code sets icons = new string list...</p>\n</blockquote>\n<p>No, it says NewStringDictionary().</p>\n<p>It said List in the first post; careless typo. I changed it, and mentioned that I'd changed it.<br>\nI did think that you might have missed that post, but the code that you posted 45 minutes ago has <code>NewStringDictionary</code>, so I assumed that was the one you're using.</p>\n<blockquote>\n<p>Upon saving and loading, the items are still shunted back to positions 1 and 2, and they also both change to 0,0 icon. A single action will kick the turn script into action and return the correct icons.</p>\n</blockquote>\n<p>You can put <code>do (igrid_update, \"script\")</code> at the end of the UI Initialisation script if you want, to force it to run immediately when loading a saved game. But I'm not sure why it isn't saving the layout. I'll take another look at that.</p>\n\n",
      "PostDate": "2020-04-22T00:55:46.8399597Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b49575c2-25f5-4eeb-bdb9-ec01ae548abe",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "-- At one point Quest did crash, and I think I might have mixed up current code with an older version as a result. Sorry for any confusion that may have caused!\r\n\r\nAnd alright, that makes sense, forces it to immediately trigger on start and load.\r\n\r\nIf the layout thing can be figured out, then all basic functionality is in!\r\n\r\n-- Put the code in at the end of UI ini, got this.\r\n``Error running script: Error evaluating expression 'GetAllChildObjects(game.pov)': GetAllChildObjects function expected object parameter but was passed 'null'\r\nError running script: Cannot foreach over '' as it is not a list``\r\n\r\nHowever, on load, it does as advertized without throwing up a new error. From glancing at it -- sorry, getting distracted in the meat space irl - I'm assuming it's freaking out over not finding anything in the player's inventory in the first turn?",
      "EditableFormat": "markdown",
      "HTML": "<p>-- At one point Quest did crash, and I think I might have mixed up current code with an older version as a result. Sorry for any confusion that may have caused!</p>\n<p>And alright, that makes sense, forces it to immediately trigger on start and load.</p>\n<p>If the layout thing can be figured out, then all basic functionality is in!</p>\n<p>-- Put the code in at the end of UI ini, got this.<br>\n<code>Error running script: Error evaluating expression 'GetAllChildObjects(game.pov)': GetAllChildObjects function expected object parameter but was passed 'null' Error running script: Cannot foreach over '' as it is not a list</code></p>\n<p>However, on load, it does as advertized without throwing up a new error. From glancing at it -- sorry, getting distracted in the meat space irl - I'm assuming it's freaking out over not finding anything in the player's inventory in the first turn?</p>\n\n",
      "PostDate": "2020-04-22T01:04:17.889645Z",
      "LastEditDate": "2020-04-22T01:07:16.6664417Z",
      "link": null
    },
    {
      "PostId": "33c1011f-9237-44a6-b3c9-44c33eac7b79",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK… I've got things out of order. The touchpunch library (to make it work with touchscreen) is slowing everything down.\r\n\r\nThe script deleting the default inventory pane and replacing it with an empty grid is running *after* the initial items are rendered.\r\nTrying to rearrange it now",
      "EditableFormat": "markdown",
      "HTML": "<p>OK… I've got things out of order. The touchpunch library (to make it work with touchscreen) is slowing everything down.</p>\n<p>The script deleting the default inventory pane and replacing it with an empty grid is running <em>after</em> the initial items are rendered.<br>\nTrying to rearrange it now</p>\n\n",
      "PostDate": "2020-04-22T09:09:39.4651146Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b2221fe8-3e22-4275-90a2-e99f09b572e7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Testing version: https://textadventures.co.uk/games/view/ddgrfg_iq0mp1ag9b_mwkq/ui-playground\r\n\r\n*fingers crossed*\r\n\r\nJust wish I could test it without cloudflare errors that make me lose track of what I was doing.",
      "EditableFormat": "markdown",
      "HTML": "<p>Testing version: https://textadventures.co.uk/games/view/ddgrfg_iq0mp1ag9b_mwkq/ui-playground</p>\n<p><em>fingers crossed</em></p>\n<p>Just wish I could test it without cloudflare errors that make me lose track of what I was doing.</p>\n\n",
      "PostDate": "2020-04-22T10:05:28.348424Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b06cb6d5-5cdc-45f7-b44a-5a10e543d521",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK…\r\n\r\nOn web version:\r\n* Hovering over item shows its listalias\r\n* Clicking an item shows a verb menu\r\n     * If an object's inventryverbs are changed while it is in the inventory, game needs to call `JS.updateInventoryItem(name, alias, verbs)` to get it to update.\r\n* When saving a game, each item's location, alias, verbs, and appearance are saved\r\n* When loading a saved game, each item's location, alias, verbs, and appearance are correctly restored\r\n* New items are placed in the first available slot. If there aren't enough slots, new ones are created\r\n     * To avoid this, use Quest's inventory limiting feature to ensure that the player can't carry too many items.\r\n\r\nOn mobile:\r\n* Everything seems to work correctly :)\r\n\r\nHow does it work on desktop?\r\n\r\n<details><summary>Latest JS code</summary> (really ugly because I didn't keep the indentation in line when I was fixing bugs):\r\n\r\n```\r\n$(function() {\r\n    $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js');\r\n    initialiseGridInventory = function(style) {\r\n        addCells(25, $('#inventoryAccordion')\r\n          .empty());\r\n      $('<style>')\r\n        .appendTo('head')\r\n        .text(style);\r\n  };\r\n\r\n  loadHtml = function(content) {\r\n        console.log('Restoring save data:');\r\n    $('#divOutput').html(content);  \r\n      var layout = $('#outputData').data('igrid-layout');\r\n      if (layout && layout.length) {\r\n      console.log('Found layout data:'+$('#outputData').attr('data-igrid-layout'));\r\n      // keeps track of any items in cells which we're moving an item into\r\n      var pending = $();\r\n        $.each(layout, function(i, val) {\r\n              updateInventoryItem(val['id'], val['alias'], val['verbs']);\r\n            var item = addItem(val['id'], val['icon']);\r\n            console.log('Moving item '+val['alias']+' from '+item.parent().attr('id')+' to '+val['parent']+'; setting verbs to '+val['verbs']+' and icon to '+val['icon']);\r\n              var cell = $('#'+val['parent']);\r\n              pending = pending.add(cell.children());\r\n            cell.append(item);\r\n            pending = pending.not(item);\r\n        });\r\n        if (pending.length) {\r\n          pending.each(function () {\r\n              console.log (\"WARNING! Cell \"+pending.parent().attr('id')+\" contains multiple elements!\");\r\n             $(this).appendTo($('#inventoryAccordion .igrid-slot:empty').last());\r\n          });\r\n        }\r\n      } else {\r\n       console.log(\"No saved layout data?\");   \r\n      }\r\n  };\r\n\r\n  var grid_icons = {};\r\n  updateInventoryIcons = function(data) {\r\n    $.each(data, function(id, icon) {\r\n        id = id.replace(/\\s/g, '-');\r\n      $('#igrid-item-' + id)\r\n        .attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function(match, x, y) {\r\n          return ('background-position: -' + (x * 40) + 'px -' + (y * 40) + 'px;')\r\n        }))\r\n      grid_icons[id] = icon;\r\n    });\r\n  };\r\n\r\n  function addCells(number, container) {\r\n    var count = container.find('.igrid-slot')\r\n      .length;\r\n    return $($.map(Array(number), function() {\r\n      return $('<div>', {\r\n          id: 'igrid-cell-' + (count++),\r\n          class: 'igrid-slot'\r\n        })\r\n        .appendTo(container)\r\n        .droppable({\r\n          drop: function(ev, ui) {\r\n            $(this)\r\n              .children()\r\n              .appendTo(ui.draggable.parent());\r\n            $(ui.draggable)\r\n              .appendTo(this);\r\n            saveGridData();\r\n          }\r\n        });\r\n    }));\r\n  }\r\n\r\n  function saveGridData() {\r\n   $('#outputData')\r\n              .attr('data-igrid-layout', JSON.stringify($('#inventoryAccordion .igrid-item:not(.ui-draggable-dragging)')\r\n                .map(\r\n                  function(i, item) {\r\n                      if ($(item).data('ElementId')) {\r\n                    return {\r\n                              id: $(item).data('ElementId'),\r\n                              icon: grid_icons[$(item).data('ElementId').replace(/\\s/g, '-')],\r\n                              alias: $(item).attr('title'),\r\n                              verbs: $(item).data('verbs'),\r\n                     parent: $(item).parent().attr('id')\r\n                            };\r\n                  } else {\r\n                   console.log('Storing an element with no ID?');\r\n                   console.log(item);\r\n                   console.log($(item).data());\r\n                   return null;\r\n                  }\r\n                  }\r\n                ).get()));   \r\n  }\r\n\r\n  function setIcon(icon, item) {\r\n        return item.attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function(match, x, y) {\r\n        return ('background-position: -' + (x * 40) + 'px -' + ((y || 0) * 40) + 'px;')\r\n      }));\r\n  }\r\n  \r\n  function addItem(rawid, icon) {\r\n        var id = rawid.replace(/\\s/g, '-');\r\n    if (!id) {\r\n      return $();\r\n    }\r\n    if ($('#inventoryAccordion .igrid-slot').length == 0) {\r\n        // grid hasn't been drawn yet\r\n        setTimeout(function () {\r\n            addItem (rawid, icon);\r\n        }, 100);\r\n        return $();\r\n    }\r\n    if (icon) {\r\n      grid_icons[id] = icon;  \r\n    } else {\r\n      icon = grid_icons[id];\r\n    }\r\n    if ($('#igrid-item-'+id).length) {\r\n      // already exists\r\n        // this should only happen when restoring a save, so we make sure the icon is set correctly before returning it\r\n    return setIcon(icon, $('#igrid-item-'+id));\r\n    }\r\n    var cell = $('#inventoryAccordion .igrid-slot:empty')\r\n      .first();\r\n    var item = $('<div>', {\r\n        class: 'igrid-item',\r\n        id: 'igrid-item-' + id\r\n      })\r\n      .data('ElementId', rawid)\r\n      .appendTo(cell)\r\n      .draggable({\r\n        containment: cell.parent(),\r\n        helper: 'clone',\r\n        zIndex: 100,\r\n        revert: 'invalid',\r\n        start: function() {\r\n          item.addClass('igrid-active');\r\n        },\r\n        stop: function() {\r\n          item.removeClass('igrid-active');\r\n        }\r\n      })\r\n      .click(function(event) {\r\n        if (!item.hasClass(\"disabled\")) {\r\n          var metadata = {};\r\n          var alias = (item.prop('title') || id)\r\n            .toLowerCase();\r\n          metadata[alias] = rawid || id;\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          item.blur()\r\n            .jjmenu_popup($.map(item.data('verbs'), function(verb) {\r\n              return {\r\n                title: verb,\r\n                action: {\r\n                  callback: function() {\r\n                    sendCommand(verb.toLowerCase() + ' ' + alias, metadata);\r\n                  }\r\n                }\r\n              };\r\n            }));\r\n          return false;\r\n        }\r\n      });\r\n    return setIcon (icon, item);\r\n  }\r\n\r\n  updateInventoryItem = function(id, alias, verbs) {\r\n        id = id.replace(/\\s/g, '-');\r\n    var item = $('#igrid-item-' + id);\r\n    if (alias) {\r\n      item.prop('title', alias);\r\n    }\r\n    if (verbs) {\r\n      item.data('verbs', verbs);\r\n    }\r\n  };\r\n\r\n  var originalUpdateList = updateList;\r\n  updateList = function(name, listdata) {\r\n    if (name == 'inventory') {\r\n      var oldItems = $('#inventoryAccordion .igrid-item');\r\n      var pending = $();\r\n      $.each(listdata, function(key, value) {\r\n        var objdata = JSON.parse(value);\r\n        var id = objdata['ElementId'].replace(/\\s/g, '-');\r\n        var item = $('#igrid-item-' + id);\r\n        if (item.length) {\r\n          oldItems = oldItems.not(item);\r\n        } else {\r\n          item = addItem(id, grid_icons[id] || '0,0');\r\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\r\n          if (item.parent()\r\n            .length == 0) {\r\n            pending = pending.add(item);\r\n          }\r\n        }\r\n        if (objdata['Text']) {\r\n          item.prop('title', objdata['Text']);\r\n        }\r\n        if (objdata['Verbs']) {\r\n          item.data('verbs', objdata['Verbs'])\r\n            .removeClass('disabled');\r\n        } else {\r\n          item.addClass('disabled');\r\n        }\r\n      });\r\n      oldItems.remove();\r\n      pending.each(function(index, item) {\r\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\r\n        if (slot.length == 0) {\r\n          slot = addCells(5, $('#inventoryAccordion'));\r\n        }\r\n        slot.first()\r\n          .append(item);\r\n      });\r\n      saveGridData();\r\n    } else {\r\n      originalUpdateList(name, listdata);\r\n    }\r\n  };\r\n});\r\n```\r\n</details>\r\n\r\n<details><summary>Compressed version</summary>\r\n(Including touchpunch inline. I've included the copyright/licensing comments as Quest comments, which I believe is required by the licenses)\r\n\r\nIf you're in a hurry, you should be able to past all of this into a UI Initialisation script.\r\nBut really it would be better to create the turnscript in the editor (make sure it's initialised!), and then call `RunTurnScripts()` at the end of your start script.\r\n\r\nIf you're on the desktop editor, it would be better to put the JS above into a file, the CSS into a file, and add those and a copy of jquery.ui.touch-punch.min.js to your project.\r\n\r\n```\r\n//\r\n// jQuery UI Touch Punch 0.2.3\r\n//\r\n// Copyright 2011–2014, Dave Furfero\r\n// Dual licensed under the MIT or GPL Version 2 licenses.\r\n//\r\n//Depends:\r\n//  jquery.ui.widget.js\r\n//  jquery.ui.mouse.js\r\n//\r\nJS.eval(\"!function(a){function f(a,b){if(!(a.originalEvent.touches.length>1)){a.preventDefault();var c=a.originalEvent.changedTouches[0],d=document.createEvent('MouseEvents');d.initMouseEvent(b,!0,!0,window,1,c.screenX,c.screenY,c.clientX,c.clientY,!1,!1,!1,!1,0,null),a.target.dispatchEvent(d)}}if(a.support.touch='ontouchend'in document,a.support.touch){var e,b=a.ui.mouse.prototype,c=b._mouseInit,d=b._mouseDestroy;b._touchStart=function(a){var b=this;!e&&b._mouseCapture(a.originalEvent.changedTouches[0])&&(e=!0,b._touchMoved=!1,f(a,'mouseover'),f(a,'mousemove'),f(a,'mousedown'))},b._touchMove=function(a){e&&(this._touchMoved=!0,f(a,'mousemove'))},b._touchEnd=function(a){e&&(f(a,'mouseup'),f(a,'mouseout'),this._touchMoved||f(a,'click'),e=!1)},b._mouseInit=function(){var b=this;b.element.bind({touchstart:a.proxy(b,'_touchStart'),touchmove:a.proxy(b,'_touchMove'),touchend:a.proxy(b,'_touchEnd')}),c.call(b)},b._mouseDestroy=function(){var b=this;b.element.unbind({touchstart:a.proxy(b,'_touchStart'),touchmove:a.proxy(b,'_touchMove'),touchend:a.proxy(b,'_touchEnd')}),d.call(b)}}}(jQuery);\")\r\n// MIT / GPL licensed code above this point\r\n\r\nJS.eval(\"$(function(){initialiseGridInventory=function(t){i(25,$('#inventoryAccordion').empty()),$('<style>').appendTo('head').text(t)},loadHtml=function(t){console.log('Restoring save data:'),$('#divOutput').html(t);var e=$('#outputData').data('igrid-layout');if(e&&e.length){console.log('Found layout data:'+$('#outputData').attr('data-igrid-layout'));var a=$();$.each(e,function(t,e){updateInventoryItem(e.id,e.alias,e.verbs);var n=l(e.id,e.icon);console.log('Moving item '+e.alias+' from '+n.parent().attr('id')+' to '+e.parent+'; setting verbs to '+e.verbs+' and icon to '+e.icon);var i=$('#'+e.parent);a=a.add(i.children()),i.append(n),a=a.not(n)}),a.length&&a.each(function(){console.log('WARNING! Cell '+a.parent().attr('id')+' contains multiple elements!'),$(this).appendTo($('#inventoryAccordion .igrid-slot:empty').last())})}else console.log('No saved layout data?')};var d={};function i(t,e){var n=e.find('.igrid-slot').length;return $($.map(Array(t),function(){return $('<div>',{id:'igrid-cell-'+n++,class:'igrid-slot'}).appendTo(e).droppable({drop:function(t,e){$(this).children().appendTo(e.draggable.parent()),$(e.draggable).appendTo(this),a()}})}))}function a(){$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-item:not(.ui-draggable-dragging)').map(function(t,e){return $(e).data('ElementId')?{id:$(e).data('ElementId'),icon:d[$(e).data('ElementId').replace(/\\\\s/g,'-')],alias:$(e).attr('title'),verbs:$(e).data('verbs'),parent:$(e).parent().attr('id')}:(console.log('Storing an element with no ID?'),console.log(e),console.log($(e).data()),null)}).get()))}function n(t,e){return e.attr('style',t.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,e,n){return'background-position: -'+40*e+'px -'+40*(n||0)+'px;'}))}function l(i,t){var a=i.replace(/\\\\s/g,'-');if(!a)return $();if(0==$('#inventoryAccordion .igrid-slot').length)return setTimeout(function(){l(i,t)},100),$();if(t?d[a]=t:t=d[a],$('#igrid-item-'+a).length)return n(t,$('#igrid-item-'+a));var e=$('#inventoryAccordion .igrid-slot:empty').first(),r=$('<div>',{class:'igrid-item',id:'igrid-item-'+a}).data('ElementId',i).appendTo(e).draggable({containment:e.parent(),helper:'clone',zIndex:100,revert:'invalid',start:function(){r.addClass('igrid-active')},stop:function(){r.removeClass('igrid-active')}}).click(function(t){if(!r.hasClass('disabled')){var e={},n=(r.prop('title')||a).toLowerCase();return e[n]=i||a,t.preventDefault(),t.stopPropagation(),r.blur().jjmenu_popup($.map(r.data('verbs'),function(t){return{title:t,action:{callback:function(){sendCommand(t.toLowerCase()+' '+n,e)}}}})),!1}});return n(t,r)}updateInventoryIcons=function(t){$.each(t,function(t,e){t=t.replace(/\\\\s/g,'-'),$('#igrid-item-'+t).attr('style',e.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,e,n){return'background-position: -'+40*e+'px -'+40*n+'px;'})),d[t]=e})},updateInventoryItem=function(t,e,n){t=t.replace(/\\\\s/g,'-');var i=$('#igrid-item-'+t);e&&i.prop('title',e),n&&i.data('verbs',n)};var c=updateList;updateList=function(t,e){if('inventory'==t){var r=$('#inventoryAccordion .igrid-item'),o=$();$.each(e,function(t,e){var n=JSON.parse(e),i=n.ElementId.replace(/\\\\s/g,'-'),a=$('#igrid-item-'+i);a.length?r=r.not(a):0==(a=l(i,d[i]||'0,0')).parent().length&&(o=o.add(a)),n.Text&&a.prop('title',n.Text),n.Verbs?a.data('verbs',n.Verbs).removeClass('disabled'):a.addClass('disabled')}),r.remove(),o.each(function(t,e){var n=$('#inventoryAccordion .igrid-slot:empty');0==n.length&&(n=i(5,$('#inventoryAccordion'))),n.first().append(e)}),a()}else c(t,e)}});\")\r\n\r\nstyle = \"#inventoryAccordion{line-height:0px; text-align: center; overflow: hidden;} .igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 0px; width: 40px; height: 40px; margin: 0px; overflow: hidden;} .igrid-item {background-image: url('\"+GetFileURL(\"inventory_icons.png\")+\"'); background-color: yellow; height: 38px; width: 38px; cursor: pointer;} .igrid-active {border: solid 2px #ccc;} .ui-droppable-hover {background: #f4f4f4; border-style: dashed;}\"\r\n\r\nJS.initialiseGridInventory(style)\r\n\r\n// only do this once.\r\n// This should really be in the 'start' script, not the UI Initialisation script, but I put it here for the benefit of anyone who wants a one-click installation of the grid inventory\r\nif (GetObject (\"igrid_update\") = null) {\r\n  create turnscript(\"igrid_update\")\r\n  SetTurnScript (igrid_update) {\r\n    icons = NewStringDictionary()\r\n    foreach (obj, ScopeInventory()) {\r\n      if (HasString (obj, \"inventoryicon\")) {\r\n        dictionary add (icons, obj.name, obj.inventoryicon)\r\n      }\r\n    }\r\n    JS.updateInventoryIcons (icons)\r\n  }\r\n  igrid_update.enabled = true\r\n  if (HasObject (game, \"pov\")) {\r\n    do (igrid_update, \"script\")\r\n  }\r\n}\r\n```\r\n</details>\r\n\r\nI've been tinkering about with the CSS, but that's not really my field. ",
      "EditableFormat": "markdown",
      "HTML": "<p>OK…</p>\n<p>On web version:</p>\n<ul>\n<li>Hovering over item shows its listalias</li>\n<li>Clicking an item shows a verb menu\n<ul>\n<li>If an object's inventryverbs are changed while it is in the inventory, game needs to call <code>JS.updateInventoryItem(name, alias, verbs)</code> to get it to update.</li>\n</ul>\n</li>\n<li>When saving a game, each item's location, alias, verbs, and appearance are saved</li>\n<li>When loading a saved game, each item's location, alias, verbs, and appearance are correctly restored</li>\n<li>New items are placed in the first available slot. If there aren't enough slots, new ones are created\n<ul>\n<li>To avoid this, use Quest's inventory limiting feature to ensure that the player can't carry too many items.</li>\n</ul>\n</li>\n</ul>\n<p>On mobile:</p>\n<ul>\n<li>Everything seems to work correctly :)</li>\n</ul>\n<p>How does it work on desktop?</p>\n<details><summary>Latest JS code</summary> (really ugly because I didn't keep the indentation in line when I was fixing bugs):\n<pre><code>$(function() {\n    $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js');\n    initialiseGridInventory = function(style) {\n        addCells(25, $('#inventoryAccordion')\n          .empty());\n      $('&lt;style&gt;')\n        .appendTo('head')\n        .text(style);\n  };\n\n  loadHtml = function(content) {\n        console.log('Restoring save data:');\n    $('#divOutput').html(content);  \n      var layout = $('#outputData').data('igrid-layout');\n      if (layout &amp;&amp; layout.length) {\n      console.log('Found layout data:'+$('#outputData').attr('data-igrid-layout'));\n      // keeps track of any items in cells which we're moving an item into\n      var pending = $();\n        $.each(layout, function(i, val) {\n              updateInventoryItem(val['id'], val['alias'], val['verbs']);\n            var item = addItem(val['id'], val['icon']);\n            console.log('Moving item '+val['alias']+' from '+item.parent().attr('id')+' to '+val['parent']+'; setting verbs to '+val['verbs']+' and icon to '+val['icon']);\n              var cell = $('#'+val['parent']);\n              pending = pending.add(cell.children());\n            cell.append(item);\n            pending = pending.not(item);\n        });\n        if (pending.length) {\n          pending.each(function () {\n              console.log (\"WARNING! Cell \"+pending.parent().attr('id')+\" contains multiple elements!\");\n             $(this).appendTo($('#inventoryAccordion .igrid-slot:empty').last());\n          });\n        }\n      } else {\n       console.log(\"No saved layout data?\");   \n      }\n  };\n\n  var grid_icons = {};\n  updateInventoryIcons = function(data) {\n    $.each(data, function(id, icon) {\n        id = id.replace(/\\s/g, '-');\n      $('#igrid-item-' + id)\n        .attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function(match, x, y) {\n          return ('background-position: -' + (x * 40) + 'px -' + (y * 40) + 'px;')\n        }))\n      grid_icons[id] = icon;\n    });\n  };\n\n  function addCells(number, container) {\n    var count = container.find('.igrid-slot')\n      .length;\n    return $($.map(Array(number), function() {\n      return $('&lt;div&gt;', {\n          id: 'igrid-cell-' + (count++),\n          class: 'igrid-slot'\n        })\n        .appendTo(container)\n        .droppable({\n          drop: function(ev, ui) {\n            $(this)\n              .children()\n              .appendTo(ui.draggable.parent());\n            $(ui.draggable)\n              .appendTo(this);\n            saveGridData();\n          }\n        });\n    }));\n  }\n\n  function saveGridData() {\n   $('#outputData')\n              .attr('data-igrid-layout', JSON.stringify($('#inventoryAccordion .igrid-item:not(.ui-draggable-dragging)')\n                .map(\n                  function(i, item) {\n                      if ($(item).data('ElementId')) {\n                    return {\n                              id: $(item).data('ElementId'),\n                              icon: grid_icons[$(item).data('ElementId').replace(/\\s/g, '-')],\n                              alias: $(item).attr('title'),\n                              verbs: $(item).data('verbs'),\n                     parent: $(item).parent().attr('id')\n                            };\n                  } else {\n                   console.log('Storing an element with no ID?');\n                   console.log(item);\n                   console.log($(item).data());\n                   return null;\n                  }\n                  }\n                ).get()));   \n  }\n\n  function setIcon(icon, item) {\n        return item.attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function(match, x, y) {\n        return ('background-position: -' + (x * 40) + 'px -' + ((y || 0) * 40) + 'px;')\n      }));\n  }\n  \n  function addItem(rawid, icon) {\n        var id = rawid.replace(/\\s/g, '-');\n    if (!id) {\n      return $();\n    }\n    if ($('#inventoryAccordion .igrid-slot').length == 0) {\n        // grid hasn't been drawn yet\n        setTimeout(function () {\n            addItem (rawid, icon);\n        }, 100);\n        return $();\n    }\n    if (icon) {\n      grid_icons[id] = icon;  \n    } else {\n      icon = grid_icons[id];\n    }\n    if ($('#igrid-item-'+id).length) {\n      // already exists\n        // this should only happen when restoring a save, so we make sure the icon is set correctly before returning it\n    return setIcon(icon, $('#igrid-item-'+id));\n    }\n    var cell = $('#inventoryAccordion .igrid-slot:empty')\n      .first();\n    var item = $('&lt;div&gt;', {\n        class: 'igrid-item',\n        id: 'igrid-item-' + id\n      })\n      .data('ElementId', rawid)\n      .appendTo(cell)\n      .draggable({\n        containment: cell.parent(),\n        helper: 'clone',\n        zIndex: 100,\n        revert: 'invalid',\n        start: function() {\n          item.addClass('igrid-active');\n        },\n        stop: function() {\n          item.removeClass('igrid-active');\n        }\n      })\n      .click(function(event) {\n        if (!item.hasClass(\"disabled\")) {\n          var metadata = {};\n          var alias = (item.prop('title') || id)\n            .toLowerCase();\n          metadata[alias] = rawid || id;\n          event.preventDefault();\n          event.stopPropagation();\n          item.blur()\n            .jjmenu_popup($.map(item.data('verbs'), function(verb) {\n              return {\n                title: verb,\n                action: {\n                  callback: function() {\n                    sendCommand(verb.toLowerCase() + ' ' + alias, metadata);\n                  }\n                }\n              };\n            }));\n          return false;\n        }\n      });\n    return setIcon (icon, item);\n  }\n\n  updateInventoryItem = function(id, alias, verbs) {\n        id = id.replace(/\\s/g, '-');\n    var item = $('#igrid-item-' + id);\n    if (alias) {\n      item.prop('title', alias);\n    }\n    if (verbs) {\n      item.data('verbs', verbs);\n    }\n  };\n\n  var originalUpdateList = updateList;\n  updateList = function(name, listdata) {\n    if (name == 'inventory') {\n      var oldItems = $('#inventoryAccordion .igrid-item');\n      var pending = $();\n      $.each(listdata, function(key, value) {\n        var objdata = JSON.parse(value);\n        var id = objdata['ElementId'].replace(/\\s/g, '-');\n        var item = $('#igrid-item-' + id);\n        if (item.length) {\n          oldItems = oldItems.not(item);\n        } else {\n          item = addItem(id, grid_icons[id] || '0,0');\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\n          if (item.parent()\n            .length == 0) {\n            pending = pending.add(item);\n          }\n        }\n        if (objdata['Text']) {\n          item.prop('title', objdata['Text']);\n        }\n        if (objdata['Verbs']) {\n          item.data('verbs', objdata['Verbs'])\n            .removeClass('disabled');\n        } else {\n          item.addClass('disabled');\n        }\n      });\n      oldItems.remove();\n      pending.each(function(index, item) {\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\n        if (slot.length == 0) {\n          slot = addCells(5, $('#inventoryAccordion'));\n        }\n        slot.first()\n          .append(item);\n      });\n      saveGridData();\n    } else {\n      originalUpdateList(name, listdata);\n    }\n  };\n});\n</code></pre>\n</details>\n<details><summary>Compressed version</summary>\n(Including touchpunch inline. I've included the copyright/licensing comments as Quest comments, which I believe is required by the licenses)\n<p>If you're in a hurry, you should be able to past all of this into a UI Initialisation script.<br>\nBut really it would be better to create the turnscript in the editor (make sure it's initialised!), and then call <code>RunTurnScripts()</code> at the end of your start script.</p>\n<p>If you're on the desktop editor, it would be better to put the JS above into a file, the CSS into a file, and add those and a copy of jquery.ui.touch-punch.min.js to your project.</p>\n<pre><code>//\n// jQuery UI Touch Punch 0.2.3\n//\n// Copyright 2011–2014, Dave Furfero\n// Dual licensed under the MIT or GPL Version 2 licenses.\n//\n//Depends:\n//  jquery.ui.widget.js\n//  jquery.ui.mouse.js\n//\nJS.eval(\"!function(a){function f(a,b){if(!(a.originalEvent.touches.length&gt;1)){a.preventDefault();var c=a.originalEvent.changedTouches[0],d=document.createEvent('MouseEvents');d.initMouseEvent(b,!0,!0,window,1,c.screenX,c.screenY,c.clientX,c.clientY,!1,!1,!1,!1,0,null),a.target.dispatchEvent(d)}}if(a.support.touch='ontouchend'in document,a.support.touch){var e,b=a.ui.mouse.prototype,c=b._mouseInit,d=b._mouseDestroy;b._touchStart=function(a){var b=this;!e&amp;&amp;b._mouseCapture(a.originalEvent.changedTouches[0])&amp;&amp;(e=!0,b._touchMoved=!1,f(a,'mouseover'),f(a,'mousemove'),f(a,'mousedown'))},b._touchMove=function(a){e&amp;&amp;(this._touchMoved=!0,f(a,'mousemove'))},b._touchEnd=function(a){e&amp;&amp;(f(a,'mouseup'),f(a,'mouseout'),this._touchMoved||f(a,'click'),e=!1)},b._mouseInit=function(){var b=this;b.element.bind({touchstart:a.proxy(b,'_touchStart'),touchmove:a.proxy(b,'_touchMove'),touchend:a.proxy(b,'_touchEnd')}),c.call(b)},b._mouseDestroy=function(){var b=this;b.element.unbind({touchstart:a.proxy(b,'_touchStart'),touchmove:a.proxy(b,'_touchMove'),touchend:a.proxy(b,'_touchEnd')}),d.call(b)}}}(jQuery);\")\n// MIT / GPL licensed code above this point\n\nJS.eval(\"$(function(){initialiseGridInventory=function(t){i(25,$('#inventoryAccordion').empty()),$('&lt;style&gt;').appendTo('head').text(t)},loadHtml=function(t){console.log('Restoring save data:'),$('#divOutput').html(t);var e=$('#outputData').data('igrid-layout');if(e&amp;&amp;e.length){console.log('Found layout data:'+$('#outputData').attr('data-igrid-layout'));var a=$();$.each(e,function(t,e){updateInventoryItem(e.id,e.alias,e.verbs);var n=l(e.id,e.icon);console.log('Moving item '+e.alias+' from '+n.parent().attr('id')+' to '+e.parent+'; setting verbs to '+e.verbs+' and icon to '+e.icon);var i=$('#'+e.parent);a=a.add(i.children()),i.append(n),a=a.not(n)}),a.length&amp;&amp;a.each(function(){console.log('WARNING! Cell '+a.parent().attr('id')+' contains multiple elements!'),$(this).appendTo($('#inventoryAccordion .igrid-slot:empty').last())})}else console.log('No saved layout data?')};var d={};function i(t,e){var n=e.find('.igrid-slot').length;return $($.map(Array(t),function(){return $('&lt;div&gt;',{id:'igrid-cell-'+n++,class:'igrid-slot'}).appendTo(e).droppable({drop:function(t,e){$(this).children().appendTo(e.draggable.parent()),$(e.draggable).appendTo(this),a()}})}))}function a(){$('#outputData').attr('data-igrid-layout',JSON.stringify($('#inventoryAccordion .igrid-item:not(.ui-draggable-dragging)').map(function(t,e){return $(e).data('ElementId')?{id:$(e).data('ElementId'),icon:d[$(e).data('ElementId').replace(/\\\\s/g,'-')],alias:$(e).attr('title'),verbs:$(e).data('verbs'),parent:$(e).parent().attr('id')}:(console.log('Storing an element with no ID?'),console.log(e),console.log($(e).data()),null)}).get()))}function n(t,e){return e.attr('style',t.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,e,n){return'background-position: -'+40*e+'px -'+40*(n||0)+'px;'}))}function l(i,t){var a=i.replace(/\\\\s/g,'-');if(!a)return $();if(0==$('#inventoryAccordion .igrid-slot').length)return setTimeout(function(){l(i,t)},100),$();if(t?d[a]=t:t=d[a],$('#igrid-item-'+a).length)return n(t,$('#igrid-item-'+a));var e=$('#inventoryAccordion .igrid-slot:empty').first(),r=$('&lt;div&gt;',{class:'igrid-item',id:'igrid-item-'+a}).data('ElementId',i).appendTo(e).draggable({containment:e.parent(),helper:'clone',zIndex:100,revert:'invalid',start:function(){r.addClass('igrid-active')},stop:function(){r.removeClass('igrid-active')}}).click(function(t){if(!r.hasClass('disabled')){var e={},n=(r.prop('title')||a).toLowerCase();return e[n]=i||a,t.preventDefault(),t.stopPropagation(),r.blur().jjmenu_popup($.map(r.data('verbs'),function(t){return{title:t,action:{callback:function(){sendCommand(t.toLowerCase()+' '+n,e)}}}})),!1}});return n(t,r)}updateInventoryIcons=function(t){$.each(t,function(t,e){t=t.replace(/\\\\s/g,'-'),$('#igrid-item-'+t).attr('style',e.replace(/^(\\\\d+)[,\\\\s]*(\\\\d*)(?!\\\\w)/,function(t,e,n){return'background-position: -'+40*e+'px -'+40*n+'px;'})),d[t]=e})},updateInventoryItem=function(t,e,n){t=t.replace(/\\\\s/g,'-');var i=$('#igrid-item-'+t);e&amp;&amp;i.prop('title',e),n&amp;&amp;i.data('verbs',n)};var c=updateList;updateList=function(t,e){if('inventory'==t){var r=$('#inventoryAccordion .igrid-item'),o=$();$.each(e,function(t,e){var n=JSON.parse(e),i=n.ElementId.replace(/\\\\s/g,'-'),a=$('#igrid-item-'+i);a.length?r=r.not(a):0==(a=l(i,d[i]||'0,0')).parent().length&amp;&amp;(o=o.add(a)),n.Text&amp;&amp;a.prop('title',n.Text),n.Verbs?a.data('verbs',n.Verbs).removeClass('disabled'):a.addClass('disabled')}),r.remove(),o.each(function(t,e){var n=$('#inventoryAccordion .igrid-slot:empty');0==n.length&amp;&amp;(n=i(5,$('#inventoryAccordion'))),n.first().append(e)}),a()}else c(t,e)}});\")\n\nstyle = \"#inventoryAccordion{line-height:0px; text-align: center; overflow: hidden;} .igrid-slot {display: inline-block; background-color: purple; border: 1px solid black; padding: 0px; width: 40px; height: 40px; margin: 0px; overflow: hidden;} .igrid-item {background-image: url('\"+GetFileURL(\"inventory_icons.png\")+\"'); background-color: yellow; height: 38px; width: 38px; cursor: pointer;} .igrid-active {border: solid 2px #ccc;} .ui-droppable-hover {background: #f4f4f4; border-style: dashed;}\"\n\nJS.initialiseGridInventory(style)\n\n// only do this once.\n// This should really be in the 'start' script, not the UI Initialisation script, but I put it here for the benefit of anyone who wants a one-click installation of the grid inventory\nif (GetObject (\"igrid_update\") = null) {\n  create turnscript(\"igrid_update\")\n  SetTurnScript (igrid_update) {\n    icons = NewStringDictionary()\n    foreach (obj, ScopeInventory()) {\n      if (HasString (obj, \"inventoryicon\")) {\n        dictionary add (icons, obj.name, obj.inventoryicon)\n      }\n    }\n    JS.updateInventoryIcons (icons)\n  }\n  igrid_update.enabled = true\n  if (HasObject (game, \"pov\")) {\n    do (igrid_update, \"script\")\n  }\n}\n</code></pre>\n</details>\n<p>I've been tinkering about with the CSS, but that's not really my field.</p>\n\n",
      "PostDate": "2020-04-22T10:56:11.2030573Z",
      "LastEditDate": "2020-04-22T14:46:39.1130293Z",
      "link": null
    },
    {
      "PostId": "a4246e7c-8485-47d9-b037-9806ef6dcba4",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Had a play around, downloaded it, messed around with it in every bugtesting way I could think of, and!...\r\n\r\nNo bugs I could find! Everything worked! I'll have a play with adding the JS into my own project when I've woken up a bit more!",
      "EditableFormat": "markdown",
      "HTML": "<p>Had a play around, downloaded it, messed around with it in every bugtesting way I could think of, and!...</p>\n<p>No bugs I could find! Everything worked! I'll have a play with adding the JS into my own project when I've woken up a bit more!</p>\n\n",
      "PostDate": "2020-04-22T11:27:22.6972079Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c5ce1ff1-1069-4cee-b877-a9e9a347741b",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alright! The game -really- doesn't like ``do (igrid_update, \"script\")`` being placed in the UI ini script, for some reason. (Also, the turnscript creation in the compressed code is set to create a stringlist again, not a dictionary. With that quick change, and with moving ``do (igrid_update, \"script\")`` into a later script that UI ini, everything works fine. It seems that the UI Ini script fires off before the turnscript is properly initialized, even if made seperately in the editor beforehand. Moving the 'do' to a later script bypasses this error, which would appear on load, too. Of course, that won't fire off on a load, though...\r\n\r\n... so my extremely hacky answer? ``do (igrid_update, \"script\")`` in the 'after entering room first time' of the first room, then set the same ``do (igrid_update, \"script\")`` in the ui ini script behind an if check with a simple 'player.started' flag, set that to True in the first room, then it fires off on load without complaining.",
      "EditableFormat": "markdown",
      "HTML": "<p>Alright! The game -really- doesn't like <code>do (igrid_update, \"script\")</code> being placed in the UI ini script, for some reason. (Also, the turnscript creation in the compressed code is set to create a stringlist again, not a dictionary. With that quick change, and with moving <code>do (igrid_update, \"script\")</code> into a later script that UI ini, everything works fine. It seems that the UI Ini script fires off before the turnscript is properly initialized, even if made seperately in the editor beforehand. Moving the 'do' to a later script bypasses this error, which would appear on load, too. Of course, that won't fire off on a load, though...</p>\n<p>... so my extremely hacky answer? <code>do (igrid_update, \"script\")</code> in the 'after entering room first time' of the first room, then set the same <code>do (igrid_update, \"script\")</code> in the ui ini script behind an if check with a simple 'player.started' flag, set that to True in the first room, then it fires off on load without complaining.</p>\n\n",
      "PostDate": "2020-04-22T12:11:30.9291725Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8dc74119-1737-42c7-bcf4-eb4d345b3b22",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> lright! The game -really- doesn't like `do (igrid_update, \"script\")` being placed in the UI ini script, for some reason.\r\n\r\nJust tried it. It works for me.\r\n\r\n> It seems that the UI Ini script fires off before the turnscript is properly initialized\r\n\r\nNo, the turnscript is initialised fine. The only error it could give is one about `game.pov` not being defined.\r\n\r\nIf you haven't chosen a player object on the game's \"Player\" tab, it defaults to any object named \"player\" - but this happens after UI initialisation, so if you rely on it your UI initialisation script can't look at the player's inventory.\r\n\r\nGo to the \"Player\" tab and choose a player object, and it works fine. I edited the script above so that it will check whether player is defined before running the turnscript.\r\n\r\n> Also, the turnscript creation in the compressed code is set to create a stringlist again, not a dictionary.\r\n\r\nOoops, must have pasted in an old one. Edited.\r\n\r\n> Moving the 'do' to a later script bypasses this error, which would appear on load, too.\r\n\r\nNo it wouldn't. On loading, the player has already been initialised (but of course, the turnscript already exists; which causes a different error - now fixed by checking for the turnscript's existence before creating it)\r\n\r\n> so my extremely hacky answer? do (igrid_update, \"script\") in the 'after entering room first time' of the first room\r\n\r\nThat works. Though I think the game start script would be slightly more logical. Either way, it works.\r\n\r\n> hen set the same do (igrid_update, \"script\") in the ui ini script behind an if check with a simple 'player.started' flag, set that to True in the first room, then it fires off on load without complaining.\r\n\r\nShould be unnecessary. The `loadHtml` hack in the latest version of the javascript should be able to find the right icons for any objects that were in the inventory during a saved game.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>lright! The game -really- doesn't like <code>do (igrid_update, \"script\")</code> being placed in the UI ini script, for some reason.</p>\n</blockquote>\n<p>Just tried it. It works for me.</p>\n<blockquote>\n<p>It seems that the UI Ini script fires off before the turnscript is properly initialized</p>\n</blockquote>\n<p>No, the turnscript is initialised fine. The only error it could give is one about <code>game.pov</code> not being defined.</p>\n<p>If you haven't chosen a player object on the game's \"Player\" tab, it defaults to any object named \"player\" - but this happens after UI initialisation, so if you rely on it your UI initialisation script can't look at the player's inventory.</p>\n<p>Go to the \"Player\" tab and choose a player object, and it works fine. I edited the script above so that it will check whether player is defined before running the turnscript.</p>\n<blockquote>\n<p>Also, the turnscript creation in the compressed code is set to create a stringlist again, not a dictionary.</p>\n</blockquote>\n<p>Ooops, must have pasted in an old one. Edited.</p>\n<blockquote>\n<p>Moving the 'do' to a later script bypasses this error, which would appear on load, too.</p>\n</blockquote>\n<p>No it wouldn't. On loading, the player has already been initialised (but of course, the turnscript already exists; which causes a different error - now fixed by checking for the turnscript's existence before creating it)</p>\n<blockquote>\n<p>so my extremely hacky answer? do (igrid_update, \"script\") in the 'after entering room first time' of the first room</p>\n</blockquote>\n<p>That works. Though I think the game start script would be slightly more logical. Either way, it works.</p>\n<blockquote>\n<p>hen set the same do (igrid_update, \"script\") in the ui ini script behind an if check with a simple 'player.started' flag, set that to True in the first room, then it fires off on load without complaining.</p>\n</blockquote>\n<p>Should be unnecessary. The <code>loadHtml</code> hack in the latest version of the javascript should be able to find the right icons for any objects that were in the inventory during a saved game.</p>\n\n",
      "PostDate": "2020-04-22T14:47:53.0513326Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "195272ba-0800-4292-9ce4-78c42866eb86",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh. Erm, setting the player object to player rather than letting the system figure that out itself has fixed that issue, yes. So, no need for the workaround. My bad!\r\n\r\nWell, with that, basic functionality has been achieved!\r\n\r\nThe two optional features I'd like to implement would be the use of HTML tooltips when hovering over a grid item to display the name of it immediately in a nice little black background white text bubble, as opposed to the current 'wait a sec for alt text to kick in', and having the grid size change in response to a weight limit variable (allowing it to be increased or decreased with stats, special gear/milestones (e.g backpack, satchel), heavy objects decreasing available slots, etc.), though I'm just thrilled all the core features are working!\r\n\r\nI guess the questions there are;\r\n- Would HTML tooltips be something introduced in the last 5 years, thus incompatible as standard with Quest's offline browser?\r\n- The grid was created with a set size, could it be changed during gameplay or would it require a restructuring? At this point, I'm not sure it's worth the hassle.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh. Erm, setting the player object to player rather than letting the system figure that out itself has fixed that issue, yes. So, no need for the workaround. My bad!</p>\n<p>Well, with that, basic functionality has been achieved!</p>\n<p>The two optional features I'd like to implement would be the use of HTML tooltips when hovering over a grid item to display the name of it immediately in a nice little black background white text bubble, as opposed to the current 'wait a sec for alt text to kick in', and having the grid size change in response to a weight limit variable (allowing it to be increased or decreased with stats, special gear/milestones (e.g backpack, satchel), heavy objects decreasing available slots, etc.), though I'm just thrilled all the core features are working!</p>\n<p>I guess the questions there are;</p>\n<ul>\n<li>Would HTML tooltips be something introduced in the last 5 years, thus incompatible as standard with Quest's offline browser?</li>\n<li>The grid was created with a set size, could it be changed during gameplay or would it require a restructuring? At this point, I'm not sure it's worth the hassle.</li>\n</ul>\n\n",
      "PostDate": "2020-04-22T15:24:35.3318956Z",
      "LastEditDate": "2020-04-22T15:39:15.2540001Z",
      "link": null
    },
    {
      "PostId": "55d75642-619b-430c-9048-b6ebf9198b09",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Off the top of my head (untested):\r\n\r\n> The use of HTML tooltips when hovering over a grid item to display the name of it immediately in a nice little black background white text bubble, as opposed to the current 'wait a sec for alt text to kick in',\r\n```\r\nfunction setTooltip (item, name) {\r\n  if (item.children('.floaty-tooltip').length) {\r\n    item.children('.floaty-tooltip').text(name);\r\n  } else {\r\n    item.css({overflow: 'visible', position: 'relative'});\r\n    var tooltip = $('<div>').appendTo(item).addClass('floaty-tooltip').css({position: 'absolute', top: '20px', right: '20px', padding: 7, backgroundColor: 'black', color: 'white', border: '5px double white'}).text(name).hide();\r\n    item.hover (\r\n      function () { tooltip.show();},\r\n      function () { tooltip.hide();}\r\n    );\r\n    });\r\n  }\r\n}\r\n```\r\n(probably calling this from within the updateList function; or anywhere else the 'title' attribute is changed)\r\n\r\n<hr style=\"border: 1px dotted navy\" />\r\n\r\n> having the grid size change in response to a weight limit variable\r\n\r\nYou'd still need to have Quest check the weight limit before taking an item, but…\r\n```\r\nsetGridSize = function (number) {\r\n  if (number > $('.igrid-slot').length) {\r\n    addCells (number - $('.igrid-slot').length, $('#inventoryAccordion'));\r\n  } else {\r\n    var dropped = [];\r\n    while( $('.igrid-slot').length > number) {\r\n      // find the last slot in the grid\r\n      var slot = $('.igrid-slot').last();\r\n      // if it has any children, move them to the previous empty slot\r\n      if (slot.children().length) {\r\n        $('.igrid-slot:empty').last().append(slot.children());\r\n      }\r\n      // If it's still not empty, tell Quest that the player is dropping stuff\r\n      slot.children(':not('.ui-draggable-dragging')').each(function() {\r\n        dropped.push($(this).data('ElementId'));\r\n      });\r\n      slot.remove()\r\n    }\r\n    if (dropped.length) {\r\n      ASLEvent ('GridDroppedItems', dropped);\r\n    }\r\n  }\r\n};\r\n```\r\nI think that should just let you do `JS.setGridSize(15)` or whatever. If the grid grows, more cells are added. If the grid shrinks, items at the bottom are pushed up to the next empty cell. If the grid shrinks and not everything will fit, items will be removed from the bottom and the Quest function `GridDroppedItems` will be called, its single parameter being a stringlist containing the names of the items that were dropped.",
      "EditableFormat": "markdown",
      "HTML": "<p>Off the top of my head (untested):</p>\n<blockquote>\n<p>The use of HTML tooltips when hovering over a grid item to display the name of it immediately in a nice little black background white text bubble, as opposed to the current 'wait a sec for alt text to kick in',</p>\n</blockquote>\n<pre><code>function setTooltip (item, name) {\n  if (item.children('.floaty-tooltip').length) {\n    item.children('.floaty-tooltip').text(name);\n  } else {\n    item.css({overflow: 'visible', position: 'relative'});\n    var tooltip = $('&lt;div&gt;').appendTo(item).addClass('floaty-tooltip').css({position: 'absolute', top: '20px', right: '20px', padding: 7, backgroundColor: 'black', color: 'white', border: '5px double white'}).text(name).hide();\n    item.hover (\n      function () { tooltip.show();},\n      function () { tooltip.hide();}\n    );\n    });\n  }\n}\n</code></pre>\n<p>(probably calling this from within the updateList function; or anywhere else the 'title' attribute is changed)</p>\n<hr style=\"border: 1px dotted navy\">\n<blockquote>\n<p>having the grid size change in response to a weight limit variable</p>\n</blockquote>\n<p>You'd still need to have Quest check the weight limit before taking an item, but…</p>\n<pre><code>setGridSize = function (number) {\n  if (number &gt; $('.igrid-slot').length) {\n    addCells (number - $('.igrid-slot').length, $('#inventoryAccordion'));\n  } else {\n    var dropped = [];\n    while( $('.igrid-slot').length &gt; number) {\n      // find the last slot in the grid\n      var slot = $('.igrid-slot').last();\n      // if it has any children, move them to the previous empty slot\n      if (slot.children().length) {\n        $('.igrid-slot:empty').last().append(slot.children());\n      }\n      // If it's still not empty, tell Quest that the player is dropping stuff\n      slot.children(':not('.ui-draggable-dragging')').each(function() {\n        dropped.push($(this).data('ElementId'));\n      });\n      slot.remove()\n    }\n    if (dropped.length) {\n      ASLEvent ('GridDroppedItems', dropped);\n    }\n  }\n};\n</code></pre>\n<p>I think that should just let you do <code>JS.setGridSize(15)</code> or whatever. If the grid grows, more cells are added. If the grid shrinks, items at the bottom are pushed up to the next empty cell. If the grid shrinks and not everything will fit, items will be removed from the bottom and the Quest function <code>GridDroppedItems</code> will be called, its single parameter being a stringlist containing the names of the items that were dropped.</p>\n\n",
      "PostDate": "2020-04-22T16:46:24.5847791Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "63fe42aa-dbe2-43a3-86c2-c4eb44a2890b",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, introducing weight would require use of the built-in weight function, or replacing it. But hey, this looks promising! I'll have a play around when work finishes.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, introducing weight would require use of the built-in weight function, or replacing it. But hey, this looks promising! I'll have a play around when work finishes.</p>\n\n",
      "PostDate": "2020-04-22T16:52:47.0913124Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a7b8f291-d1e4-4dba-8dca-8b78d07c7973",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've been thinking again about making items take up more than one space as a way of representing weight. It might make the calculations a bit of a headache, but I *think* you could set it up by calculating a bitmask representing the state of the various cells in the grid; and the squares taken up by any given item. Bitwise and will give a quick test for overlaps; and you can give the `droppable` a reference to a function which tests the permissibility of dropping something there.\r\n\r\nI'm not going to start experimenting with the coding now; I haven't done any work yet today. But it's nice to realise that something like this could be done in a simpler way than I expected.",
      "EditableFormat": "markdown",
      "HTML": "<p>I've been thinking again about making items take up more than one space as a way of representing weight. It might make the calculations a bit of a headache, but I <em>think</em> you could set it up by calculating a bitmask representing the state of the various cells in the grid; and the squares taken up by any given item. Bitwise and will give a quick test for overlaps; and you can give the <code>droppable</code> a reference to a function which tests the permissibility of dropping something there.</p>\n<p>I'm not going to start experimenting with the coding now; I haven't done any work yet today. But it's nice to realise that something like this could be done in a simpler way than I expected.</p>\n\n",
      "PostDate": "2020-04-22T18:09:09.7904945Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b9fe7213-cb73-4404-9c17-4e42ae9f69d1",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mm! It's not something I'm personally interested in pursuing, but the more ways this new inventory system can be used, the better!\r\n\r\nOh, there was one other functionality I thought of - multiple tabs for the inventory. Part of the idea of this was to save space, after all, in games with large inventories - letting the grid expand too far would defeat that purpose. To use Final Fantasy 14's inventory system as an example;\r\n\r\nhttps://media.discordapp.net/attachments/696878380682838106/701470357487353957/06a7c408e7903672d9c43a6a23868140.png\r\n\r\nTabs at the top to change the currently displayed page, with any slots past a grid size of 25 starting and expanding a new grid on page 2. Likewise, if that number dropped below 26, it would remove or gray out the 2nd tab until it's needed again. I imagine this would be bloody tricky, though.\r\n\r\nCould have a tab dedicated to Key Items, too, for separate storage. Important gear that shouldn't leave the character, quest objects, etc.\r\n\r\nCome to think of it... maybe that could be as simple as constraining things so only 25 cells are shown at once, scroll is locked, and hitting tab 2 scrolls it down to the next position, equally spaced? I dunno if I'm explaining that well.",
      "EditableFormat": "markdown",
      "HTML": "<p>Mm! It's not something I'm personally interested in pursuing, but the more ways this new inventory system can be used, the better!</p>\n<p>Oh, there was one other functionality I thought of - multiple tabs for the inventory. Part of the idea of this was to save space, after all, in games with large inventories - letting the grid expand too far would defeat that purpose. To use Final Fantasy 14's inventory system as an example;</p>\n<p>https://media.discordapp.net/attachments/696878380682838106/701470357487353957/06a7c408e7903672d9c43a6a23868140.png</p>\n<p>Tabs at the top to change the currently displayed page, with any slots past a grid size of 25 starting and expanding a new grid on page 2. Likewise, if that number dropped below 26, it would remove or gray out the 2nd tab until it's needed again. I imagine this would be bloody tricky, though.</p>\n<p>Could have a tab dedicated to Key Items, too, for separate storage. Important gear that shouldn't leave the character, quest objects, etc.</p>\n<p>Come to think of it... maybe that could be as simple as constraining things so only 25 cells are shown at once, scroll is locked, and hitting tab 2 scrolls it down to the next position, equally spaced? I dunno if I'm explaining that well.</p>\n\n",
      "PostDate": "2020-04-22T18:15:12.3628847Z",
      "LastEditDate": "2020-04-22T19:17:44.5653918Z",
      "link": null
    },
    {
      "PostId": "8d21fdcb-6e8f-4b38-909a-6564975f9f87",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alrighty! Looking to test the two new functions, but up until now I've been using the UI Ini compressed scripts (except for the turn script creation, which I've done separately). I'd need to compress the new scripts in the same way, so...\r\n\r\nAlternately, you advised adding the js into a file, the css into a file and the Jquery touchpunch thing and adding it to the game, instead of doing it through the UI ini script. I'll have to do that to insert the two new functions, but I'm still not clear how you do that. Is it as simple as having the .js files available in the folder, then calling them as normal with the transcript and ``JS.initialiseGridInventory (style)``? Probably a blitheringly obvious question, but if Quest has documentation on using external JS I've not found it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Alrighty! Looking to test the two new functions, but up until now I've been using the UI Ini compressed scripts (except for the turn script creation, which I've done separately). I'd need to compress the new scripts in the same way, so...</p>\n<p>Alternately, you advised adding the js into a file, the css into a file and the Jquery touchpunch thing and adding it to the game, instead of doing it through the UI ini script. I'll have to do that to insert the two new functions, but I'm still not clear how you do that. Is it as simple as having the .js files available in the folder, then calling them as normal with the transcript and <code>JS.initialiseGridInventory (style)</code>? Probably a blitheringly obvious question, but if Quest has documentation on using external JS I've not found it.</p>\n\n",
      "PostDate": "2020-04-22T22:19:12.1541156Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0947f9ca-1877-4ad7-bbc9-48bea4e1b12b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't actually know. I have to use the web editor because the desktop one doesn't run on linux; and the web editor also doesn't allow external .js files.\r\n\r\nI know I've seen it mentioned on the forum before that you can add JS files in the desktop editor, but the relevant parts of the documentation seem to be 404 right now.\r\n\r\nAnother way to do it, if you prefer, is to add an attribute to the game containing the code, so you can just do `JS.eval(game.initjs)` or similar. Text attributes are allowed to contain line breaks, so you can include the full script that way without needing to compress it. (`JS.eval` has no problem with values containing multiple lines; it's only the script editor that doesn't like them).",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't actually know. I have to use the web editor because the desktop one doesn't run on linux; and the web editor also doesn't allow external .js files.</p>\n<p>I know I've seen it mentioned on the forum before that you can add JS files in the desktop editor, but the relevant parts of the documentation seem to be 404 right now.</p>\n<p>Another way to do it, if you prefer, is to add an attribute to the game containing the code, so you can just do <code>JS.eval(game.initjs)</code> or similar. Text attributes are allowed to contain line breaks, so you can include the full script that way without needing to compress it. (<code>JS.eval</code> has no problem with values containing multiple lines; it's only the script editor that doesn't like them).</p>\n\n",
      "PostDate": "2020-04-22T22:38:10.3598192Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "90e5e698-6158-4c8e-bdde-30d9dd2ebf62",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would have the take the full code and replace every break with a ``<br>``, then? Am I understanding correctly? Strings don't let you copy in existing line breaks and such, from my experience.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would have the take the full code and replace every break with a <code>&lt;br&gt;</code>, then? Am I understanding correctly? Strings don't let you copy in existing line breaks and such, from my experience.</p>\n\n",
      "PostDate": "2020-04-23T13:41:30.2974237Z",
      "LastEditDate": "2020-04-23T13:42:00.6797409Z",
      "link": null
    },
    {
      "PostId": "9169ebf2-a44c-45ff-8cf2-9648559fdc20",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(Edit: missed a backtick)\r\nIt's been on my mind how to make an object take up more than one space. And I think that giving it a bitmask attribute is the obvious way to do it. Generating that attribute would be a little fiddly, but not too hard.\r\n\r\n<details><summary>I didn't expect this code to come out so big…</summary>\r\nSo… tweaking 'intersect' so that when you're dragging an item that covers more than one slot in the grid, it triggers the 'drop' function on the top left square it covers (with a small offset):\r\n\r\n```\r\nvar original_intersect = $.ui.intersect;\r\n$.ui.intersect = function (item, slot, mode) {\r\n  if (mode == \"topleft\") {\r\n    var offsetx = $(item).offset().left + 12 - $(slot).offset().left;\r\n    var offsety = $(item).offset().top + 12 - $(slot).offset().top;\r\n    return (offsetx >= 0 && offsetx < $(slot).width() && offsety >= 0 && offsety < $(slot).height());\r\n  } else {\r\n    original_intersect.call(this, item, slot, mode);\r\n  }\r\n}\r\n```\r\n\r\nThen when we set up the droppable, we can do:\r\n```\r\ntolerance: \"topleft\",\r\naccept: function (ui) {\r\n  var item = ui.draggable;\r\n  // if dropping the item here would have part of it going off the edge of the grid, reject it\r\n  if (item.data('grid-width') + (slot.data('slotnumber') % 5) >= 6) { return false; }\r\n  if (item.data('grid-height') + (slot.data('slotnumber) / 5) >= 6) { return false; }\r\n  // Otherwise:\r\n  var targetcells = item.data('grid-layout') << slot.data('slotnumber');\r\n  var occupiedcells;\r\n  var fixedcells'\r\n  // loop over all *other* items in the inventory.\r\n  $('.igrid-item').not(ui.draggable).each(function () {\r\n    // if found item takes up more than one space\r\n    if ($(this).data('grid-shape') > 1) {\r\n      // if the found item is overlapped by the potential drop position\r\n      if (($(this).data('grid-layout') << $(this).parent('.igrid-slot').data('slotnumber')) & targetcells) {\r\n        occupiedcells = occupiedcells | ($(this).data('grid-layout') << $(this).parent('.igrid-slot').data('slotnumber'));\r\n      } else {\r\n        fixedcells = fixedcells | ($(this).data('grid-layout') << $(this).parent('.igrid-slot').data('slotnumber'));\r\n      }\r\n    }\r\n  });\r\n  // occupiedcells is now the grid of cells occupied by items that we would have to move in order to drop here\r\n  // and fixedcells is the grid of cells occupied by other objects\r\n  // So: Could we move all of those items back to where the dragged item came from?\r\n  if (occupiedcells) {\r\n    var moveby = item.parent('.igrid-cell').data('slotnumber') - slot.data('slotnumber');\r\n\r\n    if (moveby > 0 && occupiedcells >= (1 << (25-moveby))) { return false; } // move off the bottom of the grid\r\n    if (moveby < 0 && occupiedcells % (1 << -moveby)) { return false; } // move off the top of the grid\r\n\r\n    // Check if any of those objects would collide with some other object:\r\n    if ((occupiedcells << moveby) & fixedcells) { return false; }\r\n\r\n    // Or if this new position collides with the item we originally dragged:\r\n    if ((occupiedcells << moveby) & (item.data('grid-shape') << slot.data('slotnumber'))) { return false; }\r\n\r\n    // if it's moving horizontally, check we're not sliding over the edge\r\n    if (moveby % 5) {\r\n      // quickly make a mask for the first column of the grid - is there a quicker way?\r\n      my column; for (i=0 ; i<5 ; i++) { column = column + 32**i; }\r\n      if (((occupiedcells << moveby) & column) && ((occupiedcells << moveby) & (column << 4))) {return false;}\r\n    }\r\n  }\r\n  // if we haven't returned yet, it's okay to drag that item here\r\n  return true;\r\n},\r\ndrop: function(ev, ui) {\r\n  var item = ui.draggable;\r\n  var oldpos = item.parent('.igrid-slot').data('slotnumber');\r\n  var newpos = slot.data('slotnumber');\r\n  item.appendTo(slot);\r\n  var dropped_into = item.data('grid-shape') << newpos;\r\n  var remaining = $();\r\n  // find items that overlap the one we just moved;\r\n  $('.igrid-item').not(item).each (function () {\r\n    var pos = $(this).parent('.igrid-slot').data('slotnumber');\r\n    if (($(this).data('grid-shape') << pos) & dropped_into) {\r\n      $(this).appendTo($('#igrid-cell-'+(pos + oldpos - newpos)));\r\n    }\r\n  });\r\n\r\n  // After moving, we need to make sure there are no overlapping items. Because of the 'accept' script, we know that this will only be an issue for single-square items\r\n  var fullcells = 0;\r\n  var searchpos = 0;\r\n  $('.igrid-item').filter(function () {\r\n    if ($(this).data('grid-shape') == 1) {\r\n      return true;\r\n    } else {\r\n      fullcells = fullcells | ($(this).data('grid-shape') << $(this).parent('igrid-slot').data('slotnumber'));\r\n      return false;\r\n    }\r\n  }).filter(function() {\r\n    if (fullcells & (1 << $(this).parent('.igrid-slot').data('slotnumber'))) {\r\n      return true;\r\n    } else {\r\n      fullcells = fullcells | (1 << $(this).parent('igrid-slot').data('slotnumber'));\r\n      return false;\r\n    }\r\n  }).each(function () {\r\n    // find the first empty cell\r\n    while((1 << searchpos) & fullcells) { searchpos++; }\r\n    fullcells = fullcells | (1 << searchpos);\r\n    $(this).appendTo('#igrid-slot-'+searchpos);\r\n  });\r\n} \r\n```\r\n(assuming that items have data items `grid-width`, `grid-height`, and `grid-shape`; and that slots have data `slotnumber`)\r\n\r\nYou would need to have all items absolutely positioned within their cells, and cells set to `overflow: visible`, but that shouldn't cause any issues.\r\n\r\nAnd yes, I know I have way too many parentheses in there. I can never remember the operator precedence.\r\n</details>\r\n\r\n(When you try to drag an item, any items overlapping its new position will move to overlap its old position instead. If this doesn't work, it'll try moving any 1×1 items out of the way, and put them back in the first empty space after moving everything else. This works because moving items around doesn't increase the number of spaces in use, so there will always be space for those 1×1s)\r\n\r\nWith something like this, you could have large/heavy items take up more than one space in the grid… and still allow players to rearrange them without it being a total pain.\r\n\r\n<hr style=\"border: 1px dotted navy\">\r\n\r\n> I would have the take the full code and replace every break with a `<br>`, then? Am I understanding correctly? Strings don't let you copy in existing line breaks and such, from my experience.\r\n\r\nAs I understand it, strings are quite capable of containing line breaks. The only problem with them is:\r\n* `msg(somestring)` will not show line breaks - because all whitespace (tabs, line breaks, spaces) is treated as a single space when a web browser displays it. If you wanted to *display the code to the player* you'd need to add `<br/>`s to it, but not for running it.\r\n* The web editor doesn't allow you to add line breaks in an attribute, except for a room description (in which case it converts them to `<br/>` automatically, mangling your code). I don't know if the desktop editor also has this limitation. If it does, you'd have to use full code view to put the script into an attribute. (I know that this will work, because I've seen it done this way when looking at the source of other games)\r\n     * In full code view, any attribute (string or script) which contains a `<` or `&` character must start with `<![CDATA[` and end with `]]>`. These aren't part of the attribute; they're just to tell the XML parser that this is *character data* and not XML.",
      "EditableFormat": "markdown",
      "HTML": "<p>(Edit: missed a backtick)<br>\nIt's been on my mind how to make an object take up more than one space. And I think that giving it a bitmask attribute is the obvious way to do it. Generating that attribute would be a little fiddly, but not too hard.</p>\n<details><summary>I didn't expect this code to come out so big…</summary>\nSo… tweaking 'intersect' so that when you're dragging an item that covers more than one slot in the grid, it triggers the 'drop' function on the top left square it covers (with a small offset):\n<pre><code>var original_intersect = $.ui.intersect;\n$.ui.intersect = function (item, slot, mode) {\n  if (mode == \"topleft\") {\n    var offsetx = $(item).offset().left + 12 - $(slot).offset().left;\n    var offsety = $(item).offset().top + 12 - $(slot).offset().top;\n    return (offsetx &gt;= 0 &amp;&amp; offsetx &lt; $(slot).width() &amp;&amp; offsety &gt;= 0 &amp;&amp; offsety &lt; $(slot).height());\n  } else {\n    original_intersect.call(this, item, slot, mode);\n  }\n}\n</code></pre>\n<p>Then when we set up the droppable, we can do:</p>\n<pre><code>tolerance: \"topleft\",\naccept: function (ui) {\n  var item = ui.draggable;\n  // if dropping the item here would have part of it going off the edge of the grid, reject it\n  if (item.data('grid-width') + (slot.data('slotnumber') % 5) &gt;= 6) { return false; }\n  if (item.data('grid-height') + (slot.data('slotnumber) / 5) &gt;= 6) { return false; }\n  // Otherwise:\n  var targetcells = item.data('grid-layout') &lt;&lt; slot.data('slotnumber');\n  var occupiedcells;\n  var fixedcells'\n  // loop over all *other* items in the inventory.\n  $('.igrid-item').not(ui.draggable).each(function () {\n    // if found item takes up more than one space\n    if ($(this).data('grid-shape') &gt; 1) {\n      // if the found item is overlapped by the potential drop position\n      if (($(this).data('grid-layout') &lt;&lt; $(this).parent('.igrid-slot').data('slotnumber')) &amp; targetcells) {\n        occupiedcells = occupiedcells | ($(this).data('grid-layout') &lt;&lt; $(this).parent('.igrid-slot').data('slotnumber'));\n      } else {\n        fixedcells = fixedcells | ($(this).data('grid-layout') &lt;&lt; $(this).parent('.igrid-slot').data('slotnumber'));\n      }\n    }\n  });\n  // occupiedcells is now the grid of cells occupied by items that we would have to move in order to drop here\n  // and fixedcells is the grid of cells occupied by other objects\n  // So: Could we move all of those items back to where the dragged item came from?\n  if (occupiedcells) {\n    var moveby = item.parent('.igrid-cell').data('slotnumber') - slot.data('slotnumber');\n\n    if (moveby &gt; 0 &amp;&amp; occupiedcells &gt;= (1 &lt;&lt; (25-moveby))) { return false; } // move off the bottom of the grid\n    if (moveby &lt; 0 &amp;&amp; occupiedcells % (1 &lt;&lt; -moveby)) { return false; } // move off the top of the grid\n\n    // Check if any of those objects would collide with some other object:\n    if ((occupiedcells &lt;&lt; moveby) &amp; fixedcells) { return false; }\n\n    // Or if this new position collides with the item we originally dragged:\n    if ((occupiedcells &lt;&lt; moveby) &amp; (item.data('grid-shape') &lt;&lt; slot.data('slotnumber'))) { return false; }\n\n    // if it's moving horizontally, check we're not sliding over the edge\n    if (moveby % 5) {\n      // quickly make a mask for the first column of the grid - is there a quicker way?\n      my column; for (i=0 ; i&lt;5 ; i++) { column = column + 32**i; }\n      if (((occupiedcells &lt;&lt; moveby) &amp; column) &amp;&amp; ((occupiedcells &lt;&lt; moveby) &amp; (column &lt;&lt; 4))) {return false;}\n    }\n  }\n  // if we haven't returned yet, it's okay to drag that item here\n  return true;\n},\ndrop: function(ev, ui) {\n  var item = ui.draggable;\n  var oldpos = item.parent('.igrid-slot').data('slotnumber');\n  var newpos = slot.data('slotnumber');\n  item.appendTo(slot);\n  var dropped_into = item.data('grid-shape') &lt;&lt; newpos;\n  var remaining = $();\n  // find items that overlap the one we just moved;\n  $('.igrid-item').not(item).each (function () {\n    var pos = $(this).parent('.igrid-slot').data('slotnumber');\n    if (($(this).data('grid-shape') &lt;&lt; pos) &amp; dropped_into) {\n      $(this).appendTo($('#igrid-cell-'+(pos + oldpos - newpos)));\n    }\n  });\n\n  // After moving, we need to make sure there are no overlapping items. Because of the 'accept' script, we know that this will only be an issue for single-square items\n  var fullcells = 0;\n  var searchpos = 0;\n  $('.igrid-item').filter(function () {\n    if ($(this).data('grid-shape') == 1) {\n      return true;\n    } else {\n      fullcells = fullcells | ($(this).data('grid-shape') &lt;&lt; $(this).parent('igrid-slot').data('slotnumber'));\n      return false;\n    }\n  }).filter(function() {\n    if (fullcells &amp; (1 &lt;&lt; $(this).parent('.igrid-slot').data('slotnumber'))) {\n      return true;\n    } else {\n      fullcells = fullcells | (1 &lt;&lt; $(this).parent('igrid-slot').data('slotnumber'));\n      return false;\n    }\n  }).each(function () {\n    // find the first empty cell\n    while((1 &lt;&lt; searchpos) &amp; fullcells) { searchpos++; }\n    fullcells = fullcells | (1 &lt;&lt; searchpos);\n    $(this).appendTo('#igrid-slot-'+searchpos);\n  });\n} \n</code></pre>\n<p>(assuming that items have data items <code>grid-width</code>, <code>grid-height</code>, and <code>grid-shape</code>; and that slots have data <code>slotnumber</code>)</p>\n<p>You would need to have all items absolutely positioned within their cells, and cells set to <code>overflow: visible</code>, but that shouldn't cause any issues.</p>\n<p>And yes, I know I have way too many parentheses in there. I can never remember the operator precedence.</p>\n</details>\n<p>(When you try to drag an item, any items overlapping its new position will move to overlap its old position instead. If this doesn't work, it'll try moving any 1×1 items out of the way, and put them back in the first empty space after moving everything else. This works because moving items around doesn't increase the number of spaces in use, so there will always be space for those 1×1s)</p>\n<p>With something like this, you could have large/heavy items take up more than one space in the grid… and still allow players to rearrange them without it being a total pain.</p>\n<hr style=\"border: 1px dotted navy\">\n<blockquote>\n<p>I would have the take the full code and replace every break with a <code>&lt;br&gt;</code>, then? Am I understanding correctly? Strings don't let you copy in existing line breaks and such, from my experience.</p>\n</blockquote>\n<p>As I understand it, strings are quite capable of containing line breaks. The only problem with them is:</p>\n<ul>\n<li><code>msg(somestring)</code> will not show line breaks - because all whitespace (tabs, line breaks, spaces) is treated as a single space when a web browser displays it. If you wanted to <em>display the code to the player</em> you'd need to add <code>&lt;br/&gt;</code>s to it, but not for running it.</li>\n<li>The web editor doesn't allow you to add line breaks in an attribute, except for a room description (in which case it converts them to <code>&lt;br/&gt;</code> automatically, mangling your code). I don't know if the desktop editor also has this limitation. If it does, you'd have to use full code view to put the script into an attribute. (I know that this will work, because I've seen it done this way when looking at the source of other games)\n<ul>\n<li>In full code view, any attribute (string or script) which contains a <code>&lt;</code> or <code>&amp;</code> character must start with <code>&lt;![CDATA[</code> and end with <code>]]&gt;</code>. These aren't part of the attribute; they're just to tell the XML parser that this is <em>character data</em> and not XML.</li>\n</ul>\n</li>\n</ul>\n\n",
      "PostDate": "2020-04-23T15:09:30.2609753Z",
      "LastEditDate": "2020-04-23T15:14:50.9980668Z",
      "link": null
    },
    {
      "PostId": "7b162777-b95e-400b-b4e9-42049629907c",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah! See, I tried that earlier; I made an attribute, then tried to put the whole script into said attribute in code view, and it threw an error at me about unexpected characters, shunting me back to code view until I removed it. But adding in the ``<![CDATA[ -code- ]]>`` means it's no longer screaming at me. Alright, now to try and actually call it up as before, just with ``JS.eval(game.inventoryinitialize)``... (That's what I called mine.)\r\n\r\n... Hmm, no dice. I must be missing something. The full code now displays in the attribute's string, with line breaks, so that's a start...\r\n\r\nedit; sorry, to be more useful than 'no dice', nothing initialized. The inventory panel remains as vanilla.\r\n\r\n(Alternately, if you know where to input the Tooltip and Gridsetsize in compressed form into the existing compressed code, that would work. I'm not sure if you did that compression by hand, or fed it through something like uglifyjs?)",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah! See, I tried that earlier; I made an attribute, then tried to put the whole script into said attribute in code view, and it threw an error at me about unexpected characters, shunting me back to code view until I removed it. But adding in the <code>&lt;![CDATA[ -code- ]]&gt;</code> means it's no longer screaming at me. Alright, now to try and actually call it up as before, just with <code>JS.eval(game.inventoryinitialize)</code>... (That's what I called mine.)</p>\n<p>... Hmm, no dice. I must be missing something. The full code now displays in the attribute's string, with line breaks, so that's a start...</p>\n<p>edit; sorry, to be more useful than 'no dice', nothing initialized. The inventory panel remains as vanilla.</p>\n<p>(Alternately, if you know where to input the Tooltip and Gridsetsize in compressed form into the existing compressed code, that would work. I'm not sure if you did that compression by hand, or fed it through something like uglifyjs?)</p>\n\n",
      "PostDate": "2020-04-23T15:45:01.8726036Z",
      "LastEditDate": "2020-04-23T15:48:45.982144Z",
      "link": null
    },
    {
      "PostId": "2fb8c454-9dc9-4aa8-8203-4dfbf4f6ec28",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Does it give you any errors on the console? I'm curious why that isn't working.\r\n\r\nIn the past, I've set up a system so that I can easily put javascript in Quest using the web editor. I set it up so that any rooms with the alias \"JAVASCRIPT\" would have their descriptions treated as JS.\r\nThe UI Initialisation script to do that was:\r\n```\r\nforeach (room, FilterByAttribute (AllObjects(), \"alias\", \"JAVASCRIPT\")) {\r\n  code = room.description\r\n  code = Replace (code, \"<br>\", Chr(13))\r\n  code = Replace (code, \"<br/>\", Chr(13))\r\n  code = Replace (code, \"«\", \"<\")\r\n  code = Replace (code, \"»\", \">\")\r\n  code = Replace (code, \"§\", \"&\")\r\n  fixedcode = \"\"\r\n  foreach (line, Split(code, Chr(13))) {\r\n    pos = Instr (line, \"//\")\r\n    if (pos = 0) {\r\n      fixedcode = fixedcode + line\r\n    }\r\n    else {\r\n      fixedcode = fixedcode + Left (line, pos - 1)\r\n    }\r\n  }\r\n  JS.eval (fixedcode)\r\n}\r\n```\r\n\r\nThat's a rather convoluted way to do it; but makes it easier to do small changes while testing something. Just means that I have to change `<`, `>`, and `&` to `«`, `»`, and `§` respectively to stop the web editor thinking they're HTML when saving the description.\r\n\r\n> (Alternately, if you know where to input the Tooltip and Gridsetsize in compressed form into the existing compressed code, that would work. I'm not sure if you did that compression by hand, or fed it through something like uglifyjs?)\r\n\r\nI use jscompress; I expect they're all pretty similar. There's nothing to stop you editing the uncompressed code and then compressing it yourself. (Just remember to search and replace if you're going to put it into a Quest script; any `\"` and `\\` characters in the compressed output will need to be turned into `\\\"` and `\\\\` respectively.",
      "EditableFormat": "markdown",
      "HTML": "<p>Does it give you any errors on the console? I'm curious why that isn't working.</p>\n<p>In the past, I've set up a system so that I can easily put javascript in Quest using the web editor. I set it up so that any rooms with the alias \"JAVASCRIPT\" would have their descriptions treated as JS.<br>\nThe UI Initialisation script to do that was:</p>\n<pre><code>foreach (room, FilterByAttribute (AllObjects(), \"alias\", \"JAVASCRIPT\")) {\n  code = room.description\n  code = Replace (code, \"&lt;br&gt;\", Chr(13))\n  code = Replace (code, \"&lt;br/&gt;\", Chr(13))\n  code = Replace (code, \"«\", \"&lt;\")\n  code = Replace (code, \"»\", \"&gt;\")\n  code = Replace (code, \"§\", \"&amp;\")\n  fixedcode = \"\"\n  foreach (line, Split(code, Chr(13))) {\n    pos = Instr (line, \"//\")\n    if (pos = 0) {\n      fixedcode = fixedcode + line\n    }\n    else {\n      fixedcode = fixedcode + Left (line, pos - 1)\n    }\n  }\n  JS.eval (fixedcode)\n}\n</code></pre>\n<p>That's a rather convoluted way to do it; but makes it easier to do small changes while testing something. Just means that I have to change <code>&lt;</code>, <code>&gt;</code>, and <code>&amp;</code> to <code>«</code>, <code>»</code>, and <code>§</code> respectively to stop the web editor thinking they're HTML when saving the description.</p>\n<blockquote>\n<p>(Alternately, if you know where to input the Tooltip and Gridsetsize in compressed form into the existing compressed code, that would work. I'm not sure if you did that compression by hand, or fed it through something like uglifyjs?)</p>\n</blockquote>\n<p>I use jscompress; I expect they're all pretty similar. There's nothing to stop you editing the uncompressed code and then compressing it yourself. (Just remember to search and replace if you're going to put it into a Quest script; any <code>\"</code> and <code>\\</code> characters in the compressed output will need to be turned into <code>\\\"</code> and <code>\\\\</code> respectively.</p>\n\n",
      "PostDate": "2020-04-23T16:09:05.8000279Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7dd52e34-7360-4cf5-bb23-beadeec2b571",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Let's see, errors... I got;\r\nUncaught SyntaxError: Unexpected end of input (UI:1)\r\nUncaught ReferenceError: updateInventoryIcons is not defined (about:blank:1)\r\n\r\nAnd ah, ok, that makes the prospect far less daunting. Going to try that now!",
      "EditableFormat": "markdown",
      "HTML": "<p>Let's see, errors... I got;<br>\nUncaught SyntaxError: Unexpected end of input (UI:1)<br>\nUncaught ReferenceError: updateInventoryIcons is not defined (about:blank:1)</p>\n<p>And ah, ok, that makes the prospect far less daunting. Going to try that now!</p>\n\n",
      "PostDate": "2020-04-23T16:25:22.3560298Z",
      "LastEditDate": "2020-04-23T16:29:50.6025214Z",
      "link": null
    },
    {
      "PostId": "9ef9d7e3-95c6-4549-be53-a74c5c142491",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "-- Trying to compress \r\n```\r\nfunction setTooltip (item, name) {\r\n  if (item.children('.floaty-tooltip').length) {\r\n    item.children('.floaty-tooltip').text(name);\r\n  } else {\r\n    item.css({overflow: 'visible', position: 'relative'});\r\n    var tooltip = $('<div>').appendTo(item).addClass('floaty-tooltip').css({position: 'absolute', top: '20px', right: '20px', padding: 7, backgroundColor: 'black', color: 'white', border: '5px double white'}).text(name).hide();\r\n    item.hover (\r\n      function () { tooltip.show();},\r\n      function () { tooltip.hide();}\r\n    );\r\n    });\r\n  }\r\n}\r\n```\r\nalone, throws up; ``Unexpected token: punc «)» (line: 11, col: 5)``. Similar thing with the gridset script, so I imagine this is the result of these being snippets intended for insertion into larger scripts with prerequisites already implemented. You said that the tooltip one needs to go into the update list, so... where exactly would I place it within this section of the uncompressed code?\r\n\r\n```\r\nvar originalUpdateList = updateList;\r\n  updateList = function(name, listdata) {\r\n    if (name == 'inventory') {\r\n      var oldItems = $('#inventoryAccordion .igrid-item');\r\n      var pending = $();\r\n      $.each(listdata, function(key, value) {\r\n        var objdata = JSON.parse(value);\r\n        var id = objdata['ElementId'].replace(/\\s/g, '-');\r\n        var item = $('#igrid-item-' + id);\r\n        if (item.length) {\r\n          oldItems = oldItems.not(item);\r\n        } else {\r\n          item = addItem(id, grid_icons[id] || '0,0');\r\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\r\n          if (item.parent()\r\n            .length == 0) {\r\n            pending = pending.add(item);\r\n          }\r\n        }\r\n        if (objdata['Text']) {\r\n          item.prop('title', objdata['Text']);\r\n        }\r\n        if (objdata['Verbs']) {\r\n          item.data('verbs', objdata['Verbs'])\r\n            .removeClass('disabled');\r\n        } else {\r\n          item.addClass('disabled');\r\n        }\r\n      });\r\n      oldItems.remove();\r\n      pending.each(function(index, item) {\r\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\r\n        if (slot.length == 0) {\r\n          slot = addCells(5, $('#inventoryAccordion'));\r\n        }\r\n        slot.first()\r\n          .append(item);\r\n      });\r\n      saveGridData();\r\n    } else {\r\n      originalUpdateList(name, listdata);\r\n    }\r\n  };\r\n});\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>-- Trying to compress</p>\n<pre><code>function setTooltip (item, name) {\n  if (item.children('.floaty-tooltip').length) {\n    item.children('.floaty-tooltip').text(name);\n  } else {\n    item.css({overflow: 'visible', position: 'relative'});\n    var tooltip = $('&lt;div&gt;').appendTo(item).addClass('floaty-tooltip').css({position: 'absolute', top: '20px', right: '20px', padding: 7, backgroundColor: 'black', color: 'white', border: '5px double white'}).text(name).hide();\n    item.hover (\n      function () { tooltip.show();},\n      function () { tooltip.hide();}\n    );\n    });\n  }\n}\n</code></pre>\n<p>alone, throws up; <code>Unexpected token: punc «)» (line: 11, col: 5)</code>. Similar thing with the gridset script, so I imagine this is the result of these being snippets intended for insertion into larger scripts with prerequisites already implemented. You said that the tooltip one needs to go into the update list, so... where exactly would I place it within this section of the uncompressed code?</p>\n<pre><code>var originalUpdateList = updateList;\n  updateList = function(name, listdata) {\n    if (name == 'inventory') {\n      var oldItems = $('#inventoryAccordion .igrid-item');\n      var pending = $();\n      $.each(listdata, function(key, value) {\n        var objdata = JSON.parse(value);\n        var id = objdata['ElementId'].replace(/\\s/g, '-');\n        var item = $('#igrid-item-' + id);\n        if (item.length) {\n          oldItems = oldItems.not(item);\n        } else {\n          item = addItem(id, grid_icons[id] || '0,0');\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\n          if (item.parent()\n            .length == 0) {\n            pending = pending.add(item);\n          }\n        }\n        if (objdata['Text']) {\n          item.prop('title', objdata['Text']);\n        }\n        if (objdata['Verbs']) {\n          item.data('verbs', objdata['Verbs'])\n            .removeClass('disabled');\n        } else {\n          item.addClass('disabled');\n        }\n      });\n      oldItems.remove();\n      pending.each(function(index, item) {\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\n        if (slot.length == 0) {\n          slot = addCells(5, $('#inventoryAccordion'));\n        }\n        slot.first()\n          .append(item);\n      });\n      saveGridData();\n    } else {\n      originalUpdateList(name, listdata);\n    }\n  };\n});\n</code></pre>\n\n",
      "PostDate": "2020-04-23T16:37:36.8261809Z",
      "LastEditDate": "2020-04-23T16:42:01.2129214Z",
      "link": null
    },
    {
      "PostId": "b6641129-dcb5-4ef9-a1f8-23ee86a7335f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yep, looks like I've got an extra bracket left over. Presumably I miscounted them when I was typing (as these fragments were written in the forum, off the top of my head). Line 11 (`});`) should be removed, I think.\r\n\r\nI'd put it next to the other top level functions (addItem, addCells, etc.).\r\n\r\nThen call it from `updateList`, adding a line `setTooltip (item, objdata['Text']);` after the `item.prop('title', objdata['Text']);`.\r\n\r\nIf you're seeing the custom tooltip as well as the default one (I didn't check), then you'll want to change all instances of `.prop('title')` to `.data('title')`. (can't just remove them, because the onclick function uses that as the object's name when you click on a verb).\r\n\r\n> Similar thing with the gridset script,\r\n\r\nLooks like I got an extra set of quotes in the selector `:not(.ui-draggable-dragging)`… any more errors with that one?\r\n\r\nOne of the reasons I like jscompress is that if I have a syntax error in my code (missing brackets, missing quotes, or similar), it'll quite often show me where.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yep, looks like I've got an extra bracket left over. Presumably I miscounted them when I was typing (as these fragments were written in the forum, off the top of my head). Line 11 (<code>});</code>) should be removed, I think.</p>\n<p>I'd put it next to the other top level functions (addItem, addCells, etc.).</p>\n<p>Then call it from <code>updateList</code>, adding a line <code>setTooltip (item, objdata['Text']);</code> after the <code>item.prop('title', objdata['Text']);</code>.</p>\n<p>If you're seeing the custom tooltip as well as the default one (I didn't check), then you'll want to change all instances of <code>.prop('title')</code> to <code>.data('title')</code>. (can't just remove them, because the onclick function uses that as the object's name when you click on a verb).</p>\n<blockquote>\n<p>Similar thing with the gridset script,</p>\n</blockquote>\n<p>Looks like I got an extra set of quotes in the selector <code>:not(.ui-draggable-dragging)</code>… any more errors with that one?</p>\n<p>One of the reasons I like jscompress is that if I have a syntax error in my code (missing brackets, missing quotes, or similar), it'll quite often show me where.</p>\n\n",
      "PostDate": "2020-04-23T17:56:49.5268064Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7ffa18a3-47f4-4481-86e3-052d79ee7f7d",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alright! So, going one addition at a time for troubleshooting purposes... I inserted ``setTooltip`` in after ``addCells``, and called it from updateList with the line you provided.\r\n\r\nThe result is promising, but needs tweaking! Namely; https://i.imgur.com/ZdP8mrN.png\r\n\r\nThe name appears nice and visible, but it's confined to within the grid item! Upon clicking on an item to drag it, it's freed from that prison to display properly.",
      "EditableFormat": "markdown",
      "HTML": "<p>Alright! So, going one addition at a time for troubleshooting purposes... I inserted <code>setTooltip</code> in after <code>addCells</code>, and called it from updateList with the line you provided.</p>\n<p>The result is promising, but needs tweaking! Namely; https://i.imgur.com/ZdP8mrN.png</p>\n<p>The name appears nice and visible, but it's confined to within the grid item! Upon clicking on an item to drag it, it's freed from that prison to display properly.</p>\n\n",
      "PostDate": "2020-04-23T19:15:58.656034Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "65e8fa02-c5ec-4e75-ab58-29b95ef059ec",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The name appears nice and visible, but it's confined to within the grid item!\r\n\r\nI thought I'd already commented on that, but I can't see it above.\r\nThe CSS needs to include `overflow: visible` for the item, the cell, and possibly for #inventoryAccordion.\r\n\r\nIn case you haven't come across it yet, the `overflow` attribute controls how a display element behaves when something inside it goes outside its borders.\r\n* `overflow: scroll` - might attempt to resize the object or move its borders; or shrink the inner item to fit, or display a scroll bar, depending on the type of element. <div style=\"display: inline-block; background-color: pink; overflow: scroll; width: 32px;\">scroll scroll</div>\r\n* `overflow: hidden` - hide anything that goes out out bounds <div style=\"display: inline-block; background-color: pink; overflow: hidden; height: 32px; width: 24px;\">hidden hidden</div>\r\n* `overflow: visible` - display the overflowing content anyway <div style=\"display: inline-block; background-color: pink; overflow: visible; height: 32px; width: 24px;\">visible visible</div>\r\n\r\nInitially I suggested `overflow:hidden` on the accordion, to stop it developing scroll bars (which only left enough space for 4 cells per row) when an item was dragged right up to the edge. But with the tooltips, it needs to be `visible` instead; and the cells will need to have the same.\r\n\r\n> Upon clicking on an item to drag it, it's freed from that prison to display properly.\r\n\r\nI assume that's because the item is cloned including the tooltip, moving it outside its cell. But that makes me wonder if there's another issue here. I'm not sure if clicking on the tooltip rather than the item itself would allow you to drag it, or launch the verb menu. And if so, whether the tooltip would fail to disappear when the drag or menu ends.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The name appears nice and visible, but it's confined to within the grid item!</p>\n</blockquote>\n<p>I thought I'd already commented on that, but I can't see it above.<br>\nThe CSS needs to include <code>overflow: visible</code> for the item, the cell, and possibly for #inventoryAccordion.</p>\n<p>In case you haven't come across it yet, the <code>overflow</code> attribute controls how a display element behaves when something inside it goes outside its borders.</p>\n<ul>\n<li><code>overflow: scroll</code> - might attempt to resize the object or move its borders; or shrink the inner item to fit, or display a scroll bar, depending on the type of element. <div style=\"display: inline-block; background-color: pink; overflow: scroll; width: 32px\">scroll scroll</div></li>\n<li><code>overflow: hidden</code> - hide anything that goes out out bounds <div style=\"display: inline-block; background-color: pink; overflow: hidden; height: 32px; width: 24px\">hidden hidden</div></li>\n<li><code>overflow: visible</code> - display the overflowing content anyway <div style=\"display: inline-block; background-color: pink; overflow: visible; height: 32px; width: 24px\">visible visible</div></li>\n</ul>\n<p>Initially I suggested <code>overflow:hidden</code> on the accordion, to stop it developing scroll bars (which only left enough space for 4 cells per row) when an item was dragged right up to the edge. But with the tooltips, it needs to be <code>visible</code> instead; and the cells will need to have the same.</p>\n<blockquote>\n<p>Upon clicking on an item to drag it, it's freed from that prison to display properly.</p>\n</blockquote>\n<p>I assume that's because the item is cloned including the tooltip, moving it outside its cell. But that makes me wonder if there's another issue here. I'm not sure if clicking on the tooltip rather than the item itself would allow you to drag it, or launch the verb menu. And if so, whether the tooltip would fail to disappear when the drag or menu ends.</p>\n\n",
      "PostDate": "2020-04-23T20:32:39.2208177Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d4d9be04-6be5-4517-95d1-8bdd2cf6f020",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Fear not, if you click on the tooltip it picks up the item as normal for dragging. You can click on the tooltip to activate the verb menu, too, but it doesn't seem to cause any abnormal behaviour. I might see about moving the tooltip display either hovering below or above the item so that it can't be interacted with, just in case.\r\n\r\n``setCss (\"#inventoryAccordion\", \"overflow: visible;\")`` is back on for the #inventoryAccordian, as the pane's been resized a bit to accommodate for it now anyway.\r\n\r\n``JS.setCss (\"#igrid-slot\", \"overflow: visible\")``\r\n``JS.setCss (\"#igrid-item-\", \"overflow: visible\")``\r\n-- aren't working, but I no doubt have the names wrong. Picked them out through guesswork from the main code.\r\n\r\nNEVERMIND!\r\n\r\n``JS.setCss (\".igrid-slot\", \"overflow: visible\")`` was the ticket!  Looks like grid item isn't needed, either. Gunna let me food digest, then I'll fiddle with adding the next step, the resize function.\r\n\r\nEdit; Ah. ONE issue I just realized... it was fine with a short .alias, but the box can't expand past the current set size! So a long name gets horribly crushed inside that tiny tooltip. I know there's a command for making it as big as it needs to be, uh... rmm...\r\n\r\nEDIT EDIT; I stand corrected! It's not really long alias', it alias' with spaces in them. All the words jumble into the center of the box, which is only as long as the longest word in the string.",
      "EditableFormat": "markdown",
      "HTML": "<p>Fear not, if you click on the tooltip it picks up the item as normal for dragging. You can click on the tooltip to activate the verb menu, too, but it doesn't seem to cause any abnormal behaviour. I might see about moving the tooltip display either hovering below or above the item so that it can't be interacted with, just in case.</p>\n<p><code>setCss (\"#inventoryAccordion\", \"overflow: visible;\")</code> is back on for the #inventoryAccordian, as the pane's been resized a bit to accommodate for it now anyway.</p>\n<p><code>JS.setCss (\"#igrid-slot\", \"overflow: visible\")</code><br>\n<code>JS.setCss (\"#igrid-item-\", \"overflow: visible\")</code><br>\n-- aren't working, but I no doubt have the names wrong. Picked them out through guesswork from the main code.</p>\n<p>NEVERMIND!</p>\n<p><code>JS.setCss (\".igrid-slot\", \"overflow: visible\")</code> was the ticket!  Looks like grid item isn't needed, either. Gunna let me food digest, then I'll fiddle with adding the next step, the resize function.</p>\n<p>Edit; Ah. ONE issue I just realized... it was fine with a short .alias, but the box can't expand past the current set size! So a long name gets horribly crushed inside that tiny tooltip. I know there's a command for making it as big as it needs to be, uh... rmm...</p>\n<p>EDIT EDIT; I stand corrected! It's not really long alias', it alias' with spaces in them. All the words jumble into the center of the box, which is only as long as the longest word in the string.</p>\n\n",
      "PostDate": "2020-04-23T21:44:03.5400458Z",
      "LastEditDate": "2020-04-23T23:17:50.4849085Z",
      "link": null
    },
    {
      "PostId": "ff28dd33-f670-4d6d-a3a9-a4ba312e816f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Looks like grid item isn't needed, either. \r\n\r\nThe setTooltip function already sets the item it is attaching the tip on to overflow: visible.\r\n\r\n> EDIT EDIT; I stand corrected! It's not really long alias', it alias' with spaces in them. All the words jumble into the center of the box, which is only as long as the longest word in the string.\r\n\r\nMy second guess would be to use non-breaking spaces. Yhe sequence `&nbsp;` is rendered as a space, but is considered to be letter for the purpose of word-wrapping. So in `setTooltip` (before the rest of the function), I think you could add a line `name = name.replace(/\\s+/, \"&nbsp;\");` - although you would then have to change both uses of `.text(name)` within that function to `.html(name)`.\r\n\r\n(My first guess was that you can control wrapping with CSS. But there's a bunch of different attributes for it, I can't remember which is which, and I'm not sure if some of them were added in the last 5 years)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Looks like grid item isn't needed, either.</p>\n</blockquote>\n<p>The setTooltip function already sets the item it is attaching the tip on to overflow: visible.</p>\n<blockquote>\n<p>EDIT EDIT; I stand corrected! It's not really long alias', it alias' with spaces in them. All the words jumble into the center of the box, which is only as long as the longest word in the string.</p>\n</blockquote>\n<p>My second guess would be to use non-breaking spaces. Yhe sequence <code>&amp;nbsp;</code> is rendered as a space, but is considered to be letter for the purpose of word-wrapping. So in <code>setTooltip</code> (before the rest of the function), I think you could add a line <code>name = name.replace(/\\s+/, \"&amp;nbsp;\");</code> - although you would then have to change both uses of <code>.text(name)</code> within that function to <code>.html(name)</code>.</p>\n<p>(My first guess was that you can control wrapping with CSS. But there's a bunch of different attributes for it, I can't remember which is which, and I'm not sure if some of them were added in the last 5 years)</p>\n\n",
      "PostDate": "2020-04-24T00:34:41.2427161Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "85e80ec5-0f3e-4b4f-ac90-c028d0f62c2f",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Abusing ``&nbsp;``!... half worked.\r\n\r\nhttps://i.imgur.com/xw4k3ce.png\r\n\r\nIt only works on the first space in a string. The second space doesn't work, at which point things start to wrap back around... so I might need to throw in a word-wrap css thing.\r\n\r\nhttps://i.imgur.com/ILd0n9B.png\r\n\r\nAlso, I just realized that upon doing anything with an object - look, use, etc - the tooltips of an item render in the top right of the grid window for some reason, also pictured. However, this inexplicably fixes the spacing issue!?\r\n\r\nSo, the turnscript fires, fixes the tooltips, but also glues their position up to the top right of the grid.\r\n\r\nJust tested the prior code - same thing. The tooltip is fixed, spacing and word-wrap wise, by the turnscript... but it moves and glues the position. They'll still disappear and trigger as normal when hovering over a grid item, but they'll appear up in the top right.\r\n\r\nDisabling the turnscript means the spacing fix no longer happens on movement/action, but the top-right glueing thing doesn't happen.",
      "EditableFormat": "markdown",
      "HTML": "<p>Abusing <code>&amp;nbsp;</code>!... half worked.</p>\n<p>https://i.imgur.com/xw4k3ce.png</p>\n<p>It only works on the first space in a string. The second space doesn't work, at which point things start to wrap back around... so I might need to throw in a word-wrap css thing.</p>\n<p>https://i.imgur.com/ILd0n9B.png</p>\n<p>Also, I just realized that upon doing anything with an object - look, use, etc - the tooltips of an item render in the top right of the grid window for some reason, also pictured. However, this inexplicably fixes the spacing issue!?</p>\n<p>So, the turnscript fires, fixes the tooltips, but also glues their position up to the top right of the grid.</p>\n<p>Just tested the prior code - same thing. The tooltip is fixed, spacing and word-wrap wise, by the turnscript... but it moves and glues the position. They'll still disappear and trigger as normal when hovering over a grid item, but they'll appear up in the top right.</p>\n<p>Disabling the turnscript means the spacing fix no longer happens on movement/action, but the top-right glueing thing doesn't happen.</p>\n\n",
      "PostDate": "2020-04-24T01:03:19.7034269Z",
      "LastEditDate": "2020-04-24T03:23:41.9582515Z",
      "link": null
    },
    {
      "PostId": "e0222d95-a0ad-4589-ac5c-be60eca1bedf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ooops, I missed the g (global) modifier out of `.replace(/\\s+/g, \"&nbsp;\")`.\r\n\r\nI'm in the dark about the second issue; will have to try it myself and take a look at what's happening.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ooops, I missed the g (global) modifier out of <code>.replace(/\\s+/g, \"&amp;nbsp;\")</code>.</p>\n<p>I'm in the dark about the second issue; will have to try it myself and take a look at what's happening.</p>\n\n",
      "PostDate": "2020-04-24T07:29:19.1174913Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d6bebe08-9dad-4d1b-98d5-e3da92987d65",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Also, I just realized that upon doing anything with an object - look, use, etc - the tooltips of an item render in the top right of the grid window for some reason, also pictured. However, this inexplicably fixes the spacing issue!?\r\n\r\nOK… as originally posted, the code places the \"tooltip\" inside the item. So it wraps the text as well as it can to make it fit in there, even if it's displayed outside it.\r\n\r\nBut, the tooltip's coordinates are relative to the \"closest positioned ancestor\" - and for some reason the items are ceasing to be positioned. (I can't actually work out why they were positioned to start with, but…)\r\n\r\nTo fix your two issues, I modified the style string to add:\r\n```\r\n.floaty-tooltip {white-space: nowrap;}\r\n.igrid-item {position: relative; top: 0px;}\r\n```\r\nThis forces the icon to be *positioned* 0 pixels lower than where normal text flow would put it - and it now counts as a \"positioned ancestor\" when the tooltip is working out which object its coordinates are relative to.\r\n\r\n`white-space: nowrap` seems to work for the spacing thing, a neater solution than the `<br>` method.\r\n\r\nBut in my tests, tooltips are getting cut off at the left edge of the grid; `#inventoryAccordion` keeps switching to `overflow:hidden` and I can't find where it's changing.\r\n\r\nDoes that work for you?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Also, I just realized that upon doing anything with an object - look, use, etc - the tooltips of an item render in the top right of the grid window for some reason, also pictured. However, this inexplicably fixes the spacing issue!?</p>\n</blockquote>\n<p>OK… as originally posted, the code places the \"tooltip\" inside the item. So it wraps the text as well as it can to make it fit in there, even if it's displayed outside it.</p>\n<p>But, the tooltip's coordinates are relative to the \"closest positioned ancestor\" - and for some reason the items are ceasing to be positioned. (I can't actually work out why they were positioned to start with, but…)</p>\n<p>To fix your two issues, I modified the style string to add:</p>\n<pre><code>.floaty-tooltip {white-space: nowrap;}\n.igrid-item {position: relative; top: 0px;}\n</code></pre>\n<p>This forces the icon to be <em>positioned</em> 0 pixels lower than where normal text flow would put it - and it now counts as a \"positioned ancestor\" when the tooltip is working out which object its coordinates are relative to.</p>\n<p><code>white-space: nowrap</code> seems to work for the spacing thing, a neater solution than the <code>&lt;br&gt;</code> method.</p>\n<p>But in my tests, tooltips are getting cut off at the left edge of the grid; <code>#inventoryAccordion</code> keeps switching to <code>overflow:hidden</code> and I can't find where it's changing.</p>\n<p>Does that work for you?</p>\n\n",
      "PostDate": "2020-04-24T10:29:22.1657791Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "27ac2312-65eb-4529-b327-9df5819aa298",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My latest version (fiddled with a few more things, fixed typos):\r\nCSS:\r\n<pre><code>#inventoryAccordion{\r\n     line-height: 0px;\r\n     overflow: visible;\r\n}\r\n.igrid-slot {\r\n     display: inline-block;\r\n     overflow: visible;\r\n     background-color: purple;\r\n     border: 1px solid black;\r\n     padding: 0px;\r\n     width: 40px;\r\n     height: 40px;\r\n     margin: 0px;\r\n}\r\n.ui-droppable-hover {\r\n     background-color: #f4f4f4;\r\n     border-style: dashed;\r\n     magic: hover;\r\n}\r\n.ui-droppable-hover .igrid-item {\r\n     opacity: 0.6;\r\n}\r\n.igrid-item {\r\n     position: relative;\r\n     top: 1px;\r\n     background-image: url('<em style=\"color: brown\">\" + GetFileURL(\"oooh do animations work?.gif\") + \"</em>');\r\n     background-color: yellow;\r\n     height: 38px;\r\n     width: 38px;\r\n     cursor: pointer;\r\n}\r\n.igrid-active {\r\n     border-color: #ccc;\r\n}\r\n.floaty-tooltip {\r\n     white-space: nowrap;\r\n}</code></pre>\r\n\r\nAnd JS:\r\n```\r\n$(function () {\r\n  $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js');\r\n  initialiseGridInventory = function (style) {\r\n    addCells(25, $('#inventoryAccordion')\r\n      .empty());\r\n    var styleBlock = $('<style>')\r\n      .appendTo('head')\r\n      .text(style);\r\n    changeGridHoverStyle = function (hover) {\r\n      styleBlock.text(style.replace(/magic:\\s*hover;?/, hover));\r\n    };\r\n  };\r\n  loadHtml = function (content) {\r\n    console.log('Restoring save data:');\r\n    $('#divOutput').html(content);\r\n    var layout = $('#outputData').data('igrid-layout');\r\n    if (layout && layout.length) {\r\n      console.log('Found layout data:' + $('#outputData').attr('data-igrid-layout'));\r\n      // keeps track of any items in cells which we're moving an item into\r\n      var pending = $();\r\n      $.each(layout, function (i, val) {\r\n        updateInventoryItem(val['id'], val['alias'], val['verbs']);\r\n        var item = addItem(val['id'], val['icon']);\r\n        console.log('Moving item ' + val['alias'] + ' from ' + item.parent().attr('id') + ' to ' + val['parent'] + '; setting verbs to ' + val['verbs'] + ' and icon to ' + val['icon']);\r\n        var cell = $('#' + val['parent']);\r\n        pending = pending.add(cell.children());\r\n        cell.append(item);\r\n        pending = pending.not(item);\r\n      });\r\n      if (pending.length) {\r\n        pending.each(function () {\r\n          console.log(\"WARNING! Cell \" + pending.parent().attr('id') + \" contains multiple elements!\");\r\n          $(this).appendTo($('#inventoryAccordion .igrid-slot:empty').last());\r\n        });\r\n      }\r\n    } else {\r\n      console.log(\"No saved layout data?\");\r\n    }\r\n  };\r\n  var grid_icons = {};\r\n  updateInventoryIcons = function (data) {\r\n    $.each(data, function (id, icon) {\r\n      id = id.replace(/\\s/g, '-');\r\n      $('#igrid-item-' + id)\r\n        .attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function (match, x, y) {\r\n          return ('background-position: -' + (x * 40) + 'px -' + (y * 40) + 'px;')\r\n        }))\r\n      grid_icons[id] = icon;\r\n    });\r\n  };\r\n\r\n  function addCells(number, container) {\r\n    var count = container.find('.igrid-slot')\r\n      .length;\r\n    return $($.map(Array(number), function () {\r\n      return $('<div>', {\r\n          id: 'igrid-cell-' + (count++),\r\n          class: 'igrid-slot'\r\n        })\r\n        .appendTo(container)\r\n        .droppable({\r\n          hoverClass: 'ui-droppable-hover',\r\n          drop: function (ev, ui) {\r\n            $(this)\r\n              .children()\r\n              .appendTo(ui.draggable.parent());\r\n            $(ui.draggable)\r\n              .appendTo(this);\r\n            saveGridData();\r\n          }\r\n        });\r\n    }));\r\n  }\r\n\r\n  function saveGridData() {\r\n    $('#outputData')\r\n      .attr('data-igrid-layout', JSON.stringify($('#inventoryAccordion .igrid-item:not(.ui-draggable-dragging)')\r\n        .map(\r\n          function (i, item) {\r\n            if ($(item).data('ElementId')) {\r\n              return {\r\n                id: $(item).data('ElementId'),\r\n                icon: grid_icons[$(item).data('ElementId').replace(/\\s/g, '-')],\r\n                alias: $(item).data('title'),\r\n                verbs: $(item).data('verbs'),\r\n                parent: $(item).parent().attr('id')\r\n              };\r\n            } else {\r\n              console.log('Storing an element with no ID?');\r\n              console.log(item);\r\n              console.log($(item).data());\r\n              return null;\r\n            }\r\n          }\r\n        ).get()));\r\n  }\r\n\r\n  function setIcon(icon, item) {\r\n    return item.attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function (match, x, y) {\r\n      return ('background-position: -' + (x * 40) + 'px -' + ((y || 0) * 40) + 'px;')\r\n    }));\r\n  }\r\n\r\n  function setTooltip(item, name) {\r\n    if (item.children('.floaty-tooltip').length) {\r\n      item.children('.floaty-tooltip').text(name);\r\n    } else {\r\n      item.css({ overflow: 'visible', position: 'relative' });\r\n      var tooltip = $('<div>').appendTo(item).addClass('floaty-tooltip').css({ position: 'absolute', top: '20px', right: '20px', padding: 7, backgroundColor: 'black', color: 'white', border: '5px double white' }).text(name).hide();\r\n      item.hover(\r\n        function () { tooltip.show(); },\r\n        function () { tooltip.hide(); }\r\n      );\r\n    }\r\n  }\r\n\r\n  function addItem(rawid, icon) {\r\n    var id = rawid.replace(/\\s/g, '-');\r\n    if (!id) {\r\n      return $();\r\n    }\r\n    if ($('#inventoryAccordion .igrid-slot').length == 0) {\r\n      // grid hasn't been drawn yet\r\n      setTimeout(function () {\r\n        addItem(rawid, icon);\r\n      }, 100);\r\n      return $();\r\n    }\r\n    if (icon) {\r\n      grid_icons[id] = icon;\r\n    } else {\r\n      icon = grid_icons[id];\r\n    }\r\n    if ($('#igrid-item-' + id).length) {\r\n      // already exists\r\n      // this should only happen when restoring a save, so we make sure the icon is set correctly before returning it\r\n      return setIcon(icon, $('#igrid-item-' + id));\r\n    }\r\n    var cell = $('#inventoryAccordion .igrid-slot:empty')\r\n      .first();\r\n    var item = $('<div>', {\r\n        class: 'igrid-item',\r\n        id: 'igrid-item-' + id\r\n      })\r\n      .data('ElementId', rawid)\r\n      .appendTo(cell)\r\n      .draggable({\r\n        containment: cell.parent(),\r\n        helper: 'clone',\r\n        zIndex: 100,\r\n        revert: 'invalid',\r\n        start: function () {\r\n          item.addClass('igrid-active');\r\n          if (item.css('background-image')) {\r\n            changeGridHoverStyle('background-image:' + item.css('background-image') + '; background-position:' + item.css('background-position') + ';');\r\n          }\r\n        },\r\n        stop: function () {\r\n          item.removeClass('igrid-active');\r\n        }\r\n      })\r\n      .click(function (event) {\r\n        if (!item.hasClass(\"disabled\")) {\r\n          var metadata = {};\r\n          var alias = (item.data('title') || id)\r\n            .toLowerCase();\r\n          metadata[alias] = rawid || id;\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          item.blur()\r\n            .jjmenu_popup($.map(item.data('verbs'), function (verb) {\r\n              return {\r\n                title: verb,\r\n                action: {\r\n                  callback: function () {\r\n                    sendCommand(verb.toLowerCase() + ' ' + alias, metadata);\r\n                  }\r\n                }\r\n              };\r\n            }));\r\n          return false;\r\n        }\r\n      });\r\n    return setIcon(icon, item);\r\n  }\r\n  updateInventoryItem = function (id, alias, verbs) {\r\n    id = id.replace(/\\s/g, '-');\r\n    var item = $('#igrid-item-' + id);\r\n    if (alias) {\r\n      item.data('title', alias);\r\n      setTooltip(item, alias);\r\n    }\r\n    if (verbs) {\r\n      item.data('verbs', verbs);\r\n    }\r\n  };\r\n  var originalUpdateList = updateList;\r\n  updateList = function (name, listdata) {\r\n    if (name == 'inventory') {\r\n      var oldItems = $('#inventoryAccordion .igrid-item');\r\n      var pending = $();\r\n      $.each(listdata, function (key, value) {\r\n        var objdata = JSON.parse(value);\r\n        var id = objdata['ElementId'].replace(/\\s/g, '-');\r\n        var item = $('#igrid-item-' + id);\r\n        if (item.length) {\r\n          oldItems = oldItems.not(item);\r\n        } else {\r\n          item = addItem(id, grid_icons[id] || '0,0');\r\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\r\n          if (item.parent()\r\n            .length == 0) {\r\n            pending = pending.add(item);\r\n          }\r\n        }\r\n        if (objdata['Text']) {\r\n          item.data('title', objdata['Text']);\r\n          setTooltip(item, objdata['Text']);\r\n        }\r\n        if (objdata['Verbs']) {\r\n          item.data('verbs', objdata['Verbs'])\r\n            .removeClass('disabled');\r\n        } else {\r\n          item.addClass('disabled');\r\n        }\r\n      });\r\n      oldItems.remove();\r\n      pending.each(function (index, item) {\r\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\r\n        if (slot.length == 0) {\r\n          slot = addCells(5, $('#inventoryAccordion'));\r\n        }\r\n        slot.first()\r\n          .append(item);\r\n      });\r\n      saveGridData();\r\n    } else {\r\n      originalUpdateList(name, listdata);\r\n    }\r\n  };\r\n});\r\n```\r\n\r\nCheck out my sample game to see how it looks in practice",
      "EditableFormat": "markdown",
      "HTML": "<p>My latest version (fiddled with a few more things, fixed typos):<br>\nCSS:</p>\n<pre><code>#inventoryAccordion{\n     line-height: 0px;\n     overflow: visible;\n}\n.igrid-slot {\n     display: inline-block;\n     overflow: visible;\n     background-color: purple;\n     border: 1px solid black;\n     padding: 0px;\n     width: 40px;\n     height: 40px;\n     margin: 0px;\n}\n.ui-droppable-hover {\n     background-color: #f4f4f4;\n     border-style: dashed;\n     magic: hover;\n}\n.ui-droppable-hover .igrid-item {\n     opacity: 0.6;\n}\n.igrid-item {\n     position: relative;\n     top: 1px;\n     background-image: url('<em style=\"color: brown\">\" + GetFileURL(\"oooh do animations work?.gif\") + \"</em>');\n     background-color: yellow;\n     height: 38px;\n     width: 38px;\n     cursor: pointer;\n}\n.igrid-active {\n     border-color: #ccc;\n}\n.floaty-tooltip {\n     white-space: nowrap;\n}</code></pre>\n<p>And JS:</p>\n<pre><code>$(function () {\n  $.getScript('https://mrangel.info/jquery.ui.touch-punch.min.js');\n  initialiseGridInventory = function (style) {\n    addCells(25, $('#inventoryAccordion')\n      .empty());\n    var styleBlock = $('&lt;style&gt;')\n      .appendTo('head')\n      .text(style);\n    changeGridHoverStyle = function (hover) {\n      styleBlock.text(style.replace(/magic:\\s*hover;?/, hover));\n    };\n  };\n  loadHtml = function (content) {\n    console.log('Restoring save data:');\n    $('#divOutput').html(content);\n    var layout = $('#outputData').data('igrid-layout');\n    if (layout &amp;&amp; layout.length) {\n      console.log('Found layout data:' + $('#outputData').attr('data-igrid-layout'));\n      // keeps track of any items in cells which we're moving an item into\n      var pending = $();\n      $.each(layout, function (i, val) {\n        updateInventoryItem(val['id'], val['alias'], val['verbs']);\n        var item = addItem(val['id'], val['icon']);\n        console.log('Moving item ' + val['alias'] + ' from ' + item.parent().attr('id') + ' to ' + val['parent'] + '; setting verbs to ' + val['verbs'] + ' and icon to ' + val['icon']);\n        var cell = $('#' + val['parent']);\n        pending = pending.add(cell.children());\n        cell.append(item);\n        pending = pending.not(item);\n      });\n      if (pending.length) {\n        pending.each(function () {\n          console.log(\"WARNING! Cell \" + pending.parent().attr('id') + \" contains multiple elements!\");\n          $(this).appendTo($('#inventoryAccordion .igrid-slot:empty').last());\n        });\n      }\n    } else {\n      console.log(\"No saved layout data?\");\n    }\n  };\n  var grid_icons = {};\n  updateInventoryIcons = function (data) {\n    $.each(data, function (id, icon) {\n      id = id.replace(/\\s/g, '-');\n      $('#igrid-item-' + id)\n        .attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function (match, x, y) {\n          return ('background-position: -' + (x * 40) + 'px -' + (y * 40) + 'px;')\n        }))\n      grid_icons[id] = icon;\n    });\n  };\n\n  function addCells(number, container) {\n    var count = container.find('.igrid-slot')\n      .length;\n    return $($.map(Array(number), function () {\n      return $('&lt;div&gt;', {\n          id: 'igrid-cell-' + (count++),\n          class: 'igrid-slot'\n        })\n        .appendTo(container)\n        .droppable({\n          hoverClass: 'ui-droppable-hover',\n          drop: function (ev, ui) {\n            $(this)\n              .children()\n              .appendTo(ui.draggable.parent());\n            $(ui.draggable)\n              .appendTo(this);\n            saveGridData();\n          }\n        });\n    }));\n  }\n\n  function saveGridData() {\n    $('#outputData')\n      .attr('data-igrid-layout', JSON.stringify($('#inventoryAccordion .igrid-item:not(.ui-draggable-dragging)')\n        .map(\n          function (i, item) {\n            if ($(item).data('ElementId')) {\n              return {\n                id: $(item).data('ElementId'),\n                icon: grid_icons[$(item).data('ElementId').replace(/\\s/g, '-')],\n                alias: $(item).data('title'),\n                verbs: $(item).data('verbs'),\n                parent: $(item).parent().attr('id')\n              };\n            } else {\n              console.log('Storing an element with no ID?');\n              console.log(item);\n              console.log($(item).data());\n              return null;\n            }\n          }\n        ).get()));\n  }\n\n  function setIcon(icon, item) {\n    return item.attr('style', icon.replace(/^(\\d+)[,\\s]*(\\d*)(?!\\w)/, function (match, x, y) {\n      return ('background-position: -' + (x * 40) + 'px -' + ((y || 0) * 40) + 'px;')\n    }));\n  }\n\n  function setTooltip(item, name) {\n    if (item.children('.floaty-tooltip').length) {\n      item.children('.floaty-tooltip').text(name);\n    } else {\n      item.css({ overflow: 'visible', position: 'relative' });\n      var tooltip = $('&lt;div&gt;').appendTo(item).addClass('floaty-tooltip').css({ position: 'absolute', top: '20px', right: '20px', padding: 7, backgroundColor: 'black', color: 'white', border: '5px double white' }).text(name).hide();\n      item.hover(\n        function () { tooltip.show(); },\n        function () { tooltip.hide(); }\n      );\n    }\n  }\n\n  function addItem(rawid, icon) {\n    var id = rawid.replace(/\\s/g, '-');\n    if (!id) {\n      return $();\n    }\n    if ($('#inventoryAccordion .igrid-slot').length == 0) {\n      // grid hasn't been drawn yet\n      setTimeout(function () {\n        addItem(rawid, icon);\n      }, 100);\n      return $();\n    }\n    if (icon) {\n      grid_icons[id] = icon;\n    } else {\n      icon = grid_icons[id];\n    }\n    if ($('#igrid-item-' + id).length) {\n      // already exists\n      // this should only happen when restoring a save, so we make sure the icon is set correctly before returning it\n      return setIcon(icon, $('#igrid-item-' + id));\n    }\n    var cell = $('#inventoryAccordion .igrid-slot:empty')\n      .first();\n    var item = $('&lt;div&gt;', {\n        class: 'igrid-item',\n        id: 'igrid-item-' + id\n      })\n      .data('ElementId', rawid)\n      .appendTo(cell)\n      .draggable({\n        containment: cell.parent(),\n        helper: 'clone',\n        zIndex: 100,\n        revert: 'invalid',\n        start: function () {\n          item.addClass('igrid-active');\n          if (item.css('background-image')) {\n            changeGridHoverStyle('background-image:' + item.css('background-image') + '; background-position:' + item.css('background-position') + ';');\n          }\n        },\n        stop: function () {\n          item.removeClass('igrid-active');\n        }\n      })\n      .click(function (event) {\n        if (!item.hasClass(\"disabled\")) {\n          var metadata = {};\n          var alias = (item.data('title') || id)\n            .toLowerCase();\n          metadata[alias] = rawid || id;\n          event.preventDefault();\n          event.stopPropagation();\n          item.blur()\n            .jjmenu_popup($.map(item.data('verbs'), function (verb) {\n              return {\n                title: verb,\n                action: {\n                  callback: function () {\n                    sendCommand(verb.toLowerCase() + ' ' + alias, metadata);\n                  }\n                }\n              };\n            }));\n          return false;\n        }\n      });\n    return setIcon(icon, item);\n  }\n  updateInventoryItem = function (id, alias, verbs) {\n    id = id.replace(/\\s/g, '-');\n    var item = $('#igrid-item-' + id);\n    if (alias) {\n      item.data('title', alias);\n      setTooltip(item, alias);\n    }\n    if (verbs) {\n      item.data('verbs', verbs);\n    }\n  };\n  var originalUpdateList = updateList;\n  updateList = function (name, listdata) {\n    if (name == 'inventory') {\n      var oldItems = $('#inventoryAccordion .igrid-item');\n      var pending = $();\n      $.each(listdata, function (key, value) {\n        var objdata = JSON.parse(value);\n        var id = objdata['ElementId'].replace(/\\s/g, '-');\n        var item = $('#igrid-item-' + id);\n        if (item.length) {\n          oldItems = oldItems.not(item);\n        } else {\n          item = addItem(id, grid_icons[id] || '0,0');\n          // if we failed to add the item (grid is full), then try again after removing items that have been removed from inventory\n          if (item.parent()\n            .length == 0) {\n            pending = pending.add(item);\n          }\n        }\n        if (objdata['Text']) {\n          item.data('title', objdata['Text']);\n          setTooltip(item, objdata['Text']);\n        }\n        if (objdata['Verbs']) {\n          item.data('verbs', objdata['Verbs'])\n            .removeClass('disabled');\n        } else {\n          item.addClass('disabled');\n        }\n      });\n      oldItems.remove();\n      pending.each(function (index, item) {\n        var slot = $('#inventoryAccordion .igrid-slot:empty');\n        if (slot.length == 0) {\n          slot = addCells(5, $('#inventoryAccordion'));\n        }\n        slot.first()\n          .append(item);\n      });\n      saveGridData();\n    } else {\n      originalUpdateList(name, listdata);\n    }\n  };\n});\n</code></pre>\n<p>Check out my sample game to see how it looks in practice</p>\n\n",
      "PostDate": "2020-04-24T11:42:30.0701512Z",
      "LastEditDate": "2020-04-24T16:30:40.3319551Z",
      "link": null
    },
    {
      "PostId": "7ad62d68-05f4-46bf-9de3-3a3dd8931970",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Played around with your sample game;\r\nhttp://play2.textadventures.co.uk/Play.aspx?id=ddgrfg_iq0mp1ag9b_mwkq\r\n\r\n(Relinking it because WOW this thread got long). Everything seems to work fine... though, it remains to be seen if it plays nicely with the offline player. I'll try implementing it once my work finishes up for the day.",
      "EditableFormat": "markdown",
      "HTML": "<p>Played around with your sample game;<br>\nhttp://play2.textadventures.co.uk/Play.aspx?id=ddgrfg_iq0mp1ag9b_mwkq</p>\n<p>(Relinking it because WOW this thread got long). Everything seems to work fine... though, it remains to be seen if it plays nicely with the offline player. I'll try implementing it once my work finishes up for the day.</p>\n\n",
      "PostDate": "2020-04-24T12:50:55.0114141Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "752c4428-6c39-40a5-89cd-87bd0abff848",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Probably worth mentioning that in the stylesheet, `magic: hover` will now be replaced by the 'background-image' and 'background-position' attributes of the item being dragged. Can be combined with opacity to display a transparent ghost image of the dragged item on the cell it will be dropped into.\r\n\r\nI also added the parameter `hoverClass: 'ui-droppable-hover',` to the droppable() call. That's done by default in jQuery UI 1.12, but Quest comes with 1.11 for some reason.",
      "EditableFormat": "markdown",
      "HTML": "<p>Probably worth mentioning that in the stylesheet, <code>magic: hover</code> will now be replaced by the 'background-image' and 'background-position' attributes of the item being dragged. Can be combined with opacity to display a transparent ghost image of the dragged item on the cell it will be dropped into.</p>\n<p>I also added the parameter <code>hoverClass: 'ui-droppable-hover',</code> to the droppable() call. That's done by default in jQuery UI 1.12, but Quest comes with 1.11 for some reason.</p>\n\n",
      "PostDate": "2020-04-24T16:28:05.4742663Z",
      "LastEditDate": "2020-04-24T16:32:58.1427527Z",
      "link": null
    },
    {
      "PostId": "b810ba27-6772-4f06-b85b-d84a1c782a71",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alright, fiddled around with things! ``top: 1px`` is, from my testing, not needed. With white space word wrap in the tooltip css and absolute positioning in the grid items, which I believe I was missing before, things seem almost fine now!\r\n\r\nAlmost, because I found a new issue. And it's present in your version, too, just a bit difficult to notice.\r\n\r\nhttps://i.imgur.com/2q9Q6Ip.png\r\nWhen two items are on different rows, if the tooltip intersects with an icon below it (and possibly above, haven't tested) then it will be behind the icon - you can just about see this by the bottom of the border being cut off.\r\n\r\nhttps://i.imgur.com/PJ5nBMF.png\r\nHowever, when they're on the same row, the tooltip is presented from and center.\r\n\r\nThankfully, I managed to figure something out for myself, for once! I added in ``z-index: 1;`` into the floaty tooltip's css, and now it always renders above everything else.\r\n\r\nOutside of positioning - I'm thinking I might have the tags show up to the left of the icon instead of below/above, as it seems easier - that's the tooltips fully implemented now, I believe! Oh, also, I've set the css for the tooltips to display at 41px below the icons, so they look attached but can't actually be clicked on - trying to move down means the cursor goes over that 1px gap and shuts the tooltip off before it can be interacted with.",
      "EditableFormat": "markdown",
      "HTML": "<p>Alright, fiddled around with things! <code>top: 1px</code> is, from my testing, not needed. With white space word wrap in the tooltip css and absolute positioning in the grid items, which I believe I was missing before, things seem almost fine now!</p>\n<p>Almost, because I found a new issue. And it's present in your version, too, just a bit difficult to notice.</p>\n<p>https://i.imgur.com/2q9Q6Ip.png<br>\nWhen two items are on different rows, if the tooltip intersects with an icon below it (and possibly above, haven't tested) then it will be behind the icon - you can just about see this by the bottom of the border being cut off.</p>\n<p>https://i.imgur.com/PJ5nBMF.png<br>\nHowever, when they're on the same row, the tooltip is presented from and center.</p>\n<p>Thankfully, I managed to figure something out for myself, for once! I added in <code>z-index: 1;</code> into the floaty tooltip's css, and now it always renders above everything else.</p>\n<p>Outside of positioning - I'm thinking I might have the tags show up to the left of the icon instead of below/above, as it seems easier - that's the tooltips fully implemented now, I believe! Oh, also, I've set the css for the tooltips to display at 41px below the icons, so they look attached but can't actually be clicked on - trying to move down means the cursor goes over that 1px gap and shuts the tooltip off before it can be interacted with.</p>\n\n",
      "PostDate": "2020-04-24T16:44:45.2714824Z",
      "LastEditDate": "2020-04-24T17:31:34.4353167Z",
      "link": null
    },
    {
      "PostId": "aa41ed37-06b8-4962-bbdf-99178c392441",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah… I added in z-index, but it looks like I only did it on my testing version (editing the compressed code in the web editor) and didn't copy the change back to the master copy.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah… I added in z-index, but it looks like I only did it on my testing version (editing the compressed code in the web editor) and didn't copy the change back to the master copy.</p>\n\n",
      "PostDate": "2020-04-24T16:50:00.914459Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "070df332-7128-4a32-8155-738210ed80ec",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "God, the amount of fuckups I almost reported because I was adding tweaks to old code by mistake... Mood.\r\n\r\nAfter some more playing, not found any issues. So, I guess up next is the next addition, the ``setgridsize`` additional function.\r\n\r\nThrowing \r\n```\r\nsetGridSize = function (number) {\r\n  if (number > $('.igrid-slot').length) {\r\n    addCells (number - $('.igrid-slot').length, $('#inventoryAccordion'));\r\n  } else {\r\n    var dropped = [];\r\n    while( $('.igrid-slot').length > number) {\r\n      // find the last slot in the grid\r\n      var slot = $('.igrid-slot').last();\r\n      // if it has any children, move them to the previous empty slot\r\n      if (slot.children().length) {\r\n        $('.igrid-slot:empty').last().append(slot.children());\r\n      }\r\n      // If it's still not empty, tell Quest that the player is dropping stuff\r\n      slot.children(':not('.ui-draggable-dragging')').each(function() {\r\n        dropped.push($(this).data('ElementId'));\r\n      });\r\n      slot.remove()\r\n    }\r\n    if (dropped.length) {\r\n      ASLEvent ('GridDroppedItems', dropped);\r\n    }\r\n  }\r\n};\r\n```\r\nThrough simplify threw up an error; ``Unexpected token: string «)», expected: punc «,» (line: 14, col: 49)``\r\n\r\nI remembered you saying that ``slot.children(':not('.ui-draggable-dragging')').each(function() {`` had an extra pair of quotes, I changed it to ``slot.children(':not(.ui-draggable-dragging)').each(function() {``and it compressed. That seem about right?\r\n\r\nEDIT; Went ahead and tested it like that, and... complete success! ``JS.setGridSize(15)`` works flawlessly! I stacked all the items up at the last 3 slots, and they were moved into slots 13, 14 and 15 of the shrunken grid without any errors.\r\n\r\nHowever, *growing* the grid has issues with current css settings. Or, mine, anyway.\r\nhttps://i.gyazo.com/0bfa04850d31e45eba5c3eac8ee27f99.png\r\n\r\nBrings me back to my musings about the possibility of creating 'tabs', or the illusion of them, for any amount over 25...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>God, the amount of fuckups I almost reported because I was adding tweaks to old code by mistake... Mood.</p>\n<p>After some more playing, not found any issues. So, I guess up next is the next addition, the <code>setgridsize</code> additional function.</p>\n<p>Throwing</p>\n<pre><code>setGridSize = function (number) {\n  if (number &gt; $('.igrid-slot').length) {\n    addCells (number - $('.igrid-slot').length, $('#inventoryAccordion'));\n  } else {\n    var dropped = [];\n    while( $('.igrid-slot').length &gt; number) {\n      // find the last slot in the grid\n      var slot = $('.igrid-slot').last();\n      // if it has any children, move them to the previous empty slot\n      if (slot.children().length) {\n        $('.igrid-slot:empty').last().append(slot.children());\n      }\n      // If it's still not empty, tell Quest that the player is dropping stuff\n      slot.children(':not('.ui-draggable-dragging')').each(function() {\n        dropped.push($(this).data('ElementId'));\n      });\n      slot.remove()\n    }\n    if (dropped.length) {\n      ASLEvent ('GridDroppedItems', dropped);\n    }\n  }\n};\n</code></pre>\n<p>Through simplify threw up an error; <code>Unexpected token: string «)», expected: punc «,» (line: 14, col: 49)</code></p>\n<p>I remembered you saying that <code>slot.children(':not('.ui-draggable-dragging')').each(function() {</code> had an extra pair of quotes, I changed it to <code>slot.children(':not(.ui-draggable-dragging)').each(function() {</code>and it compressed. That seem about right?</p>\n<p>EDIT; Went ahead and tested it like that, and... complete success! <code>JS.setGridSize(15)</code> works flawlessly! I stacked all the items up at the last 3 slots, and they were moved into slots 13, 14 and 15 of the shrunken grid without any errors.</p>\n<p>However, <em>growing</em> the grid has issues with current css settings. Or, mine, anyway.<br>\nhttps://i.gyazo.com/0bfa04850d31e45eba5c3eac8ee27f99.png</p>\n<p>Brings me back to my musings about the possibility of creating 'tabs', or the illusion of them, for any amount over 25...</p>\n\n",
      "PostDate": "2020-04-24T17:12:09.4866405Z",
      "LastEditDate": "2020-04-24T17:37:02.9814342Z",
      "link": null
    },
    {
      "PostId": "779032f2-fded-41f3-a664-dd6d193c5061",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That should work, I think :)\r\n\r\nYou can call it from Quest when the inventory limit changes; `JS.setGridSize(26)` or whatever. If the player already has too many items to fit in that size, the Quest function `GridDroppedItems` will be called. Its parameter should be a stringlist, containing the names of items which will be dropped. It's up to your game to remove those from the inventory; otherwise the grid will be enlarged again to fit them.\r\n\r\nI'd suggest something like:\r\n\r\n```\r\n<function name=\"GridDroppedItems\" parameters=\"itemnames\">\r\n  items = NewObjectList()\r\n  dropped = NewObjectList()\r\n  foreach (name, itemnames) {\r\n    list add (items, GetObject (name))\r\n  }\r\n  foreach (object, items) {\r\n    if (ListContains (ScopeReachableInventory(), object) and GetBoolean (object, \"drop\")) {\r\n      object.parent = game.pov.parent\r\n    }\r\n    else {\r\n      // That item isn't droppable; so find something we *can* drop instead\r\n      object = PickOneObject (ListExclude (FilterByAttribute (ScopeReachableInventory(), \"drop\", true), items))\r\n      object.parent = game.pov.parent\r\n      list add (dropped, object)\r\n    }\r\n    msg (\"You find that you can no longer hold onto \"+FormatList(dropped, \", \", \", and\", \"everything\")+\"!\")\r\n  }\r\n</function>\r\n```\r\n\r\n(Note: this doesn't account for objects which have a 'drop' script; but it does account for dropping something else instead if the items selected by the JS can't be dropped)",
      "EditableFormat": "markdown",
      "HTML": "<p>That should work, I think :)</p>\n<p>You can call it from Quest when the inventory limit changes; <code>JS.setGridSize(26)</code> or whatever. If the player already has too many items to fit in that size, the Quest function <code>GridDroppedItems</code> will be called. Its parameter should be a stringlist, containing the names of items which will be dropped. It's up to your game to remove those from the inventory; otherwise the grid will be enlarged again to fit them.</p>\n<p>I'd suggest something like:</p>\n<pre><code>&lt;function name=\"GridDroppedItems\" parameters=\"itemnames\"&gt;\n  items = NewObjectList()\n  dropped = NewObjectList()\n  foreach (name, itemnames) {\n    list add (items, GetObject (name))\n  }\n  foreach (object, items) {\n    if (ListContains (ScopeReachableInventory(), object) and GetBoolean (object, \"drop\")) {\n      object.parent = game.pov.parent\n    }\n    else {\n      // That item isn't droppable; so find something we *can* drop instead\n      object = PickOneObject (ListExclude (FilterByAttribute (ScopeReachableInventory(), \"drop\", true), items))\n      object.parent = game.pov.parent\n      list add (dropped, object)\n    }\n    msg (\"You find that you can no longer hold onto \"+FormatList(dropped, \", \", \", and\", \"everything\")+\"!\")\n  }\n&lt;/function&gt;\n</code></pre>\n<p>(Note: this doesn't account for objects which have a 'drop' script; but it does account for dropping something else instead if the items selected by the JS can't be dropped)</p>\n\n",
      "PostDate": "2020-04-24T17:49:14.544284Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "22100b58-f17a-4a56-b6a1-a895410da52f",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good stuff, though I intend on making sure that this scenario doesn't come to pass to begin with through carefully gating everything behind weight scripts and such. Still, I may have a play around with it later!\r\n\r\nAlso, I just thought to test something about the grid - does it automatically update when an item's alias changes? (which will be vital with wearables). The answer is 'yes'! I also just remembered you talking about inventory/display verb lists updating if changed earlier, did your latest code include something to cover that? I can't test that right at the minute, going to get to it later if I can. I have two verbs, 'modify' and 'sell' that appear on weapons/armour when entering a workshop-capable room, and on anything sellable when entering a shop, respectively. \r\n\r\nEdit; Easiest solution to the grid spilling out of the pane was to set the accordian's width to the same as it is currently, but set the height to auto. Now to shrinks and expands with the grid while keeping it in rows of 5 max!\r\n\r\nOh, and question. How difficult would it be to get the gridsize editing to read quest attributes for the purposes of maths? Lets say I have a situation where I pick up a backpack as an upgrade - it adds five slots. But, it's a sandbox game, so they could have suffered a penalty already, or gained other bonuses, or carry weight is lowering the grid size. How would I go about doing something like a normal quest expression, something like ``player.weight = player.weight + 5`` when getting a backpack upgrade, then do ``JS.setGridSize (player.weight)``?\r\n\r\nEDIT EDIT; nevermind! Tested it myself. Set 'player.weight' to 10, did ``JS.setGridSize (player.weight)``, and it worked like a charm! If I do the calculations outside of js then just set with the final result, sorted!",
      "EditableFormat": "markdown",
      "HTML": "<p>Good stuff, though I intend on making sure that this scenario doesn't come to pass to begin with through carefully gating everything behind weight scripts and such. Still, I may have a play around with it later!</p>\n<p>Also, I just thought to test something about the grid - does it automatically update when an item's alias changes? (which will be vital with wearables). The answer is 'yes'! I also just remembered you talking about inventory/display verb lists updating if changed earlier, did your latest code include something to cover that? I can't test that right at the minute, going to get to it later if I can. I have two verbs, 'modify' and 'sell' that appear on weapons/armour when entering a workshop-capable room, and on anything sellable when entering a shop, respectively.</p>\n<p>Edit; Easiest solution to the grid spilling out of the pane was to set the accordian's width to the same as it is currently, but set the height to auto. Now to shrinks and expands with the grid while keeping it in rows of 5 max!</p>\n<p>Oh, and question. How difficult would it be to get the gridsize editing to read quest attributes for the purposes of maths? Lets say I have a situation where I pick up a backpack as an upgrade - it adds five slots. But, it's a sandbox game, so they could have suffered a penalty already, or gained other bonuses, or carry weight is lowering the grid size. How would I go about doing something like a normal quest expression, something like <code>player.weight = player.weight + 5</code> when getting a backpack upgrade, then do <code>JS.setGridSize (player.weight)</code>?</p>\n<p>EDIT EDIT; nevermind! Tested it myself. Set 'player.weight' to 10, did <code>JS.setGridSize (player.weight)</code>, and it worked like a charm! If I do the calculations outside of js then just set with the final result, sorted!</p>\n\n",
      "PostDate": "2020-04-24T17:58:30.0830136Z",
      "LastEditDate": "2020-04-24T18:33:41.3967044Z",
      "link": null
    },
    {
      "PostId": "4ae69262-0b54-4d43-84ff-f8614ff1597d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(sorry this post took so long. I typed it, then the captcha errored out, so I tried refreshing the page, and it looks like the site was down)\r\n\r\n> Also, I just thought to test something about the grid - does it automatically update when an item's alias changes? (which will be vital with wearables). The answer is 'yes'! I also just remembered you talking about inventory/display verb lists updating if changed earlier, did your latest code include something to cover that? I can't test that right at the minute, going to get to it later if I can. I have two verbs, 'modify' and 'sell' that appear on weapons/armour when entering a workshop-capable room, and on anything sellable when entering a shop, respectively.\r\n\r\nThe answer seems to be that items whose alias or displayverbs changes will *sometimes* be updated in the sidebar. This is done in the Quest core, and the code there is a little beyond me (I don't know C# so well).\r\n\r\nUsually it does the right thing, but I've seen a few situations where that doesn't happen, and I haven't been able to work out why.\r\n\r\nI know that the inventory is sent over to the JS as a single dictionary; so if an item moves in or out of the inventory, you can rely on it updating the alias and verbs of anything else. In other circumstances, it usually seems to do the right thing; but sometimes it doesn't.\r\n\r\nI would suggest that if you have any code that changes the listalias or inventoryverbs of an object that might be held (such as the 'wear' command, or the script you mention), it would be safer to add a line like:\r\n```\r\nJS.updateInventoryItem (object.name, object.listalias, object.inventoryverbs)\r\n```\r\n(using the appropriate object name, of course)\r\n\r\nTheoretically you could put this inside the turnscript, to make sure it's always up-to-date. But as these data items don't change frequently, I think it makes more sense to add a line to the script that's changing them.",
      "EditableFormat": "markdown",
      "HTML": "<p>(sorry this post took so long. I typed it, then the captcha errored out, so I tried refreshing the page, and it looks like the site was down)</p>\n<blockquote>\n<p>Also, I just thought to test something about the grid - does it automatically update when an item's alias changes? (which will be vital with wearables). The answer is 'yes'! I also just remembered you talking about inventory/display verb lists updating if changed earlier, did your latest code include something to cover that? I can't test that right at the minute, going to get to it later if I can. I have two verbs, 'modify' and 'sell' that appear on weapons/armour when entering a workshop-capable room, and on anything sellable when entering a shop, respectively.</p>\n</blockquote>\n<p>The answer seems to be that items whose alias or displayverbs changes will <em>sometimes</em> be updated in the sidebar. This is done in the Quest core, and the code there is a little beyond me (I don't know C# so well).</p>\n<p>Usually it does the right thing, but I've seen a few situations where that doesn't happen, and I haven't been able to work out why.</p>\n<p>I know that the inventory is sent over to the JS as a single dictionary; so if an item moves in or out of the inventory, you can rely on it updating the alias and verbs of anything else. In other circumstances, it usually seems to do the right thing; but sometimes it doesn't.</p>\n<p>I would suggest that if you have any code that changes the listalias or inventoryverbs of an object that might be held (such as the 'wear' command, or the script you mention), it would be safer to add a line like:</p>\n<pre><code>JS.updateInventoryItem (object.name, object.listalias, object.inventoryverbs)\n</code></pre>\n<p>(using the appropriate object name, of course)</p>\n<p>Theoretically you could put this inside the turnscript, to make sure it's always up-to-date. But as these data items don't change frequently, I think it makes more sense to add a line to the script that's changing them.</p>\n\n",
      "PostDate": "2020-04-24T22:13:19.2365094Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "76022949-2cc0-4f72-8d0b-dcab952e886c",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm... Alright! I'll keep an eye out to see if it ever crops up in testing, and if it does, I'll add this to my wear, remove, shop check and mod check turn scripts.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm... Alright! I'll keep an eye out to see if it ever crops up in testing, and if it does, I'll add this to my wear, remove, shop check and mod check turn scripts.</p>\n\n",
      "PostDate": "2020-04-24T22:19:43.2230826Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "91cef5fa-4fa2-4468-8695-c59c509da75f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<details><summary>(Completely unnecessary; this is just me thinking about alternate ways to do things that might be more efficient)</summary>\r\n\r\nIf I was changing the verbs of a whole lot of objects at once, I'd start wondering if there was a way to handle it in the menu-generation script. Like… modify the script that draws the popup menu so that it skips the \"buy\" and \"sell\" verbs unless the player is in a shop.\r\n\r\nLike, in the turnscript you could have something like:\r\n```\r\nJS.maskVerb (\"buy/sell\", some_expression_that_returns_true_if_the_player_is_in_a_shop)\r\nJS.maskVerb (\"modify\", some_expression_that_returns_true_if_you_can_modify_equipment_here)\r\n```\r\nThen it would be fairly simple to modify the script that draws the popup menu so that it will miss out those verbs.\r\n\r\nFor object links in the text:\r\n```\r\nvar maskedVerbs = {};\r\nmaskVerb = function (verb, enabled) {\r\n  $.each($.isArray(verb)) ? verb : verb.split(/[\\/;]/), function (v) {\r\n    maskedVerbs[v.toLowerCase()] = !enabled;\r\n  };\r\n};\r\n\r\nvar original_buildMenuOptions = buildMenuOptions;\r\nbuildMenuOptions = function (verbs, text, elementId) {\r\n  return original_buildMenuOptions(verbs, text, elementId).map (function (data) {\r\n    return maskedVerbs[data.title.toLowerCase()] ? null : data;\r\n  });\r\n};\r\n```\r\n\r\nand for the inventory pane, a couple of lines in `addItem`:\r\n```\r\n            .jjmenu_popup($.map(item.data('verbs'), function (verb) {\r\n              return {\r\n```\r\nwould change to:\r\n```\r\n            .jjmenu_popup($.map(item.data('verbs'), function (verb) {\r\n              return maskedVerbs[verb] ? null : {\r\n```\r\nSo instead of having to go over every object and add or remove verbs, you can just add or remove those verbs to a list of \"verbs to skip when drawing the popup menus\".\r\n</details>\r\n\r\nI know that's a weird way to go about it :-p Just seems more efficient to me.",
      "EditableFormat": "markdown",
      "HTML": "<details><summary>(Completely unnecessary; this is just me thinking about alternate ways to do things that might be more efficient)</summary>\n<p>If I was changing the verbs of a whole lot of objects at once, I'd start wondering if there was a way to handle it in the menu-generation script. Like… modify the script that draws the popup menu so that it skips the \"buy\" and \"sell\" verbs unless the player is in a shop.</p>\n<p>Like, in the turnscript you could have something like:</p>\n<pre><code>JS.maskVerb (\"buy/sell\", some_expression_that_returns_true_if_the_player_is_in_a_shop)\nJS.maskVerb (\"modify\", some_expression_that_returns_true_if_you_can_modify_equipment_here)\n</code></pre>\n<p>Then it would be fairly simple to modify the script that draws the popup menu so that it will miss out those verbs.</p>\n<p>For object links in the text:</p>\n<pre><code>var maskedVerbs = {};\nmaskVerb = function (verb, enabled) {\n  $.each($.isArray(verb)) ? verb : verb.split(/[\\/;]/), function (v) {\n    maskedVerbs[v.toLowerCase()] = !enabled;\n  };\n};\n\nvar original_buildMenuOptions = buildMenuOptions;\nbuildMenuOptions = function (verbs, text, elementId) {\n  return original_buildMenuOptions(verbs, text, elementId).map (function (data) {\n    return maskedVerbs[data.title.toLowerCase()] ? null : data;\n  });\n};\n</code></pre>\n<p>and for the inventory pane, a couple of lines in <code>addItem</code>:</p>\n<pre><code>            .jjmenu_popup($.map(item.data('verbs'), function (verb) {\n              return {\n</code></pre>\n<p>would change to:</p>\n<pre><code>            .jjmenu_popup($.map(item.data('verbs'), function (verb) {\n              return maskedVerbs[verb] ? null : {\n</code></pre>\n<p>So instead of having to go over every object and add or remove verbs, you can just add or remove those verbs to a list of \"verbs to skip when drawing the popup menus\".</p>\n</details>\n<p>I know that's a weird way to go about it :-p Just seems more efficient to me.</p>\n\n",
      "PostDate": "2020-04-24T23:03:40.6341046Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ed05aff0-644b-4656-b719-0f61c3bcb5db",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's not wholly related to the topic at hand, but I have a new issue. Namely, I can't seem to get Padding-Right in Quest's Game > Interface tab to actually do anything.\r\n \r\nThe inventory grid is currently large enough at default that, in addition to my status pane, it knocks my map (which is contained in a side pane) off the bottom of the screen. I want to expand the game display width and move some of the panes onto the left, so they flank the text and I can have my status pane and inventory windows be as large as I want.\r\n\r\nProblem is, I can't do that while padding-right refuses to cooperate... setting in enough padding-left to make room for the panes has the text spilling through the panes on the right.\r\n\r\nEDIT; while I'm still curious, I did figure out a workaround. Setting the correct padding on left - the size of the panes, and then a little more - and then setting the #gameContent's width to an appropriate amount to make sure the text aligns up nicely in the center of the two pane positions.",
      "EditableFormat": "markdown",
      "HTML": "<p>It's not wholly related to the topic at hand, but I have a new issue. Namely, I can't seem to get Padding-Right in Quest's Game &gt; Interface tab to actually do anything.</p>\n<p>The inventory grid is currently large enough at default that, in addition to my status pane, it knocks my map (which is contained in a side pane) off the bottom of the screen. I want to expand the game display width and move some of the panes onto the left, so they flank the text and I can have my status pane and inventory windows be as large as I want.</p>\n<p>Problem is, I can't do that while padding-right refuses to cooperate... setting in enough padding-left to make room for the panes has the text spilling through the panes on the right.</p>\n<p>EDIT; while I'm still curious, I did figure out a workaround. Setting the correct padding on left - the size of the panes, and then a little more - and then setting the #gameContent's width to an appropriate amount to make sure the text aligns up nicely in the center of the two pane positions.</p>\n\n",
      "PostDate": "2020-04-24T23:36:04.3731691Z",
      "LastEditDate": "2020-04-24T23:53:15.0286371Z",
      "link": null
    },
    {
      "PostId": "1dfae162-fa33-41bf-806c-803c0a69907a",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's a thought I had.\r\n\r\nHow difficult do you think it would be to replicate this system to apply to Places and Objects/This room contains, too? I'm thrilled to bits with the inventory system and have begun integrating it into my framework - no problems so far! - though I'm wondering if it can be extended to another grid...\r\n\r\nSwapping between grids would be difficult, I think, but also not particularly needed; drop and pick up would simply swap items between the two grids. Having that consistency would look nice, not to mention provide opportunities for sorting in safe locations for keeping treasure troves of junk and resources, heh.\r\n\r\nhttps://i.gyazo.com/af19050dd78745504120c4ddeedfb901.png\r\n\r\nThe obvious, immediate issue seems, to me, that it would effectively be changing in every single location you went into. And grid size consistency... would it be better to make it simply match the number of items inside of it, or would it be better to have it a set large size per room?",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's a thought I had.</p>\n<p>How difficult do you think it would be to replicate this system to apply to Places and Objects/This room contains, too? I'm thrilled to bits with the inventory system and have begun integrating it into my framework - no problems so far! - though I'm wondering if it can be extended to another grid...</p>\n<p>Swapping between grids would be difficult, I think, but also not particularly needed; drop and pick up would simply swap items between the two grids. Having that consistency would look nice, not to mention provide opportunities for sorting in safe locations for keeping treasure troves of junk and resources, heh.</p>\n<p>https://i.gyazo.com/af19050dd78745504120c4ddeedfb901.png</p>\n<p>The obvious, immediate issue seems, to me, that it would effectively be changing in every single location you went into. And grid size consistency... would it be better to make it simply match the number of items inside of it, or would it be better to have it a set large size per room?</p>\n\n",
      "PostDate": "2020-04-26T14:38:22.9891122Z",
      "LastEditDate": "2020-04-26T14:44:48.2610954Z",
      "link": null
    },
    {
      "PostId": "5bc176be-8edc-4502-aac9-356efb2de49c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was thinking about making it work for both panes initially; that's why `addCells` takes a parameter for the parent object. But I may have made assumptions about the layout when tweaking bits trying to get stuff working.\r\n\r\nIn theory, it should be quite simple to have two grids, working interchangeably.\r\n\r\nThe 'drop' event would be (pseudocode):\r\n```\r\nif (slot.parent().contains(item)) {\r\n  move slot's children to item's parent (as before)\r\n  move item to slot\r\n} else {\r\n  leave the helper (the mobile clone of a dragged icon) where it is\r\n  add some kind of 'wait pointer' over the helper\r\n  store the identity of the object being dragged, and the cells it was being dragged to/from\r\n  generate a \"drop\" or \"take\" command\r\n}\r\n```\r\n\r\nAnd in `updateList`, inside the loop for each item:\r\n```\r\nif (this was an item with a wait pointer over it) {\r\n  remove the wait pointer\r\n  select either the \"from\" or \"to\" cells, based on which list is being updated\r\n  animate the helper towards the chosen cell\r\n    when finished: remove the helper, add the actual item to the cell\r\n} else {\r\n  normal behaviour\r\n}\r\n```\r\n\r\nAt the end of updateList, if there's a pending take/drop that hasn't shown up in either list, remove the helper. (for example, if the player dropping an item causes it to smash)\r\n\r\n> The obvious, immediate issue seems, to me, that it would effectively be changing in every single location you went into. And grid size consistency... would it be better to make it simply match the number of items inside of it, or would it be better to have it a set large size per room?\r\n\r\nI would say that it's better to give it a small, sane default size. Maybe 3 rows; but something that could be configured for any given game.\r\nI think it would likely be best to have the turnscript also notify the JS what the current room is.\r\n\r\nIf the room has changed, remove all cells from placesObjects and draw a new row of cells. But I'd give placesObjects a 'dummy' column at the right and a dummy row at the bottom, which aren't allowed to contain cells. Dropping an item onto the dummy area will add a new row of cells to put it in (and if too many rows are added, the dummy column will be partially covered by the scrollbar, avoiding any items being obscured.\r\n\r\nThe JS can save the layout per room as long as it knows the room name. And a new row will be added automatically if necessary to hold items.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was thinking about making it work for both panes initially; that's why <code>addCells</code> takes a parameter for the parent object. But I may have made assumptions about the layout when tweaking bits trying to get stuff working.</p>\n<p>In theory, it should be quite simple to have two grids, working interchangeably.</p>\n<p>The 'drop' event would be (pseudocode):</p>\n<pre><code>if (slot.parent().contains(item)) {\n  move slot's children to item's parent (as before)\n  move item to slot\n} else {\n  leave the helper (the mobile clone of a dragged icon) where it is\n  add some kind of 'wait pointer' over the helper\n  store the identity of the object being dragged, and the cells it was being dragged to/from\n  generate a \"drop\" or \"take\" command\n}\n</code></pre>\n<p>And in <code>updateList</code>, inside the loop for each item:</p>\n<pre><code>if (this was an item with a wait pointer over it) {\n  remove the wait pointer\n  select either the \"from\" or \"to\" cells, based on which list is being updated\n  animate the helper towards the chosen cell\n    when finished: remove the helper, add the actual item to the cell\n} else {\n  normal behaviour\n}\n</code></pre>\n<p>At the end of updateList, if there's a pending take/drop that hasn't shown up in either list, remove the helper. (for example, if the player dropping an item causes it to smash)</p>\n<blockquote>\n<p>The obvious, immediate issue seems, to me, that it would effectively be changing in every single location you went into. And grid size consistency... would it be better to make it simply match the number of items inside of it, or would it be better to have it a set large size per room?</p>\n</blockquote>\n<p>I would say that it's better to give it a small, sane default size. Maybe 3 rows; but something that could be configured for any given game.<br>\nI think it would likely be best to have the turnscript also notify the JS what the current room is.</p>\n<p>If the room has changed, remove all cells from placesObjects and draw a new row of cells. But I'd give placesObjects a 'dummy' column at the right and a dummy row at the bottom, which aren't allowed to contain cells. Dropping an item onto the dummy area will add a new row of cells to put it in (and if too many rows are added, the dummy column will be partially covered by the scrollbar, avoiding any items being obscured.</p>\n<p>The JS can save the layout per room as long as it knows the room name. And a new row will be added automatically if necessary to hold items.</p>\n\n",
      "PostDate": "2020-04-26T19:34:27.5449253Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f6eb10f0-2048-4f91-9073-9a496d01c4c9",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In Pykrete's example:\r\n\r\nhttps://i.gyazo.com/af19050dd78745504120c4ddeedfb901.png\r\n\r\nHow did you guys place some of the right-side panes on the left side, and then center the whole lot?\r\n\r\nCould you share the code please?",
      "EditableFormat": "markdown",
      "HTML": "<p>In Pykrete's example:</p>\n<p>https://i.gyazo.com/af19050dd78745504120c4ddeedfb901.png</p>\n<p>How did you guys place some of the right-side panes on the left side, and then center the whole lot?</p>\n<p>Could you share the code please?</p>\n\n",
      "PostDate": "2020-04-30T00:54:10.7989104Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ca568fe1-7aba-4929-b46f-4ebb08478b36",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That would be on me, and it's some really hacky, awful implementation, eheh.\r\n\r\nI couldn't figure out how to do it whilst retaining the normal functionality of the panes repositioning when accordions are closed, as I used ``position: absolute;`` in the css for the panes. As a result, while the panes on the right will still shift up and down when panes above them are closed/opened, the ones on the left will remain where they are. This is why the panes on the left are ones that won't resize in-game, while I left the two prone to resizing on the right, where they would maintain their normal functionality.\r\n\r\n(That, and the rule of western eye-order. We read left to right, thus, the top left corner should contain the most important information, in my opinion.)\r\n\r\n```\r\nJS.setCss (\"#gameContent\", \"width: 1000px;\")\r\n// ---\r\nJS.setCss (\"#customStatusPane\", \"position: absolute;\")\r\nJS.setCss (\"#customStatusPane\", \"right: 1281px;\")\r\nJS.setCss (\"#customStatusPane\", \"top: 0px;\")\r\nJS.setCss (\"#customStatusPane\", \"width: 208px;\")\r\nJS.setCss (\"#compassLabel\", \"width: 200px;\")\r\nJS.setCss (\"#compassAccordion\", \"position: absolute;\")\r\nJS.setCss (\"#compassAccordion\", \"right: 1280px;\")\r\nJS.setCss (\"#compassAccordion\", \"top: 275px;\")\r\nJS.setCss (\"#compassAccordion\", \"width: 214px;\")\r\nJS.setCss (\"#compassLabel\", \"position: absolute;\")\r\nJS.setCss (\"#compassLabel\", \"right: 1280px;\")\r\nJS.setCss (\"#compassLabel\", \"width: 200px;\")\r\nJS.setCss (\"#compassLabel\", \"top: 236px;\")\r\n```\r\n\r\nAs mentioned above, the padding options didn't seem to want to work for what I wanted to do, so I set a custom width to #gameContent, then padded it substantially left in the Interface tab of Quest.\r\n\r\nPlease note that the px numbers input above will *not* work for your game's display width unless it matches mine! Mine is 1500.\r\n\r\nAlso, the map in its own accordion is entirely separate code, another MrAngel miracle if I remember correctly.\r\n\r\n```\r\nJS.eval (\"$('<h3 id=\\\"mapLabel\\\" class=\\\"ui-accordion-header ui-helper-reset ui-state-active ui-corner-top\\\"><span class=\\\"ui-icon ui-icon-triangle-1-s\\\"></span><span class=\\\"accordion-header-text\\\">Map</span></h3><div id=\\\"mapAccordion\\\" class=\\\"ui-accordion-content-active ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom\\\"></div>').insertAfter(\\\"#compassAccordion\\\");$('#gridPanel').hide();$('#gamePanelSpacer').height('0');var size = $(\\\"#mapAccordion\\\").innerWidth();$('#gridCanvas').width(size).height(size).appendTo($('#mapAccordion'));paper.view.viewSize.width = size;paper.view.viewSize.height = size;$(\\\"#gridPanel\\\").hide();$(\\\"#mapLabel\\\").bind(\\\"click\\\", $._data($(\\\"#inventoryLabel\\\")[0]).events['click'][0]['handler']);$(\\\"#mapLabel\\\").bind(\\\"mouseover\\\", $._data($(\\\"#inventoryLabel\\\")[0]).events['mouseover'][0]['handler']);$(\\\"#mapLabel\\\").bind(\\\"mouseout\\\", $._data($(\\\"#inventoryLabel\\\")[0]).events['mouseout'][0]['handler']);\")\r\n```\r\n\r\n^ All one line, in UI Initialization. Also, I have to do my js.setCss in seperate chunks, as in the first code snippet, for some reason - or Quest throws a wobbly at me.\r\n\r\nMy code is gross, sorry.",
      "EditableFormat": "markdown",
      "HTML": "<p>That would be on me, and it's some really hacky, awful implementation, eheh.</p>\n<p>I couldn't figure out how to do it whilst retaining the normal functionality of the panes repositioning when accordions are closed, as I used <code>position: absolute;</code> in the css for the panes. As a result, while the panes on the right will still shift up and down when panes above them are closed/opened, the ones on the left will remain where they are. This is why the panes on the left are ones that won't resize in-game, while I left the two prone to resizing on the right, where they would maintain their normal functionality.</p>\n<p>(That, and the rule of western eye-order. We read left to right, thus, the top left corner should contain the most important information, in my opinion.)</p>\n<pre><code>JS.setCss (\"#gameContent\", \"width: 1000px;\")\n// ---\nJS.setCss (\"#customStatusPane\", \"position: absolute;\")\nJS.setCss (\"#customStatusPane\", \"right: 1281px;\")\nJS.setCss (\"#customStatusPane\", \"top: 0px;\")\nJS.setCss (\"#customStatusPane\", \"width: 208px;\")\nJS.setCss (\"#compassLabel\", \"width: 200px;\")\nJS.setCss (\"#compassAccordion\", \"position: absolute;\")\nJS.setCss (\"#compassAccordion\", \"right: 1280px;\")\nJS.setCss (\"#compassAccordion\", \"top: 275px;\")\nJS.setCss (\"#compassAccordion\", \"width: 214px;\")\nJS.setCss (\"#compassLabel\", \"position: absolute;\")\nJS.setCss (\"#compassLabel\", \"right: 1280px;\")\nJS.setCss (\"#compassLabel\", \"width: 200px;\")\nJS.setCss (\"#compassLabel\", \"top: 236px;\")\n</code></pre>\n<p>As mentioned above, the padding options didn't seem to want to work for what I wanted to do, so I set a custom width to #gameContent, then padded it substantially left in the Interface tab of Quest.</p>\n<p>Please note that the px numbers input above will <em>not</em> work for your game's display width unless it matches mine! Mine is 1500.</p>\n<p>Also, the map in its own accordion is entirely separate code, another MrAngel miracle if I remember correctly.</p>\n<pre><code>JS.eval (\"$('&lt;h3 id=\\\"mapLabel\\\" class=\\\"ui-accordion-header ui-helper-reset ui-state-active ui-corner-top\\\"&gt;&lt;span class=\\\"ui-icon ui-icon-triangle-1-s\\\"&gt;&lt;/span&gt;&lt;span class=\\\"accordion-header-text\\\"&gt;Map&lt;/span&gt;&lt;/h3&gt;&lt;div id=\\\"mapAccordion\\\" class=\\\"ui-accordion-content-active ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom\\\"&gt;&lt;/div&gt;').insertAfter(\\\"#compassAccordion\\\");$('#gridPanel').hide();$('#gamePanelSpacer').height('0');var size = $(\\\"#mapAccordion\\\").innerWidth();$('#gridCanvas').width(size).height(size).appendTo($('#mapAccordion'));paper.view.viewSize.width = size;paper.view.viewSize.height = size;$(\\\"#gridPanel\\\").hide();$(\\\"#mapLabel\\\").bind(\\\"click\\\", $._data($(\\\"#inventoryLabel\\\")[0]).events['click'][0]['handler']);$(\\\"#mapLabel\\\").bind(\\\"mouseover\\\", $._data($(\\\"#inventoryLabel\\\")[0]).events['mouseover'][0]['handler']);$(\\\"#mapLabel\\\").bind(\\\"mouseout\\\", $._data($(\\\"#inventoryLabel\\\")[0]).events['mouseout'][0]['handler']);\")\n</code></pre>\n<p>^ All one line, in UI Initialization. Also, I have to do my js.setCss in seperate chunks, as in the first code snippet, for some reason - or Quest throws a wobbly at me.</p>\n<p>My code is gross, sorry.</p>\n\n",
      "PostDate": "2020-04-30T01:17:43.9669254Z",
      "LastEditDate": "2020-04-30T01:25:38.9387294Z",
      "link": null
    },
    {
      "PostId": "ea762ba6-6ab3-4e09-b38e-4695c1903154",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks Pykrete.  Let me play around with this code...",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks Pykrete.  Let me play around with this code...</p>\n\n",
      "PostDate": "2020-04-30T01:51:15.8645029Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3148689f-0e50-4595-8421-43579d6125e6",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just be aware that there are undoubtedly better ways of doing it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Just be aware that there are undoubtedly better ways of doing it.</p>\n\n",
      "PostDate": "2020-04-30T02:54:01.5540985Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5619b892-8564-4b3c-a5d3-c551ff2b1845",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">  couldn't figure out how to do it whilst retaining the normal functionality of the panes repositioning when accordions are closed,\r\n\r\nThe accordions are a mess anyway. The multiopenaccordion plugin doesn't allow you to add extra panes once it's started. I found a really hacky way to do it for the map pane, but there should be a better approach.\r\n\r\nI suspect that if you want panes on the left, the ideal method would be to create two containers, `gamePanesLeft` and `gamePanesRight` which they can be added to. If you want to, you could wrap a container div around each label/accordion pair, so that you can just do `$('#gamePanesLeft,#gamePanesRight').sortable({handle: 'h3', connectWith: '#gamePanesLeft,#gamePanesRight'});` to let the player drag panes around.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>couldn't figure out how to do it whilst retaining the normal functionality of the panes repositioning when accordions are closed,</p>\n</blockquote>\n<p>The accordions are a mess anyway. The multiopenaccordion plugin doesn't allow you to add extra panes once it's started. I found a really hacky way to do it for the map pane, but there should be a better approach.</p>\n<p>I suspect that if you want panes on the left, the ideal method would be to create two containers, <code>gamePanesLeft</code> and <code>gamePanesRight</code> which they can be added to. If you want to, you could wrap a container div around each label/accordion pair, so that you can just do <code>$('#gamePanesLeft,#gamePanesRight').sortable({handle: 'h3', connectWith: '#gamePanesLeft,#gamePanesRight'});</code> to let the player drag panes around.</p>\n\n",
      "PostDate": "2020-04-30T10:33:21.3512356Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
