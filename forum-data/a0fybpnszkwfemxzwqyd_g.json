{
  "Topic": {
    "TopicId": "a0fybpnszkwfemxzwqyd_g",
    "ForumId": "24",
    "Title": "Code Repository",
    "LastUpdated": "2021-12-21T09:45:29.3560537Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "01451c53-7d5a-4355-a590-a334183ff58c",
      "UserId": 8923,
      "Username": "CrisisSDK",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a1e2fe3ea718f55772fbbce83cb4016e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Greetings.\r\n\r\nIt's been years since the last commit on the GitHub repository for Squiffy.\r\nI was wondering if there was still a maintainer? I can understand not actively developing it, but was wondering if pull requests had any chance of being reveiwed and merged.\r\n\r\nThere seems to be a few improvements that could be made by volunteers that would either be low-effort or seem to be brought up fairly often on the forums, but if there's nobody that can accept pull requests there isn't much point.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Greetings.</p>\n<p>It's been years since the last commit on the GitHub repository for Squiffy.<br>\nI was wondering if there was still a maintainer? I can understand not actively developing it, but was wondering if pull requests had any chance of being reveiwed and merged.</p>\n<p>There seems to be a few improvements that could be made by volunteers that would either be low-effort or seem to be brought up fairly often on the forums, but if there's nobody that can accept pull requests there isn't much point.</p>\n\n",
      "PostDate": "2021-12-21T09:45:29.3560537Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c1725905-bf97-4d13-ada4-24dd25c86b24",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel has made some really neat additions to the squiffy source, including an easy and versatile attribute randomizer, automatic text input/textarea/contenteditable processing, and nestable attributes. You can search for these in the forum and paste his code into the source code.",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel has made some really neat additions to the squiffy source, including an easy and versatile attribute randomizer, automatic text input/textarea/contenteditable processing, and nestable attributes. You can search for these in the forum and paste his code into the source code.</p>\n\n",
      "PostDate": "2021-12-22T01:58:28.6532647Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ecc9697f-f36d-4ea1-bd3b-f3f01bc945ed",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When Alex quit, Squiffy was taken over by Manowar, however he is now quitting too, and I am in the process of taking over (and have been for over a year). Ultimately, I would like to get mrangel's updates incorporated (I do not know Squiffy at all myself), but as yet I do not have the permissions or knowhow to do that.",
      "EditableFormat": "markdown",
      "HTML": "<p>When Alex quit, Squiffy was taken over by Manowar, however he is now quitting too, and I am in the process of taking over (and have been for over a year). Ultimately, I would like to get mrangel's updates incorporated (I do not know Squiffy at all myself), but as yet I do not have the permissions or knowhow to do that.</p>\n\n",
      "PostDate": "2021-12-24T17:08:22.4203024Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d8d8133b-1ba8-43bd-a3b4-d725bea71535",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I never managed to get my head around git properly :S",
      "EditableFormat": "markdown",
      "HTML": "<p>I never managed to get my head around git properly :S</p>\n\n",
      "PostDate": "2021-12-24T18:42:39.4780536Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c9abd43-254f-4d36-af5f-c24dd0fd4c4a",
      "UserId": 8923,
      "Username": "CrisisSDK",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a1e2fe3ea718f55772fbbce83cb4016e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Git can be very annoying, I agree üòÅ\r\n\r\n@The Pixie, I hope that you do manage to get the permissions for the repo (and for updating the npm module); even if it is just so people can send you pull requests to review.\r\n\r\nI've looked at some of mrangel's stuff, and having some things like having better support for random numbers, or having it so you can add a sidebar without having to include a heap of Javascript in your first section would be great (I think something like how `@title` or `@start` works to specify what section is your sidebar, as well as which side it's on, etc. would be great), and surely it shouldn't be too hard to have some better array support or to add in extra links to the header/title bar thing.  \r\nI'm sure there's other things I was thinking of before that I've forgotten now, but certainly some of them I'd be willing to push up a pull request for.\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Git can be very annoying, I agree üòÅ</p>\n<p>@The Pixie, I hope that you do manage to get the permissions for the repo (and for updating the npm module); even if it is just so people can send you pull requests to review.</p>\n<p>I've looked at some of mrangel's stuff, and having some things like having better support for random numbers, or having it so you can add a sidebar without having to include a heap of Javascript in your first section would be great (I think something like how <code>@title</code> or <code>@start</code> works to specify what section is your sidebar, as well as which side it's on, etc. would be great), and surely it shouldn't be too hard to have some better array support or to add in extra links to the header/title bar thing.<br>\nI'm sure there's other things I was thinking of before that I've forgotten now, but certainly some of them I'd be willing to push up a pull request for.</p>\n\n",
      "PostDate": "2022-01-17T07:32:48.3358202Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8d80a146-52dd-419f-b15e-b7b36d63e96a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not sure the sidebar is common enough to be a standard thing. But I was wondering about having some special-named sections like `_initialise`, `_onload`, `_onset_[attribute name]`, `_beforepage` and `_afterpage` which could be added to add hooks, making it a lot easier to get access to the system internals for tweaking things. Then the sidebar would be relatively easy to implement, but so would other things that people might like to use. I'd also suggest a revamp of the text processor, similar to the equivalent system I proposed in Quest, making it easier to add new functions. (Perhaps `squiffy.ui.textprocessorfunctions` could be an object that the user can add onto in `_initialise` if they want to add their own functions).",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not sure the sidebar is common enough to be a standard thing. But I was wondering about having some special-named sections like <code>_initialise</code>, <code>_onload</code>, <code>_onset_[attribute name]</code>, <code>_beforepage</code> and <code>_afterpage</code> which could be added to add hooks, making it a lot easier to get access to the system internals for tweaking things. Then the sidebar would be relatively easy to implement, but so would other things that people might like to use. I'd also suggest a revamp of the text processor, similar to the equivalent system I proposed in Quest, making it easier to add new functions. (Perhaps <code>squiffy.ui.textprocessorfunctions</code> could be an object that the user can add onto in <code>_initialise</code> if they want to add their own functions).</p>\n\n",
      "PostDate": "2022-01-17T10:08:50.5504833Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "10a63300-ca6a-44b4-849d-995e35d67a3d",
      "UserId": 8923,
      "Username": "CrisisSDK",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a1e2fe3ea718f55772fbbce83cb4016e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"Easy\" custom squiffy function support would be nice, especially when using `@import` to include a library. (though that can be done with say importing a javascript file, a lot of Squiffy seems annoying to simply add to during run-time)\r\n\r\nConcerning things like sidebars, or adding stuff to the header where the `Restart` link is, I think partly why you don't see those much is that it isn't built-in. (also Squiffy isn't used that much compared to other alternatives)\r\nIt should of course be optional; and looking at the compiler and `index.template.html` it wouldn't be hard to have it so it embeds sidebar stuff into the HTML (for example) only if there is a `@sidebar` definition.\r\n\r\n\r\nIf we do get things where updates can be made again, I guess discussion on what should be added or updates to Squiffy or it's editor could properly happen. \r\nI'd like to see some things like `@color` or `@font` or other things to make styling a little easier for people who don't want to touch Javascript.\r\nThough other things... like as much as I'd like array, etc. support doing it with Javascript should be easy enough for the people who would actually use such things.\r\n\r\nThough a built-in Javascript function to make a section or passage link seems disturbingly absent from the Squiffy engine.",
      "EditableFormat": "markdown",
      "HTML": "<p>\"Easy\" custom squiffy function support would be nice, especially when using <code>@import</code> to include a library. (though that can be done with say importing a javascript file, a lot of Squiffy seems annoying to simply add to during run-time)</p>\n<p>Concerning things like sidebars, or adding stuff to the header where the <code>Restart</code> link is, I think partly why you don't see those much is that it isn't built-in. (also Squiffy isn't used that much compared to other alternatives)<br>\nIt should of course be optional; and looking at the compiler and <code>index.template.html</code> it wouldn't be hard to have it so it embeds sidebar stuff into the HTML (for example) only if there is a <code>@sidebar</code> definition.</p>\n<p>If we do get things where updates can be made again, I guess discussion on what should be added or updates to Squiffy or it's editor could properly happen.<br>\nI'd like to see some things like <code>@color</code> or <code>@font</code> or other things to make styling a little easier for people who don't want to touch Javascript.<br>\nThough other things... like as much as I'd like array, etc. support doing it with Javascript should be easy enough for the people who would actually use such things.</p>\n<p>Though a built-in Javascript function to make a section or passage link seems disturbingly absent from the Squiffy engine.</p>\n\n",
      "PostDate": "2022-01-17T21:12:39.6639314Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fcb67221-29a7-4ab3-9c24-50406b15cc13",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> \"Easy\" custom squiffy function support would be nice, especially when using @import to include a library. (though that can be done with say importing a javascript file, a lot of Squiffy seems annoying to simply add to during run-time)\r\n\r\nThat does seem useful. I assume it would be done when compiling, so the libraries are merged into a single `story.js`.\r\n\r\nAllowing the import of javascript (pseudo-JSON) files would be interesting; if you merge them in with `$.extend(true, jquery, included_object)`, it would be relatively simple for a library to override most of the core functions, making it a lot easier for people to use more advanced code without needing to copy out all the workarounds and wrappers.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>\"Easy\" custom squiffy function support would be nice, especially when using @import to include a library. (though that can be done with say importing a javascript file, a lot of Squiffy seems annoying to simply add to during run-time)</p>\n</blockquote>\n<p>That does seem useful. I assume it would be done when compiling, so the libraries are merged into a single <code>story.js</code>.</p>\n<p>Allowing the import of javascript (pseudo-JSON) files would be interesting; if you merge them in with <code>$.extend(true, jquery, included_object)</code>, it would be relatively simple for a library to override most of the core functions, making it a lot easier for people to use more advanced code without needing to copy out all the workarounds and wrappers.</p>\n\n",
      "PostDate": "2022-01-17T22:57:10.3272982Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c7115e0b-48e1-44f8-8d23-ef8d0188377c",
      "UserId": 8923,
      "Username": "CrisisSDK",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a1e2fe3ea718f55772fbbce83cb4016e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Squiffy command line (the one I actually used...) already has `@import` support.\r\nImporting more squiffy files gets embedded into `story.js`, but other Javascript files don't, just getting referred to as another `<script>` block in `index.html`.\r\nThis of course makes them less useful for extending Squiffy itself, as you'll need to pass in the `squiffy` object somehow (not impossible, but not very good if you are wanting to extend Squiffy with a javascript library)\r\nProbably better would be to include them in `story.js`,  maybe done in similar way to requirejs modules. It would need some thought to figure out the best way, I think.\r\n\r\nYou might be able to get around that by importing a squiffy file instead, like all the javascript in an ``[[include]]:`` section and using `{include}` at the start of your game to run the code.\r\n\r\n\r\nI'd also love the ability to have \"common\" libraries in the web editor that you can `@import`, though I haven't actually looked at the IDE code so I don't know how feasible that would be.\r\n\r\nAnd, speaking of `@import`... being able to import `*.css` files would be nice. It could be done in exactly the same way as the compiler imports `*.js` currently. Just a few extra lines of code.\r\n\r\nI don't want to change the compiler or templates myself at the moment though, since I feel like it's not worth it if I can't put up a pull request for the changes.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Squiffy command line (the one I actually used...) already has <code>@import</code> support.<br>\nImporting more squiffy files gets embedded into <code>story.js</code>, but other Javascript files don't, just getting referred to as another <code>&lt;script&gt;</code> block in <code>index.html</code>.<br>\nThis of course makes them less useful for extending Squiffy itself, as you'll need to pass in the <code>squiffy</code> object somehow (not impossible, but not very good if you are wanting to extend Squiffy with a javascript library)<br>\nProbably better would be to include them in <code>story.js</code>,  maybe done in similar way to requirejs modules. It would need some thought to figure out the best way, I think.</p>\n<p>You might be able to get around that by importing a squiffy file instead, like all the javascript in an <code>[[include]]:</code> section and using <code>{include}</code> at the start of your game to run the code.</p>\n<p>I'd also love the ability to have \"common\" libraries in the web editor that you can <code>@import</code>, though I haven't actually looked at the IDE code so I don't know how feasible that would be.</p>\n<p>And, speaking of <code>@import</code>... being able to import <code>*.css</code> files would be nice. It could be done in exactly the same way as the compiler imports <code>*.js</code> currently. Just a few extra lines of code.</p>\n<p>I don't want to change the compiler or templates myself at the moment though, since I feel like it's not worth it if I can't put up a pull request for the changes.</p>\n\n",
      "PostDate": "2022-01-17T23:13:18.333646Z",
      "LastEditDate": "2022-01-18T00:06:50.0665328Z",
      "link": null
    },
    {
      "PostId": "5267123c-e554-4bf0-9edd-073b08924c0a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> other Javascript files don't, just getting referred to as another `<script>` block in `index.html`.\r\nThis of course makes them less useful for extending Squiffy itself, as you'll need to pass in the `squiffy` object somehow (not impossible, but not very good if you are wanting to extend Squiffy with a javascript library)\r\n\r\nThat seems inelegant. Ideally, you'd want to test if they return a plain object; or if they define variables `squiffy`, `story`, `ui` etc. As almost all of Squiffy's  code except the startup stuff is inside that object, merging replacement functions into it seems like it would be intuitive to work with.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>other Javascript files don't, just getting referred to as another <code>&lt;script&gt;</code> block in <code>index.html</code>.<br>\nThis of course makes them less useful for extending Squiffy itself, as you'll need to pass in the <code>squiffy</code> object somehow (not impossible, but not very good if you are wanting to extend Squiffy with a javascript library)</p>\n</blockquote>\n<p>That seems inelegant. Ideally, you'd want to test if they return a plain object; or if they define variables <code>squiffy</code>, <code>story</code>, <code>ui</code> etc. As almost all of Squiffy's  code except the startup stuff is inside that object, merging replacement functions into it seems like it would be intuitive to work with.</p>\n\n",
      "PostDate": "2022-01-18T11:48:34.8076892Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "78326058-5bf7-41c1-b7be-967966a3ff3d",
      "UserId": 8923,
      "Username": "CrisisSDK",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a1e2fe3ea718f55772fbbce83cb4016e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": " I think importing `*.js` files should get embedded at the end of `story.js`, so they are in the same context as you would expect them to be would be good enough. Then you would have access to all the squiffy stuff you can get in normal squiffy code.\r\nThough perhaps something to be able to put them in that inner function that defines the \"private\" variables/functions if required might be good.\r\n\r\nMaybe there's more things to consider too, but I can't really think of them at the moment.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think importing <code>*.js</code> files should get embedded at the end of <code>story.js</code>, so they are in the same context as you would expect them to be would be good enough. Then you would have access to all the squiffy stuff you can get in normal squiffy code.<br>\nThough perhaps something to be able to put them in that inner function that defines the \"private\" variables/functions if required might be good.</p>\n<p>Maybe there's more things to consider too, but I can't really think of them at the moment.</p>\n\n",
      "PostDate": "2022-01-19T01:30:47.9831587Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b2026b33-7dcb-461d-ab5b-a38d32b7f957",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I think importing *.js files should get embedded at the end of story.js, so they are in the same context as you would expect them to be would be good enough.\r\n\r\nReally, you want the user's own code to override library code. So the loading order should be\r\n1. Squiffy core\r\n2. Imported libraries\r\n3. User code\r\n\r\nwith each having the power to overwrite functions provided by the layer before.\r\n\r\nI suspect that the most sensible way to do this (although a bit of a structural bodge) would be to change:\r\n```\r\nsquiffy = {\r\n  // huge mass of generated code, including the stuff from squiffy.template.js and stuff generated from the squiffy file\r\n}\r\n```\r\ninto\r\n```\r\nsquiffy = $.extend(true, {\r\n  // all the default stuff from squiffy.template.js\r\n},\r\n{\r\n  // contents of included_library.js\r\n},\r\n{\r\n  // contents of included_library_2.js\r\n},\r\n{\r\n  story: {\r\n    sections: [\r\n      // dynamically-generated stuff created from game.squiffy\r\n    ]\r\n  }\r\n});\r\n```\r\nEither as a restructure like that; or splitting it up into separate files (so the code that lives outside of the `squiffy` object would loop over a bunch of other JS files including them, starting with a static `squiffycore.js` and ending with the generated `story.js`)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I think importing *.js files should get embedded at the end of story.js, so they are in the same context as you would expect them to be would be good enough.</p>\n</blockquote>\n<p>Really, you want the user's own code to override library code. So the loading order should be</p>\n<ol>\n<li>Squiffy core</li>\n<li>Imported libraries</li>\n<li>User code</li>\n</ol>\n<p>with each having the power to overwrite functions provided by the layer before.</p>\n<p>I suspect that the most sensible way to do this (although a bit of a structural bodge) would be to change:</p>\n<pre><code>squiffy = {\n  // huge mass of generated code, including the stuff from squiffy.template.js and stuff generated from the squiffy file\n}\n</code></pre>\n<p>into</p>\n<pre><code>squiffy = $.extend(true, {\n  // all the default stuff from squiffy.template.js\n},\n{\n  // contents of included_library.js\n},\n{\n  // contents of included_library_2.js\n},\n{\n  story: {\n    sections: [\n      // dynamically-generated stuff created from game.squiffy\n    ]\n  }\n});\n</code></pre>\n<p>Either as a restructure like that; or splitting it up into separate files (so the code that lives outside of the <code>squiffy</code> object would loop over a bunch of other JS files including them, starting with a static <code>squiffycore.js</code> and ending with the generated <code>story.js</code>)</p>\n\n",
      "PostDate": "2022-01-19T11:08:07.7247138Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7be2a3a8-13a6-41ca-9f6a-c276f682321d",
      "UserId": 8923,
      "Username": "CrisisSDK",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a1e2fe3ea718f55772fbbce83cb4016e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think that having it put inside an object definition would be a bit too annoying; as it would behave differently than normal Javascript.\r\nif it was put in the `story.js` file in a similar way as the generated squiffy code is placed in, you could still have in included javascript just stuff like `squiffy.ui.sidebar = function() { /*stuff here*/ };`or whatever to do as much changing of squiffy as you currently can. \r\n\r\nThough neither your suggestion or mine would give access to the private functions. \r\n\r\nOf course, we can override public functions to do something then fallback to a backup of the original, but I think some things should probably be altered to allow for being a bit more \"mod friendly\"; such as being able to add new text commands easily - I'm sure something like a private  array of condition and action function pairs with a method to append a new command to it would be easy enough to support in the squiffy engine.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I think that having it put inside an object definition would be a bit too annoying; as it would behave differently than normal Javascript.<br>\nif it was put in the <code>story.js</code> file in a similar way as the generated squiffy code is placed in, you could still have in included javascript just stuff like <code>squiffy.ui.sidebar = function() { /*stuff here*/ };</code>or whatever to do as much changing of squiffy as you currently can.</p>\n<p>Though neither your suggestion or mine would give access to the private functions.</p>\n<p>Of course, we can override public functions to do something then fallback to a backup of the original, but I think some things should probably be altered to allow for being a bit more \"mod friendly\"; such as being able to add new text commands easily - I'm sure something like a private  array of condition and action function pairs with a method to append a new command to it would be easy enough to support in the squiffy engine.</p>\n\n",
      "PostDate": "2022-01-20T00:35:09.7118966Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
