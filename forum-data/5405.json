{
  "Topic": {
    "TopicId": "5405",
    "ForumId": "10",
    "Title": "Journals",
    "LastUpdated": "2015-08-10T02:33:06+01:00",
    "ReplyCount": 10
  },
  "Posts": [
    {
      "PostId": "37494",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "I have a journal object.\n\nAnd I would like for the player to type.... note or Note ...and be able to write whatever they want in it.\n\nI know there is a journal library made by Pixie, but I don't think it works anymore, at least I couldn't get it to work. I also don't want it recording all the pages of the game. I just want it to record what the player types after &quot;Note&quot; \n\nDoes that make sense?",
      "EditableFormat": "bbcode",
      "HTML": "I have a journal object.<br/><br/>And I would like for the player to type.... note or Note ...and be able to write whatever they want in it.<br/><br/>I know there is a journal library made by Pixie, but I don't think it works anymore, at least I couldn't get it to work. I also don't want it recording all the pages of the game. I just want it to record what the player types after &quot;Note&quot; <br/><br/>Does that make sense?",
      "PostDate": "2015-08-08T04:49:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37495",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "That makes perfect sense.  It's an easy task if you control what the player can input in the journal.  After an event just raise a flag.  Add Ifs/if else statements for each flag that prints desired message when journal is read.\n\nBut, obviously, that is not what you want.  It would be a really neat little feature to be able to do this with Quest.  I toyed with it and did a little research, but made ZERO headway.  I'm guessing you would need to give their inputted text an ID tag and recall the ID tag when the journal was read with something like getElementById... but I can't figure out how to link user input to an ID tag.  I'm sure a quality coder would have no problem helping you out with this.  I am eager to see how this would be done because it uses code I have no idea how to implement or have run across using Quest.  Also, a problem you might encounter with freedom of input is the need/want to remove player input from the journal as well!  YIKES!  I too tried to download/open Pixie's journal library and it failed to open in Quest.\n\nThen again... you can always force the player to resort back to their Zork days and get out the old fashioned pencil and paper for taking notes and referencing!  GOOD LUCK!!",
      "EditableFormat": "bbcode",
      "HTML": "That makes perfect sense.  It's an easy task if you control what the player can input in the journal.  After an event just raise a flag.  Add Ifs/if else statements for each flag that prints desired message when journal is read.<br/><br/>But, obviously, that is not what you want.  It would be a really neat little feature to be able to do this with Quest.  I toyed with it and did a little research, but made ZERO headway.  I'm guessing you would need to give their inputted text an ID tag and recall the ID tag when the journal was read with something like getElementById... but I can't figure out how to link user input to an ID tag.  I'm sure a quality coder would have no problem helping you out with this.  I am eager to see how this would be done because it uses code I have no idea how to implement or have run across using Quest.  Also, a problem you might encounter with freedom of input is the need/want to remove player input from the journal as well!  YIKES!  I too tried to download/open Pixie's journal library and it failed to open in Quest.<br/><br/>Then again... you can always force the player to resort back to their Zork days and get out the old fashioned pencil and paper for taking notes and referencing!  GOOD LUCK!!",
      "PostDate": "2015-08-08T05:57:09+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37498",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "look into using lists~dictionaries ... for making a journal\n\nlists can store~hold text~strings (words, sentences, paragraphs), so you can use 'get input', typing whatever you want, and storing it as an item in a list. you can also retrieve that item, add an item, remove an item, etc etc etc\n\ndictionaries are even better, as you got two entries~parameters ('get input' for each if you want), enabled you to hold an indentifying subject~topic (or even sentences nd paragraphs too, not just words), as well as your 'message' (text~strings: words, sentences, and paragraphs). Has all of the same features~uses~capabilities as lists.\n\nalso, lists~dictionaries can hold lists~dictionaries as their items (along with using nested 'for~foreach' ), so you can implement 'pages', and 'items' on each of those 'pages'.\n\n-------\n\nreading a 1000 page intro java book (in trying to get ahead for classes starting later this month) is really helping me expand my code+design ability, it gives me lots of code examples and explains stuff... though Java's internal setup's terminology~structure~etc, which makes the user-level terminology~structure~design~etc extremely confusing... though thankfully it is actually a lot like quest (as I slowly understand java better) ... if it wasn't for quest... there's no way I'd be understanding Java as I am (albiet strugglingly), quest really does things so much better, at least at the user level, compared to Java... finally after 650 pages (out of the 1000), I think I finally understand (I hope) 'referance variable creates a memory address location' vs an 'object instance creation', in regards to its 'pointing~referencing', laughs. This memory ~ memory space and address location and etc, machine~assembly language, stuff still greatly confuses me, sighs.\n\ntrying to get 1000 page java book read in 10 days, and then another ~1000 page C++ book read in another 10 days... before classes start... I HATE reading practically non-stop... the numerous code examples are extremely helpful... but oh is it also so boring to read through code example after code example after code example ...\n\nI think I'm really going to have a hard time doing Java and C++, I can see myself getting the two of them (+ quest's XML + python + JS) confused, constantly, laughs... I'm hoping that quick lookups at the code will alleviate this issue...",
      "EditableFormat": "bbcode",
      "HTML": "look into using lists~dictionaries ... for making a journal<br/><br/>lists can store~hold text~strings (words, sentences, paragraphs), so you can use 'get input', typing whatever you want, and storing it as an item in a list. you can also retrieve that item, add an item, remove an item, etc etc etc<br/><br/>dictionaries are even better, as you got two entries~parameters ('get input' for each if you want), enabled you to hold an indentifying subject~topic (or even sentences nd paragraphs too, not just words), as well as your 'message' (text~strings: words, sentences, and paragraphs). Has all of the same features~uses~capabilities as lists.<br/><br/>also, lists~dictionaries can hold lists~dictionaries as their items (along with using nested 'for~foreach' ), so you can implement 'pages', and 'items' on each of those 'pages'.<br/><br/>-------<br/><br/>reading a 1000 page intro java book (in trying to get ahead for classes starting later this month) is really helping me expand my code+design ability, it gives me lots of code examples and explains stuff... though Java's internal setup's terminology~structure~etc, which makes the user-level terminology~structure~design~etc extremely confusing... though thankfully it is actually a lot like quest (as I slowly understand java better) ... if it wasn't for quest... there's no way I'd be understanding Java as I am (albiet strugglingly), quest really does things so much better, at least at the user level, compared to Java... finally after 650 pages (out of the 1000), I think I finally understand (I hope) 'referance variable creates a memory address location' vs an 'object instance creation', in regards to its 'pointing~referencing', laughs. This memory ~ memory space and address location and etc, machine~assembly language, stuff still greatly confuses me, sighs.<br/><br/>trying to get 1000 page java book read in 10 days, and then another ~1000 page C++ book read in another 10 days... before classes start... I HATE reading practically non-stop... the numerous code examples are extremely helpful... but oh is it also so boring to read through code example after code example after code example ...<br/><br/>I think I'm really going to have a hard time doing Java and C++, I can see myself getting the two of them (+ quest's XML + python + JS) confused, constantly, laughs... I'm hoping that quick lookups at the code will alleviate this issue...",
      "PostDate": "2015-08-08T07:54:49+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37502",
      "UserId": 0,
      "Username": "TM123",
      "UserAvatar": null,
      "UserGravatar": "6f54d3b84fe319d79f8df732b1676a50",
      "EditableText": "How's this? Each note is on a separate &quot;page.&quot; Reading flips through the pages.\n\n[code:11qp6gs3]&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;Journal&quot;&gt;\n    &lt;gameid&gt;31c8b0d3-5c93-4b12-ae5c-b6a599c6e852&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;journal&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;openable&quot; /&gt;\n      &lt;alias&gt;journal&lt;/alias&gt;\n      &lt;look&gt;This is a 3&quot; x 5&quot; notebook with metal covers&#46; The pages are a strange pliable substance which cannot be torn&#46; You could 'note' things in it&#46;&lt;/look&gt;\n      &lt;note type=&quot;script&quot;&gt;\n        // this is a comment\n        get input {\n          msg (&quot;This is the result&#58; &quot; + result)\n        }\n      &lt;/note&gt;\n      &lt;alt type=&quot;stringlist&quot;&gt;\n        &lt;value&gt;notebook&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;take /&gt;\n      &lt;pages type=&quot;stringlist&quot; /&gt;\n      &lt;currentpage type=&quot;int&quot;&gt;-1&lt;/currentpage&gt;\n      &lt;feature_container /&gt;\n      &lt;read type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n        if (journal&#46;isopen) {\n          journal&#46;currentpage = journal&#46;currentpage + 1\n          if (journal&#46;currentpage &gt; ListCount(journal&#46;pages) - 1) {\n            journal&#46;currentpage = 0\n          }\n          if (journal&#46;currentpage &lt;= ListCount(journal&#46;pages) - 1) {\n            msg (StringListItem(journal&#46;pages, journal&#46;currentpage))\n          }\n          else {\n            msg (&quot;There are no notes in the journal&#46;&quot;)\n          }\n        }\n        else {\n          msg (&quot;The journal is closed&#46;&quot;)\n        }\n      &#93;&#93;&gt;&lt;/read&gt;\n      &lt;openscript type=&quot;script&quot;&gt;\n        journal&#46;currentpage = -1\n        HelperOpenObject (journal)\n        msg (&quot;You open it&#46;&quot;)\n      &lt;/openscript&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;pencil&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;alias&gt;pencil&lt;/alias&gt;\n      &lt;take /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=&quot;note&quot;&gt;\n    &lt;pattern&gt;note&lt;/pattern&gt;\n    &lt;script&gt;\n      if (Got(journal)) {\n        if (Got(pencil)) {\n          if (journal&#46;isopen) {\n            msg (&quot;Enter your note&quot;)\n            get input {\n              list add (journal&#46;pages, result)\n            }\n          }\n          else {\n            msg (&quot;The journal is closed&#46;&quot;)\n          }\n        }\n        else {\n          msg (&quot;You need something to write with&#46;&quot;)\n        }\n      }\n      else {\n        msg (&quot;I don't understand your command&#46;&quot;)\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n&lt;/asl&gt;[/code:11qp6gs3]",
      "EditableFormat": "bbcode",
      "HTML": "How's this? Each note is on a separate &quot;page.&quot; Reading flips through the pages.<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;Journal&quot;&gt;<br/>    &lt;gameid&gt;31c8b0d3-5c93-4b12-ae5c-b6a599c6e852&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;journal&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;openable&quot; /&gt;<br/>      &lt;alias&gt;journal&lt;/alias&gt;<br/>      &lt;look&gt;This is a 3&quot; x 5&quot; notebook with metal covers&#46; The pages are a strange pliable substance which cannot be torn&#46; You could 'note' things in it&#46;&lt;/look&gt;<br/>      &lt;note type=&quot;script&quot;&gt;<br/>        // this is a comment<br/>        get input {<br/>          msg (&quot;This is the result&#58; &quot; + result)<br/>        }<br/>      &lt;/note&gt;<br/>      &lt;alt type=&quot;stringlist&quot;&gt;<br/>        &lt;value&gt;notebook&lt;/value&gt;<br/>      &lt;/alt&gt;<br/>      &lt;take /&gt;<br/>      &lt;pages type=&quot;stringlist&quot; /&gt;<br/>      &lt;currentpage type=&quot;int&quot;&gt;-1&lt;/currentpage&gt;<br/>      &lt;feature_container /&gt;<br/>      &lt;read type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>        if (journal&#46;isopen) {<br/>          journal&#46;currentpage = journal&#46;currentpage + 1<br/>          if (journal&#46;currentpage &gt; ListCount(journal&#46;pages) - 1) {<br/>            journal&#46;currentpage = 0<br/>          }<br/>          if (journal&#46;currentpage &lt;= ListCount(journal&#46;pages) - 1) {<br/>            msg (StringListItem(journal&#46;pages, journal&#46;currentpage))<br/>          }<br/>          else {<br/>            msg (&quot;There are no notes in the journal&#46;&quot;)<br/>          }<br/>        }<br/>        else {<br/>          msg (&quot;The journal is closed&#46;&quot;)<br/>        }<br/>      &#93;&#93;&gt;&lt;/read&gt;<br/>      &lt;openscript type=&quot;script&quot;&gt;<br/>        journal&#46;currentpage = -1<br/>        HelperOpenObject (journal)<br/>        msg (&quot;You open it&#46;&quot;)<br/>      &lt;/openscript&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;pencil&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;alias&gt;pencil&lt;/alias&gt;<br/>      &lt;take /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;command name=&quot;note&quot;&gt;<br/>    &lt;pattern&gt;note&lt;/pattern&gt;<br/>    &lt;script&gt;<br/>      if (Got(journal)) {<br/>        if (Got(pencil)) {<br/>          if (journal&#46;isopen) {<br/>            msg (&quot;Enter your note&quot;)<br/>            get input {<br/>              list add (journal&#46;pages, result)<br/>            }<br/>          }<br/>          else {<br/>            msg (&quot;The journal is closed&#46;&quot;)<br/>          }<br/>        }<br/>        else {<br/>          msg (&quot;You need something to write with&#46;&quot;)<br/>        }<br/>      }<br/>      else {<br/>        msg (&quot;I don't understand your command&#46;&quot;)<br/>      }<br/>    &lt;/script&gt;<br/>  &lt;/command&gt;<br/>&lt;/asl&gt;</code></pre>",
      "PostDate": "2015-08-08T17:41:05+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37504",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "very nice TM123 !!!\n\nexcellently done for its current state (and so fast too, you seem like a good coder, the more good coders here the better, hehe. That way we pester each of you less with our questions or needing help, laughs)\n\n--------\n\nobviously, people may~will want some or much more features with it (such as being able to select what page and what item to see~read, previous page input~goto, first page input~goto, next page input~goto, last page input~goto, next X page input~goto, previous X page input~goto, organizational structuring of your inputs~notes, to do quests~missions~tasks, completed quests~missions~tasks, etc etc etc) ... and~or a GUI with it, laughs. This is obviously a ton more work, to implement all of these additional features, to make a fully functional diary~journal~notebook. This would be a fully functional journal~diary~notebook~log~records, as comparing to a more skeleton journal~diary~notebook~log~record that you quickly created for use.",
      "EditableFormat": "bbcode",
      "HTML": "very nice TM123 !!!<br/><br/>excellently done for its current state (and so fast too, you seem like a good coder, the more good coders here the better, hehe. That way we pester each of you less with our questions or needing help, laughs)<br/><br/>--------<br/><br/>obviously, people may~will want some or much more features with it (such as being able to select what page and what item to see~read, previous page input~goto, first page input~goto, next page input~goto, last page input~goto, next X page input~goto, previous X page input~goto, organizational structuring of your inputs~notes, to do quests~missions~tasks, completed quests~missions~tasks, etc etc etc) ... and~or a GUI with it, laughs. This is obviously a ton more work, to implement all of these additional features, to make a fully functional diary~journal~notebook. This would be a fully functional journal~diary~notebook~log~records, as comparing to a more skeleton journal~diary~notebook~log~record that you quickly created for use.",
      "PostDate": "2015-08-08T18:25:47+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37507",
      "UserId": 0,
      "Username": "TM123",
      "UserAvatar": null,
      "UserGravatar": "6f54d3b84fe319d79f8df732b1676a50",
      "EditableText": "Here's another using a dictionary instead of a list.\nFeatures:\n32 pages.\nhints on how to use in the description.\nCommands:\nopen, close\nturn journal to page #\nnote -- appends an entry to the current page, entries separated by a &lt;br&gt;\nerase journal -- erases the last entry on the current page\nread journal -- read the current page\n\nmaybe each page could have a sub-dictionary so that each entry would have a header and could be erased/appended to independently. And a highlight pen...\n\n[code:1nrg08h1]&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;Journal&quot;&gt;\n    &lt;gameid&gt;31c8b0d3-5c93-4b12-ae5c-b6a599c6e852&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n    &lt;start type=&quot;script&quot;&gt;\n      firsttime {\n        for (i, 1, 32, 1) {\n          dictionary add (journal&#46;pages2, &quot;Page &quot; + i, &quot;&quot;)\n        }\n      }\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;journal&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;openable&quot; /&gt;\n      &lt;alias&gt;journal&lt;/alias&gt;\n      &lt;look&gt;This is a 3&quot; x 5&quot; notebook with metal covers&#46; The 32 pages are a strange pliable substance which cannot be torn&#46; It looks like you could turn the journal to page #, and you could 'note' things in it&#46;&lt;/look&gt;\n      &lt;alt type=&quot;stringlist&quot;&gt;\n        &lt;value&gt;notebook&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;take /&gt;\n      &lt;currentpage type=&quot;int&quot;&gt;1&lt;/currentpage&gt;\n      &lt;feature_container /&gt;\n      &lt;read type=&quot;script&quot;&gt;\n        if (journal&#46;isopen) {\n          msg (&quot;Page &quot; + journal&#46;currentpage)\n          msg (StringDictionaryItem(journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage))\n        }\n        else {\n          msg (&quot;The journal is closed&#46;&quot;)\n        }\n      &lt;/read&gt;\n      &lt;openscript type=&quot;script&quot;&gt;\n        journal&#46;currentpage = 1\n        HelperOpenObject (journal)\n        msg (&quot;You open it&#46;&quot;)\n      &lt;/openscript&gt;\n      &lt;pages2 type=&quot;stringdictionary&quot; /&gt;\n      &lt;erase type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n        blah = 1\n        if (Got(pencil)) {\n          blah = blah + 2\n        }\n        if (journal&#46;isopen) {\n          blah = blah + 4\n        }\n        switch (blah) {\n          case (1, 5) {\n            msg (&quot;You need something to erase with&#46;&quot;)\n          }\n          case (3) {\n            msg (&quot;The journal is closed&#46;&quot;)\n          }\n          case (7) {\n            newtextlist = Split(StringDictionaryItem(journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage), &quot;&lt;br&gt;&quot;)\n            list remove (newtextlist, StringListItem (newtextlist, ListCount(newtextlist) - 1))\n            if (ListCount(newtextlist) &gt; 0) {\n              newtext = Join (newtextlist, &quot;&lt;br&gt;&quot;)\n            }\n            else {\n              newtext = &quot;&quot;\n            }\n            dictionary remove (journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage)\n            dictionary add (journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage, newtext)\n            msg (&quot;OK&quot;)\n          }\n        }\n      &#93;&#93;&gt;&lt;/erase&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;pencil&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;alias&gt;pencil&lt;/alias&gt;\n      &lt;take /&gt;\n      &lt;look&gt;This is a sharp #2 pencil with an eraser&#46;&lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=&quot;note&quot;&gt;\n    &lt;pattern&gt;note&lt;/pattern&gt;\n    &lt;script&gt;&lt;!&#91;CDATA&#91;\n      blah = 0\n      if (Got(journal)) {\n        blah = 1\n      }\n      if (Got(pencil)) {\n        blah = blah + 2\n      }\n      if (journal&#46;isopen) {\n        blah = blah + 4\n      }\n      switch (blah) {\n        case (0, 4) {\n          msg (&quot;I don't understand your command&#46;&quot;)\n        }\n        case (1, 5) {\n          msg (&quot;You need something to write with&#46;&quot;)\n        }\n        case (2, 6) {\n          msg (&quot;You need something to write on&#46;&quot;)\n        }\n        case (3) {\n          msg (&quot;The journal is closed&#46;&quot;)\n        }\n        case (7) {\n          msg (&quot;Enter your note&#46;&quot;)\n          get input {\n            newtext = StringDictionaryItem(journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage) + &quot;&lt;br&gt;&quot; + result\n            dictionary remove (journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage)\n            dictionary add (journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage, newtext)\n            msg (&quot;OK&quot;)\n          }\n        }\n      }\n    &#93;&#93;&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=&quot;turnjournalpage&quot;&gt;\n    &lt;pattern&gt;turn journal to page #textpage#&lt;/pattern&gt;\n    &lt;script&gt;&lt;!&#91;CDATA&#91;\n      if (Got(journal)) {\n        blah = toint(textpage)\n        if (blah &gt; 0 and blah &lt; 33) {\n          HelperOpenObject (journal)\n          journal&#46;currentpage = toint(textpage)\n          msg (&quot;You turn to page &quot; + (blah))\n        }\n        else {\n          msg (&quot;There is no page &quot; + blah)\n        }\n      }\n      else {\n        msg (&quot;I don't understand your command&#46;&quot;)\n      }\n    &#93;&#93;&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb&gt;\n    &lt;property&gt;erase&lt;/property&gt;\n    &lt;pattern&gt;erase&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't erase &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;[/code:1nrg08h1]",
      "EditableFormat": "bbcode",
      "HTML": "Here's another using a dictionary instead of a list.<br/>Features:<br/>32 pages.<br/>hints on how to use in the description.<br/>Commands:<br/>open, close<br/>turn journal to page #<br/>note -- appends an entry to the current page, entries separated by a &lt;br&gt;<br/>erase journal -- erases the last entry on the current page<br/>read journal -- read the current page<br/><br/>maybe each page could have a sub-dictionary so that each entry would have a header and could be erased/appended to independently. And a highlight pen...<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;Journal&quot;&gt;<br/>    &lt;gameid&gt;31c8b0d3-5c93-4b12-ae5c-b6a599c6e852&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>    &lt;start type=&quot;script&quot;&gt;<br/>      firsttime {<br/>        for (i, 1, 32, 1) {<br/>          dictionary add (journal&#46;pages2, &quot;Page &quot; + i, &quot;&quot;)<br/>        }<br/>      }<br/>    &lt;/start&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;journal&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;openable&quot; /&gt;<br/>      &lt;alias&gt;journal&lt;/alias&gt;<br/>      &lt;look&gt;This is a 3&quot; x 5&quot; notebook with metal covers&#46; The 32 pages are a strange pliable substance which cannot be torn&#46; It looks like you could turn the journal to page #, and you could 'note' things in it&#46;&lt;/look&gt;<br/>      &lt;alt type=&quot;stringlist&quot;&gt;<br/>        &lt;value&gt;notebook&lt;/value&gt;<br/>      &lt;/alt&gt;<br/>      &lt;take /&gt;<br/>      &lt;currentpage type=&quot;int&quot;&gt;1&lt;/currentpage&gt;<br/>      &lt;feature_container /&gt;<br/>      &lt;read type=&quot;script&quot;&gt;<br/>        if (journal&#46;isopen) {<br/>          msg (&quot;Page &quot; + journal&#46;currentpage)<br/>          msg (StringDictionaryItem(journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage))<br/>        }<br/>        else {<br/>          msg (&quot;The journal is closed&#46;&quot;)<br/>        }<br/>      &lt;/read&gt;<br/>      &lt;openscript type=&quot;script&quot;&gt;<br/>        journal&#46;currentpage = 1<br/>        HelperOpenObject (journal)<br/>        msg (&quot;You open it&#46;&quot;)<br/>      &lt;/openscript&gt;<br/>      &lt;pages2 type=&quot;stringdictionary&quot; /&gt;<br/>      &lt;erase type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>        blah = 1<br/>        if (Got(pencil)) {<br/>          blah = blah + 2<br/>        }<br/>        if (journal&#46;isopen) {<br/>          blah = blah + 4<br/>        }<br/>        switch (blah) {<br/>          case (1, 5) {<br/>            msg (&quot;You need something to erase with&#46;&quot;)<br/>          }<br/>          case (3) {<br/>            msg (&quot;The journal is closed&#46;&quot;)<br/>          }<br/>          case (7) {<br/>            newtextlist = Split(StringDictionaryItem(journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage), &quot;&lt;br&gt;&quot;)<br/>            list remove (newtextlist, StringListItem (newtextlist, ListCount(newtextlist) - 1))<br/>            if (ListCount(newtextlist) &gt; 0) {<br/>              newtext = Join (newtextlist, &quot;&lt;br&gt;&quot;)<br/>            }<br/>            else {<br/>              newtext = &quot;&quot;<br/>            }<br/>            dictionary remove (journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage)<br/>            dictionary add (journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage, newtext)<br/>            msg (&quot;OK&quot;)<br/>          }<br/>        }<br/>      &#93;&#93;&gt;&lt;/erase&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;pencil&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;alias&gt;pencil&lt;/alias&gt;<br/>      &lt;take /&gt;<br/>      &lt;look&gt;This is a sharp #2 pencil with an eraser&#46;&lt;/look&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;command name=&quot;note&quot;&gt;<br/>    &lt;pattern&gt;note&lt;/pattern&gt;<br/>    &lt;script&gt;&lt;!&#91;CDATA&#91;<br/>      blah = 0<br/>      if (Got(journal)) {<br/>        blah = 1<br/>      }<br/>      if (Got(pencil)) {<br/>        blah = blah + 2<br/>      }<br/>      if (journal&#46;isopen) {<br/>        blah = blah + 4<br/>      }<br/>      switch (blah) {<br/>        case (0, 4) {<br/>          msg (&quot;I don't understand your command&#46;&quot;)<br/>        }<br/>        case (1, 5) {<br/>          msg (&quot;You need something to write with&#46;&quot;)<br/>        }<br/>        case (2, 6) {<br/>          msg (&quot;You need something to write on&#46;&quot;)<br/>        }<br/>        case (3) {<br/>          msg (&quot;The journal is closed&#46;&quot;)<br/>        }<br/>        case (7) {<br/>          msg (&quot;Enter your note&#46;&quot;)<br/>          get input {<br/>            newtext = StringDictionaryItem(journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage) + &quot;&lt;br&gt;&quot; + result<br/>            dictionary remove (journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage)<br/>            dictionary add (journal&#46;pages2, &quot;Page &quot; + journal&#46;currentpage, newtext)<br/>            msg (&quot;OK&quot;)<br/>          }<br/>        }<br/>      }<br/>    &#93;&#93;&gt;&lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;command name=&quot;turnjournalpage&quot;&gt;<br/>    &lt;pattern&gt;turn journal to page #textpage#&lt;/pattern&gt;<br/>    &lt;script&gt;&lt;!&#91;CDATA&#91;<br/>      if (Got(journal)) {<br/>        blah = toint(textpage)<br/>        if (blah &gt; 0 and blah &lt; 33) {<br/>          HelperOpenObject (journal)<br/>          journal&#46;currentpage = toint(textpage)<br/>          msg (&quot;You turn to page &quot; + (blah))<br/>        }<br/>        else {<br/>          msg (&quot;There is no page &quot; + blah)<br/>        }<br/>      }<br/>      else {<br/>        msg (&quot;I don't understand your command&#46;&quot;)<br/>      }<br/>    &#93;&#93;&gt;&lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;verb&gt;<br/>    &lt;property&gt;erase&lt;/property&gt;<br/>    &lt;pattern&gt;erase&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't erase &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>&lt;/asl&gt;</code></pre>",
      "PostDate": "2015-08-08T20:00:27+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37509",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "Wow! I'll have to give those a shot. Thanks a lot TMI! Appreciate it. \n\nI tried out the first code (It's a little more complicated than I needed) and there seems to be an issue with it working and not lining up &quot;lines blah blah with blah blah&quot;\n\nI don't really need it to be complicated. Just the journal object (no pencil or pen required) with the player being able to write in entries with one big long page that doesn't need to be turned. \n\n\nHK keep up the hard work too! I hope classes are going okay so far.",
      "EditableFormat": "bbcode",
      "HTML": "Wow! I'll have to give those a shot. Thanks a lot TMI! Appreciate it. <br/><br/>I tried out the first code (It's a little more complicated than I needed) and there seems to be an issue with it working and not lining up &quot;lines blah blah with blah blah&quot;<br/><br/>I don't really need it to be complicated. Just the journal object (no pencil or pen required) with the player being able to write in entries with one big long page that doesn't need to be turned. <br/><br/><br/>HK keep up the hard work too! I hope classes are going okay so far.",
      "PostDate": "2015-08-08T22:00:26+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37510",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Wow, thanks again Tm123, I didn't mean you had to create a more full functional code, just that people will want one... that someone may make in the future for them, so thanks for doing so! If I had the time, I could maybe have done it, though it'd take me a lot longer to craft+bug fix, and would be a lot more messy (poor) coded, lol. Problem is that I got a lot of other things in coding and~or in learning to code, to do... sighs. Making a journal would have just been anothing thing added onto my 'to do' list, in learning to code more and inch towards making a game, laughs. \n\n------\n\noff-topic\n\n@Neonayon:\n\nclasses haven't started yet, I'm trying to get what work I can do (such as reading...ugh) done, ahead of the classes' start date (late this month: ~ 26th), and all of the other stuff I need to do too (payments and etc).",
      "EditableFormat": "bbcode",
      "HTML": "Wow, thanks again Tm123, I didn't mean you had to create a more full functional code, just that people will want one... that someone may make in the future for them, so thanks for doing so! If I had the time, I could maybe have done it, though it'd take me a lot longer to craft+bug fix, and would be a lot more messy (poor) coded, lol. Problem is that I got a lot of other things in coding and~or in learning to code, to do... sighs. Making a journal would have just been anothing thing added onto my 'to do' list, in learning to code more and inch towards making a game, laughs. <br/><br/>------<br/><br/>off-topic<br/><br/>@Neonayon:<br/><br/>classes haven't started yet, I'm trying to get what work I can do (such as reading...ugh) done, ahead of the classes' start date (late this month: ~ 26th), and all of the other stuff I need to do too (payments and etc).",
      "PostDate": "2015-08-08T22:27:57+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37518",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "I don't suppose you all could break that down? It's hard to grasp.",
      "EditableFormat": "bbcode",
      "HTML": "I don't suppose you all could break that down? It's hard to grasp.",
      "PostDate": "2015-08-09T22:43:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37524",
      "UserId": 0,
      "Username": "TM123",
      "UserAvatar": null,
      "UserGravatar": "6f54d3b84fe319d79f8df732b1676a50",
      "EditableText": "OK, here's a bare minimum journal.\nMake an object named &quot;journal.&quot;\nadd a string attribute: &quot;text&quot;\nadd a verb: &quot;note&quot;\nadd the verb script&#058;\n[code:1bkuh3rb]msg (&quot;Enter your note&#46;&quot;)\nget input {\n  journal&#46;text = journal&#46;text + &quot;&lt;br&gt;&quot; + result\n}\nmsg (&quot;OK&quot;)\n[/code:1bkuh3rb]\nThat appends the input (&quot;result&quot;) onto the &quot;text&quot; attribute with a &quot;&lt;br&gt;&quot;\nadd verb: &quot;read&quot;\nadd the verb script&#058;\n[code:1bkuh3rb]msg (journal&#46;text)[/code:1bkuh3rb]\n\nand that's it.\n\nEven simpler: skip the attribute, skip the read verb and script. Change the note script from &quot;journal.text&quot; to &quot;journal.look&quot; -- to read it just &quot;look at journal&quot; I don't think you can get any simpler.\n\n\n\nAnd here's version 1.1 with an improved page turning command - the other didn't check if the input was an integer. Now you can &quot;turn to page #&quot; &quot;turn page&quot; and &quot;turn back&quot; along with a few variations -- all with one regexp which won't match &quot;turn knob&quot; or &quot;turn into a werewolf.&quot;\n\n[code:1bkuh3rb]&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;Journal&quot;&gt;\n    &lt;gameid&gt;31c8b0d3-5c93-4b12-ae5c-b6a599c6e852&lt;/gameid&gt;\n    &lt;version&gt;1&#46;1&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n    &lt;start type=&quot;script&quot;&gt;\n      firsttime {\n        for (i, 1, 32, 1) {\n          dictionary add (journal&#46;pages, &quot;Page &quot; + i, &quot;&quot;)\n        }\n      }\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;journal&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;openable&quot; /&gt;\n      &lt;alias&gt;journal&lt;/alias&gt;\n      &lt;look&gt;This is a 3&quot; x 5&quot; notebook with metal covers&#46; The 32 pages are a strange pliable substance which cannot be torn&#46; It looks like you could turn the journal to page #, and you could 'note' things in it&#46;&lt;/look&gt;\n      &lt;alt type=&quot;stringlist&quot;&gt;\n        &lt;value&gt;notebook&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;take /&gt;\n      &lt;currentpage type=&quot;int&quot;&gt;1&lt;/currentpage&gt;\n      &lt;feature_container /&gt;\n      &lt;pages type=&quot;stringdictionary&quot; /&gt;\n      &lt;read type=&quot;script&quot;&gt;\n        if (journal&#46;isopen) {\n          msg (&quot;Page &quot; + journal&#46;currentpage)\n          msg (StringDictionaryItem(journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage))\n        }\n        else {\n          msg (&quot;The journal is closed&#46;&quot;)\n        }\n      &lt;/read&gt;\n      &lt;openscript type=&quot;script&quot;&gt;\n        journal&#46;currentpage = 1\n        HelperOpenObject (journal)\n        msg (&quot;You open it&#46;&quot;)\n      &lt;/openscript&gt;\n      &lt;erase type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n        blah = 1\n        if (Got(pencil)) {\n          blah = blah + 2\n        }\n        if (journal&#46;isopen) {\n          blah = blah + 4\n        }\n        switch (blah) {\n          case (1, 5) {\n            msg (&quot;You need something to erase with&#46;&quot;)\n          }\n          case (3) {\n            msg (&quot;The journal is closed&#46;&quot;)\n          }\n          case (7) {\n            newtextlist = Split(StringDictionaryItem(journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage), &quot;&lt;br&gt;&quot;)\n            list remove (newtextlist, StringListItem (newtextlist, ListCount(newtextlist) - 1))\n            if (ListCount(newtextlist) &gt; 0) {\n              newtext = Join (newtextlist, &quot;&lt;br&gt;&quot;)\n            }\n            else {\n              newtext = &quot;&quot;\n            }\n            dictionary remove (journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage)\n            dictionary add (journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage, newtext)\n            msg (&quot;OK&quot;)\n          }\n        }\n      &#93;&#93;&gt;&lt;/erase&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;pencil&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;alias&gt;pencil&lt;/alias&gt;\n      &lt;take /&gt;\n      &lt;look&gt;This is a sharp #2 pencil with an eraser&#46;&lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=&quot;note&quot;&gt;\n    &lt;pattern&gt;note&lt;/pattern&gt;\n    &lt;script&gt;&lt;!&#91;CDATA&#91;\n      blah = 0\n      if (Got(journal)) {\n        blah = 1\n      }\n      if (Got(pencil)) {\n        blah = blah + 2\n      }\n      if (journal&#46;isopen) {\n        blah = blah + 4\n      }\n      switch (blah) {\n        case (0, 4) {\n          msg (&quot;I don't understand your command&#46;&quot;)\n        }\n        case (1, 5) {\n          msg (&quot;You need something to write with&#46;&quot;)\n        }\n        case (2, 6) {\n          msg (&quot;You need something to write on&#46;&quot;)\n        }\n        case (3) {\n          msg (&quot;The journal is closed&#46;&quot;)\n        }\n        case (7) {\n          msg (&quot;Enter your note&#46;&quot;)\n          get input {\n            newtext = StringDictionaryItem(journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage) + &quot;&lt;br&gt;&quot; + result\n            dictionary remove (journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage)\n            dictionary add (journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage, newtext)\n            msg (&quot;OK&quot;)\n          }\n        }\n      }\n    &#93;&#93;&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=&quot;turnjournalpage&quot;&gt;\n    &lt;pattern type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;^turn (the journal |journal )?to page (?&lt;text&gt;\\d+)$|^turn (the |a )?(?&lt;text&gt;page)$|^turn (the page |a page |page )?(?&lt;text&gt;back)$&#93;&#93;&gt;&lt;/pattern&gt;\n    &lt;script&gt;&lt;!&#91;CDATA&#91;\n      switch (true) {\n        case (IsInt (text)) {\n          blah = toint(text)\n          if (blah &gt; 0 and blah &lt; 33) {\n            HelperOpenObject (journal)\n            journal&#46;currentpage = blah\n            msg (&quot;You turn to page &quot; + blah)\n          }\n          else {\n            msg (&quot;There is no page &quot; + blah)\n          }\n        }\n        case (text = &quot;page&quot;) {\n          if (journal&#46;isopen) {\n            journal&#46;currentpage = journal&#46;currentpage + 1\n            if (journal&#46;currentpage = 33) {\n              journal&#46;currentpage = 1\n            }\n            msg (&quot;You turn to page &quot; + journal&#46;currentpage)\n          }\n          else {\n            msg (&quot;The journal is closed&#46;&quot;)\n          }\n        }\n        case (text = &quot;back&quot;) {\n          if (journal&#46;isopen) {\n            journal&#46;currentpage = journal&#46;currentpage - 1\n            if (journal&#46;currentpage = 0) {\n              journal&#46;currentpage = 32\n            }\n            msg (&quot;You turn to page &quot; + journal&#46;currentpage)\n          }\n          else {\n            msg (&quot;The journal is closed&#46;&quot;)\n          }\n        }\n        default {\n          msg (&quot;I don't understand your command&#46;&quot;)\n        }\n      }\n    &#93;&#93;&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb&gt;\n    &lt;property&gt;erase&lt;/property&gt;\n    &lt;pattern&gt;erase&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't erase &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;[/code:1bkuh3rb]",
      "EditableFormat": "bbcode",
      "HTML": "OK, here's a bare minimum journal.<br/>Make an object named &quot;journal.&quot;<br/>add a string attribute: &quot;text&quot;<br/>add a verb: &quot;note&quot;<br/>add the verb script&#058;<br/><pre><code>msg (&quot;Enter your note&#46;&quot;)<br/>get input {<br/>  journal&#46;text = journal&#46;text + &quot;&lt;br&gt;&quot; + result<br/>}<br/>msg (&quot;OK&quot;)<br/></code></pre><br/>That appends the input (&quot;result&quot;) onto the &quot;text&quot; attribute with a &quot;&lt;br&gt;&quot;<br/>add verb: &quot;read&quot;<br/>add the verb script&#058;<br/><pre><code>msg (journal&#46;text)</code></pre><br/><br/>and that's it.<br/><br/>Even simpler: skip the attribute, skip the read verb and script. Change the note script from &quot;journal.text&quot; to &quot;journal.look&quot; -- to read it just &quot;look at journal&quot; I don't think you can get any simpler.<br/><br/><br/><br/>And here's version 1.1 with an improved page turning command - the other didn't check if the input was an integer. Now you can &quot;turn to page #&quot; &quot;turn page&quot; and &quot;turn back&quot; along with a few variations -- all with one regexp which won't match &quot;turn knob&quot; or &quot;turn into a werewolf.&quot;<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;Journal&quot;&gt;<br/>    &lt;gameid&gt;31c8b0d3-5c93-4b12-ae5c-b6a599c6e852&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;1&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>    &lt;start type=&quot;script&quot;&gt;<br/>      firsttime {<br/>        for (i, 1, 32, 1) {<br/>          dictionary add (journal&#46;pages, &quot;Page &quot; + i, &quot;&quot;)<br/>        }<br/>      }<br/>    &lt;/start&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;journal&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;openable&quot; /&gt;<br/>      &lt;alias&gt;journal&lt;/alias&gt;<br/>      &lt;look&gt;This is a 3&quot; x 5&quot; notebook with metal covers&#46; The 32 pages are a strange pliable substance which cannot be torn&#46; It looks like you could turn the journal to page #, and you could 'note' things in it&#46;&lt;/look&gt;<br/>      &lt;alt type=&quot;stringlist&quot;&gt;<br/>        &lt;value&gt;notebook&lt;/value&gt;<br/>      &lt;/alt&gt;<br/>      &lt;take /&gt;<br/>      &lt;currentpage type=&quot;int&quot;&gt;1&lt;/currentpage&gt;<br/>      &lt;feature_container /&gt;<br/>      &lt;pages type=&quot;stringdictionary&quot; /&gt;<br/>      &lt;read type=&quot;script&quot;&gt;<br/>        if (journal&#46;isopen) {<br/>          msg (&quot;Page &quot; + journal&#46;currentpage)<br/>          msg (StringDictionaryItem(journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage))<br/>        }<br/>        else {<br/>          msg (&quot;The journal is closed&#46;&quot;)<br/>        }<br/>      &lt;/read&gt;<br/>      &lt;openscript type=&quot;script&quot;&gt;<br/>        journal&#46;currentpage = 1<br/>        HelperOpenObject (journal)<br/>        msg (&quot;You open it&#46;&quot;)<br/>      &lt;/openscript&gt;<br/>      &lt;erase type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>        blah = 1<br/>        if (Got(pencil)) {<br/>          blah = blah + 2<br/>        }<br/>        if (journal&#46;isopen) {<br/>          blah = blah + 4<br/>        }<br/>        switch (blah) {<br/>          case (1, 5) {<br/>            msg (&quot;You need something to erase with&#46;&quot;)<br/>          }<br/>          case (3) {<br/>            msg (&quot;The journal is closed&#46;&quot;)<br/>          }<br/>          case (7) {<br/>            newtextlist = Split(StringDictionaryItem(journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage), &quot;&lt;br&gt;&quot;)<br/>            list remove (newtextlist, StringListItem (newtextlist, ListCount(newtextlist) - 1))<br/>            if (ListCount(newtextlist) &gt; 0) {<br/>              newtext = Join (newtextlist, &quot;&lt;br&gt;&quot;)<br/>            }<br/>            else {<br/>              newtext = &quot;&quot;<br/>            }<br/>            dictionary remove (journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage)<br/>            dictionary add (journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage, newtext)<br/>            msg (&quot;OK&quot;)<br/>          }<br/>        }<br/>      &#93;&#93;&gt;&lt;/erase&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;pencil&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;alias&gt;pencil&lt;/alias&gt;<br/>      &lt;take /&gt;<br/>      &lt;look&gt;This is a sharp #2 pencil with an eraser&#46;&lt;/look&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;command name=&quot;note&quot;&gt;<br/>    &lt;pattern&gt;note&lt;/pattern&gt;<br/>    &lt;script&gt;&lt;!&#91;CDATA&#91;<br/>      blah = 0<br/>      if (Got(journal)) {<br/>        blah = 1<br/>      }<br/>      if (Got(pencil)) {<br/>        blah = blah + 2<br/>      }<br/>      if (journal&#46;isopen) {<br/>        blah = blah + 4<br/>      }<br/>      switch (blah) {<br/>        case (0, 4) {<br/>          msg (&quot;I don't understand your command&#46;&quot;)<br/>        }<br/>        case (1, 5) {<br/>          msg (&quot;You need something to write with&#46;&quot;)<br/>        }<br/>        case (2, 6) {<br/>          msg (&quot;You need something to write on&#46;&quot;)<br/>        }<br/>        case (3) {<br/>          msg (&quot;The journal is closed&#46;&quot;)<br/>        }<br/>        case (7) {<br/>          msg (&quot;Enter your note&#46;&quot;)<br/>          get input {<br/>            newtext = StringDictionaryItem(journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage) + &quot;&lt;br&gt;&quot; + result<br/>            dictionary remove (journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage)<br/>            dictionary add (journal&#46;pages, &quot;Page &quot; + journal&#46;currentpage, newtext)<br/>            msg (&quot;OK&quot;)<br/>          }<br/>        }<br/>      }<br/>    &#93;&#93;&gt;&lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;command name=&quot;turnjournalpage&quot;&gt;<br/>    &lt;pattern type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;^turn (the journal |journal )?to page (?&lt;text&gt;\\d+)$|^turn (the |a )?(?&lt;text&gt;page)$|^turn (the page |a page |page )?(?&lt;text&gt;back)$&#93;&#93;&gt;&lt;/pattern&gt;<br/>    &lt;script&gt;&lt;!&#91;CDATA&#91;<br/>      switch (true) {<br/>        case (IsInt (text)) {<br/>          blah = toint(text)<br/>          if (blah &gt; 0 and blah &lt; 33) {<br/>            HelperOpenObject (journal)<br/>            journal&#46;currentpage = blah<br/>            msg (&quot;You turn to page &quot; + blah)<br/>          }<br/>          else {<br/>            msg (&quot;There is no page &quot; + blah)<br/>          }<br/>        }<br/>        case (text = &quot;page&quot;) {<br/>          if (journal&#46;isopen) {<br/>            journal&#46;currentpage = journal&#46;currentpage + 1<br/>            if (journal&#46;currentpage = 33) {<br/>              journal&#46;currentpage = 1<br/>            }<br/>            msg (&quot;You turn to page &quot; + journal&#46;currentpage)<br/>          }<br/>          else {<br/>            msg (&quot;The journal is closed&#46;&quot;)<br/>          }<br/>        }<br/>        case (text = &quot;back&quot;) {<br/>          if (journal&#46;isopen) {<br/>            journal&#46;currentpage = journal&#46;currentpage - 1<br/>            if (journal&#46;currentpage = 0) {<br/>              journal&#46;currentpage = 32<br/>            }<br/>            msg (&quot;You turn to page &quot; + journal&#46;currentpage)<br/>          }<br/>          else {<br/>            msg (&quot;The journal is closed&#46;&quot;)<br/>          }<br/>        }<br/>        default {<br/>          msg (&quot;I don't understand your command&#46;&quot;)<br/>        }<br/>      }<br/>    &#93;&#93;&gt;&lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;verb&gt;<br/>    &lt;property&gt;erase&lt;/property&gt;<br/>    &lt;pattern&gt;erase&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't erase &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>&lt;/asl&gt;</code></pre>",
      "PostDate": "2015-08-10T01:24:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37526",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "Thanks! The simple journal thing works great! I appreciate that TMI, and HK. Good to see you again too Xan!",
      "EditableFormat": "bbcode",
      "HTML": "Thanks! The simple journal thing works great! I appreciate that TMI, and HK. Good to see you again too Xan!",
      "PostDate": "2015-08-10T02:33:06+01:00",
      "LastEditDate": null
    }
  ]
}
