{
  "Topic": {
    "TopicId": "ppim1jbkiemsvvpv19nzkg",
    "ForumId": "10",
    "Title": "Status Attributes",
    "LastUpdated": "2018-01-27T23:09:45.1146023Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "14d05108-d6f8-4af0-bd2b-c1ca236a72a5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've not been here that long; but I've noticed more than a few threads from people having problems with statusattributes. Mostly because people do something that seems intuitive, but doesn't actually work.\r\n\r\nAnd it seems to me that if if it could be made so that the \"obvious\" behaviour actually worked, that would save a lot of people some trouble. Maybe something like this.\r\n\r\nModifications made:\r\n* If the value in the statusattributes dictionary doesn't have a `!` in it, add `\" !\"` to the end. Because an entry in the statusattributes pane that doesn't display its value is pretty useless.\r\n  * Exception: If the attribute is a boolean true, display it as it is. If false, hide the line.\r\n* If the key in the statusattributes dictionary is \"player.hitpoints\" or similar, behave sensibly. It's very unlikely that anyone intended to specify an attribute name with a dot in.\r\n  * The script I've used here will behave oddly if you give it a key like \"game.player.attack.hitpoints\" - making it behave sensibly in these cases would take more code; and I can think of a couple of edge cases where this might actually do what the player wants, but my English skills aren't currently up to explaining.\r\n\r\n```\r\n  <function name=\"AddStatusAttributesForElement\" parameters=\"status, element, statusAttributes\" type=\"string\">\r\n    <![CDATA[\r\n    if (statusAttributes <> null) {\r\n      foreach (attr, statusAttributes) {\r\n        if (LengthOf(status) > 0) {\r\n          if (not EndsWith(status, \"\\n\")) {\r\n            status = status + \"\\n\"\r\n          }\r\n        }\r\n        // This is a slightly awkward way of doing it; to ensure that it doesn't break on attribute names which actually contain a dot (if that's legal?)\r\n        value = GetAttribute(element, attr)\r\n        if ((Instr(attr, \".\") > 0) and (value = null)) {\r\n          obj = element\r\n          components = Split (attr, \".\")\r\n          foreach (c, components) {\r\n            if (obj = null) {\r\n              obj = element\r\n            }\r\n            if (HasObject(obj, c)) {\r\n              obj = GetAttribute(obj, c)\r\n              value = obj\r\n            }\r\n            else {\r\n              if (HasAttribute(obj, c)) {\r\n                value = GetAttribute(obj, c)\r\n              }\r\n              obj = GetObject(c)\r\n            }\r\n          }\r\n        }\r\n        status = status + FormatStatusAttribute(attr, value, StringDictionaryItem(statusAttributes, attr))\r\n      }\r\n    }\r\n    return (status)\r\n    ]]>\r\n  </function>\r\n\r\n  <function name=\"FormatStatusAttribute\" parameters=\"attr, value, format\" type=\"string\">\r\n    if (LengthOf(format) = 0) {\r\n      return (CapFirst(attr) + \": \" + value)\r\n    } else {\r\n      if (TypeOf(value) = \"int\" and attr = \"money\" and HasString(game, \"moneyformat\")) {\r\n        value = DisplayMoney(value)\r\n      }\r\n      else if (TypeOf(value) = \"int\" or TypeOf(value) = \"double\") {\r\n        value = ToString(value)\r\n      }\r\n      else if (TypeOf(value) = \"null\") {\r\n        value = \"\"\r\n      }\r\n      if (Instr(format, \"!\") = 0) {\r\n        if (TypeOf(value) = \"boolean\") {\r\n          if (value) {\r\n            return (format)\r\n          }\r\n          else {\r\n            return (\"\")\r\n          }\r\n        }\r\n        else {\r\n          format = format + \" !\"\r\n        }\r\n      }\r\n      return (Replace(format, \"!\", value))\r\n    }\r\n  </function>\r\n```\r\n\r\n(started spacing out, panic attack in the middle of writing this, so sorry if I made any dumb mistakes)",
      "EditableFormat": "markdown",
      "HTML": "<p>I've not been here that long; but I've noticed more than a few threads from people having problems with statusattributes. Mostly because people do something that seems intuitive, but doesn't actually work.</p>\n<p>And it seems to me that if if it could be made so that the \"obvious\" behaviour actually worked, that would save a lot of people some trouble. Maybe something like this.</p>\n<p>Modifications made:</p>\n<ul>\n<li>If the value in the statusattributes dictionary doesn't have a <code>!</code> in it, add <code>\" !\"</code> to the end. Because an entry in the statusattributes pane that doesn't display its value is pretty useless.\n<ul>\n<li>Exception: If the attribute is a boolean true, display it as it is. If false, hide the line.</li>\n</ul>\n</li>\n<li>If the key in the statusattributes dictionary is \"player.hitpoints\" or similar, behave sensibly. It's very unlikely that anyone intended to specify an attribute name with a dot in.\n<ul>\n<li>The script I've used here will behave oddly if you give it a key like \"game.player.attack.hitpoints\" - making it behave sensibly in these cases would take more code; and I can think of a couple of edge cases where this might actually do what the player wants, but my English skills aren't currently up to explaining.</li>\n</ul>\n</li>\n</ul>\n<pre><code>  &lt;function name=\"AddStatusAttributesForElement\" parameters=\"status, element, statusAttributes\" type=\"string\"&gt;\n    &lt;![CDATA[\n    if (statusAttributes &lt;&gt; null) {\n      foreach (attr, statusAttributes) {\n        if (LengthOf(status) &gt; 0) {\n          if (not EndsWith(status, \"\\n\")) {\n            status = status + \"\\n\"\n          }\n        }\n        // This is a slightly awkward way of doing it; to ensure that it doesn't break on attribute names which actually contain a dot (if that's legal?)\n        value = GetAttribute(element, attr)\n        if ((Instr(attr, \".\") &gt; 0) and (value = null)) {\n          obj = element\n          components = Split (attr, \".\")\n          foreach (c, components) {\n            if (obj = null) {\n              obj = element\n            }\n            if (HasObject(obj, c)) {\n              obj = GetAttribute(obj, c)\n              value = obj\n            }\n            else {\n              if (HasAttribute(obj, c)) {\n                value = GetAttribute(obj, c)\n              }\n              obj = GetObject(c)\n            }\n          }\n        }\n        status = status + FormatStatusAttribute(attr, value, StringDictionaryItem(statusAttributes, attr))\n      }\n    }\n    return (status)\n    ]]&gt;\n  &lt;/function&gt;\n\n  &lt;function name=\"FormatStatusAttribute\" parameters=\"attr, value, format\" type=\"string\"&gt;\n    if (LengthOf(format) = 0) {\n      return (CapFirst(attr) + \": \" + value)\n    } else {\n      if (TypeOf(value) = \"int\" and attr = \"money\" and HasString(game, \"moneyformat\")) {\n        value = DisplayMoney(value)\n      }\n      else if (TypeOf(value) = \"int\" or TypeOf(value) = \"double\") {\n        value = ToString(value)\n      }\n      else if (TypeOf(value) = \"null\") {\n        value = \"\"\n      }\n      if (Instr(format, \"!\") = 0) {\n        if (TypeOf(value) = \"boolean\") {\n          if (value) {\n            return (format)\n          }\n          else {\n            return (\"\")\n          }\n        }\n        else {\n          format = format + \" !\"\n        }\n      }\n      return (Replace(format, \"!\", value))\n    }\n  &lt;/function&gt;\n</code></pre>\n<p>(started spacing out, panic attack in the middle of writing this, so sorry if I made any dumb mistakes)</p>\n\n",
      "PostDate": "2018-01-27T23:09:45.1146023Z",
      "LastEditDate": "2018-01-27T23:31:16.2694602Z",
      "link": null
    },
    {
      "PostId": "24bda8b2-f179-489d-8558-6a6dd1abaa87",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is a good idea. I have changed the first a bit, so it will cope with \"player.hits\" but will also \"parent.alias\", i.e, the attribute of an object attribute, and also with \"dog.barks\", an attribute of another specific object.\r\n\r\nAlso added another function to make adding status attributes easier (for on-line uses).\r\n\r\n```\r\n  <function name=\"AddStatusAttributesForElement\" parameters=\"status, element, statusAttributes\" type=\"string\"><![CDATA[\r\n    if (statusAttributes <> null) {\r\n      foreach (attr, statusAttributes) {\r\n        if (LengthOf(status) > 0) {\r\n          if (not EndsWith(status, \"\\n\")) {\r\n            status = status + \"\\n\"\r\n          }\r\n        }\r\n        value = GetAttribute(element, attr)\r\n        // If that failed, can we guess what it should be?\r\n        if ((Instr(attr, \".\") > 0) and Equal(value, null)) {\r\n          components = Split (attr, \".\")\r\n          objname = StringListItem(components, 0)\r\n          obj = GetAttribute(element, objname)\r\n          if (obj = null) {\r\n            obj = GetObject(objname)\r\n          }\r\n          if (obj = null) {\r\n            error (\"Not finding an attribute that corresponds to \" + attr)\r\n          }\r\n          value = GetAttribute(obj, StringListItem(components, 1))\r\n        }\r\n        status = status + FormatStatusAttribute(attr, value, StringDictionaryItem(statusAttributes, attr))\r\n      }\r\n    }\r\n    return (status)\r\n  ]]></function>\r\n\r\n\r\n  <function name=\"FormatStatusAttribute\" parameters=\"attr, value, format\" type=\"string\">\r\n    if (LengthOf(format) = 0) {\r\n      return (CapFirst(attr) + \": \" + value)\r\n    }\r\n    else {\r\n      if (TypeOf(value) = \"int\" and attr = \"money\" and HasString(game, \"moneyformat\")) {\r\n        value = DisplayMoney(value)\r\n      }\r\n      else if (TypeOf(value) = \"int\" or TypeOf(value) = \"double\") {\r\n        value = ToString(value)\r\n      }\r\n      else if (TypeOf(value) = \"null\") {\r\n        value = \"\"\r\n      }\r\n      if (Instr(format, \"!\") = 0) {\r\n        if (TypeOf(value) = \"boolean\") {\r\n          if (value) {\r\n            return (format)\r\n          }\r\n          else {\r\n            return (\"\")\r\n          }\r\n        }\r\n        else {\r\n          format = format + \" !\"\r\n        }\r\n      }\r\n      return (Replace(format, \"!\", value))\r\n    }\r\n  </function>\r\n\r\n\r\n  <function name=\"SetStatusAtt\" parameters=\"att, format\">\r\n    if (format = null or format = \"\") {\r\n      format = CapFirst(att) + \": !\"\r\n    }\r\n    else if (Instr(format, \"!\") = 0) {\r\n      format = format + \"!\"\r\n    }\r\n    if (HasAttribute(game.pov, att)) {\r\n      if (not HasAttribute(game.pov, \"statusattributes\")) {\r\n        game.pov.statusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.pov.statusattributes, att, format)\r\n    }\r\n    else if (HasAttribute(game, att)) {\r\n      if (not HasAttribute(game, \"statusattributes\")) {\r\n        game.statusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.statusattributes, att, format)\r\n    }\r\n    else {\r\n      error (\"Neither game nor game.pov (player) have an attribute called \" + att)\r\n    }\r\n  </function>\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>This is a good idea. I have changed the first a bit, so it will cope with \"player.hits\" but will also \"parent.alias\", i.e, the attribute of an object attribute, and also with \"dog.barks\", an attribute of another specific object.</p>\n<p>Also added another function to make adding status attributes easier (for on-line uses).</p>\n<pre><code>  &lt;function name=\"AddStatusAttributesForElement\" parameters=\"status, element, statusAttributes\" type=\"string\"&gt;&lt;![CDATA[\n    if (statusAttributes &lt;&gt; null) {\n      foreach (attr, statusAttributes) {\n        if (LengthOf(status) &gt; 0) {\n          if (not EndsWith(status, \"\\n\")) {\n            status = status + \"\\n\"\n          }\n        }\n        value = GetAttribute(element, attr)\n        // If that failed, can we guess what it should be?\n        if ((Instr(attr, \".\") &gt; 0) and Equal(value, null)) {\n          components = Split (attr, \".\")\n          objname = StringListItem(components, 0)\n          obj = GetAttribute(element, objname)\n          if (obj = null) {\n            obj = GetObject(objname)\n          }\n          if (obj = null) {\n            error (\"Not finding an attribute that corresponds to \" + attr)\n          }\n          value = GetAttribute(obj, StringListItem(components, 1))\n        }\n        status = status + FormatStatusAttribute(attr, value, StringDictionaryItem(statusAttributes, attr))\n      }\n    }\n    return (status)\n  ]]&gt;&lt;/function&gt;\n\n\n  &lt;function name=\"FormatStatusAttribute\" parameters=\"attr, value, format\" type=\"string\"&gt;\n    if (LengthOf(format) = 0) {\n      return (CapFirst(attr) + \": \" + value)\n    }\n    else {\n      if (TypeOf(value) = \"int\" and attr = \"money\" and HasString(game, \"moneyformat\")) {\n        value = DisplayMoney(value)\n      }\n      else if (TypeOf(value) = \"int\" or TypeOf(value) = \"double\") {\n        value = ToString(value)\n      }\n      else if (TypeOf(value) = \"null\") {\n        value = \"\"\n      }\n      if (Instr(format, \"!\") = 0) {\n        if (TypeOf(value) = \"boolean\") {\n          if (value) {\n            return (format)\n          }\n          else {\n            return (\"\")\n          }\n        }\n        else {\n          format = format + \" !\"\n        }\n      }\n      return (Replace(format, \"!\", value))\n    }\n  &lt;/function&gt;\n\n\n  &lt;function name=\"SetStatusAtt\" parameters=\"att, format\"&gt;\n    if (format = null or format = \"\") {\n      format = CapFirst(att) + \": !\"\n    }\n    else if (Instr(format, \"!\") = 0) {\n      format = format + \"!\"\n    }\n    if (HasAttribute(game.pov, att)) {\n      if (not HasAttribute(game.pov, \"statusattributes\")) {\n        game.pov.statusattributes = NewStringDictionary()\n      }\n      dictionary add (game.pov.statusattributes, att, format)\n    }\n    else if (HasAttribute(game, att)) {\n      if (not HasAttribute(game, \"statusattributes\")) {\n        game.statusattributes = NewStringDictionary()\n      }\n      dictionary add (game.statusattributes, att, format)\n    }\n    else {\n      error (\"Neither game nor game.pov (player) have an attribute called \" + att)\n    }\n  &lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-30T11:48:15.7664252Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8e5968d4-1e45-4056-bf14-96fe58a51f51",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I looked at keys like `equipped weapon.attack` for if the player has object attributes; but then went on to thinking about `parent.parent.alias` and `parent.parent.parent.alias` to display the name of the region and country you're exploring … probably not something used often, but that's why I went for the loop.\r\n\r\nThink your version is more comprehensible :)\r\n\r\n<hr/>\r\n\r\nNow I look at it, I wonder if it might also be beneficial to return `\"\"` for attributes that are null.\r\n\r\n<hr/>\r\n\r\nThe SetStatusAtt function looks useful :) Maybe also useful to have it check for a dot in the att passed to it, so that you can use it with other objects if you want to.",
      "EditableFormat": "markdown",
      "HTML": "<p>I looked at keys like <code>equipped weapon.attack</code> for if the player has object attributes; but then went on to thinking about <code>parent.parent.alias</code> and <code>parent.parent.parent.alias</code> to display the name of the region and country you're exploring … probably not something used often, but that's why I went for the loop.</p>\n<p>Think your version is more comprehensible :)</p>\n<hr>\n<p>Now I look at it, I wonder if it might also be beneficial to return <code>\"\"</code> for attributes that are null.</p>\n<hr>\n<p>The SetStatusAtt function looks useful :) Maybe also useful to have it check for a dot in the att passed to it, so that you can use it with other objects if you want to.</p>\n\n",
      "PostDate": "2018-01-31T13:53:11.5987109Z",
      "LastEditDate": "2018-01-31T13:57:08.2764029Z",
      "link": null
    },
    {
      "PostId": "c028de0a-8cb3-467d-a389-38b2fedcf014",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Still an issue with this, that I hadn't previously noticed.\r\nIf a status attribute is set to a boolean but the expression contains a `!`, it will generate an error (`Error running script: Error compiling expression 'Replace(format, \"!\", value)': FunctionCallElement: Could find not function 'Replace(String; String; Boolean)'`).\r\n\r\nShould either have the special behaviour for booleans before the `if (Instr(format, \"!\") = 0) {` check; or if there is a `!` in the format string, replace it with a string \"true\" or \"false\".\r\n\r\nYet again, I'm feeling really frustrated because I can't override functions on the web editor; looks like I'll have to do a whole load of javascript trickery to get a status pane working anyway.",
      "EditableFormat": "markdown",
      "HTML": "<p>Still an issue with this, that I hadn't previously noticed.<br>\nIf a status attribute is set to a boolean but the expression contains a <code>!</code>, it will generate an error (<code>Error running script: Error compiling expression 'Replace(format, \"!\", value)': FunctionCallElement: Could find not function 'Replace(String; String; Boolean)'</code>).</p>\n<p>Should either have the special behaviour for booleans before the <code>if (Instr(format, \"!\") = 0) {</code> check; or if there is a <code>!</code> in the format string, replace it with a string \"true\" or \"false\".</p>\n<p>Yet again, I'm feeling really frustrated because I can't override functions on the web editor; looks like I'll have to do a whole load of javascript trickery to get a status pane working anyway.</p>\n\n",
      "PostDate": "2018-02-14T17:32:41.9303967Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
