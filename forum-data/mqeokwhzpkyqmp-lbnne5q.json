{
  "Topic": {
    "TopicId": "mqeokwhzpkyqmp-lbnne5q",
    "ForumId": "10",
    "Title": "Help with string manipulation",
    "LastUpdated": "2021-05-21T20:33:10.3539042Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a23a6bd4-731a-4950-9605-b31f92bc7c01",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Help!\r\n\r\nSo far, I have this:\r\n\r\n```\r\n  <function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\">\r\n    a = NewStringList()\r\n    i = 72\r\n    list add (a, Left(s,i))\r\n    s = Mid(s, i + 1)\r\n    while (not s = \"\") {\r\n      list add (a, Left(s,i))\r\n      s = Mid(s, i + 1)\r\n    }\r\n    return (a)\r\n  </function>\r\n```\r\n\r\n---\r\nI pasted a bit of Lorem Ipsum into a room description to test it with this:\r\n\r\n```\r\ns = lorem.description\r\nlist = GetOutputList(s)\r\ni = 0\r\nforeach (line, list) {\r\n  msg (i + \": \" + line)\r\n  i = i + 1\r\n}\r\n```\r\n\r\n---\r\nThis is the output:\r\n\r\n0: Lorem ipsum dolor sit amet, consectetur adipiscing elit. In non interdum\r\n1: felis. Vestibulum rhoncus vel felis a maximus. Quisque fringilla semper\r\n2: lacus, at fermentum velit tempor quis. In nec ipsum a sapien mattis bla\r\n3: ndit. Maecenas id neque lacus. In magna nibh, blandit a luctus nec, auct\r\n4: or at quam. Aenean volutpat sapien risus, at tincidunt massa bibendum ac\r\n5: . Ut tristique ex a nibh hendrerit, in posuere turpis auctor. Quisque ur\r\n6: na risus, fermentum vitae gravida non, venenatis a nisl. Nulla commodo d\r\n7: olor at urna tristique, at gravida nulla imperdiet.\r\n\r\nNam dolor n\r\n8: isl, rutrum eu mattis at, gravida ut libero. Nulla facilisi. Vestibulum \r\n9: tempus auctor odio, vitae consectetur justo condimentum in. Pellentesque\r\n10: aliquam augue duis.\r\n\r\n---\r\n### JS Version\r\n\r\n<details>\r\n\r\n(I can return data via ASLEvent, if easier to do this in JS.)\r\n\r\n```\r\nfunction getOutputArray(s) {\r\n\tvar a = [];\r\n\tvar i = 72;\r\n\ta.push(s.substring(0, i))\r\n\twhile( (s = s.substring(i, s.length)) != \"\" ){\r\n\t\ta.push(s.substring(0, i))\r\n\t}\r\n\treturn a;\r\n}\r\n```\r\n\r\n```\r\nlet s = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. In non interdum felis. Vestibulum rhoncus vel felis a maximus. Quisque fringilla semper lacus, at fermentum velit tempor quis. In nec ipsum a sapien mattis blandit. Maecenas id neque lacus. In magna nibh, blandit a luctus nec, auctor at quam. Aenean volutpat sapien risus, at tincidunt massa bibendum ac. Ut tristique ex a nibh hendrerit, in posuere turpis auctor. Quisque urna risus, fermentum vitae gravida non, venenatis a nisl. Nulla commodo dolor at urna tristique, at gravida nulla imperdiet.\r\n\r\nNam dolor nisl, rutrum eu mattis at, gravida ut libero. Nulla facilisi. Vestibulum tempus auctor odio, vitae consectetur justo condimentum in. Pellentesque aliquam augue duis. `\r\n\r\n```\r\n\r\n---\r\nThat gives me this array:\r\n\r\n- Lorem ipsum dolor sit amet, consectetur adipiscing elit. In non interdum\r\n- felis. Vestibulum rhoncus vel felis a maximus. Quisque fringilla semper\r\n- lacus, at fermentum velit tempor quis. In nec ipsum a sapien mattis bla\r\n- ndit. Maecenas id neque lacus. In magna nibh, blandit a luctus nec, auct\r\n- or at quam. Aenean volutpat sapien risus, at tincidunt massa bibendum ac\r\n- . Ut tristique ex a nibh hendrerit, in posuere turpis auctor. Quisque ur\r\n- na risus, fermentum vitae gravida non, venenatis a nisl. Nulla commodo d\r\n- olor at urna tristique, at gravida nulla imperdiet. Nam dolor nisl, rut\r\n- rum eu mattis at, gravida ut libero. Nulla facilisi. Vestibulum tempus a\r\n- uctor odio, vitae consectetur justo condimentum in. Pellentesque aliquam\r\n- augue duis. \r\n\r\n</details>\r\n\r\n---\r\nI want this to sort of behave like word-wrap, though.\r\n\r\nHow can I split a string at the 72nd character **or** at the space (or line break) **before** the 72nd character, without splitting in the middle of a word?",
      "EditableFormat": "markdown",
      "HTML": "<p>Help!</p>\n<p>So far, I have this:</p>\n<pre><code>  &lt;function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\"&gt;\n    a = NewStringList()\n    i = 72\n    list add (a, Left(s,i))\n    s = Mid(s, i + 1)\n    while (not s = \"\") {\n      list add (a, Left(s,i))\n      s = Mid(s, i + 1)\n    }\n    return (a)\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>I pasted a bit of Lorem Ipsum into a room description to test it with this:</p>\n<pre><code>s = lorem.description\nlist = GetOutputList(s)\ni = 0\nforeach (line, list) {\n  msg (i + \": \" + line)\n  i = i + 1\n}\n</code></pre>\n<hr>\n<p>This is the output:</p>\n<p>0: Lorem ipsum dolor sit amet, consectetur adipiscing elit. In non interdum<br>\n1: felis. Vestibulum rhoncus vel felis a maximus. Quisque fringilla semper<br>\n2: lacus, at fermentum velit tempor quis. In nec ipsum a sapien mattis bla<br>\n3: ndit. Maecenas id neque lacus. In magna nibh, blandit a luctus nec, auct<br>\n4: or at quam. Aenean volutpat sapien risus, at tincidunt massa bibendum ac<br>\n5: . Ut tristique ex a nibh hendrerit, in posuere turpis auctor. Quisque ur<br>\n6: na risus, fermentum vitae gravida non, venenatis a nisl. Nulla commodo d<br>\n7: olor at urna tristique, at gravida nulla imperdiet.</p>\n<p>Nam dolor n<br>\n8: isl, rutrum eu mattis at, gravida ut libero. Nulla facilisi. Vestibulum<br>\n9: tempus auctor odio, vitae consectetur justo condimentum in. Pellentesque<br>\n10: aliquam augue duis.</p>\n<hr>\n<h3>JS Version</h3>\n<details>\n<p>(I can return data via ASLEvent, if easier to do this in JS.)</p>\n<pre><code>function getOutputArray(s) {\n\tvar a = [];\n\tvar i = 72;\n\ta.push(s.substring(0, i))\n\twhile( (s = s.substring(i, s.length)) != \"\" ){\n\t\ta.push(s.substring(0, i))\n\t}\n\treturn a;\n}\n</code></pre>\n<pre><code>let s = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. In non interdum felis. Vestibulum rhoncus vel felis a maximus. Quisque fringilla semper lacus, at fermentum velit tempor quis. In nec ipsum a sapien mattis blandit. Maecenas id neque lacus. In magna nibh, blandit a luctus nec, auctor at quam. Aenean volutpat sapien risus, at tincidunt massa bibendum ac. Ut tristique ex a nibh hendrerit, in posuere turpis auctor. Quisque urna risus, fermentum vitae gravida non, venenatis a nisl. Nulla commodo dolor at urna tristique, at gravida nulla imperdiet.\n\nNam dolor nisl, rutrum eu mattis at, gravida ut libero. Nulla facilisi. Vestibulum tempus auctor odio, vitae consectetur justo condimentum in. Pellentesque aliquam augue duis. `\n\n</code></pre>\n<hr>\n<p>That gives me this array:</p>\n<ul>\n<li>Lorem ipsum dolor sit amet, consectetur adipiscing elit. In non interdum</li>\n<li>felis. Vestibulum rhoncus vel felis a maximus. Quisque fringilla semper</li>\n<li>lacus, at fermentum velit tempor quis. In nec ipsum a sapien mattis bla</li>\n<li>ndit. Maecenas id neque lacus. In magna nibh, blandit a luctus nec, auct</li>\n<li>or at quam. Aenean volutpat sapien risus, at tincidunt massa bibendum ac</li>\n<li>. Ut tristique ex a nibh hendrerit, in posuere turpis auctor. Quisque ur</li>\n<li>na risus, fermentum vitae gravida non, venenatis a nisl. Nulla commodo d</li>\n<li>olor at urna tristique, at gravida nulla imperdiet. Nam dolor nisl, rut</li>\n<li>rum eu mattis at, gravida ut libero. Nulla facilisi. Vestibulum tempus a</li>\n<li>uctor odio, vitae consectetur justo condimentum in. Pellentesque aliquam</li>\n<li>augue duis.</li>\n</ul>\n</details>\n<hr>\n<p>I want this to sort of behave like word-wrap, though.</p>\n<p>How can I split a string at the 72nd character <strong>or</strong> at the space (or line break) <strong>before</strong> the 72nd character, without splitting in the middle of a word?</p>\n\n",
      "PostDate": "2021-05-21T20:33:10.3539042Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8ca4e56e-ec8c-453b-913c-32cd986fc887",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One way:\r\n```\r\n<function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\">\r\n  pattern = \"^((?<line>.{1,72})((\\\\s+|(?=<-))(?<remainder>.+))?|(?<line>.{72})(?<remainder>.*))$\"\r\n  output = NewStringList()\r\n  if (s = \"\") {\r\n    return (output)\r\n  }\r\n  while (true) {\r\n    parts = Populate (pattern, s, \"wordwrap\")\r\n    list add (output, DictionaryItem (parts, \"line\"))\r\n    if (DictionaryContains (parts, \"remainder\")) {\r\n      s = DictionaryItem (parts, \"remainder\")\r\n    }\r\n    else {\r\n      return (output)\r\n    }\r\n  }\r\n</function>\r\n```\r\n\r\nNote that this uses the pattern `(\\s+|(?=<-))` which matches one or more of any whitespace character, or a zero-character string immediately after a hyphen. Means that it can break a line in the middle of a hyphenated word if necessary. You could replace that with a `\\s` if you want to match a single space, or a literal space if you want it to be an actual ASCII space and not some other whitespace character.\r\n\r\nThe alternate pattern at the end grabs 72 characters exactly, in case the first one doesn't match (which can only happen if the line is a single word of 72 or more characters)\r\n\r\nAlternatively, if you don't want to wrestle with regexen, you could do a simpler but less flexible pure-quest version:\r\n```\r\n<function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\">\r\n  line = \"\"\r\n  output = NewStringList()\r\n  foreach (word, Split (s, \" \")) {\r\n    while (LengthOf (word) > 71) {\r\n      if (line = \"\") {\r\n        list add (output, Left (word, 71) + \"-\")\r\n        word = Mid (word, 72)\r\n      }\r\n      else {\r\n        word = line + \" \" + word\r\n        line = \"\"\r\n      }\r\n    }\r\n    if (LengthOf (line) + LengthOf (word) > 72) {\r\n      list add (output, line)\r\n      line = word\r\n    }\r\n    else {\r\n      line = line + \" \" + word\r\n    }\r\n  }\r\n  if (not line = \"\") {\r\n    listadd (output, line)\r\n  }\r\n  return (output)\r\n</function>\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>One way:</p>\n<pre><code>&lt;function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\"&gt;\n  pattern = \"^((?&lt;line&gt;.{1,72})((\\\\s+|(?=&lt;-))(?&lt;remainder&gt;.+))?|(?&lt;line&gt;.{72})(?&lt;remainder&gt;.*))$\"\n  output = NewStringList()\n  if (s = \"\") {\n    return (output)\n  }\n  while (true) {\n    parts = Populate (pattern, s, \"wordwrap\")\n    list add (output, DictionaryItem (parts, \"line\"))\n    if (DictionaryContains (parts, \"remainder\")) {\n      s = DictionaryItem (parts, \"remainder\")\n    }\n    else {\n      return (output)\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n<p>Note that this uses the pattern <code>(\\s+|(?=&lt;-))</code> which matches one or more of any whitespace character, or a zero-character string immediately after a hyphen. Means that it can break a line in the middle of a hyphenated word if necessary. You could replace that with a <code>\\s</code> if you want to match a single space, or a literal space if you want it to be an actual ASCII space and not some other whitespace character.</p>\n<p>The alternate pattern at the end grabs 72 characters exactly, in case the first one doesn't match (which can only happen if the line is a single word of 72 or more characters)</p>\n<p>Alternatively, if you don't want to wrestle with regexen, you could do a simpler but less flexible pure-quest version:</p>\n<pre><code>&lt;function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\"&gt;\n  line = \"\"\n  output = NewStringList()\n  foreach (word, Split (s, \" \")) {\n    while (LengthOf (word) &gt; 71) {\n      if (line = \"\") {\n        list add (output, Left (word, 71) + \"-\")\n        word = Mid (word, 72)\n      }\n      else {\n        word = line + \" \" + word\n        line = \"\"\n      }\n    }\n    if (LengthOf (line) + LengthOf (word) &gt; 72) {\n      list add (output, line)\n      line = word\n    }\n    else {\n      line = line + \" \" + word\n    }\n  }\n  if (not line = \"\") {\n    listadd (output, line)\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2021-05-21T21:36:57.0733009Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1519a5d1-88d8-4edc-99c6-71e1b3045bd7",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The first code does this:\r\n\r\n```\r\nError running script: Error evaluating expression 'Populate (pattern, s, \"wordwrap\")': String '' is not a match for Regex '^((?<line>.{1,72})((\\s+|(?=<-))(?<remainder>.+))?|(?<line>.{72})(?<remainder>.*))$'\r\nError running script: Cannot foreach over '' as it is not a list\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>The first code does this:</p>\n<pre><code>Error running script: Error evaluating expression 'Populate (pattern, s, \"wordwrap\")': String '' is not a match for Regex '^((?&lt;line&gt;.{1,72})((\\s+|(?=&lt;-))(?&lt;remainder&gt;.+))?|(?&lt;line&gt;.{72})(?&lt;remainder&gt;.*))$'\nError running script: Cannot foreach over '' as it is not a list\n</code></pre>\n\n",
      "PostDate": "2021-05-21T21:49:24.0191307Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "722be81d-e77a-42d1-a655-08a2fb8bf976",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The second code seems to work quite well, after changing the one instance of ```listadd``` to ```list add```. (NOTE: I do that all the time in my code, too!)",
      "EditableFormat": "markdown",
      "HTML": "<p>The second code seems to work quite well, after changing the one instance of <code>listadd</code> to <code>list add</code>. (NOTE: I do that all the time in my code, too!)</p>\n\n",
      "PostDate": "2021-05-21T21:59:22.4783071Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d12a5fdc-39f3-4664-97c5-6b55ff66a652",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm... If I wanted to put each line break in a list item by itself, I should probably split at those before anything else and figure out how to build a list with everything including the line breaks in order...",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm... If I wanted to put each line break in a list item by itself, I should probably split at those before anything else and figure out how to build a list with everything including the line breaks in order...</p>\n\n",
      "PostDate": "2021-05-21T22:07:50.1193732Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e18a83ed-889d-4315-8991-2721df575571",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Modified version of the first one, should (unless I'm missing a typo) also handle newlines.\r\n\r\nI'm not sure where the error came from; is it required to call `RegexMatch` before `Populate`?\r\n\r\n```\r\n<function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\">\r\n  pattern = \"^((?<line>[^\\\\n\\\\r]{1,72})(([\\\\r\\\\n]+|\\\\s+|(?=<-))(?<remainder>.+))?|(?<line>.{72})(?<remainder>.*))$\"\r\n  output = NewStringList()\r\n  if (s = \"\") {\r\n    return (output)\r\n  }\r\n  while (IsRegexMatch (pattern, s, \"wordwrap\")) {\r\n    parts = Populate (pattern, s, \"wordwrap\")\r\n    list add (output, DictionaryItem (parts, \"line\"))\r\n    if (DictionaryContains (parts, \"remainder\")) {\r\n      s = DictionaryItem (parts, \"remainder\")\r\n    }\r\n    else {\r\n      return (output)\r\n    }\r\n  }\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Modified version of the first one, should (unless I'm missing a typo) also handle newlines.</p>\n<p>I'm not sure where the error came from; is it required to call <code>RegexMatch</code> before <code>Populate</code>?</p>\n<pre><code>&lt;function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\"&gt;\n  pattern = \"^((?&lt;line&gt;[^\\\\n\\\\r]{1,72})(([\\\\r\\\\n]+|\\\\s+|(?=&lt;-))(?&lt;remainder&gt;.+))?|(?&lt;line&gt;.{72})(?&lt;remainder&gt;.*))$\"\n  output = NewStringList()\n  if (s = \"\") {\n    return (output)\n  }\n  while (IsRegexMatch (pattern, s, \"wordwrap\")) {\n    parts = Populate (pattern, s, \"wordwrap\")\n    list add (output, DictionaryItem (parts, \"line\"))\n    if (DictionaryContains (parts, \"remainder\")) {\n      s = DictionaryItem (parts, \"remainder\")\n    }\n    else {\n      return (output)\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2021-05-21T23:07:36.2978843Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "20940a9a-6d40-4e73-b0a3-e475f0926b5c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Second version with linebreaks:\r\n```\r\n<function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\">\r\n  output = NewStringList()\r\n  foreach (paragraph, Split (s, Chr(13))) {\r\n    line = \"\"\r\n    foreach (word, Split (paragraph, \" \")) {\r\n      while (LengthOf (word) > 71) {\r\n        if (line = \"\") {\r\n          list add (output, Left (word, 71) + \"-\")\r\n          word = Mid (word, 72)\r\n        }\r\n        else {\r\n          word = line + \" \" + word\r\n          line = \"\"\r\n        }\r\n      }\r\n      if (LengthOf (line) + LengthOf (word) > 72) {\r\n        list add (output, line)\r\n        line = word\r\n      }\r\n      else {\r\n        line = line + \" \" + word\r\n      }\r\n    }\r\n    if (not line = \"\") {\r\n      listadd (output, line)\r\n    }\r\n  }\r\n  return (output)\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Second version with linebreaks:</p>\n<pre><code>&lt;function name=\"GetOutputList\" parameters=\"s\" type=\"stringlist\"&gt;\n  output = NewStringList()\n  foreach (paragraph, Split (s, Chr(13))) {\n    line = \"\"\n    foreach (word, Split (paragraph, \" \")) {\n      while (LengthOf (word) &gt; 71) {\n        if (line = \"\") {\n          list add (output, Left (word, 71) + \"-\")\n          word = Mid (word, 72)\n        }\n        else {\n          word = line + \" \" + word\n          line = \"\"\n        }\n      }\n      if (LengthOf (line) + LengthOf (word) &gt; 72) {\n        list add (output, line)\n        line = word\n      }\n      else {\n        line = line + \" \" + word\n      }\n    }\n    if (not line = \"\") {\n      listadd (output, line)\n    }\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2021-05-21T23:11:50.1971217Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fb2c8330-a529-4596-bc4b-26cd0ce52633",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm.\r\n\r\n```\r\nError running script: Function did not return a value\r\nError running script: Cannot foreach over '' as it is not a list\r\n```\r\n\r\n---\r\nI don't know. The second one works good, though.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm.</p>\n<pre><code>Error running script: Function did not return a value\nError running script: Cannot foreach over '' as it is not a list\n</code></pre>\n<hr>\n<p>I don't know. The second one works good, though.</p>\n\n",
      "PostDate": "2021-05-21T23:12:37.6087988Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8d5b6727-b189-4f86-9ab7-14e2e9f404b0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What string are you feeding it to get that error? I assume the regex is failing to match; which I can't see how it can happen.",
      "EditableFormat": "markdown",
      "HTML": "<p>What string are you feeding it to get that error? I assume the regex is failing to match; which I can't see how it can happen.</p>\n\n",
      "PostDate": "2021-05-21T23:44:39.4662435Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b5495f03-4ceb-4ab4-af2b-f0efb748528a",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It says I can't post it here. Hehehe.\r\n\r\nhttps://gist.githubusercontent.com/KVonGit/07ac3eb8d6dc416598bee19fae70be2c/raw/a9dcae8f89e3918a6e76525f1569816fd801f64a/jack_long_text_sample.txt",
      "EditableFormat": "markdown",
      "HTML": "<p>It says I can't post it here. Hehehe.</p>\n<p>https://gist.githubusercontent.com/KVonGit/07ac3eb8d6dc416598bee19fae70be2c/raw/a9dcae8f89e3918a6e76525f1569816fd801f64a/jack_long_text_sample.txt</p>\n\n",
      "PostDate": "2021-05-22T00:09:28.0405649Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af83a2a9-9c1d-43ce-81b3-5ec9d85e1ea7",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I got the second example working like I want it. The ```Chr(13)``` wasn't pushing each line break to the array separately (I guess?). I changed it to ```\"<br/>\"```, and success!!!\r\n\r\n```\r\n<function name=\"GOL2_1\" parameters=\"s\" type=\"stringlist\"><![CDATA[\r\n    // by mrangel\r\n    output = NewStringList()\r\n    // foreach (paragraph, Split (s, Chr(13))) {\r\n     foreach (paragraph, Split (s, \"<br/>\")) {\r\n        line = \"\"\r\n        foreach (word, Split (paragraph, \" \")) {\r\n          while (LengthOf (word) > 71) {\r\n            if (line = \"\") {\r\n              list add (output, Left (word, 71) + \"-\")\r\n              word = Mid (word, 72)\r\n            }\r\n            else {\r\n              word = line + \" \" + word\r\n              line = \"\"\r\n            }\r\n          }\r\n          if (LengthOf (line) + LengthOf (word) > 72) {\r\n            list add (output, line)\r\n            line = word\r\n          }\r\n          else {\r\n            line = line + \" \" + word\r\n          }\r\n        }\r\n        if (not line = \"\") {\r\n          list add (output, line)\r\n        }\r\n      }\r\n      return (output)\r\n  ]]></function>\r\n```\r\n\r\n---\r\nI added some extra line breaks, just to test it out:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/119210560-6cd70100-ba72-11eb-95eb-306b5131bdd4.png)\r\n\r\n---\r\nAwesome!\r\n\r\nThanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>I got the second example working like I want it. The <code>Chr(13)</code> wasn't pushing each line break to the array separately (I guess?). I changed it to <code>\"&lt;br/&gt;\"</code>, and success!!!</p>\n<pre><code>&lt;function name=\"GOL2_1\" parameters=\"s\" type=\"stringlist\"&gt;&lt;![CDATA[\n    // by mrangel\n    output = NewStringList()\n    // foreach (paragraph, Split (s, Chr(13))) {\n     foreach (paragraph, Split (s, \"&lt;br/&gt;\")) {\n        line = \"\"\n        foreach (word, Split (paragraph, \" \")) {\n          while (LengthOf (word) &gt; 71) {\n            if (line = \"\") {\n              list add (output, Left (word, 71) + \"-\")\n              word = Mid (word, 72)\n            }\n            else {\n              word = line + \" \" + word\n              line = \"\"\n            }\n          }\n          if (LengthOf (line) + LengthOf (word) &gt; 72) {\n            list add (output, line)\n            line = word\n          }\n          else {\n            line = line + \" \" + word\n          }\n        }\n        if (not line = \"\") {\n          list add (output, line)\n        }\n      }\n      return (output)\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<hr>\n<p>I added some extra line breaks, just to test it out:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/119210560-6cd70100-ba72-11eb-95eb-306b5131bdd4.png\" alt=\"image\"></p>\n<hr>\n<p>Awesome!</p>\n<p>Thanks!</p>\n\n",
      "PostDate": "2021-05-22T01:24:32.7793835Z",
      "LastEditDate": "2021-05-22T01:25:09.0388157Z",
      "link": null
    },
    {
      "PostId": "664cc56e-35f3-46c3-9282-29356a6148fe",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I added a return after the while loop in the code with regexen, and it works now, but it doesn't push each line break to the list like the other code does now.\r\n\r\n```\r\n<function name=\"GOL3\" parameters=\"s\" type=\"stringlist\"><![CDATA[\r\n    // by mrangel\r\n    pattern = \"^((?<line>[^\\\\n\\\\r]{1,72})(([\\\\r\\\\n]+|\\\\s+|(?=<-))(?<remainder>.+))?|(?<line>.{72})(?<remainder>.*))$\"\r\n    output = NewStringList()\r\n    if (s = \"\") {\r\n      return (output)\r\n    }\r\n    while (IsRegexMatch (pattern, s, \"wordwrap\")) {\r\n      parts = Populate (pattern, s, \"wordwrap\")\r\n      list add (output, DictionaryItem (parts, \"line\"))\r\n      if (DictionaryContains (parts, \"remainder\")) {\r\n        s = DictionaryItem (parts, \"remainder\")\r\n      }\r\n      else {\r\n        return (output)\r\n      }\r\n    }\r\n    return (output)\r\n  ]]></function>\r\n```\r\n\r\n---\r\n38: dull boy. All work and no play makes Jack a dull boy. All work and no\r\n39: play makes Jack a dull boy. All work and no play makes Jack a dull boy.\r\n40: All work and no play makes Jack a dull boy. All work and no play makes\r\n41: Jack a dull boy. All work and no play makes Jack a dull boy. All work\r\n42: and no play makes Jack a dull boy. \r\n\r\nAll work and no play makes\r\n43: Jack a dull boy. \r\n\r\n\r\n\r\n\r\nAll work and no play makes\r\n44: Jack a dull boy. \r\nAll work and no play makes Jack a dull boy.\r\n45: \r\nAll work and no play makes Jack a dull boy. All work and no play\r\n46: makes Jack a dull boy. \"All work and no play makes Jack a dull\r\n47: boy.\"\r\n\r\nAll work and no play makes Jack a dull boy. All work and\r\n48: no play makes Jack a dull boy. All work and no play makes Jack a dull\r\n49: boy. All work and no play makes Jack a dull boy. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I added a return after the while loop in the code with regexen, and it works now, but it doesn't push each line break to the list like the other code does now.</p>\n<pre><code>&lt;function name=\"GOL3\" parameters=\"s\" type=\"stringlist\"&gt;&lt;![CDATA[\n    // by mrangel\n    pattern = \"^((?&lt;line&gt;[^\\\\n\\\\r]{1,72})(([\\\\r\\\\n]+|\\\\s+|(?=&lt;-))(?&lt;remainder&gt;.+))?|(?&lt;line&gt;.{72})(?&lt;remainder&gt;.*))$\"\n    output = NewStringList()\n    if (s = \"\") {\n      return (output)\n    }\n    while (IsRegexMatch (pattern, s, \"wordwrap\")) {\n      parts = Populate (pattern, s, \"wordwrap\")\n      list add (output, DictionaryItem (parts, \"line\"))\n      if (DictionaryContains (parts, \"remainder\")) {\n        s = DictionaryItem (parts, \"remainder\")\n      }\n      else {\n        return (output)\n      }\n    }\n    return (output)\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<hr>\n<p>38: dull boy. All work and no play makes Jack a dull boy. All work and no<br>\n39: play makes Jack a dull boy. All work and no play makes Jack a dull boy.<br>\n40: All work and no play makes Jack a dull boy. All work and no play makes<br>\n41: Jack a dull boy. All work and no play makes Jack a dull boy. All work<br>\n42: and no play makes Jack a dull boy.</p>\n<p>All work and no play makes<br>\n43: Jack a dull boy.</p>\n<p>All work and no play makes<br>\n44: Jack a dull boy.<br>\nAll work and no play makes Jack a dull boy.<br>\n45:<br>\nAll work and no play makes Jack a dull boy. All work and no play<br>\n46: makes Jack a dull boy. \"All work and no play makes Jack a dull<br>\n47: boy.\"</p>\n<p>All work and no play makes Jack a dull boy. All work and<br>\n48: no play makes Jack a dull boy. All work and no play makes Jack a dull<br>\n49: boy. All work and no play makes Jack a dull boy.</p>\n\n",
      "PostDate": "2021-05-22T01:38:07.5596802Z",
      "LastEditDate": "2021-05-22T01:38:51.9091338Z",
      "link": null
    },
    {
      "PostId": "f8199f08-2199-4dfe-9d6b-24081ec46219",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The code with no regex works just right.\r\n\r\nHere's the full game's code:\r\nhttps://gist.github.com/KVonGit/e5ecf3e457884b55e209ae05c7cdbfdf\r\n\r\nI'm back on trying to make Quest use a MORE pager instead of automatically scrolling past text the player hasn't had a chance to read yet.\r\n\r\nWhen play begins, I use JS and ASLEvents to get the actual line height and the window's height, then divide to figure how many lines of text will fit on the screen before scrolling past new text. (Haven't implemented anything past getting measurements just yet.)\r\n\r\nIf I understand correctly, old terminals printed to the screen line by line like this, which must be how BASH knows when to pop up **MORE** once the screen fills with new text.  (???)",
      "EditableFormat": "markdown",
      "HTML": "<p>The code with no regex works just right.</p>\n<p>Here's the full game's code:<br>\nhttps://gist.github.com/KVonGit/e5ecf3e457884b55e209ae05c7cdbfdf</p>\n<p>I'm back on trying to make Quest use a MORE pager instead of automatically scrolling past text the player hasn't had a chance to read yet.</p>\n<p>When play begins, I use JS and ASLEvents to get the actual line height and the window's height, then divide to figure how many lines of text will fit on the screen before scrolling past new text. (Haven't implemented anything past getting measurements just yet.)</p>\n<p>If I understand correctly, old terminals printed to the screen line by line like this, which must be how BASH knows when to pop up <strong>MORE</strong> once the screen fills with new text.  (???)</p>\n\n",
      "PostDate": "2021-05-22T03:51:05.9702785Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cbdf58b6-2a20-4894-b454-1eb51ccca3e8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That being said, I think \"split a string at the 72nd character or at the space (or line break) before the 72nd character,\" wasn't actually that common.\r\n\r\nIn the days of fixed-width displays, you were more likely to find something like:\r\n```\r\n<function name=\"WordWrap\" parameters=\"s\" type=\"stringlist\">\r\n  output = NewStringList()\r\n  while (not s=\"\") {\r\n    linebreak = Instr (s, \"<br/>\")\r\n    if (linebreak > 0 and linebreak < 80) {\r\n      list add (output, Left (s, linebreak))\r\n      s = Mid (s, linebreak + 6)\r\n    }\r\n    else {\r\n      space = Instr (s, \" \", 72)\r\n      if (space > 0 and space < 81) {\r\n        list add (output, Left (s, space - 1))\r\n        s = Mid (s, space + 1)\r\n      }\r\n      else {\r\n        list add (output, Left (s, 78) + \"-\")\r\n        s = Mid (s, 79)\r\n      }\r\n    }\r\n  }\r\n  return (output)\r\n</function>\r\n```\r\nThat is, copying over 72 characters blindly, and only looking for a space at the end of the line. This version looks for the first space *after*character 72, and if it doesn't find one sooner it takes 79 characters and inserts a hyphen. Which is a method that seems pretty common in text-heavy games on some of the old CBM systems.",
      "EditableFormat": "markdown",
      "HTML": "<p>That being said, I think \"split a string at the 72nd character or at the space (or line break) before the 72nd character,\" wasn't actually that common.</p>\n<p>In the days of fixed-width displays, you were more likely to find something like:</p>\n<pre><code>&lt;function name=\"WordWrap\" parameters=\"s\" type=\"stringlist\"&gt;\n  output = NewStringList()\n  while (not s=\"\") {\n    linebreak = Instr (s, \"&lt;br/&gt;\")\n    if (linebreak &gt; 0 and linebreak &lt; 80) {\n      list add (output, Left (s, linebreak))\n      s = Mid (s, linebreak + 6)\n    }\n    else {\n      space = Instr (s, \" \", 72)\n      if (space &gt; 0 and space &lt; 81) {\n        list add (output, Left (s, space - 1))\n        s = Mid (s, space + 1)\n      }\n      else {\n        list add (output, Left (s, 78) + \"-\")\n        s = Mid (s, 79)\n      }\n    }\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n<p>That is, copying over 72 characters blindly, and only looking for a space at the end of the line. This version looks for the first space <em>after</em>character 72, and if it doesn't find one sooner it takes 79 characters and inserts a hyphen. Which is a method that seems pretty common in text-heavy games on some of the old CBM systems.</p>\n\n",
      "PostDate": "2021-05-22T11:19:00.1016193Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4b4ae9a6-77e4-48a9-8ef8-052b93a062d5",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah. Cool.\r\n\r\nYou are a fountain of wisdom, good sir.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah. Cool.</p>\n<p>You are a fountain of wisdom, good sir.</p>\n\n",
      "PostDate": "2021-05-22T16:25:53.4264853Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
