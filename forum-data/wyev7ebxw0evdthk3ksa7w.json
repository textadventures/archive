{
  "Topic": {
    "TopicId": "wyev7ebxw0evdthk3ksa7w",
    "ForumId": "10",
    "Title": "How to make an if statement respond to a player input?",
    "LastUpdated": "2016-09-01T22:34:54.4883264Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "28404e7e-ac71-47d5-8d3e-77870ee86fbd",
      "UserId": 262023,
      "Username": "CarmenK72",
      "AvatarUrl": "http://i.imgur.com/DLX1GKHb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I want an object to kill a player if the player doesn't run away from it, so I used the 'If: expression run' script for success, and 'else: finish game' script for failure. However, whenever I get to that point in my game, the player has no way of even inputting \"run\", as it gives me an error message. Does anyone know what the problem is?",
      "EditableFormat": "markdown",
      "HTML": "<p>I want an object to kill a player if the player doesn't run away from it, so I used the 'If: expression run' script for success, and 'else: finish game' script for failure. However, whenever I get to that point in my game, the player has no way of even inputting \"run\", as it gives me an error message. Does anyone know what the problem is?</p>\n\n",
      "PostDate": "2016-09-01T22:34:54.4883264Z",
      "LastEditDate": null
    },
    {
      "PostId": "d5721e38-3f56-462e-9999-f0bd01086329",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nthere's two ways to get typed-in input:\r\n\r\n1. the 'get input' Script/Function ( http://docs.textadventures.co.uk/quest/scripts/get_input.html )\r\n2. Commands ( http://docs.textadventures.co.uk/quest/elements/command.html )\r\n\r\nCommands are a bit more complex but also powerful/useful, but if you want to jump into using/learning them, that's fine too.\r\n\r\nin the GUI/Editor, to find/use the 'get input' Script/Function:\r\n\r\n'whatever' Element ( http://docs.textadventures.co.uk/quest/elements/ ) (Verb, Object's Script Attribute, Functions, Commands, Turnscripts, Timers) -> run as script -> add new script -> 'output' section/category -> 'get input' Script\r\n\r\nthen, \r\n\r\n-> add new script -> 'scripts' section/category -> the 'if' Script/Function -> [EXPRESSION] // this let's you code/type in what you want -> (see below)\r\n\r\nif [EXPRESSION] result = \"run\"\r\n\r\n-> then,\r\n\r\n->-> add new script -> 'output' section/category -> 'print a message' Script/Function -> [EXPRESSION] -> (see below)\r\n\r\nprint [EXPRESSION] \"You run away just in time, saving your life.\"\r\n\r\n-> add else -> add new script -> 'output' section/category -> 'print a message' Script/Function -> [EXPRESSION] -> (see below)\r\n\r\nprint [EXPRESSION] \"You didn't run away in time, and were killed.\")\r\n\r\n-> add new script -> 'output' section/category -> 'print a message' Script/Function -> [EXPRESSION] -> (see below)\r\n\r\nprint [EXPRESSION] \"GAME OVER\")\r\n\r\n-> add new script -> '???' section/category -> 'finish the game' Script/Function\r\n\r\n// -----------------------------------\r\n\r\nboth the 'get input' and 'show menu / ShowMenu' Scripts/Functions, automatically (hidden) from you, do this:\r\n\r\nresult = YOUR_TYPED_IN_INPUT_OR_YOUR_MENU_SELECTED_CHOICE\r\n\r\n// Programming operation: ASSIGNMENT ( = ):\r\n// an ASSIGMENT operation is not the same as math's EQUAL TO operation.\r\n// ASSIGNMENT: STORE/SAVE the result of the expression on the RIGHT SIDE of the ASSIGMENT OPERATOR ( = ) INTO the VARIABLE on the LEFT SIDE of the ASSIGNMENT OPERATOR ( = )\r\n// so for our example:\r\n// result <------- YOUR_TYPED_IN_INPUT_OR_YOUR_MENU_SELECTED_CHOICE\r\n// the 'result' Variable VARIABLE now \"holds\" your 'YOUR_TYPED_IN_INPUT_OR_YOUR_MENU_SELECTED_CHOICE'\r\n// so let's say I typed in: run\r\n// result = \"run\"\r\n// result <-------- \"run\"\r\n// the 'result' Variable VARIABLE now holds/contains the String Value of \"run\", which makes it (the 'result' Variable VARIABLE a String Variable VARIABLE)\r\n// think of like algebra and algebraic substitution:\r\n// x = 100\r\n// we can then use that 'x' variable:\r\n// y = x + 50\r\n// y = (x:100) + 50\r\n// y = (100) + 50\r\n// y = 150\r\n//\r\n// a programming example of how it's the same as algebraic substitution:\r\n//\r\n// our math 'x=100' variable is going to correlate to this programming variable (an Integer Attribute VARIABLE): player.x = 100\r\n// our math 'y' variable is going to correlate to this programming Script/Function (an operation - so it's not really a variable per se): msg ()\r\n// our math statement of 'y=x+50'is going to correlate to our programming statement of:\r\n// msg ((player.x + 50)) // hopefully this is able to work... lol\r\n// which would then (again, hopefully it works, lol) output:\r\n// 150\r\n//\r\n// however, since it's an ASSIGMENT OPERATOR and not an EQUAL TO OPERATOR, if you did this, you'd get an error, using the math example above for this example of an error:\r\n// x + 50 = y --------> ERROR!\r\n// pretend that you were coding it in directly, and pretending you could set it up the 'get input' to do this instead:\r\n// YOUR_TYPED_IN_INPUT_OR_YOUR_MENU_SELECTED_CHOICE = result -------> ERROR!\r\n\r\nwhich, you can then use that built-in 'result' Variable VARIABLE, for whatever you want... in the example above, we used the 'result' Variable VARIABLE for a \"string comparison\" for our 'if' Script's/Function's condition:\r\n\r\nif (result = \"run\") { /* scripting */ }\r\n// conceptually:\r\n// let's say I typed in: run\r\n// if (\"(result:run)\" = \"run\")\r\n// if (\"(run)\" = \"run\") -> TRUE, and thus do its 'then/TRUE' scripting (our 'msg' Script/Function: print [EXPRESSION] \"You run away just in time, saving your life.\")\r\n// whereas, let's say I typed in: foo\r\n// if (\"(result:foo)\" = \"run\") { /* scripting */ }\r\n// if (\"(foo)\" = \"run\")\r\n// if (\"foo\" = \"run\") -> FALSE, and thus do the 'else' scripting (our 'msg' Scripts/Functions: print [expression] \"You didn't run away in time, and were killed.\" and print [EXPRESSION] \"GAME OVER\", and our 'finish the game' Script/Function)\r\n```\r\n\r\nhere's a good link to a guide that helps in understanding this stuff well:\r\n\r\nhttp://docs.textadventures.co.uk/quest/guides/character_creation.html\r\n\r\nthough it's about a RPG's creating/generating of a character.\r\n\r\n------\r\n\r\nhere's what my example (the scripting only --- you got to decide where/how to add in these scripts/scripting: such as most easily: added to/into an Object's Verb, or maybe you're using the 'onenterroom' Script/Function, meh) would look like in code:\r\n\r\n```\r\nmsg (\"Input?\") // this wasn't shown in my example above, I'm adding it in here, as an extra code line (prompting the person playing the game that they need to put in a input --- I should be telling them they have to type in an input... lol... my bad, meh. As someone new to quest may not know what type / how to, provide an input - bad programming when the user, person playing the game, doesn't know what they got to do and how they do it)\r\nget input {\r\n  if (result = \"run\">\r\n    msg (\"You run away just in time, saving your life.\"\r\n  } else {\r\n    msg (\"You didn't run away in time, and thus were killed.\")\r\n    msg (\"GAME OVER\")\r\n    finish\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>there's two ways to get typed-in input:\n\n1. the 'get input' Script/Function ( http://docs.textadventures.co.uk/quest/scripts/get_input.html )\n2. Commands ( http://docs.textadventures.co.uk/quest/elements/command.html )\n\nCommands are a bit more complex but also powerful/useful, but if you want to jump into using/learning them, that's fine too.\n\nin the GUI/Editor, to find/use the 'get input' Script/Function:\n\n'whatever' Element ( http://docs.textadventures.co.uk/quest/elements/ ) (Verb, Object's Script Attribute, Functions, Commands, Turnscripts, Timers) -&gt; run as script -&gt; add new script -&gt; 'output' section/category -&gt; 'get input' Script\n\nthen, \n\n-&gt; add new script -&gt; 'scripts' section/category -&gt; the 'if' Script/Function -&gt; [EXPRESSION] // this let's you code/type in what you want -&gt; (see below)\n\nif [EXPRESSION] result = \"run\"\n\n-&gt; then,\n\n-&gt;-&gt; add new script -&gt; 'output' section/category -&gt; 'print a message' Script/Function -&gt; [EXPRESSION] -&gt; (see below)\n\nprint [EXPRESSION] \"You run away just in time, saving your life.\"\n\n-&gt; add else -&gt; add new script -&gt; 'output' section/category -&gt; 'print a message' Script/Function -&gt; [EXPRESSION] -&gt; (see below)\n\nprint [EXPRESSION] \"You didn't run away in time, and were killed.\")\n\n-&gt; add new script -&gt; 'output' section/category -&gt; 'print a message' Script/Function -&gt; [EXPRESSION] -&gt; (see below)\n\nprint [EXPRESSION] \"GAME OVER\")\n\n-&gt; add new script -&gt; '???' section/category -&gt; 'finish the game' Script/Function\n\n// -----------------------------------\n\nboth the 'get input' and 'show menu / ShowMenu' Scripts/Functions, automatically (hidden) from you, do this:\n\nresult = YOUR_TYPED_IN_INPUT_OR_YOUR_MENU_SELECTED_CHOICE\n\n// Programming operation: ASSIGNMENT ( = ):\n// an ASSIGMENT operation is not the same as math's EQUAL TO operation.\n// ASSIGNMENT: STORE/SAVE the result of the expression on the RIGHT SIDE of the ASSIGMENT OPERATOR ( = ) INTO the VARIABLE on the LEFT SIDE of the ASSIGNMENT OPERATOR ( = )\n// so for our example:\n// result &lt;------- YOUR_TYPED_IN_INPUT_OR_YOUR_MENU_SELECTED_CHOICE\n// the 'result' Variable VARIABLE now \"holds\" your 'YOUR_TYPED_IN_INPUT_OR_YOUR_MENU_SELECTED_CHOICE'\n// so let's say I typed in: run\n// result = \"run\"\n// result &lt;-------- \"run\"\n// the 'result' Variable VARIABLE now holds/contains the String Value of \"run\", which makes it (the 'result' Variable VARIABLE a String Variable VARIABLE)\n// think of like algebra and algebraic substitution:\n// x = 100\n// we can then use that 'x' variable:\n// y = x + 50\n// y = (x:100) + 50\n// y = (100) + 50\n// y = 150\n//\n// a programming example of how it's the same as algebraic substitution:\n//\n// our math 'x=100' variable is going to correlate to this programming variable (an Integer Attribute VARIABLE): player.x = 100\n// our math 'y' variable is going to correlate to this programming Script/Function (an operation - so it's not really a variable per se): msg ()\n// our math statement of 'y=x+50'is going to correlate to our programming statement of:\n// msg ((player.x + 50)) // hopefully this is able to work... lol\n// which would then (again, hopefully it works, lol) output:\n// 150\n//\n// however, since it's an ASSIGMENT OPERATOR and not an EQUAL TO OPERATOR, if you did this, you'd get an error, using the math example above for this example of an error:\n// x + 50 = y --------&gt; ERROR!\n// pretend that you were coding it in directly, and pretending you could set it up the 'get input' to do this instead:\n// YOUR_TYPED_IN_INPUT_OR_YOUR_MENU_SELECTED_CHOICE = result -------&gt; ERROR!\n\nwhich, you can then use that built-in 'result' Variable VARIABLE, for whatever you want... in the example above, we used the 'result' Variable VARIABLE for a \"string comparison\" for our 'if' Script's/Function's condition:\n\nif (result = \"run\") { /* scripting */ }\n// conceptually:\n// let's say I typed in: run\n// if (\"(result:run)\" = \"run\")\n// if (\"(run)\" = \"run\") -&gt; TRUE, and thus do its 'then/TRUE' scripting (our 'msg' Script/Function: print [EXPRESSION] \"You run away just in time, saving your life.\")\n// whereas, let's say I typed in: foo\n// if (\"(result:foo)\" = \"run\") { /* scripting */ }\n// if (\"(foo)\" = \"run\")\n// if (\"foo\" = \"run\") -&gt; FALSE, and thus do the 'else' scripting (our 'msg' Scripts/Functions: print [expression] \"You didn't run away in time, and were killed.\" and print [EXPRESSION] \"GAME OVER\", and our 'finish the game' Script/Function)\n</code></pre>\n<p>here's a good link to a guide that helps in understanding this stuff well:</p>\n<p>http://docs.textadventures.co.uk/quest/guides/character_creation.html</p>\n<p>though it's about a RPG's creating/generating of a character.</p>\n<hr>\n<p>here's what my example (the scripting only --- you got to decide where/how to add in these scripts/scripting: such as most easily: added to/into an Object's Verb, or maybe you're using the 'onenterroom' Script/Function, meh) would look like in code:</p>\n<pre><code>msg (\"Input?\") // this wasn't shown in my example above, I'm adding it in here, as an extra code line (prompting the person playing the game that they need to put in a input --- I should be telling them they have to type in an input... lol... my bad, meh. As someone new to quest may not know what type / how to, provide an input - bad programming when the user, person playing the game, doesn't know what they got to do and how they do it)\nget input {\n  if (result = \"run\"&gt;\n    msg (\"You run away just in time, saving your life.\"\n  } else {\n    msg (\"You didn't run away in time, and thus were killed.\")\n    msg (\"GAME OVER\")\n    finish\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2016-09-02T00:42:28.6919913Z",
      "LastEditDate": "2016-09-02T01:12:02.2082392Z"
    },
    {
      "PostId": "810fdcfc-3087-42cd-8070-36684eab7da9",
      "UserId": 262023,
      "Username": "CarmenK72",
      "AvatarUrl": "http://i.imgur.com/DLX1GKHb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That worked perfectly, thank you so much!",
      "EditableFormat": "markdown",
      "HTML": "<p>That worked perfectly, thank you so much!</p>\n\n",
      "PostDate": "2016-09-02T01:56:06.6172159Z",
      "LastEditDate": null
    }
  ]
}
