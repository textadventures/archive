{
  "Topic": {
    "TopicId": "f4hbp66rk0a-zyl6jtjang",
    "ForumId": "10",
    "Title": "How to do a loop to repeat a script until a condition is met.",
    "LastUpdated": "2017-01-20T03:30:20.0671666Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "72d8fb5f-40bf-469a-b28c-09aedbb70c4b",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well this is the first time i've run into a script that i think got into an infinite loop, so i'm probably doing something wrong.  I suppose i graduated into a higher rank of coding novices to have messed things up to crash a system.\r\n\r\nMy aim is this, to make a quiz that the player takes, each wrong answer increases the testfail attribute, each right increases the testpass.\r\n\r\nFor the test itself I have the script randomly generate a number between 1 and 10, then have an if statement that uses else to cover each possible result,ask a question, then increase the proper counter. Very simple and logical\r\n\r\nI'd like the test to keep running until either of them reaches 3, then the rest of the script\r\n\r\nI've tried to use \"while\" and set the parameters appropriately and quest has hanged each time i run the test.\r\n\r\nIf i can't use looks i could always have the player ask the tester for the next question each time, or maybe use a timer to ask a question every some number of seconds, stopping once one hits 3, not as nifty solutions but its what i'll do if i need to.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well this is the first time i've run into a script that i think got into an infinite loop, so i'm probably doing something wrong.  I suppose i graduated into a higher rank of coding novices to have messed things up to crash a system.</p>\n<p>My aim is this, to make a quiz that the player takes, each wrong answer increases the testfail attribute, each right increases the testpass.</p>\n<p>For the test itself I have the script randomly generate a number between 1 and 10, then have an if statement that uses else to cover each possible result,ask a question, then increase the proper counter. Very simple and logical</p>\n<p>I'd like the test to keep running until either of them reaches 3, then the rest of the script</p>\n<p>I've tried to use \"while\" and set the parameters appropriately and quest has hanged each time i run the test.</p>\n<p>If i can't use looks i could always have the player ask the tester for the next question each time, or maybe use a timer to ask a question every some number of seconds, stopping once one hits 3, not as nifty solutions but its what i'll do if i need to.</p>\n\n",
      "PostDate": "2017-01-20T03:30:20.0671666Z",
      "LastEditDate": null
    },
    {
      "PostId": "e2a4be32-6418-460e-bb20-ec96cb78629e",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It is not trivial, but there is a guide to asking questions inside a loop here:\r\nhttps://github.com/ThePix/quest/wiki/Getting-Input-from-the-Player-inside-a-Loop",
      "EditableFormat": "markdown",
      "HTML": "<p>It is not trivial, but there is a guide to asking questions inside a loop here:<br>\nhttps://github.com/ThePix/quest/wiki/Getting-Input-from-the-Player-inside-a-Loop</p>\n\n",
      "PostDate": "2017-01-20T08:48:23.9544769Z",
      "LastEditDate": null
    },
    {
      "PostId": "23b9f625-2d99-4570-9680-06c394420d56",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Quite interesting, I think I'll start with the clunky method mentioned, since i got it to work last night, but when i'm ready to move on i'll try to make it more elegantly, at this point still not skilled enough to use lists of questions and answers line up..  ",
      "EditableFormat": "markdown",
      "HTML": "<p>Quite interesting, I think I'll start with the clunky method mentioned, since i got it to work last night, but when i'm ready to move on i'll try to make it more elegantly, at this point still not skilled enough to use lists of questions and answers line up..</p>\n\n",
      "PostDate": "2017-01-20T16:02:28.8027193Z",
      "LastEditDate": null
    },
    {
      "PostId": "5838cd4a-154e-4992-bafc-858374b33e8d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You're definately learning to code better, hehe, though don't be embarassed about messing up code, as that indeed means you're learning to code: you're learning to code a bit and thus are now able to try to code (which usually results in mistakes, such as endless/infinite loops), whereas before you couldn't even code an endless/infinite loop, as you didn't even know how to code or how to code a loop. Learning to code is a very slow process, with a lot of mistakes and thus a lot of troubleshooting, but this is the learning process of coding, laughs.\r\n\r\nendless/inifinite loops are very common, everyone, even programming experts, has done them in their code! The good thing is that the computer is protected and the software you use is protective too. This wasn't the case in the early days of computers, where you could even worsely (if you don't know what you're doing or if you're the victim of a malicious hacker) access the critical computer data/hardware in memory and also the halts/interupts controls/flags of computer processes/IO:input-output, which could completely block you off from using your computer ever again.\r\n\r\nWhy the infinite/endless loop crashes the software/computer:\r\n\r\nthe processes/operations/scripting that is the infinite/endless loop, uses resources to store data about it (google search: 'activation records' / 'coding overhead', and/or something like this 'why can recursion be bad' or just read up on 'recursion' and you'll probably eventually find a source that gets into activation records / coding overhead), and while the looping is infinite/endless, the computer's resources are not, and hence the crash. (also if interested further, google search: 'memory leaks' and also 'dangling pointers' )\r\n\r\na loop is simple, dialogue/conversation is not... lol\r\n\r\nto do a loop, you can use quest's built-in 'while' loop Function, or you just have a Function call itself within its scripting, or you have a Script Attribute / Verb call itself within its scripting.\r\n\r\nwhile not quite a loop technically, there's also iteration (which can be set up to act like a limited looping loop):\r\n\r\nthe 'foreach' and 'for' Functions/Scripts\r\n\r\nthe 'foreach' requires a List Attribute, as it iterates through a List Attribute's items\r\n\r\nthe 'for' just iterates the number of times (and optionally also its steps/intervals) you specify for it, doing whatever scripting you give it, that many times.\r\n\r\n---------\r\n\r\nP.S.\r\n\r\nI'd recommend taking a look at the 'RandomChance' Function for use with your 'testfail' Integer Attribute (though you'll be needing to decrease your 'testfail' Integer Attribute, for the lowering of your % of success, instead with using the 'RandomChance' Function:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/corelibrary/randomchance.html\r\n\r\nspoiler:\r\n\r\n```\r\n// the higher/greater your 'testfail' Integer Attribute's Value (which for using RandomChance has to be between 0 and 100), the higher/greater your percent chance of success (if TRUE)\r\n\r\nif (RandomChance (game.testfail)) {\r\n  // success script(s)\r\n} else {\r\n  // failure script(s)\r\n}\r\n```\r\n\r\nand an example of having a terminating (non-crashing, not endless/infinite) loop:\r\n\r\n(my 'msg' Scripts allow for you to see what is going on with it at every important step --- 'tracking' of: scripting, the order of operations, what scripts are accessable/not-accessable, and also of Attributes' Values changing --- which is what debuggers, and if there was/are any mistakes, be able to easily locate them due to my 'msg' Scripts --- this is an extremely useful 'sure-fire' way of trouble shooting scripting issues)\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"loop_counter_integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"start\" type=\"script\">\r\n    msg (\"Message 1, and Loop Counter Value: \" + game.loop_counter_integer_attribute) \r\n    example_of_terminating_loop_function\r\n    msg (\"Message 5, and Loop Counter Value: \" + game.loop_counter_integer_attribute) \r\n  </attr>\r\n</game>\r\n\r\n<function name=\"example_of_terminating_loop_function\"><![CDATA[\r\n  msg (\"Message 2 and Loop Counter Value: \" + game.loop_counter_integer_attribute) \r\n  if (game.loop_counter_integer_attribute < 3) {\r\n    msg (\"Message 3 and Loop Counter Value: \" + game.loop_counter_integer_attribute) \r\n    game.loop_counter_integer_attribute = game.loop_counter_integer_attribute + 1\r\n    msg (\"Message 4 and Loop Counter Value: \" + game.loop_counter_integer_attribute) \r\n    example_of_terminating_loop_function\r\n  }\r\n]]></function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You're definately learning to code better, hehe, though don't be embarassed about messing up code, as that indeed means you're learning to code: you're learning to code a bit and thus are now able to try to code (which usually results in mistakes, such as endless/infinite loops), whereas before you couldn't even code an endless/infinite loop, as you didn't even know how to code or how to code a loop. Learning to code is a very slow process, with a lot of mistakes and thus a lot of troubleshooting, but this is the learning process of coding, laughs.</p>\n<p>endless/inifinite loops are very common, everyone, even programming experts, has done them in their code! The good thing is that the computer is protected and the software you use is protective too. This wasn't the case in the early days of computers, where you could even worsely (if you don't know what you're doing or if you're the victim of a malicious hacker) access the critical computer data/hardware in memory and also the halts/interupts controls/flags of computer processes/IO:input-output, which could completely block you off from using your computer ever again.</p>\n<p>Why the infinite/endless loop crashes the software/computer:</p>\n<p>the processes/operations/scripting that is the infinite/endless loop, uses resources to store data about it (google search: 'activation records' / 'coding overhead', and/or something like this 'why can recursion be bad' or just read up on 'recursion' and you'll probably eventually find a source that gets into activation records / coding overhead), and while the looping is infinite/endless, the computer's resources are not, and hence the crash. (also if interested further, google search: 'memory leaks' and also 'dangling pointers' )</p>\n<p>a loop is simple, dialogue/conversation is not... lol</p>\n<p>to do a loop, you can use quest's built-in 'while' loop Function, or you just have a Function call itself within its scripting, or you have a Script Attribute / Verb call itself within its scripting.</p>\n<p>while not quite a loop technically, there's also iteration (which can be set up to act like a limited looping loop):</p>\n<p>the 'foreach' and 'for' Functions/Scripts</p>\n<p>the 'foreach' requires a List Attribute, as it iterates through a List Attribute's items</p>\n<p>the 'for' just iterates the number of times (and optionally also its steps/intervals) you specify for it, doing whatever scripting you give it, that many times.</p>\n<hr>\n<p>P.S.</p>\n<p>I'd recommend taking a look at the 'RandomChance' Function for use with your 'testfail' Integer Attribute (though you'll be needing to decrease your 'testfail' Integer Attribute, for the lowering of your % of success, instead with using the 'RandomChance' Function:</p>\n<p>http://docs.textadventures.co.uk/quest/functions/corelibrary/randomchance.html</p>\n<p>spoiler:</p>\n<pre><code>// the higher/greater your 'testfail' Integer Attribute's Value (which for using RandomChance has to be between 0 and 100), the higher/greater your percent chance of success (if TRUE)\n\nif (RandomChance (game.testfail)) {\n  // success script(s)\n} else {\n  // failure script(s)\n}\n</code></pre>\n<p>and an example of having a terminating (non-crashing, not endless/infinite) loop:</p>\n<p>(my 'msg' Scripts allow for you to see what is going on with it at every important step --- 'tracking' of: scripting, the order of operations, what scripts are accessable/not-accessable, and also of Attributes' Values changing --- which is what debuggers, and if there was/are any mistakes, be able to easily locate them due to my 'msg' Scripts --- this is an extremely useful 'sure-fire' way of trouble shooting scripting issues)</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"loop_counter_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    msg (\"Message 1, and Loop Counter Value: \" + game.loop_counter_integer_attribute) \n    example_of_terminating_loop_function\n    msg (\"Message 5, and Loop Counter Value: \" + game.loop_counter_integer_attribute) \n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"example_of_terminating_loop_function\"&gt;&lt;![CDATA[\n  msg (\"Message 2 and Loop Counter Value: \" + game.loop_counter_integer_attribute) \n  if (game.loop_counter_integer_attribute &lt; 3) {\n    msg (\"Message 3 and Loop Counter Value: \" + game.loop_counter_integer_attribute) \n    game.loop_counter_integer_attribute = game.loop_counter_integer_attribute + 1\n    msg (\"Message 4 and Loop Counter Value: \" + game.loop_counter_integer_attribute) \n    example_of_terminating_loop_function\n  }\n]]&gt;&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2017-01-21T14:53:15.5470836Z",
      "LastEditDate": "2017-01-21T15:27:17.4924845Z"
    },
    {
      "PostId": "f72a26c6-c3e3-4b25-a285-f5126de6fa40",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, though recent to learning programming i've been around computers most of my life, in the nitty gritty days of dos and having to manage 640k conventional memory and when floppy disks were floppy.. and i know how easy it was to MAJORLY screw up things, hell had to reinstall windows 95 and 2k so many times because of my..dabbling with the code messed things up so bad a clean install was really the only thing..admittedly SOME of those habits i keep are still quite smart.(Backups that aren't connected online) but anyhow\r\n\r\n\r\nHave learned the joys of having simple messages for debuggers in many cases, it tells me also which of alot of turnscripts/timers might be misfiring as well since those are many times global and often harder to pin down\r\n\r\n\r\nThough really don't see how a random number for the testfail figures in, each question has a right answer and that adds to your score, not just a random roll of the dice sort of test. using it to keep scores of the strikes someone has. using random to make the test questions chosen for the player vary a bit for replayablity\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, though recent to learning programming i've been around computers most of my life, in the nitty gritty days of dos and having to manage 640k conventional memory and when floppy disks were floppy.. and i know how easy it was to MAJORLY screw up things, hell had to reinstall windows 95 and 2k so many times because of my..dabbling with the code messed things up so bad a clean install was really the only thing..admittedly SOME of those habits i keep are still quite smart.(Backups that aren't connected online) but anyhow</p>\n<p>Have learned the joys of having simple messages for debuggers in many cases, it tells me also which of alot of turnscripts/timers might be misfiring as well since those are many times global and often harder to pin down</p>\n<p>Though really don't see how a random number for the testfail figures in, each question has a right answer and that adds to your score, not just a random roll of the dice sort of test. using it to keep scores of the strikes someone has. using random to make the test questions chosen for the player vary a bit for replayablity</p>\n\n",
      "PostDate": "2017-01-21T18:25:26.6513789Z",
      "LastEditDate": null
    }
  ]
}
