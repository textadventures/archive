{
  "Topic": {
    "TopicId": "zjdx9sb4lk6ohtzq0hk0zg",
    "ForumId": "10",
    "Title": "Creating An Attribute That's a String Based On Another Attribute",
    "LastUpdated": "2018-10-12T02:28:47.7008824Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4f9bc91b-445d-425b-aea9-08bcd1b6fdbc",
      "UserId": 380581,
      "Username": "kemilu",
      "AvatarUrl": "https://secure.gravatar.com/avatar/988b2cc123e1c0f28254a101a87f7e4d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For example, say your protagonist has a \"Strength\" Attribute, which is an integer value that ranges from 1-10. Various actions taken in the game can cause this Attribute to increase or decrease.\r\n\r\nBut say you want to reference the protagonist's Strength in a Status Pane, or some other context, not using a number, but with a descriptive word. So, for example, if their Strength Attribute is 1, their Strengthword Attribute is \"Weak\", but if they raise their Strength to 7, their Strengthword becomes \"Burly\" or something.\r\n\r\nI'm super new to Quest, and to coding in general. I've tried taking a few lessons on codeacademy! But it doesn't seem to be helping. Meh. I thought setting the value of a \"Strengthword\" attribute to, say,\r\n\r\nif (player.strength = 1) {\r\n  return (Weak)\r\n}\r\n\r\nAnd then have a Status Attribute keyed from the Strengthword that displays as \"Strength: !\". But that does not seem to work. I didn't think it would. But hopefully someone here can point me in the right direction.  I've definitely got a story I want to tell and I'm eager to learn how to do it!",
      "EditableFormat": "markdown",
      "HTML": "<p>For example, say your protagonist has a \"Strength\" Attribute, which is an integer value that ranges from 1-10. Various actions taken in the game can cause this Attribute to increase or decrease.</p>\n<p>But say you want to reference the protagonist's Strength in a Status Pane, or some other context, not using a number, but with a descriptive word. So, for example, if their Strength Attribute is 1, their Strengthword Attribute is \"Weak\", but if they raise their Strength to 7, their Strengthword becomes \"Burly\" or something.</p>\n<p>I'm super new to Quest, and to coding in general. I've tried taking a few lessons on codeacademy! But it doesn't seem to be helping. Meh. I thought setting the value of a \"Strengthword\" attribute to, say,</p>\n<p>if (player.strength = 1) {<br>\nreturn (Weak)<br>\n}</p>\n<p>And then have a Status Attribute keyed from the Strengthword that displays as \"Strength: !\". But that does not seem to work. I didn't think it would. But hopefully someone here can point me in the right direction.  I've definitely got a story I want to tell and I'm eager to learn how to do it!</p>\n\n",
      "PostDate": "2018-10-12T02:28:47.7008824Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ecf7e19f-b4f4-486a-b6b1-3341141e30b0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No, because a status attribute displays the attribute; it doesn't run it if it's a script.\r\n\r\nFor something like that, you more likely want to give the player a script attribute named `changedstrength` - this will automatically be run every time the player's strength changes, so you can use it to set the `strengthword` attribute to a sensible value. For example, your `changedstrength` script could be:\r\n```\r\nif (this.strength = 1) {\r\n  this.strengthword = \"Weak\"\r\n}\r\n```\r\nand so on for the other options.\r\n\r\n(within a script attribute, you can use `this` to save time typing the name of the object)\r\n\r\nIn fact, it might be quicker for the script to be something like:\r\n```\r\nthis.strengthword = ListItem (Split (\"Zero;Weak;Puny;Pathetic;Scrawny;Below average;Average;Burly;Muscular;Ripped;Titanic\"), this.strength)\r\n```\r\nThen you only need one line of code :)",
      "EditableFormat": "markdown",
      "HTML": "<p>No, because a status attribute displays the attribute; it doesn't run it if it's a script.</p>\n<p>For something like that, you more likely want to give the player a script attribute named <code>changedstrength</code> - this will automatically be run every time the player's strength changes, so you can use it to set the <code>strengthword</code> attribute to a sensible value. For example, your <code>changedstrength</code> script could be:</p>\n<pre><code>if (this.strength = 1) {\n  this.strengthword = \"Weak\"\n}\n</code></pre>\n<p>and so on for the other options.</p>\n<p>(within a script attribute, you can use <code>this</code> to save time typing the name of the object)</p>\n<p>In fact, it might be quicker for the script to be something like:</p>\n<pre><code>this.strengthword = ListItem (Split (\"Zero;Weak;Puny;Pathetic;Scrawny;Below average;Average;Burly;Muscular;Ripped;Titanic\"), this.strength)\n</code></pre>\n<p>Then you only need one line of code :)</p>\n\n",
      "PostDate": "2018-10-12T02:53:41.2819422Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8edeecd3-9272-4acc-9889-ed7b3ed4f79d",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A few ways it can be done:\r\n1) A split variable: \r\n(I think) game.strength=split(\"very weak; weak; weak; kinda weak; below average; average; kinda strong; strong; stout; burly; hulk\")\r\nThat gives you words from 0 to 10... \r\nor:\r\n2) as a function, which kinda looks like you were trying with the return(Weak) bit...\r\nBut if you make it a function, drop the player.strength bit, and it will work for any time you need a strength word...\r\nMake a function and add \"strength\" as what you pass to it, and have it return a string.\r\nIE: strength2word\r\nThen use a switch for a list of words you want returned:\r\ncase 1: strengthword=\"weak\"\r\ncase 4:strengthword=\"below average\"\r\nThen:\r\nreturn (strengthword)\r\nSo, to use it:\r\nmsg (\"You see the man stand up from the table and he looks \" + strength2word(npc.strength) + \"to you.\")\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>A few ways it can be done:</p>\n<ol>\n<li>A split variable:<br>\n(I think) game.strength=split(\"very weak; weak; weak; kinda weak; below average; average; kinda strong; strong; stout; burly; hulk\")<br>\nThat gives you words from 0 to 10...<br>\nor:</li>\n<li>as a function, which kinda looks like you were trying with the return(Weak) bit...<br>\nBut if you make it a function, drop the player.strength bit, and it will work for any time you need a strength word...<br>\nMake a function and add \"strength\" as what you pass to it, and have it return a string.<br>\nIE: strength2word<br>\nThen use a switch for a list of words you want returned:<br>\ncase 1: strengthword=\"weak\"<br>\ncase 4:strengthword=\"below average\"<br>\nThen:<br>\nreturn (strengthword)<br>\nSo, to use it:<br>\nmsg (\"You see the man stand up from the table and he looks \" + strength2word(npc.strength) + \"to you.\")</li>\n</ol>\n\n",
      "PostDate": "2018-10-12T02:58:40.3412031Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "44b2c828-9040-4f99-8810-e2808bf4223e",
      "UserId": 380581,
      "Username": "kemilu",
      "AvatarUrl": "https://secure.gravatar.com/avatar/988b2cc123e1c0f28254a101a87f7e4d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you both for your replies! The ListItem and Split functions look really useful together.\r\n\r\nI feel like they might make creating a self-description page that is generated based on the player's current attributes a whole lot easier. I thought I would have to do a huge nest of if/then statements to make their description, for example, give a different description specific to their current outfit or level of fitness. \r\n\r\nThis changes everything! =D\r\n\r\nI will take this lesson and push onward! Thanks again!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you both for your replies! The ListItem and Split functions look really useful together.</p>\n<p>I feel like they might make creating a self-description page that is generated based on the player's current attributes a whole lot easier. I thought I would have to do a huge nest of if/then statements to make their description, for example, give a different description specific to their current outfit or level of fitness.</p>\n<p>This changes everything! =D</p>\n<p>I will take this lesson and push onward! Thanks again!</p>\n\n",
      "PostDate": "2018-10-12T03:21:53.8557358Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0cdbd498-a030-4290-9e9b-3d53f5a948b2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's some links:\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c\r\n\r\nhttp://docs.textadventures.co.uk/quest/using_lists.html\r\nhttp://docs.textadventures.co.uk/quest/using_dictionaries.html\r\n\r\nhttp://docs.textadventures.co.uk/quest/text_processor.html\r\n\r\n---------\r\n\r\nif you want to do ranges (STR: 0 to 33 = \"weak\", 34 to 66 = \"average\", 67 to 100 = \"strong\"), you can either use 'if' scripting, or you use possibly some fancy math conversion from the ranges into 1 to 5 values (I'm not good at math so can't yet figure out the formula/equation, if its possible to keep it this simplistic) for the list/dict usage, for example:\r\n\r\n```\r\ncreate (\"test\")\r\n\r\ntest.score = GetRandomInt (0,100)\r\n\r\n// high to low checking:\r\n\r\nif (test.score > 89) {\r\n  test.grade = \"A\"\r\n} else if (test.score > 79) {\r\n  test.grade = \"B\"\r\n} else if (test.score > 69) {\r\n  test.grade = \"C\"\r\n} else if (test.score > 59) {\r\n  test.grade = \"D\"\r\n} else {\r\n  test.grade = \"F\"\r\n}\r\n\r\n// or, if you don't like using the '-1' values:\r\n// (high to low checking)\r\n\r\nif (test.score >= 90) {\r\n  test.grade = \"A\"\r\n} else if (test.score >= 80) {\r\n  test.grade = \"B\"\r\n} else if (test.score >= 70) {\r\n  test.grade = \"C\"\r\n} else if (test.score >= 60) {\r\n  test.grade = \"D\"\r\n} else {\r\n  test.grade = \"F\"\r\n}\r\n\r\n// or, low to high checking:\r\n\r\nif (test.score < 60) {\r\n  test.grade = \"F\"\r\n} else if (test.score < 70) {\r\n  test.grade = \"D\"\r\n} else if (test.score < 80) {\r\n  test.grade = \"C\"\r\n} else if (test.score < 90) {\r\n  test.grade = \"B\"\r\n} else {\r\n  test.grade = \"A\"\r\n}\r\n\r\n// ---------------------------------------------\r\n\r\n// or, if you want to use a list:\r\n\r\n// low to high checking:\r\n\r\ngrade_list = Split (\"F;D;C;B;A\", \";\")\r\n\r\n// ----------\r\n// or:\r\ngrade_list = NewStringList ()\r\nlist add (grade_list, \"F\")\r\nlist add (grade_list, \"D\")\r\nlist add (grade_list, \"C\")\r\nlist add (grade_list, \"B\")\r\nlist add (grade_list, \"A\")\r\n// ------------\r\n\r\ninput = ToString (((test.score + 10) / 20) - 1) // can't figure this formula/equation out (what I got doesn't work): I want to be able to convert the ranges (A: 90-100, B: 80-89, C: 70-79, D: 60-69, F: 0-59) to 1-5 (and then minus 1 to 0-4) or directly to 0-4, as for the list's index number needs (F:0, D:1, C:2, B:3, A:4)\r\n\r\ntest.grade = StringListItem (grade_list, input)\r\n\r\n// ---------------------------\r\n\r\nor, if you want to use a dictionary:\r\n\r\ngrade_dict = NewStringDictionary ()\r\ndictionary add (grade_dict, \"1\", \"F\")\r\ndictionary add (grade_dict, \"2\", \"D\")\r\ndictionary add (grade_dict, \"3\", \"C\")\r\ndictionary add (grade_dict, \"4\", \"B\")\r\ndictionary add (grade_dict, \"5\", \"A\")\r\n\r\n// -------\r\n// or:\r\ngrade_dict = NewStringDictionary ()\r\ndictionary add (grade_dict, \"0\", \"F\")\r\ndictionary add (grade_dict, \"1\", \"D\")\r\ndictionary add (grade_dict, \"2\", \"C\")\r\ndictionary add (grade_dict, \"3\", \"B\")\r\ndictionary add (grade_dict, \"4\", \"A\")\r\n// -------\r\n\r\ninput = ToString (((test.score + 10) / 20) - 1) // can't figure this formula/equation out (what I got doesn't work): I want to be able to convert the ranges (A: 90-100, B: 80-89, C: 70-79, D: 60-69, F: 0-59) to 1-5 or 0-4, as for the dict's key string needs (F:0, D:1, C:2, B:3, A:4 or F:1, D:2, C:3, B:4, A:5)\r\n\r\ntest.grade = StringDictionaryItem (grade_dict, input)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>here's some links:</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n<p>http://docs.textadventures.co.uk/quest/using_lists.html<br>\nhttp://docs.textadventures.co.uk/quest/using_dictionaries.html</p>\n<p>http://docs.textadventures.co.uk/quest/text_processor.html</p>\n<hr>\n<p>if you want to do ranges (STR: 0 to 33 = \"weak\", 34 to 66 = \"average\", 67 to 100 = \"strong\"), you can either use 'if' scripting, or you use possibly some fancy math conversion from the ranges into 1 to 5 values (I'm not good at math so can't yet figure out the formula/equation, if its possible to keep it this simplistic) for the list/dict usage, for example:</p>\n<pre><code>create (\"test\")\n\ntest.score = GetRandomInt (0,100)\n\n// high to low checking:\n\nif (test.score &gt; 89) {\n  test.grade = \"A\"\n} else if (test.score &gt; 79) {\n  test.grade = \"B\"\n} else if (test.score &gt; 69) {\n  test.grade = \"C\"\n} else if (test.score &gt; 59) {\n  test.grade = \"D\"\n} else {\n  test.grade = \"F\"\n}\n\n// or, if you don't like using the '-1' values:\n// (high to low checking)\n\nif (test.score &gt;= 90) {\n  test.grade = \"A\"\n} else if (test.score &gt;= 80) {\n  test.grade = \"B\"\n} else if (test.score &gt;= 70) {\n  test.grade = \"C\"\n} else if (test.score &gt;= 60) {\n  test.grade = \"D\"\n} else {\n  test.grade = \"F\"\n}\n\n// or, low to high checking:\n\nif (test.score &lt; 60) {\n  test.grade = \"F\"\n} else if (test.score &lt; 70) {\n  test.grade = \"D\"\n} else if (test.score &lt; 80) {\n  test.grade = \"C\"\n} else if (test.score &lt; 90) {\n  test.grade = \"B\"\n} else {\n  test.grade = \"A\"\n}\n\n// ---------------------------------------------\n\n// or, if you want to use a list:\n\n// low to high checking:\n\ngrade_list = Split (\"F;D;C;B;A\", \";\")\n\n// ----------\n// or:\ngrade_list = NewStringList ()\nlist add (grade_list, \"F\")\nlist add (grade_list, \"D\")\nlist add (grade_list, \"C\")\nlist add (grade_list, \"B\")\nlist add (grade_list, \"A\")\n// ------------\n\ninput = ToString (((test.score + 10) / 20) - 1) // can't figure this formula/equation out (what I got doesn't work): I want to be able to convert the ranges (A: 90-100, B: 80-89, C: 70-79, D: 60-69, F: 0-59) to 1-5 (and then minus 1 to 0-4) or directly to 0-4, as for the list's index number needs (F:0, D:1, C:2, B:3, A:4)\n\ntest.grade = StringListItem (grade_list, input)\n\n// ---------------------------\n\nor, if you want to use a dictionary:\n\ngrade_dict = NewStringDictionary ()\ndictionary add (grade_dict, \"1\", \"F\")\ndictionary add (grade_dict, \"2\", \"D\")\ndictionary add (grade_dict, \"3\", \"C\")\ndictionary add (grade_dict, \"4\", \"B\")\ndictionary add (grade_dict, \"5\", \"A\")\n\n// -------\n// or:\ngrade_dict = NewStringDictionary ()\ndictionary add (grade_dict, \"0\", \"F\")\ndictionary add (grade_dict, \"1\", \"D\")\ndictionary add (grade_dict, \"2\", \"C\")\ndictionary add (grade_dict, \"3\", \"B\")\ndictionary add (grade_dict, \"4\", \"A\")\n// -------\n\ninput = ToString (((test.score + 10) / 20) - 1) // can't figure this formula/equation out (what I got doesn't work): I want to be able to convert the ranges (A: 90-100, B: 80-89, C: 70-79, D: 60-69, F: 0-59) to 1-5 or 0-4, as for the dict's key string needs (F:0, D:1, C:2, B:3, A:4 or F:1, D:2, C:3, B:4, A:5)\n\ntest.grade = StringDictionaryItem (grade_dict, input)\n</code></pre>\n\n",
      "PostDate": "2018-10-12T05:10:33.7248779Z",
      "LastEditDate": "2018-10-12T05:13:06.5993985Z",
      "link": null
    }
  ]
}
