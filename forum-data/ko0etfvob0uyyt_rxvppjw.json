{
  "Topic": {
    "TopicId": "ko0etfvob0uyyt_rxvppjw",
    "ForumId": "20",
    "Title": "\"it\" in Quest [RELOADED]",
    "LastUpdated": "2018-04-11T01:09:30.2317537Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8393716f-0441-40cd-b710-3be12b544f9e",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Should \"it\" be the last object mentioned or the last object(s) you interacted with?\r\n\r\n---\r\n<center><h3>Hypothetical Transcript</h3></center>\r\n\r\n\\> open door\r\nYou open it.\r\n\r\n\\> enter it\r\n\r\nYou are on your front porch.\r\nYou can see a [newspaper](#this-is-not-a-verblink).\r\n\r\n\\> get it\r\nYou can't take it.\r\n\r\n\\> x it\r\nNothing out of the ordinary.\r\n\r\n\\*NOTE:  Found a bug!!! Can't take the newspaper, and it has no description?!?  Watch.  I'll try again.\r\n\r\n\\> get newspaper\r\nYou pick it up.\r\n\r\n\\> x it\r\nThe big story on the front page is titled _How Pronouns Work in Interactive Fiction_.\r\n\r\n*NOTE: I have no clue why it worked the second time.\r\n\r\n---\r\n**PS**\r\n\r\nI know how Quest works as far as \"it\" is concerned.  That was just a hypothetical transcript.\r\n\r\n I'm wondering if everyone thinks the way it works is the best way.",
      "EditableFormat": "markdown",
      "HTML": "<p>Should \"it\" be the last object mentioned or the last object(s) you interacted with?</p>\n<hr>\n<center><h3>Hypothetical Transcript</h3></center>\n<p>&gt; open door<br>\nYou open it.</p>\n<p>&gt; enter it</p>\n<p>You are on your front porch.<br>\nYou can see a <a href=\"#this-is-not-a-verblink\">newspaper</a>.</p>\n<p>&gt; get it<br>\nYou can't take it.</p>\n<p>&gt; x it<br>\nNothing out of the ordinary.</p>\n<p>*NOTE:  Found a bug!!! Can't take the newspaper, and it has no description?!?  Watch.  I'll try again.</p>\n<p>&gt; get newspaper<br>\nYou pick it up.</p>\n<p>&gt; x it<br>\nThe big story on the front page is titled <em>How Pronouns Work in Interactive Fiction</em>.</p>\n<p>*NOTE: I have no clue why it worked the second time.</p>\n<hr>\n<p><strong>PS</strong></p>\n<p>I know how Quest works as far as \"it\" is concerned.  That was just a hypothetical transcript.</p>\n<p>I'm wondering if everyone thinks the way it works is the best way.</p>\n\n",
      "PostDate": "2018-04-11T01:09:30.2317537Z",
      "LastEditDate": "2018-06-10T23:14:02.910457Z",
      "link": null
    },
    {
      "PostId": "ebd0993f-ab06-45eb-ba49-7228819e8900",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would say it should be the last object mentioned should be it, except when it's the player (unless otherwise specified).",
      "EditableFormat": "markdown",
      "HTML": "<p>I would say it should be the last object mentioned should be it, except when it's the player (unless otherwise specified).</p>\n\n",
      "PostDate": "2018-04-11T02:24:03.8462865Z",
      "LastEditDate": "2018-04-11T02:24:29.3754608Z",
      "link": null
    },
    {
      "PostId": "2ca35bea-88e7-4130-94e8-d5eece409929",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I agree.\r\n\r\nWell, I think it needs to be the last object mentioned or the last object interacted with, whichever came last.\r\n\r\nThe game has a list attribute called ```lastobjects```.  When you interact with something, it's added to the list.  The last thing on the list is \"it\".  (A list item may contain two objects, in a scenario such as 'put egg in basket.')\r\n\r\nAlso, I just noticed that checking inventory clears the list.  \r\n\r\nAnyway...\r\nI wonder if it would hurt anything to make ```ObjectLink``` add the object to ```lastobjects```.",
      "EditableFormat": "markdown",
      "HTML": "<p>I agree.</p>\n<p>Well, I think it needs to be the last object mentioned or the last object interacted with, whichever came last.</p>\n<p>The game has a list attribute called <code>lastobjects</code>.  When you interact with something, it's added to the list.  The last thing on the list is \"it\".  (A list item may contain two objects, in a scenario such as 'put egg in basket.')</p>\n<p>Also, I just noticed that checking inventory clears the list.</p>\n<p>Anyway...<br>\nI wonder if it would hurt anything to make <code>ObjectLink</code> add the object to <code>lastobjects</code>.</p>\n\n",
      "PostDate": "2018-04-11T02:51:17.2394209Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0cb114cf-9bbe-4cb1-9594-97db047d0e39",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "These changes seem to make it behave as I would expect (as long as hyperlinks are enabled):\r\n\r\n```\r\n  <function name=\"GetDisplayNameLink\" parameters=\"obj, type\" type=\"string\"><![CDATA[\r\n    verbs = GetDisplayVerbs(obj)\r\n    if (verbs <> null) {\r\n      verbCount = ListCount(verbs)\r\n    }\r\n    else {\r\n      verbCount = 0\r\n    }\r\n    if (type = \"exit\" and verbCount = 1) {\r\n      if (not game.enablehyperlinks) {\r\n        result = GetDisplayAlias(obj)\r\n      }\r\n      else {\r\n        result = \"{exit:\" + obj.name + \"}\"\r\n      }\r\n    }\r\n    else if (type = \"\") {\r\n      result = GetDisplayAlias(obj)\r\n      if (not HasAttribute(game,\"lastobjects\")) {\r\n        game.lastobjects = NewObjectList()\r\n      }\r\n      if (not obj = game.pov.parent) {\r\n        list add (game.lastobjects, obj)\r\n      }\r\n    }\r\n    else {\r\n      result = \"{object:\" + obj.name + \"}\"\r\n      if (not HasAttribute(game,\"lastobjects\")) {\r\n        game.lastobjects = NewObjectList()\r\n      }\r\n      list add (game.lastobjects, obj)\r\n    }\r\n    if (not GetBoolean(obj, \"usedefaultprefix\")) {\r\n      if (obj.prefix = null) {\r\n        prefix = \"\"\r\n      }\r\n      else {\r\n        prefix = obj.prefix\r\n      }\r\n    }\r\n    else if (type = \"exit\") {\r\n      prefix = \"\"\r\n    }\r\n    else {\r\n      prefix = GetDefaultPrefix(obj)\r\n    }\r\n    if (LengthOf(prefix) > 0) {\r\n      prefix = prefix + \" \"\r\n    }\r\n    result = prefix + result\r\n    if (not GetBoolean(obj, \"usedefaultprefix\") and HasString(obj, \"suffix\")) {\r\n      if (LengthOf(obj.suffix) > 0) {\r\n        result = result + \" \" + obj.suffix\r\n      }\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n```\r\n```\r\n  <function name=\"ObjectLink\" parameters=\"obj\" type=\"string\">\r\n    game.lastobjects = NewObjectList()\r\n    list add (game.lastobjects, obj)\r\n    return (\"{object:\" + obj.name + \"}\")\r\n  </function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>These changes seem to make it behave as I would expect (as long as hyperlinks are enabled):</p>\n<pre><code>  &lt;function name=\"GetDisplayNameLink\" parameters=\"obj, type\" type=\"string\"&gt;&lt;![CDATA[\n    verbs = GetDisplayVerbs(obj)\n    if (verbs &lt;&gt; null) {\n      verbCount = ListCount(verbs)\n    }\n    else {\n      verbCount = 0\n    }\n    if (type = \"exit\" and verbCount = 1) {\n      if (not game.enablehyperlinks) {\n        result = GetDisplayAlias(obj)\n      }\n      else {\n        result = \"{exit:\" + obj.name + \"}\"\n      }\n    }\n    else if (type = \"\") {\n      result = GetDisplayAlias(obj)\n      if (not HasAttribute(game,\"lastobjects\")) {\n        game.lastobjects = NewObjectList()\n      }\n      if (not obj = game.pov.parent) {\n        list add (game.lastobjects, obj)\n      }\n    }\n    else {\n      result = \"{object:\" + obj.name + \"}\"\n      if (not HasAttribute(game,\"lastobjects\")) {\n        game.lastobjects = NewObjectList()\n      }\n      list add (game.lastobjects, obj)\n    }\n    if (not GetBoolean(obj, \"usedefaultprefix\")) {\n      if (obj.prefix = null) {\n        prefix = \"\"\n      }\n      else {\n        prefix = obj.prefix\n      }\n    }\n    else if (type = \"exit\") {\n      prefix = \"\"\n    }\n    else {\n      prefix = GetDefaultPrefix(obj)\n    }\n    if (LengthOf(prefix) &gt; 0) {\n      prefix = prefix + \" \"\n    }\n    result = prefix + result\n    if (not GetBoolean(obj, \"usedefaultprefix\") and HasString(obj, \"suffix\")) {\n      if (LengthOf(obj.suffix) &gt; 0) {\n        result = result + \" \" + obj.suffix\n      }\n    }\n    return (result)\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"ObjectLink\" parameters=\"obj\" type=\"string\"&gt;\n    game.lastobjects = NewObjectList()\n    list add (game.lastobjects, obj)\n    return (\"{object:\" + obj.name + \"}\")\n  &lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-04-11T03:24:31.4463044Z",
      "LastEditDate": "2018-04-11T03:25:05.059496Z",
      "link": null
    },
    {
      "PostId": "2d1a816a-2538-46f9-875f-57083fc658c8",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HEAD KNIGHT: He said the word!\r\n\r\nARTHUR: Surely you've not given up your quest for the Holy Grail?\r\n\r\nMINSTREL (singing): He is sneaking away and buggering off...\r\n\r\nROBIN: Shut up! No, no no-- far from it.\r\n\r\nHEAD KNIGHT: He said the word again!\r\n\r\nROBIN: I was looking for it.\r\n\r\nKNIGHTS: Aaaaugh!\r\n\r\nROBIN: Uh, here, here in this forest.\r\n\r\nARTHUR: No, it is far from...\r\n\r\nKNIGHTS: Aaaaugh!\r\n\r\nHEAD KNIGHT: Aaaaugh! Stop saying the word!\r\n\r\nARTHUR: Oh, stop it!\r\n\r\nKNIGHTS: Aaaaugh!\r\n\r\nHEAD KNIGHT: Oh! He said it again!\r\n\r\nARTHUR: Patsy!\r\n\r\nHEAD KNIGHT: Wait! I said it! I said it! Ooh! I said it again!\r\n\r\nKNIGHTS: Aaaaugh!",
      "EditableFormat": "markdown",
      "HTML": "<p>HEAD KNIGHT: He said the word!</p>\n<p>ARTHUR: Surely you've not given up your quest for the Holy Grail?</p>\n<p>MINSTREL (singing): He is sneaking away and buggering off...</p>\n<p>ROBIN: Shut up! No, no no-- far from it.</p>\n<p>HEAD KNIGHT: He said the word again!</p>\n<p>ROBIN: I was looking for it.</p>\n<p>KNIGHTS: Aaaaugh!</p>\n<p>ROBIN: Uh, here, here in this forest.</p>\n<p>ARTHUR: No, it is far from...</p>\n<p>KNIGHTS: Aaaaugh!</p>\n<p>HEAD KNIGHT: Aaaaugh! Stop saying the word!</p>\n<p>ARTHUR: Oh, stop it!</p>\n<p>KNIGHTS: Aaaaugh!</p>\n<p>HEAD KNIGHT: Oh! He said it again!</p>\n<p>ARTHUR: Patsy!</p>\n<p>HEAD KNIGHT: Wait! I said it! I said it! Ooh! I said it again!</p>\n<p>KNIGHTS: Aaaaugh!</p>\n\n",
      "PostDate": "2018-04-11T03:47:11.8921487Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "450184ba-a741-4473-a309-fc0cf68a92c5",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nYou are in a room.\r\nYou can see an apple.\r\nYou can go south.\r\n\r\n >eat it\r\n You eat it.\r\n\r\n > eat it\r\n I can't see that. (it)\r\n```\r\n\r\nIf there is no object in the room, Quest interprets \"it\" as an object",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>You are in a room.\nYou can see an apple.\nYou can go south.\n\n &gt;eat it\n You eat it.\n\n &gt; eat it\n I can't see that. (it)\n</code></pre>\n<p>If there is no object in the room, Quest interprets \"it\" as an object</p>\n\n",
      "PostDate": "2018-04-11T10:41:37.2925541Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f88f7990-3721-49af-94dc-8bb7a1581d2f",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> If there is no object in the room, Quest interprets \"it\" as an object\r\n\r\nThat would give some bizarre behaviour if you did have an object called \"it\"",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>If there is no object in the room, Quest interprets \"it\" as an object</p>\n</blockquote>\n<p>That would give some bizarre behaviour if you did have an object called \"it\"</p>\n\n",
      "PostDate": "2018-04-11T14:03:28.623331Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "35d34c9d-7982-4284-8f33-4d4e348324ae",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Let's compare apples to oranges (using no modified code).\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"it\">\r\n    <gameid>e5a6d9d3-0847-4c28-bb20-9444bd8dcf75</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"orange\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <take />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n---\r\nThree scenarios:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/38623153-8399ca72-3d6a-11e8-8206-77cfae35e890.png)\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/38623164-8a15565a-3d6a-11e8-8622-e346340c2bf6.png)\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/38623181-9149d388-3d6a-11e8-8a68-e750fb0b3863.png)\r\n\r\n\r\n---\r\nLet's add another room which contains an apple, just for fun:\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"it\">\r\n    <gameid>e5a6d9d3-0847-4c28-bb20-9444bd8dcf75</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"orange\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <take />\r\n    </object>\r\n    <exit alias=\"north\" to=\"second room\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"second room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <object name=\"apple\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <take />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/38623432-43d9a30c-3d6b-11e8-8a9b-8305f3572910.png)\r\n\r\n---\r\nI just noticed that an object is destroyed (not removed) once eaten, hence clearing the list: ```game.lastobjects```.\r\n\r\n---\r\nIt makes sense to me that Quest can't see \"it\" after you eat something.  The object was, after all, the last object mentioned as well as the last object with which the player interacted.  In real life, if I told you to eat an apple, then told you to examine it, you'd probably say something along the lines of, \"I can't see that.\"",
      "EditableFormat": "markdown",
      "HTML": "<p>Let's compare apples to oranges (using no modified code).</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"it\"&gt;\n    &lt;gameid&gt;e5a6d9d3-0847-4c28-bb20-9444bd8dcf75&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"orange\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;take /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>Three scenarios:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38623153-8399ca72-3d6a-11e8-8206-77cfae35e890.png\" alt=\"image\"></p>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38623164-8a15565a-3d6a-11e8-8622-e346340c2bf6.png\" alt=\"image\"></p>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38623181-9149d388-3d6a-11e8-8a68-e750fb0b3863.png\" alt=\"image\"></p>\n<hr>\n<p>Let's add another room which contains an apple, just for fun:</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"it\"&gt;\n    &lt;gameid&gt;e5a6d9d3-0847-4c28-bb20-9444bd8dcf75&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"orange\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;take /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"second room\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"second room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"apple\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;take /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38623432-43d9a30c-3d6b-11e8-8a9b-8305f3572910.png\" alt=\"image\"></p>\n<hr>\n<p>I just noticed that an object is destroyed (not removed) once eaten, hence clearing the list: <code>game.lastobjects</code>.</p>\n<hr>\n<p>It makes sense to me that Quest can't see \"it\" after you eat something.  The object was, after all, the last object mentioned as well as the last object with which the player interacted.  In real life, if I told you to eat an apple, then told you to examine it, you'd probably say something along the lines of, \"I can't see that.\"</p>\n\n",
      "PostDate": "2018-04-11T14:41:26.6247442Z",
      "LastEditDate": "2018-04-11T14:41:44.3092639Z",
      "link": null
    },
    {
      "PostId": "3a3c2518-ca00-4130-8503-f7217aec6a23",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\n==> Open drawer\r\n\r\nIt contains a spanner, a newspaper, a screwdriver, a ball of twine, and a leaking pen.\r\n\r\n==> Close it\r\n\r\nThe pen is already closed.\r\n```\r\n\r\nI think that if the drawer contained exactly one object, it would be logical to assume \"it\" means the item. More than one, it's probably the drawer. But either could be ambiguous.\r\n\r\nI'd think that \"it\" could mean either an object mentioned in the last command response, or the last object I interacted with. Possibly both should be retained; and the parser can assume that if one of them has gone out of scope, I meant the other. Or if I'm using a command which corresponds to a verb, see if only one of the available objects has that verb. Or if neither of those is true, try a disambiguation menu.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>==&gt; Open drawer\n\nIt contains a spanner, a newspaper, a screwdriver, a ball of twine, and a leaking pen.\n\n==&gt; Close it\n\nThe pen is already closed.\n</code></pre>\n<p>I think that if the drawer contained exactly one object, it would be logical to assume \"it\" means the item. More than one, it's probably the drawer. But either could be ambiguous.</p>\n<p>I'd think that \"it\" could mean either an object mentioned in the last command response, or the last object I interacted with. Possibly both should be retained; and the parser can assume that if one of them has gone out of scope, I meant the other. Or if I'm using a command which corresponds to a verb, see if only one of the available objects has that verb. Or if neither of those is true, try a disambiguation menu.</p>\n\n",
      "PostDate": "2018-04-11T14:50:56.2864118Z",
      "LastEditDate": "2018-04-11T14:53:06.0218554Z",
      "link": null
    },
    {
      "PostId": "b368b8dd-01d2-427f-b02d-cf02c36b2bf0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ooh!  That's a good one!!!\r\n\r\nI wonder if the script I wrote last night handles that as you describe...  Be right back!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ooh!  That's a good one!!!</p>\n<p>I wonder if the script I wrote last night handles that as you describe...  Be right back!</p>\n\n",
      "PostDate": "2018-04-11T15:04:06.6208562Z",
      "LastEditDate": "2018-04-11T15:05:07.8377222Z",
      "link": null
    },
    {
      "PostId": "e7ff5f89-be75-4bf9-8ae1-140784529c93",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I wonder if the script I wrote last night handles that as you describe...\r\n\r\nYep! (It pretty much does, anyway.)\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"it\">\r\n    <gameid>e5a6d9d3-0847-4c28-bb20-9444bd8dcf75</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"orange\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <take />\r\n    </object>\r\n    <exit alias=\"north\" to=\"second room\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"second room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <object name=\"apple\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <take />\r\n    </object>\r\n    <object name=\"drawer\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_closed\" />\r\n      <feature_container />\r\n      <listchildren />\r\n      <look><![CDATA[It is {either drawer.isopen:open|closed}.<br/>]]></look>\r\n      <object name=\"spanner\">\r\n        <inherit name=\"editor_object\" />\r\n        <take />\r\n      </object>\r\n      <object name=\"newspaper\">\r\n        <inherit name=\"editor_object\" />\r\n        <take />\r\n      </object>\r\n      <object name=\"screwdriver\">\r\n        <inherit name=\"editor_object\" />\r\n        <take />\r\n      </object>\r\n      <object name=\"ball of twine\">\r\n        <inherit name=\"editor_object\" />\r\n        <take />\r\n      </object>\r\n      <object name=\"leaking pen\">\r\n        <inherit name=\"editor_object\" />\r\n        <take />\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <function name=\"GetDisplayNameLink\" parameters=\"obj, type\" type=\"string\"><![CDATA[\r\n    verbs = GetDisplayVerbs(obj)\r\n    if (verbs <> null) {\r\n      verbCount = ListCount(verbs)\r\n    }\r\n    else {\r\n      verbCount = 0\r\n    }\r\n    if (type = \"exit\" and verbCount = 1) {\r\n      if (not game.enablehyperlinks) {\r\n        result = GetDisplayAlias(obj)\r\n      }\r\n      else {\r\n        result = \"{exit:\" + obj.name + \"}\"\r\n      }\r\n    }\r\n    else if (type = \"\") {\r\n      result = GetDisplayAlias(obj)\r\n      if (not HasAttribute(game,\"lastobjects\")) {\r\n        game.lastobjects = NewObjectList()\r\n      }\r\n      if (not obj = game.pov.parent) {\r\n        list add (game.lastobjects, obj)\r\n      }\r\n    }\r\n    else {\r\n      result = \"{object:\" + obj.name + \"}\"\r\n      if (not HasAttribute(game,\"lastobjects\")) {\r\n        game.lastobjects = NewObjectList()\r\n      }\r\n      list add (game.lastobjects, obj)\r\n    }\r\n    if (not GetBoolean(obj, \"usedefaultprefix\")) {\r\n      if (obj.prefix = null) {\r\n        prefix = \"\"\r\n      }\r\n      else {\r\n        prefix = obj.prefix\r\n      }\r\n    }\r\n    else if (type = \"exit\") {\r\n      prefix = \"\"\r\n    }\r\n    else {\r\n      prefix = GetDefaultPrefix(obj)\r\n    }\r\n    if (LengthOf(prefix) > 0) {\r\n      prefix = prefix + \" \"\r\n    }\r\n    result = prefix + result\r\n    if (not GetBoolean(obj, \"usedefaultprefix\") and HasString(obj, \"suffix\")) {\r\n      if (LengthOf(obj.suffix) > 0) {\r\n        result = result + \" \" + obj.suffix\r\n      }\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"ObjectLink\" parameters=\"obj\" type=\"string\">\r\n    game.lastobjects = NewObjectList()\r\n    list add (game.lastobjects, obj)\r\n    return (\"{object:\" + obj.name + \"}\")\r\n  </function>\r\n</asl>\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/38625891-134cec48-3d71-11e8-9082-c7d08d9bdc1c.png)\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/38625929-24195886-3d71-11e8-919f-29fc61319efd.png)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I wonder if the script I wrote last night handles that as you describe...</p>\n</blockquote>\n<p>Yep! (It pretty much does, anyway.)</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"it\"&gt;\n    &lt;gameid&gt;e5a6d9d3-0847-4c28-bb20-9444bd8dcf75&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"orange\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;take /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"second room\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"second room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"apple\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;take /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"drawer\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_closed\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;listchildren /&gt;\n      &lt;look&gt;&lt;![CDATA[It is {either drawer.isopen:open|closed}.&lt;br/&gt;]]&gt;&lt;/look&gt;\n      &lt;object name=\"spanner\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;take /&gt;\n      &lt;/object&gt;\n      &lt;object name=\"newspaper\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;take /&gt;\n      &lt;/object&gt;\n      &lt;object name=\"screwdriver\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;take /&gt;\n      &lt;/object&gt;\n      &lt;object name=\"ball of twine\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;take /&gt;\n      &lt;/object&gt;\n      &lt;object name=\"leaking pen\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;take /&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=\"GetDisplayNameLink\" parameters=\"obj, type\" type=\"string\"&gt;&lt;![CDATA[\n    verbs = GetDisplayVerbs(obj)\n    if (verbs &lt;&gt; null) {\n      verbCount = ListCount(verbs)\n    }\n    else {\n      verbCount = 0\n    }\n    if (type = \"exit\" and verbCount = 1) {\n      if (not game.enablehyperlinks) {\n        result = GetDisplayAlias(obj)\n      }\n      else {\n        result = \"{exit:\" + obj.name + \"}\"\n      }\n    }\n    else if (type = \"\") {\n      result = GetDisplayAlias(obj)\n      if (not HasAttribute(game,\"lastobjects\")) {\n        game.lastobjects = NewObjectList()\n      }\n      if (not obj = game.pov.parent) {\n        list add (game.lastobjects, obj)\n      }\n    }\n    else {\n      result = \"{object:\" + obj.name + \"}\"\n      if (not HasAttribute(game,\"lastobjects\")) {\n        game.lastobjects = NewObjectList()\n      }\n      list add (game.lastobjects, obj)\n    }\n    if (not GetBoolean(obj, \"usedefaultprefix\")) {\n      if (obj.prefix = null) {\n        prefix = \"\"\n      }\n      else {\n        prefix = obj.prefix\n      }\n    }\n    else if (type = \"exit\") {\n      prefix = \"\"\n    }\n    else {\n      prefix = GetDefaultPrefix(obj)\n    }\n    if (LengthOf(prefix) &gt; 0) {\n      prefix = prefix + \" \"\n    }\n    result = prefix + result\n    if (not GetBoolean(obj, \"usedefaultprefix\") and HasString(obj, \"suffix\")) {\n      if (LengthOf(obj.suffix) &gt; 0) {\n        result = result + \" \" + obj.suffix\n      }\n    }\n    return (result)\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"ObjectLink\" parameters=\"obj\" type=\"string\"&gt;\n    game.lastobjects = NewObjectList()\n    list add (game.lastobjects, obj)\n    return (\"{object:\" + obj.name + \"}\")\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38625891-134cec48-3d71-11e8-9082-c7d08d9bdc1c.png\" alt=\"image\"></p>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38625929-24195886-3d71-11e8-919f-29fc61319efd.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-11T15:15:03.9685579Z",
      "LastEditDate": "2018-04-11T15:17:02.4323215Z",
      "link": null
    },
    {
      "PostId": "28457f13-ae38-4ee7-b0e6-21195e40a43f",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I hate bringing up Inform, but they have a neat little trick: ```Does the player mean```.\r\n\r\nLet's say we have a read command (or verb) set up, which we do.\r\n\r\nThe default response for READ OBJECT is \"Trying to read \"+GetDisplayName(this)+\" would accomplish nothing.\"\r\n\r\nIf we only had one object which the player could actually read in the game, we could add this to the game's code:\r\n\r\n```\r\nDoes the player mean reading the newspaper when the newspaper is carried by the player or the newspaper is in the location of the player:  it is very likely.\r\n```\r\n\r\nThen, we could just enter READ.\r\n\r\n---\r\nIf we wanted something to be held before being allowing the player to read it, well... here's an example Inform game:\r\n\r\n```\r\n\"Newspaper\" by KV\r\n\r\nThe Quest Forum is a room.\r\n\r\nThe newspaper is in the forum. Understand \"news/paper\" as newspaper.\r\n\r\nReading is an action applying to one thing.  Understand \"read [something preferably held]\" as reading.\r\n\r\nCarry out reading something:\r\n\tsay \"Trying to read [the noun] would accomplish nothing.[paragraph break]\".\r\n\r\nThe stick is in the forum.\r\n\r\nDoes the player mean reading the newspaper when the newspaper is carried by the player or the newspaper is in the location of the player:  it is very likely.\r\n\r\nBefore trying reading something when the noun is not carried by the player:\r\n\tsay \"(first taking [the noun])\";\r\n\ttry silently taking the noun;\r\n\tif the noun is not carried by the player, stop the action.\r\n\t\r\nInstead of reading the newspaper, say \"You peruse the paper.  A story about scope catches your eye.  Very interesting.[paragraph break]\".\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/38632321-feac5d9e-3d81-11e8-8330-cd7b8f851625.png)\r\n\r\n---\r\n\r\nNote that this is not as good as the code I posted here for Quest, because it assumes \"it\" is the last object mentioned, where my Quest code would ask if you meant the stick or the newspaper.",
      "EditableFormat": "markdown",
      "HTML": "<p>I hate bringing up Inform, but they have a neat little trick: <code>Does the player mean</code>.</p>\n<p>Let's say we have a read command (or verb) set up, which we do.</p>\n<p>The default response for READ OBJECT is \"Trying to read \"+GetDisplayName(this)+\" would accomplish nothing.\"</p>\n<p>If we only had one object which the player could actually read in the game, we could add this to the game's code:</p>\n<pre><code>Does the player mean reading the newspaper when the newspaper is carried by the player or the newspaper is in the location of the player:  it is very likely.\n</code></pre>\n<p>Then, we could just enter READ.</p>\n<hr>\n<p>If we wanted something to be held before being allowing the player to read it, well... here's an example Inform game:</p>\n<pre><code>\"Newspaper\" by KV\n\nThe Quest Forum is a room.\n\nThe newspaper is in the forum. Understand \"news/paper\" as newspaper.\n\nReading is an action applying to one thing.  Understand \"read [something preferably held]\" as reading.\n\nCarry out reading something:\n\tsay \"Trying to read [the noun] would accomplish nothing.[paragraph break]\".\n\nThe stick is in the forum.\n\nDoes the player mean reading the newspaper when the newspaper is carried by the player or the newspaper is in the location of the player:  it is very likely.\n\nBefore trying reading something when the noun is not carried by the player:\n\tsay \"(first taking [the noun])\";\n\ttry silently taking the noun;\n\tif the noun is not carried by the player, stop the action.\n\t\nInstead of reading the newspaper, say \"You peruse the paper.  A story about scope catches your eye.  Very interesting.[paragraph break]\".\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38632321-feac5d9e-3d81-11e8-8330-cd7b8f851625.png\" alt=\"image\"></p>\n<hr>\n<p>Note that this is not as good as the code I posted here for Quest, because it assumes \"it\" is the last object mentioned, where my Quest code would ask if you meant the stick or the newspaper.</p>\n\n",
      "PostDate": "2018-04-11T17:13:21.5656574Z",
      "LastEditDate": "2018-04-11T17:15:35.7636648Z",
      "link": null
    },
    {
      "PostId": "44d7f77c-0f7b-4609-8b19-550e99528e0a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> That would give some bizarre behaviour if you did have an object called \"it\"\r\n\r\nHehehe.\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/38635352-b2390ce2-3d8a-11e8-9f8f-efa55d2d38a0.png)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>That would give some bizarre behaviour if you did have an object called \"it\"</p>\n</blockquote>\n<p>Hehehe.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38635352-b2390ce2-3d8a-11e8-9f8f-efa55d2d38a0.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-11T18:18:03.1845194Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ad43720b-1e80-4317-a81f-8656d7f977de",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes KV, this is another dark corner of Quest that it would be useful to tidy up.  Presumably any satisfactory solution to 'it' will also take account of possible references to 'him', 'her' and 'them' in the same location? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes KV, this is another dark corner of Quest that it would be useful to tidy up.  Presumably any satisfactory solution to 'it' will also take account of possible references to 'him', 'her' and 'them' in the same location?</p>\n\n",
      "PostDate": "2018-04-11T18:57:20.1203378Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d1d7181d-c835-4318-a89a-8e6963ddf095",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Presumably any satisfactory solution to 'it' will also take account of possible references to 'him', 'her' and 'them' in the same location?\r\n\r\nI've been assuming this is the case, but I've never actually thought to test it.\r\n\r\nIf so, I wonder if it would be like:\r\n\r\n\\> x John\r\nHe is looking right back at you.\r\n\r\n\\> hit it\r\nI can't see that. (it)\r\n\r\n\\> hit him\r\nYou punch John in the face.\r\n\r\n---\r\nUPDATE\r\n\r\nYep:\r\n![image](https://user-images.githubusercontent.com/30656341/38638900-49cb683e-3d95-11e8-91ef-ff6ea758a719.png)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Presumably any satisfactory solution to 'it' will also take account of possible references to 'him', 'her' and 'them' in the same location?</p>\n</blockquote>\n<p>I've been assuming this is the case, but I've never actually thought to test it.</p>\n<p>If so, I wonder if it would be like:</p>\n<p>&gt; x John<br>\nHe is looking right back at you.</p>\n<p>&gt; hit it<br>\nI can't see that. (it)</p>\n<p>&gt; hit him<br>\nYou punch John in the face.</p>\n<hr>\n<p>UPDATE</p>\n<p>Yep:<br>\n<img src=\"https://user-images.githubusercontent.com/30656341/38638900-49cb683e-3d95-11e8-91ef-ff6ea758a719.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-11T19:29:26.6460152Z",
      "LastEditDate": "2018-04-11T19:33:55.0465417Z",
      "link": null
    },
    {
      "PostId": "7071876d-dd03-4851-8b78-57156098233a",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Yep:\r\n\r\nI would expect 'take it' to say \"You pick it up\"?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Yep:</p>\n</blockquote>\n<p>I would expect 'take it' to say \"You pick it up\"?</p>\n\n",
      "PostDate": "2018-04-11T19:53:37.8796106Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "37eb8443-de3f-4ea5-8bea-94c3af2f152d",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "...also what about scenery objects? Presumably 'the room' can also be referred to as 'it'?",
      "EditableFormat": "markdown",
      "HTML": "<p>...also what about scenery objects? Presumably 'the room' can also be referred to as 'it'?</p>\n\n",
      "PostDate": "2018-04-11T20:02:31.8572684Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f1e040b2-e817-406b-9367-5f890128084f",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I actually prefer it not allowing me to refer to John as \"it\", but I'm admittedly crazy.\r\n\r\n---\r\nScenery objects just don't print in the room description.  Besides that, they are the same as non-scenery objects. \r\n\r\n (Also note that taking an object that is scenery sets its ```scenery``` attribute to false, which I believe to be a good thing.)\r\n\r\n---\r\nYou can't really refer to the parent object (the room the player is in).  It isn't in scope unless you do some extra scripting (or actually add an object called \"room\", which I just realized is probably what you meant).",
      "EditableFormat": "markdown",
      "HTML": "<p>I actually prefer it not allowing me to refer to John as \"it\", but I'm admittedly crazy.</p>\n<hr>\n<p>Scenery objects just don't print in the room description.  Besides that, they are the same as non-scenery objects.</p>\n<p>(Also note that taking an object that is scenery sets its <code>scenery</code> attribute to false, which I believe to be a good thing.)</p>\n<hr>\n<p>You can't really refer to the parent object (the room the player is in).  It isn't in scope unless you do some extra scripting (or actually add an object called \"room\", which I just realized is probably what you meant).</p>\n\n",
      "PostDate": "2018-04-11T20:31:47.6427655Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "65669104-1879-4a99-94b7-e727e0625551",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">I actually prefer it not allowing me to refer to John as \"it\", but I'm admittedly crazy.\r\n\r\nI assumed 'take it' would select the orange?\r\n>Scenery objects just don't print in the room description. Besides that, they are the same as non-scenery objects.\r\n\r\nDepending on how a game is presented, players may not be able to distinguish between scenery and non-scenery objects so perhaps both need to be treated in the same way? e.g.\r\n\r\nYou enter a room that is full of dust.\r\n_x dust_\r\nJust what you would expect.\r\n_take it_\r\nAitchoo!\r\n...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I actually prefer it not allowing me to refer to John as \"it\", but I'm admittedly crazy.</p>\n</blockquote>\n<p>I assumed 'take it' would select the orange?</p>\n<blockquote>\n<p>Scenery objects just don't print in the room description. Besides that, they are the same as non-scenery objects.</p>\n</blockquote>\n<p>Depending on how a game is presented, players may not be able to distinguish between scenery and non-scenery objects so perhaps both need to be treated in the same way? e.g.</p>\n<p>You enter a room that is full of dust.<br>\n<em>x dust</em><br>\nJust what you would expect.<br>\n<em>take it</em><br>\nAitchoo!<br>\n...</p>\n\n",
      "PostDate": "2018-04-11T21:03:56.7181666Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4933e732-b352-4359-839c-373a5b164e77",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think the logic I'd use is to examine several lists:\r\n\r\n* Objects displayed by the last command\r\n* Objects referenced in the last command\r\n* Objects referenced in commands since entering the room\r\n* Objects currently in scope\r\n\r\nIf any of those lists (filtered by gender and being still in scope) has exactly one member, use that.\r\n\r\nOtherwise (for verb-flavoured commands) if one of those lists has exactly one member that has the right verb, use that.\r\n\r\nOtherwise display a disambiguation menu.\r\n\r\n… but it's a pretty tough problem to figure out what a person is likely to have meant. I wouldn't be surprised if it varies with language, too. Is \"When I nod my head, hit it\" still funny in other languages? Or do other languages have pronouns that resolve the ambiguity somehow? (I'm reminded of a couple of double-negative ambiguities that I'm told can't be translated into Irish)",
      "EditableFormat": "markdown",
      "HTML": "<p>I think the logic I'd use is to examine several lists:</p>\n<ul>\n<li>Objects displayed by the last command</li>\n<li>Objects referenced in the last command</li>\n<li>Objects referenced in commands since entering the room</li>\n<li>Objects currently in scope</li>\n</ul>\n<p>If any of those lists (filtered by gender and being still in scope) has exactly one member, use that.</p>\n<p>Otherwise (for verb-flavoured commands) if one of those lists has exactly one member that has the right verb, use that.</p>\n<p>Otherwise display a disambiguation menu.</p>\n<p>… but it's a pretty tough problem to figure out what a person is likely to have meant. I wouldn't be surprised if it varies with language, too. Is \"When I nod my head, hit it\" still funny in other languages? Or do other languages have pronouns that resolve the ambiguity somehow? (I'm reminded of a couple of double-negative ambiguities that I'm told can't be translated into Irish)</p>\n\n",
      "PostDate": "2018-04-11T21:07:46.2640438Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5472d651-4039-4cf9-9597-29e04abf83a0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I assumed 'take it' would select the orange?\r\n\r\nJohn was the last object mentioned and interacted with in this case.\r\n\r\n---\r\n> Depending on how a game is presented, players may not be able to distinguish between scenery and non-scenery objects so perhaps both need to be treated in the same way?\r\n\r\nThey shouldn't even think about distinguishing.  Scenery should be expected to there, thus there is no reason to mention it outright.  And Quest already does treat both in the same way, except for in the room description.\r\n\r\n---\r\nWhen in an object is ```scenery```, that only means Quest ignores it when printing the room description.  It's just scenery.  It isn't mentioned outright by the game.  It doesn't appear in the pane.  Everything else works as it normally would.\r\n\r\nScenery can be interacted with.  That is its purpose.  It's not mentioned, but it's there if you try to interact with it.\r\n\r\n**EDIT**\r\n\r\nIt appears that TAKE ALL ignores scenery.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I assumed 'take it' would select the orange?</p>\n</blockquote>\n<p>John was the last object mentioned and interacted with in this case.</p>\n<hr>\n<blockquote>\n<p>Depending on how a game is presented, players may not be able to distinguish between scenery and non-scenery objects so perhaps both need to be treated in the same way?</p>\n</blockquote>\n<p>They shouldn't even think about distinguishing.  Scenery should be expected to there, thus there is no reason to mention it outright.  And Quest already does treat both in the same way, except for in the room description.</p>\n<hr>\n<p>When in an object is <code>scenery</code>, that only means Quest ignores it when printing the room description.  It's just scenery.  It isn't mentioned outright by the game.  It doesn't appear in the pane.  Everything else works as it normally would.</p>\n<p>Scenery can be interacted with.  That is its purpose.  It's not mentioned, but it's there if you try to interact with it.</p>\n<p><strong>EDIT</strong></p>\n<p>It appears that TAKE ALL ignores scenery.</p>\n\n",
      "PostDate": "2018-04-11T21:50:27.5836951Z",
      "LastEditDate": "2018-04-12T01:06:22.5983922Z",
      "link": null
    },
    {
      "PostId": "4cf41a3b-c956-4089-9753-cfcfcc3ea50c",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel,\r\n\r\nThat stuff in last post sounds pretty logical to me.\r\n\r\n...and I always forget Quest is multilingual.",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel,</p>\n<p>That stuff in last post sounds pretty logical to me.</p>\n<p>...and I always forget Quest is multilingual.</p>\n\n",
      "PostDate": "2018-04-11T22:09:32.4271629Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "581ac5e5-6caa-4ad3-9746-ed06db3e113a",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Who in a TA says ‘take it’?  If someone types that, I would consider making a global command that responds to ‘take it’ with ‘I know this is 2018, but this is a text adventure and OLD SCHOOL rules.  Please indicate what object you’d like to take.  For example, ‘take a time machine and travel back to 1985, you filthy millenial.’",
      "EditableFormat": "markdown",
      "HTML": "<p>Who in a TA says ‘take it’?  If someone types that, I would consider making a global command that responds to ‘take it’ with ‘I know this is 2018, but this is a text adventure and OLD SCHOOL rules.  Please indicate what object you’d like to take.  For example, ‘take a time machine and travel back to 1985, you filthy millenial.’</p>\n\n",
      "PostDate": "2018-04-11T23:59:14.0749017Z",
      "LastEditDate": "2018-04-12T00:03:07.3715281Z",
      "link": null
    },
    {
      "PostId": "5ebfce16-167c-4930-9225-2086aed5a1a1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "![image](https://user-images.githubusercontent.com/30656341/38650584-57ffd3b8-3dc2-11e8-9688-a295a5fab804.png)",
      "EditableFormat": "markdown",
      "HTML": "<p><img src=\"https://user-images.githubusercontent.com/30656341/38650584-57ffd3b8-3dc2-11e8-9688-a295a5fab804.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-12T00:43:32.7206068Z",
      "LastEditDate": "2018-04-12T00:56:04.301552Z",
      "link": null
    },
    {
      "PostId": "a3f570d4-a540-4292-93df-24fff60b8779",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Dang.  1984!  Missed it (pun intended)!  =)",
      "EditableFormat": "markdown",
      "HTML": "<p>Dang.  1984!  Missed it (pun intended)!  =)</p>\n\n",
      "PostDate": "2018-04-12T02:02:14.7710619Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b2ad91b4-75c2-49a6-9df8-29fec7be13ae",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "To be fair, I don't know if Frotz is doing that or if it's built into the game...\r\n\r\nHold on.  I'll  run the actual .exe in DOSBox and find out.\r\n\r\n---\r\n5 minutes later...\r\n\r\nIt is built into the game.\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/38652749-f1ee132c-3dcc-11e8-961e-9743ed587bca.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>To be fair, I don't know if Frotz is doing that or if it's built into the game...</p>\n<p>Hold on.  I'll  run the actual .exe in DOSBox and find out.</p>\n<hr>\n<p>5 minutes later...</p>\n<p>It is built into the game.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38652749-f1ee132c-3dcc-11e8-961e-9743ed587bca.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-12T02:08:49.6921838Z",
      "LastEditDate": "2018-04-12T02:12:55.5604244Z",
      "link": null
    },
    {
      "PostId": "afe0716f-874d-41b1-85e7-88fed35faf08",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There do seem to be issues with the 'it/him/her/them' facility in Quest. Perhaps if we can spell them out precisely, solutions will be more obvious? The first step is probably to define the current facility. Here is my attempt:\r\n\r\n_During game play, the last object referenced by the player is remembered, and can be referred to as 'it', 'him', 'her' or 'them' as appropriate. On entry to a location this reference is 'undefined'. It also becomes undefined after any command that doesn't involve an object, such as 'help' of 'z'. Any reference to the player ('me' or 'myself') is not remembered._\r\n\r\nThe main issues seem to be:\r\n1: _the error message given when the last reference is undefined is misleading_\r\nCurrently this is \"I can't see that\". Would \"Sorry, what do you mean?\" be better?\r\n2: _why treat the player differently from other objects?_\r\n3: _why forget the last reference when commands such as 'help' are used?_ \r\nI have seen games where objects change over time, meaning the sequence \"x object; z; x it\" might be used.\r\n\r\nThere also seems to be an opportunity to remember objects of different type separately. i.e. last 'it', last 'him', last 'her' and last 'them' but that is probably not that helpful!",
      "EditableFormat": "markdown",
      "HTML": "<p>There do seem to be issues with the 'it/him/her/them' facility in Quest. Perhaps if we can spell them out precisely, solutions will be more obvious? The first step is probably to define the current facility. Here is my attempt:</p>\n<p><em>During game play, the last object referenced by the player is remembered, and can be referred to as 'it', 'him', 'her' or 'them' as appropriate. On entry to a location this reference is 'undefined'. It also becomes undefined after any command that doesn't involve an object, such as 'help' of 'z'. Any reference to the player ('me' or 'myself') is not remembered.</em></p>\n<p>The main issues seem to be:<br>\n1: <em>the error message given when the last reference is undefined is misleading</em><br>\nCurrently this is \"I can't see that\". Would \"Sorry, what do you mean?\" be better?<br>\n2: <em>why treat the player differently from other objects?</em><br>\n3: <em>why forget the last reference when commands such as 'help' are used?</em><br>\nI have seen games where objects change over time, meaning the sequence \"x object; z; x it\" might be used.</p>\n<p>There also seems to be an opportunity to remember objects of different type separately. i.e. last 'it', last 'him', last 'her' and last 'them' but that is probably not that helpful!</p>\n\n",
      "PostDate": "2018-04-12T06:59:19.440166Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "829f6aaa-4d3e-4a06-b39b-083ca5e98d11",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> why treat the player differently from other objects?\r\n\r\nBecause the first person pronoun is \"me\", not \"it\" or \"him\".\r\n\r\n> There also seems to be an opportunity to remember objects of different type separately. i.e. last 'it', last 'him', last 'her' and last 'them' but that is probably not that helpful!\r\n\r\nThe algorithm I suggested above would keep a list, and filter it by the appropriate pronoun when needed.\r\nAlso, I would suggest filtering the list by objects currently in scope when a command is used, rather than clearing it when entering a room. Because commands can have a scope that doesn't necessarily mean the room. If, for example, your last command was `follow John`, then `talk to him` should be parsed even though you're now in a different room.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>why treat the player differently from other objects?</p>\n</blockquote>\n<p>Because the first person pronoun is \"me\", not \"it\" or \"him\".</p>\n<blockquote>\n<p>There also seems to be an opportunity to remember objects of different type separately. i.e. last 'it', last 'him', last 'her' and last 'them' but that is probably not that helpful!</p>\n</blockquote>\n<p>The algorithm I suggested above would keep a list, and filter it by the appropriate pronoun when needed.<br>\nAlso, I would suggest filtering the list by objects currently in scope when a command is used, rather than clearing it when entering a room. Because commands can have a scope that doesn't necessarily mean the room. If, for example, your last command was <code>follow John</code>, then <code>talk to him</code> should be parsed even though you're now in a different room.</p>\n\n",
      "PostDate": "2018-04-12T10:18:25.6747106Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "57972381-aca7-47fc-a631-903f9d28aa40",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Currently this is \"I can't see that\". Would \"Sorry, what do you mean?\" be better?\r\n\r\n\"I can't see that.\"\r\n\r\nThis pretty much handles all situations sensibly.\r\n\r\nLet's say we had an apple, then ate it, then entered X APPLE.  \r\n\r\n\"I can't see that,\" makes sense.\r\n\r\n\"Sorry, what do you mean?\"  kind of makes sense, but \"I can't see that,\" covers all the bases without being misleading (most of the time).\r\n\r\n---\r\nThis is easy to change.\r\n\r\nJust modify your ```UnresolvedObject``` template.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Currently this is \"I can't see that\". Would \"Sorry, what do you mean?\" be better?</p>\n</blockquote>\n<p>\"I can't see that.\"</p>\n<p>This pretty much handles all situations sensibly.</p>\n<p>Let's say we had an apple, then ate it, then entered X APPLE.</p>\n<p>\"I can't see that,\" makes sense.</p>\n<p>\"Sorry, what do you mean?\"  kind of makes sense, but \"I can't see that,\" covers all the bases without being misleading (most of the time).</p>\n<hr>\n<p>This is easy to change.</p>\n<p>Just modify your <code>UnresolvedObject</code> template.</p>\n\n",
      "PostDate": "2018-04-12T11:26:11.2558649Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "77726b0c-2d30-469a-b4ac-9a96d5e303bb",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> On entry to a location this reference is 'undefined'. It also becomes undefined after any command that doesn't involve an object,\r\n\r\nI'm pretty sure ```game.lastobjects``` is reset every time a command is successful, but the code I posted fixes this.  \"It\" will be the last object mentioned or interacted with, whichever comes last.\r\n\r\n---\r\n> Also, I would suggest filtering the list by objects currently in scope when a command is used, rather than clearing it when entering a room. Because commands can have a scope that doesn't necessarily mean the room.\r\n\r\nmrangel already has the best solution worked out in his head.  I'm considering this one solved with a pending solution.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>On entry to a location this reference is 'undefined'. It also becomes undefined after any command that doesn't involve an object,</p>\n</blockquote>\n<p>I'm pretty sure <code>game.lastobjects</code> is reset every time a command is successful, but the code I posted fixes this.  \"It\" will be the last object mentioned or interacted with, whichever comes last.</p>\n<hr>\n<blockquote>\n<p>Also, I would suggest filtering the list by objects currently in scope when a command is used, rather than clearing it when entering a room. Because commands can have a scope that doesn't necessarily mean the room.</p>\n</blockquote>\n<p>mrangel already has the best solution worked out in his head.  I'm considering this one solved with a pending solution.</p>\n\n",
      "PostDate": "2018-04-12T11:45:35.1893047Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d5a1625b-2835-4204-a48f-dd66e746c3dd",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Personally, I think \"it\" should refer to the last thing the player refered to.\r\n\r\nI would be interested, KV, what Hitchhikers does if you type:\r\n\r\nX GOWN\r\nLOOK\r\nGET IT\r\n\r\nDo you pick up the gown or the toothbrush?\r\n\r\nA problem with doing it from the last described is that that may be difficult to work out. Quest allows the object list to be before the room derscription, and there may be no objects listed, so should the player expect \"it\" to refer to the last object in the room description? Or even in an item description? I note that Hitchhikers does not consider \"it\" to refer to the collar of the gown despite that being the last thing mentioned.\r\n\r\nThat would be tricky for authors to implement, as the last object in every description would need to be flagged. And then you might have dynamic descriptions, descriptions with male, female and plural objects. Should we expect this to work?\r\n\r\n> You are in a small room, where you can see a man sat on a chair.\r\n> &gt;X HIM\r\n\r\nIf you do, how are you, the author, going to tell Quest that \"him\" should refer to the man, and \"it\" to the chair?\r\n\r\nKV has a solution, but you would need to add hyperlinks to every mention of an object in a description. What if you turn hyperlinks off for your game?",
      "EditableFormat": "markdown",
      "HTML": "<p>Personally, I think \"it\" should refer to the last thing the player refered to.</p>\n<p>I would be interested, KV, what Hitchhikers does if you type:</p>\n<p>X GOWN<br>\nLOOK<br>\nGET IT</p>\n<p>Do you pick up the gown or the toothbrush?</p>\n<p>A problem with doing it from the last described is that that may be difficult to work out. Quest allows the object list to be before the room derscription, and there may be no objects listed, so should the player expect \"it\" to refer to the last object in the room description? Or even in an item description? I note that Hitchhikers does not consider \"it\" to refer to the collar of the gown despite that being the last thing mentioned.</p>\n<p>That would be tricky for authors to implement, as the last object in every description would need to be flagged. And then you might have dynamic descriptions, descriptions with male, female and plural objects. Should we expect this to work?</p>\n<blockquote>\n<p>You are in a small room, where you can see a man sat on a chair.<br>\n&gt;X HIM</p>\n</blockquote>\n<p>If you do, how are you, the author, going to tell Quest that \"him\" should refer to the man, and \"it\" to the chair?</p>\n<p>KV has a solution, but you would need to add hyperlinks to every mention of an object in a description. What if you turn hyperlinks off for your game?</p>\n\n",
      "PostDate": "2018-04-16T07:55:15.6722134Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "31b195eb-29a8-4621-b7ac-50d75ea70d53",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "An alternative approach would be to have a dictionary of last objects. When the player does something, the objects are added to the dictionary twice, with their gender and article as the key, overwriting any previous values. When resolving names, the keys are then checked against. The allows the values to persist.\r\n\r\n>&gt; get teapot\r\nYou pick it up.\r\n&gt; talk to joanna\r\n'I like your hair.'\r\n'Do you like it this colour?' she asks.\r\n&gt; drop it\r\nYou drop it.\r\n&gt; get it\r\nYou pick it up.\r\n&gt; x her\r\nJoanna is quite pretty; she has green hair.\r\n&gt; x it\r\nIt is blue.\r\n\r\nIt is quite a simple change to two core functions. You also need to add an object dictionary called \"lastobjects\" to the game object (but should it be on game.pov?).\r\n```\r\n  <function name=\"ResolveNextName\"><![CDATA[\r\n    resolvedall = false\r\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\r\n    if (queuetype = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\r\n      if (queuelength > 0) {\r\n        // Pop next variable off the queue\r\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\r\n        if (queuelength = 1) {\r\n          game.pov.currentcommandvarlistqueue = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\r\n          }\r\n          game.pov.currentcommandvarlistqueue = newqueue\r\n        }\r\n        // Resolve variable\r\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n        if (value <> \"\") {\r\n          result = null\r\n          resolvinglist = false\r\n          // This is to resolve issue 626\r\n          if (StartsWith(var, \"objectexit\")) {\r\n            result = ResolveName(var, value, \"exit\")\r\n          }\r\n          if (result = null) {\r\n            if (StartsWith(var, \"object\")) {\r\n              if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\r\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\r\n                game.pov.currentcommandpendingvariable = var\r\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\r\n                ResolveNameList (value, \"object\")\r\n                resolvinglist = true\r\n              }\r\n              else {\r\n                result = ResolveName(var, value, \"object\")\r\n              }\r\n            }\r\n            else if (StartsWith(var, \"exit\")) {\r\n              result = ResolveName(var, value, \"exit\")\r\n            }\r\n            else if (StartsWith(var, \"text\")) {\r\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n            }\r\n            else {\r\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\r\n            }\r\n          }\r\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\r\n          if (result = null) {\r\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\r\n              UnresolvedCommand (value, var)\r\n            }\r\n          }\r\n          else {\r\n            AddToResolvedNames (var, result)\r\n          }\r\n        }\r\n        else {\r\n          ResolveNextName\r\n        }\r\n      }\r\n      else {\r\n        resolvedall = true\r\n      }\r\n    }\r\n    else if (queuetype = \"null\") {\r\n      resolvedall = true\r\n    }\r\n    else {\r\n      error (\"Invalid queue type\")\r\n    }\r\n    if (resolvedall) {\r\n      // All the objects have been resolved, so now we can actually do the command\r\n      // TO DO: game.lastobjects should be game.pov.lastobjects\r\n      foreach (obj, game.pov.currentcommandresolvedobjects) {\r\n        if (obj.gender in game.lastobjects) {\r\n          dictionary remove (game.lastobjects, obj.gender)\r\n        }\r\n        dictionary add (game.lastobjects, obj.gender, obj)\r\n        if (obj.article in game.lastobjects) {\r\n          dictionary remove (game.lastobjects, obj.article)\r\n        }\r\n        dictionary add (game.lastobjects, obj.article, obj)\r\n      }\r\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\r\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\r\n        if (LengthOf(game.pov.currentcommand) > 0) {\r\n          start transaction (game.pov.currentcommand)\r\n        }\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\r\n        // TO DO: game.unresolved* should be game.pov.unresolved*\r\n        game.unresolvedcommand = null\r\n        game.unresolvedcommandvarlist = null\r\n        game.unresolvedcommandkey = null\r\n      }\r\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n        // This is the bit that actually runs the commands\r\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n      }\r\n      HandleNextCommandQueueItem\r\n    }\r\n  ]]></function>\r\n  <function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"><![CDATA[\r\n    value = Trim(LCase(value))\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt <> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // allow referring to objects from the previous command by gender or article\r\n    if (objtype = \"object\") {\r\n      foreach (key, game.lastobjects) {\r\n        CompareNames (key, value, ObjectDictionaryItem(game.lastobjects, key), fullmatches, partialmatches)\r\n      }\r\n    }\r\n    // Also check the secondary scope, but only if we have not found anything yet\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\r\n      foreach (obj, secondaryscope) {\r\n        name = LCase(GetDisplayAlias(obj))\r\n        CompareNames (name, value, obj, fullmatches, partialmatches)\r\n        if (obj.alt <> null) {\r\n          foreach (altname, obj.alt) {\r\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (ListCount(fullmatches) = 1) {\r\n      return (ListItem(fullmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\r\n      return (ListItem(partialmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\r\n      return (null)\r\n    }\r\n    else {\r\n      candidates = ListCompact(fullmatches + partialmatches)\r\n      if (LengthOf(variable) > 0) {\r\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\r\n        game.pov.currentcommandpendingvariable = variable\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          varname = game.pov.currentcommandpendingvariable\r\n          game.pov.currentcommandpendingvariable = null\r\n          if (result <> null) {\r\n            AddToResolvedNames (varname, GetObject(result))\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // multi-object command, so after showing the menu, add the object to the list\r\n        game.pov.currentcommandmultiobjectpending = true\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          if (result <> null) {\r\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\r\n            ResolveNextNameListItem\r\n          }\r\n        }\r\n      }\r\n      return (null)\r\n    }\r\n  ]]></function>",
      "EditableFormat": "markdown",
      "HTML": "<p>An alternative approach would be to have a dictionary of last objects. When the player does something, the objects are added to the dictionary twice, with their gender and article as the key, overwriting any previous values. When resolving names, the keys are then checked against. The allows the values to persist.</p>\n<blockquote>\n<p>&gt; get teapot<br>\nYou pick it up.<br>\n&gt; talk to joanna<br>\n'I like your hair.'<br>\n'Do you like it this colour?' she asks.<br>\n&gt; drop it<br>\nYou drop it.<br>\n&gt; get it<br>\nYou pick it up.<br>\n&gt; x her<br>\nJoanna is quite pretty; she has green hair.<br>\n&gt; x it<br>\nIt is blue.</p>\n</blockquote>\n<p>It is quite a simple change to two core functions. You also need to add an object dictionary called \"lastobjects\" to the game object (but should it be on game.pov?).</p>\n<pre><code>  &lt;function name=\"ResolveNextName\"&gt;&lt;![CDATA[\n    resolvedall = false\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\n    if (queuetype = \"stringlist\") {\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\n      if (queuelength &gt; 0) {\n        // Pop next variable off the queue\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\n        if (queuelength = 1) {\n          game.pov.currentcommandvarlistqueue = null\n        }\n        else {\n          newqueue = NewStringList()\n          for (i, 1, queuelength - 1) {\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\n          }\n          game.pov.currentcommandvarlistqueue = newqueue\n        }\n        // Resolve variable\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n        if (value &lt;&gt; \"\") {\n          result = null\n          resolvinglist = false\n          // This is to resolve issue 626\n          if (StartsWith(var, \"objectexit\")) {\n            result = ResolveName(var, value, \"exit\")\n          }\n          if (result = null) {\n            if (StartsWith(var, \"object\")) {\n              if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\n                game.pov.currentcommandpendingvariable = var\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\n                ResolveNameList (value, \"object\")\n                resolvinglist = true\n              }\n              else {\n                result = ResolveName(var, value, \"object\")\n              }\n            }\n            else if (StartsWith(var, \"exit\")) {\n              result = ResolveName(var, value, \"exit\")\n            }\n            else if (StartsWith(var, \"text\")) {\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n            }\n            else {\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\n            }\n          }\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\n          if (result = null) {\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\n              UnresolvedCommand (value, var)\n            }\n          }\n          else {\n            AddToResolvedNames (var, result)\n          }\n        }\n        else {\n          ResolveNextName\n        }\n      }\n      else {\n        resolvedall = true\n      }\n    }\n    else if (queuetype = \"null\") {\n      resolvedall = true\n    }\n    else {\n      error (\"Invalid queue type\")\n    }\n    if (resolvedall) {\n      // All the objects have been resolved, so now we can actually do the command\n      // TO DO: game.lastobjects should be game.pov.lastobjects\n      foreach (obj, game.pov.currentcommandresolvedobjects) {\n        if (obj.gender in game.lastobjects) {\n          dictionary remove (game.lastobjects, obj.gender)\n        }\n        dictionary add (game.lastobjects, obj.gender, obj)\n        if (obj.article in game.lastobjects) {\n          dictionary remove (game.lastobjects, obj.article)\n        }\n        dictionary add (game.lastobjects, obj.article, obj)\n      }\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\n        if (LengthOf(game.pov.currentcommand) &gt; 0) {\n          start transaction (game.pov.currentcommand)\n        }\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\n        // TO DO: game.unresolved* should be game.pov.unresolved*\n        game.unresolvedcommand = null\n        game.unresolvedcommandvarlist = null\n        game.unresolvedcommandkey = null\n      }\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\n        // This is the bit that actually runs the commands\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\n      }\n      HandleNextCommandQueueItem\n    }\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"&gt;&lt;![CDATA[\n    value = Trim(LCase(value))\n    fullmatches = NewObjectList()\n    partialmatches = NewObjectList()\n    foreach (obj, scope) {\n      name = LCase(GetDisplayAlias(obj))\n      CompareNames (name, value, obj, fullmatches, partialmatches)\n      if (obj.alt &lt;&gt; null) {\n        foreach (altname, obj.alt) {\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // allow referring to objects from the previous command by gender or article\n    if (objtype = \"object\") {\n      foreach (key, game.lastobjects) {\n        CompareNames (key, value, ObjectDictionaryItem(game.lastobjects, key), fullmatches, partialmatches)\n      }\n    }\n    // Also check the secondary scope, but only if we have not found anything yet\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\n      foreach (obj, secondaryscope) {\n        name = LCase(GetDisplayAlias(obj))\n        CompareNames (name, value, obj, fullmatches, partialmatches)\n        if (obj.alt &lt;&gt; null) {\n          foreach (altname, obj.alt) {\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n          }\n        }\n      }\n    }\n    if (ListCount(fullmatches) = 1) {\n      return (ListItem(fullmatches, 0))\n    }\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\n      return (ListItem(partialmatches, 0))\n    }\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\n      return (null)\n    }\n    else {\n      candidates = ListCompact(fullmatches + partialmatches)\n      if (LengthOf(variable) &gt; 0) {\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\n        game.pov.currentcommandpendingvariable = variable\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          varname = game.pov.currentcommandpendingvariable\n          game.pov.currentcommandpendingvariable = null\n          if (result &lt;&gt; null) {\n            AddToResolvedNames (varname, GetObject(result))\n          }\n        }\n      }\n      else {\n        // multi-object command, so after showing the menu, add the object to the list\n        game.pov.currentcommandmultiobjectpending = true\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          if (result &lt;&gt; null) {\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\n            ResolveNextNameListItem\n          }\n        }\n      }\n      return (null)\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-04-16T08:07:09.8569903Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1c6acb72-2a33-401b-951a-17ee99af9691",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> KV has a solution, but you would need to add hyperlinks to every mention of an object in a description. What if you turn hyperlinks off for your game?\r\n\r\nI just tested this last night.  If you turn off hyperlinks, my code no longer does anything at all.\r\n\r\n---\r\n> I would be interested, KV, what Hitchhikers does if you type:\r\n>\r\n>X GOWN\r\nLOOK\r\nGET IT\r\n>\r\n>Do you pick up the gown or the toothbrush?\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/38817795-c231e808-415e-11e8-96b8-f42133e1024d.png)\r\n\r\n---\r\nAnd just to be thorough:\r\n![image](https://user-images.githubusercontent.com/30656341/38818516-046af628-4160-11e8-8750-727eb2a6aba1.png)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>KV has a solution, but you would need to add hyperlinks to every mention of an object in a description. What if you turn hyperlinks off for your game?</p>\n</blockquote>\n<p>I just tested this last night.  If you turn off hyperlinks, my code no longer does anything at all.</p>\n<hr>\n<blockquote>\n<p>I would be interested, KV, what Hitchhikers does if you type:</p>\n<p>X GOWN<br>\nLOOK<br>\nGET IT</p>\n<p>Do you pick up the gown or the toothbrush?</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/38817795-c231e808-415e-11e8-96b8-f42133e1024d.png\" alt=\"image\"></p>\n<hr>\n<p>And just to be thorough:<br>\n<img src=\"https://user-images.githubusercontent.com/30656341/38818516-046af628-4160-11e8-8750-727eb2a6aba1.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-16T15:25:38.6785463Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7bea1c33-964a-44c1-80ef-1997cac7fc8b",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> how are you, the author, going to tell Quest that \"him\" should refer to the man, and \"it\" to the chair?\r\n>>    You are in a small room, where you can see a man sat on a chair.\r\n>>>X HIM\r\n\r\nQuest seems to do that by itself.  Here's an example using [this code](http://textadventures.co.uk/forum/design/topic/ko0etfvob0uyyt_rxvppjw/it-in-quest-solved#0cb114cf-9bbe-4cb1-9594-97db047d0e39):\r\n\r\n---\r\nYou are in a room.\r\nYou can see Jack, Jill and a robot.\r\n\r\n\\> x it\r\nIt is an old Radio Shack robot, made in 1987.\r\n\r\n\\> l\r\nYou are in a room.\r\nYou can see Jack, Jill and a robot.\r\n\r\n\\> x him\r\nJack looks like an average guy.\r\n\r\n\\> l\r\nYou are in a room.\r\nYou can see Jack, Jill and a robot.\r\n\r\n\\> x her\r\nJill looks like an average girl.\r\n\r\n\r\n---\r\nI do agree that my way is not that good, since it only works with hyperlinks.\r\n\r\n\r\n...but I do dig the last object(s) mentioned in the text being added to ```lastobjects```.  \r\n\r\nWhen entering a room and the text is:\r\n \"On the doormat, you see a pile of junk mail.\"\r\n\r\nI think it makes sense that GET IT would take that mail.\r\n\r\nIt does not in Hitchhiker's, but I do like the response:\r\n![image](https://user-images.githubusercontent.com/30656341/38820429-80a67048-4163-11e8-864a-88fd913752d3.png)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>how are you, the author, going to tell Quest that \"him\" should refer to the man, and \"it\" to the chair?</p>\n<blockquote>\n<p>You are in a small room, where you can see a man sat on a chair.</p>\n<blockquote>\n<p>X HIM</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Quest seems to do that by itself.  Here's an example using <a href=\"http://textadventures.co.uk/forum/design/topic/ko0etfvob0uyyt_rxvppjw/it-in-quest-solved#0cb114cf-9bbe-4cb1-9594-97db047d0e39\">this code</a>:</p>\n<hr>\n<p>You are in a room.<br>\nYou can see Jack, Jill and a robot.</p>\n<p>&gt; x it<br>\nIt is an old Radio Shack robot, made in 1987.</p>\n<p>&gt; l<br>\nYou are in a room.<br>\nYou can see Jack, Jill and a robot.</p>\n<p>&gt; x him<br>\nJack looks like an average guy.</p>\n<p>&gt; l<br>\nYou are in a room.<br>\nYou can see Jack, Jill and a robot.</p>\n<p>&gt; x her<br>\nJill looks like an average girl.</p>\n<hr>\n<p>I do agree that my way is not that good, since it only works with hyperlinks.</p>\n<p>...but I do dig the last object(s) mentioned in the text being added to <code>lastobjects</code>.</p>\n<p>When entering a room and the text is:<br>\n\"On the doormat, you see a pile of junk mail.\"</p>\n<p>I think it makes sense that GET IT would take that mail.</p>\n<p>It does not in Hitchhiker's, but I do like the response:<br>\n<img src=\"https://user-images.githubusercontent.com/30656341/38820429-80a67048-4163-11e8-864a-88fd913752d3.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-16T15:51:49.3026117Z",
      "LastEditDate": "2018-04-16T15:52:12.7463797Z",
      "link": null
    },
    {
      "PostId": "547b36f0-217f-4976-8c51-5a62b0d26511",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Example game using Pixie's code:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"It (Pixie's Code)\">\r\n    <gameid>cb9e4b3b-763a-40f6-a98f-f0260be056ae</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <lastobjects type=\"objectdictionary\" />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"John\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <look>He looks like a man.</look>\r\n    </object>\r\n    <object name=\"Mary\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedfemale\" />\r\n      <look>She looks like a woman.</look>\r\n    </object>\r\n    <object name=\"lamp\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"switchable\" />\r\n      <take />\r\n      <look>It is {either lamp.switchedon:on|off}.</look>\r\n      <feature_switchable />\r\n    </object>\r\n    <exit alias=\"north\" to=\"second room\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"second room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <function name=\"ResolveNextName\"><![CDATA[\r\n    resolvedall = false\r\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\r\n    if (queuetype = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\r\n      if (queuelength > 0) {\r\n        // Pop next variable off the queue\r\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\r\n        if (queuelength = 1) {\r\n          game.pov.currentcommandvarlistqueue = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\r\n          }\r\n          game.pov.currentcommandvarlistqueue = newqueue\r\n        }\r\n        // Resolve variable\r\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n        if (value <> \"\") {\r\n          result = null\r\n          resolvinglist = false\r\n          // This is to resolve issue 626\r\n          if (StartsWith(var, \"objectexit\")) {\r\n            result = ResolveName(var, value, \"exit\")\r\n          }\r\n          if (result = null) {\r\n            if (StartsWith(var, \"object\")) {\r\n              if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\r\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\r\n                game.pov.currentcommandpendingvariable = var\r\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\r\n                ResolveNameList (value, \"object\")\r\n                resolvinglist = true\r\n              }\r\n              else {\r\n                result = ResolveName(var, value, \"object\")\r\n              }\r\n            }\r\n            else if (StartsWith(var, \"exit\")) {\r\n              result = ResolveName(var, value, \"exit\")\r\n            }\r\n            else if (StartsWith(var, \"text\")) {\r\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n            }\r\n            else {\r\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\r\n            }\r\n          }\r\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\r\n          if (result = null) {\r\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\r\n              UnresolvedCommand (value, var)\r\n            }\r\n          }\r\n          else {\r\n            AddToResolvedNames (var, result)\r\n          }\r\n        }\r\n        else {\r\n          ResolveNextName\r\n        }\r\n      }\r\n      else {\r\n        resolvedall = true\r\n      }\r\n    }\r\n    else if (queuetype = \"null\") {\r\n      resolvedall = true\r\n    }\r\n    else {\r\n      error (\"Invalid queue type\")\r\n    }\r\n    if (resolvedall) {\r\n      // All the objects have been resolved, so now we can actually do the command\r\n      // TO DO: game.lastobjects should be game.pov.lastobjects\r\n      foreach (obj, game.pov.currentcommandresolvedobjects) {\r\n        if (obj.gender in game.lastobjects) {\r\n          dictionary remove (game.lastobjects, obj.gender)\r\n        }\r\n        dictionary add (game.lastobjects, obj.gender, obj)\r\n        if (obj.article in game.lastobjects) {\r\n          dictionary remove (game.lastobjects, obj.article)\r\n        }\r\n        dictionary add (game.lastobjects, obj.article, obj)\r\n      }\r\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\r\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\r\n        if (LengthOf(game.pov.currentcommand) > 0) {\r\n          start transaction (game.pov.currentcommand)\r\n        }\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\r\n        // TO DO: game.unresolved* should be game.pov.unresolved*\r\n        game.unresolvedcommand = null\r\n        game.unresolvedcommandvarlist = null\r\n        game.unresolvedcommandkey = null\r\n      }\r\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n        // This is the bit that actually runs the commands\r\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n      }\r\n      HandleNextCommandQueueItem\r\n    }\r\n  ]]></function>\r\n  <function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"><![CDATA[\r\n    value = Trim(LCase(value))\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt <> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // allow referring to objects from the previous command by gender or article\r\n    if (objtype = \"object\") {\r\n      foreach (key, game.lastobjects) {\r\n        CompareNames (key, value, ObjectDictionaryItem(game.lastobjects, key), fullmatches, partialmatches)\r\n      }\r\n    }\r\n    // Also check the secondary scope, but only if we have not found anything yet\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\r\n      foreach (obj, secondaryscope) {\r\n        name = LCase(GetDisplayAlias(obj))\r\n        CompareNames (name, value, obj, fullmatches, partialmatches)\r\n        if (obj.alt <> null) {\r\n          foreach (altname, obj.alt) {\r\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (ListCount(fullmatches) = 1) {\r\n      return (ListItem(fullmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\r\n      return (ListItem(partialmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\r\n      return (null)\r\n    }\r\n    else {\r\n      candidates = ListCompact(fullmatches + partialmatches)\r\n      if (LengthOf(variable) > 0) {\r\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\r\n        game.pov.currentcommandpendingvariable = variable\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          varname = game.pov.currentcommandpendingvariable\r\n          game.pov.currentcommandpendingvariable = null\r\n          if (result <> null) {\r\n            AddToResolvedNames (varname, GetObject(result))\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // multi-object command, so after showing the menu, add the object to the list\r\n        game.pov.currentcommandmultiobjectpending = true\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          if (result <> null) {\r\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\r\n            ResolveNextNameListItem\r\n          }\r\n        }\r\n      }\r\n      return (null)\r\n    }\r\n  ]]></function>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\n\r\n\r\n### It (Pixie's Code)\r\n\r\nYou are in a room.\r\nYou can see John, Mary and a lamp.\r\nYou can go north.\r\n\r\n\\> x john\r\nHe looks like a man.\r\n\r\n\\> x mary\r\nShe looks like a woman.\r\n\r\n\\> x lamp\r\nIt is off.\r\n\r\n\\> get it\r\nYou pick it up.\r\n\r\n\\> n\r\nYou are in a second room.\r\nYou can go south.\r\n\r\n\\> x him\r\nHe looks like a man.\r\n\r\n\\> x her\r\nShe looks like a woman.",
      "EditableFormat": "markdown",
      "HTML": "<p>Example game using Pixie's code:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"It (Pixie's Code)\"&gt;\n    &lt;gameid&gt;cb9e4b3b-763a-40f6-a98f-f0260be056ae&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;lastobjects type=\"objectdictionary\" /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"John\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;look&gt;He looks like a man.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Mary\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedfemale\" /&gt;\n      &lt;look&gt;She looks like a woman.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"lamp\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"switchable\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;It is {either lamp.switchedon:on|off}.&lt;/look&gt;\n      &lt;feature_switchable /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"second room\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"second room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;function name=\"ResolveNextName\"&gt;&lt;![CDATA[\n    resolvedall = false\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\n    if (queuetype = \"stringlist\") {\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\n      if (queuelength &gt; 0) {\n        // Pop next variable off the queue\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\n        if (queuelength = 1) {\n          game.pov.currentcommandvarlistqueue = null\n        }\n        else {\n          newqueue = NewStringList()\n          for (i, 1, queuelength - 1) {\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\n          }\n          game.pov.currentcommandvarlistqueue = newqueue\n        }\n        // Resolve variable\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n        if (value &lt;&gt; \"\") {\n          result = null\n          resolvinglist = false\n          // This is to resolve issue 626\n          if (StartsWith(var, \"objectexit\")) {\n            result = ResolveName(var, value, \"exit\")\n          }\n          if (result = null) {\n            if (StartsWith(var, \"object\")) {\n              if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\n                game.pov.currentcommandpendingvariable = var\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\n                ResolveNameList (value, \"object\")\n                resolvinglist = true\n              }\n              else {\n                result = ResolveName(var, value, \"object\")\n              }\n            }\n            else if (StartsWith(var, \"exit\")) {\n              result = ResolveName(var, value, \"exit\")\n            }\n            else if (StartsWith(var, \"text\")) {\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n            }\n            else {\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\n            }\n          }\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\n          if (result = null) {\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\n              UnresolvedCommand (value, var)\n            }\n          }\n          else {\n            AddToResolvedNames (var, result)\n          }\n        }\n        else {\n          ResolveNextName\n        }\n      }\n      else {\n        resolvedall = true\n      }\n    }\n    else if (queuetype = \"null\") {\n      resolvedall = true\n    }\n    else {\n      error (\"Invalid queue type\")\n    }\n    if (resolvedall) {\n      // All the objects have been resolved, so now we can actually do the command\n      // TO DO: game.lastobjects should be game.pov.lastobjects\n      foreach (obj, game.pov.currentcommandresolvedobjects) {\n        if (obj.gender in game.lastobjects) {\n          dictionary remove (game.lastobjects, obj.gender)\n        }\n        dictionary add (game.lastobjects, obj.gender, obj)\n        if (obj.article in game.lastobjects) {\n          dictionary remove (game.lastobjects, obj.article)\n        }\n        dictionary add (game.lastobjects, obj.article, obj)\n      }\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\n        if (LengthOf(game.pov.currentcommand) &gt; 0) {\n          start transaction (game.pov.currentcommand)\n        }\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\n        // TO DO: game.unresolved* should be game.pov.unresolved*\n        game.unresolvedcommand = null\n        game.unresolvedcommandvarlist = null\n        game.unresolvedcommandkey = null\n      }\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\n        // This is the bit that actually runs the commands\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\n      }\n      HandleNextCommandQueueItem\n    }\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"&gt;&lt;![CDATA[\n    value = Trim(LCase(value))\n    fullmatches = NewObjectList()\n    partialmatches = NewObjectList()\n    foreach (obj, scope) {\n      name = LCase(GetDisplayAlias(obj))\n      CompareNames (name, value, obj, fullmatches, partialmatches)\n      if (obj.alt &lt;&gt; null) {\n        foreach (altname, obj.alt) {\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // allow referring to objects from the previous command by gender or article\n    if (objtype = \"object\") {\n      foreach (key, game.lastobjects) {\n        CompareNames (key, value, ObjectDictionaryItem(game.lastobjects, key), fullmatches, partialmatches)\n      }\n    }\n    // Also check the secondary scope, but only if we have not found anything yet\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\n      foreach (obj, secondaryscope) {\n        name = LCase(GetDisplayAlias(obj))\n        CompareNames (name, value, obj, fullmatches, partialmatches)\n        if (obj.alt &lt;&gt; null) {\n          foreach (altname, obj.alt) {\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n          }\n        }\n      }\n    }\n    if (ListCount(fullmatches) = 1) {\n      return (ListItem(fullmatches, 0))\n    }\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\n      return (ListItem(partialmatches, 0))\n    }\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\n      return (null)\n    }\n    else {\n      candidates = ListCompact(fullmatches + partialmatches)\n      if (LengthOf(variable) &gt; 0) {\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\n        game.pov.currentcommandpendingvariable = variable\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          varname = game.pov.currentcommandpendingvariable\n          game.pov.currentcommandpendingvariable = null\n          if (result &lt;&gt; null) {\n            AddToResolvedNames (varname, GetObject(result))\n          }\n        }\n      }\n      else {\n        // multi-object command, so after showing the menu, add the object to the list\n        game.pov.currentcommandmultiobjectpending = true\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          if (result &lt;&gt; null) {\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\n            ResolveNextNameListItem\n          }\n        }\n      }\n      return (null)\n    }\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<h3>It (Pixie's Code)</h3>\n<p>You are in a room.<br>\nYou can see John, Mary and a lamp.<br>\nYou can go north.</p>\n<p>&gt; x john<br>\nHe looks like a man.</p>\n<p>&gt; x mary<br>\nShe looks like a woman.</p>\n<p>&gt; x lamp<br>\nIt is off.</p>\n<p>&gt; get it<br>\nYou pick it up.</p>\n<p>&gt; n<br>\nYou are in a second room.<br>\nYou can go south.</p>\n<p>&gt; x him<br>\nHe looks like a man.</p>\n<p>&gt; x her<br>\nShe looks like a woman.</p>\n\n",
      "PostDate": "2018-04-16T21:39:20.8002357Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5ab98c36-1661-4ac0-9f3c-3bb264e152aa",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What if this was the only change made?\r\n\r\n\r\nTHIS CODE WAS NO GOOD\r\n\r\nIt allowed you to ALWAYS refer to objects in scope by their ```gender``` or ```article```.\r\n\r\nThat part worked, but it completely bypassed ```lastobjects```.\r\n\r\nExample:\r\n```\r\nYou can see a stick and a ball.\r\n\r\n>x it\r\nWhich do you mean?\r\n1. stick\r\n2. ball\r\n\r\n>1\r\nIt's a stick.\r\n\r\n>get it\r\nWhich do you mean?\r\n1. stick\r\n2. ball\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>What if this was the only change made?</p>\n<p>THIS CODE WAS NO GOOD</p>\n<p>It allowed you to ALWAYS refer to objects in scope by their <code>gender</code> or <code>article</code>.</p>\n<p>That part worked, but it completely bypassed <code>lastobjects</code>.</p>\n<p>Example:</p>\n<pre><code>You can see a stick and a ball.\n\n&gt;x it\nWhich do you mean?\n1. stick\n2. ball\n\n&gt;1\nIt's a stick.\n\n&gt;get it\nWhich do you mean?\n1. stick\n2. ball\n</code></pre>\n\n",
      "PostDate": "2018-04-16T22:06:15.8209156Z",
      "LastEditDate": "2018-04-16T22:25:45.8922778Z",
      "link": null
    },
    {
      "PostId": "0e68a6a8-97d8-4eb4-bd33-aa5388596fa7",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay...\r\n\r\nWhat if THIS was the only change made?\r\n\r\n```\r\n  <function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"><![CDATA[\r\n    value = Trim(LCase(value))\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt <> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // allow referring to objects from the previous command by gender or article\r\n    if (objtype = \"object\" and game.lastobjects <> null) {\r\n      foreach (obj, game.lastobjects) {\r\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n      }\r\n    }\r\n    // Also check the secondary scope, but only if we have not found anything yet\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\r\n      foreach (obj, secondaryscope) {\r\n        name = LCase(GetDisplayAlias(obj))\r\n        CompareNames (name, value, obj, fullmatches, partialmatches)\r\n        if (obj.alt <> null) {\r\n          foreach (altname, obj.alt) {\r\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // ADDED BY KV\r\n    // Also allow referring to objects IN SCOPE by gender or article\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0) {\r\n      if (objtype = \"object\") {\r\n        foreach (obj, scope) {\r\n          CompareNames (obj.gender, value, obj, fullmatches, partialmatches)\r\n          CompareNames (obj.article, value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // END OF ADDITION BY KV\r\n    if (ListCount(fullmatches) = 1) {\r\n      return (ListItem(fullmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\r\n      return (ListItem(partialmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\r\n      return (null)\r\n    }\r\n    else {\r\n      candidates = ListCompact(fullmatches + partialmatches)\r\n      if (LengthOf(variable) > 0) {\r\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\r\n        game.pov.currentcommandpendingvariable = variable\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          varname = game.pov.currentcommandpendingvariable\r\n          game.pov.currentcommandpendingvariable = null\r\n          if (result <> null) {\r\n            AddToResolvedNames (varname, GetObject(result))\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // multi-object command, so after showing the menu, add the object to the list\r\n        game.pov.currentcommandmultiobjectpending = true\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          if (result <> null) {\r\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\r\n            ResolveNextNameListItem\r\n          }\r\n        }\r\n      }\r\n      return (null)\r\n    }\r\n  ]]></function>\r\n```\r\n\r\n\r\n---\r\n[![it](https://user-images.githubusercontent.com/30656341/38838853-bfbe1cf6-419d-11e8-9001-774ef8ae67b8.gif)](https://user-images.githubusercontent.com/30656341/38838853-bfbe1cf6-419d-11e8-9001-774ef8ae67b8.gif)\r\n\r\n\r\n---\r\nExample game:\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"It REV3\">\r\n    <gameid>9f053cbe-65e3-4589-b95f-295682497bc3</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"John\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <look>He looks like a man.</look>\r\n    </object>\r\n    <object name=\"Mary\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedfemale\" />\r\n      <look>She looks like a woman.</look>\r\n    </object>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>A small stick.</look>\r\n      <ondrop type=\"script\">\r\n      </ondrop>\r\n    </object>\r\n    <object name=\"lamp\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"switchable\" />\r\n      <take />\r\n      <look>It is {either lamp.switchedon:on|off}.</look>\r\n      <feature_switchable />\r\n    </object>\r\n    <exit alias=\"north\" to=\"second room\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"second room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <object name=\"Ralph\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <look>He looks like a penguin.</look>\r\n    </object>\r\n    <object name=\"ball\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>A red ball.</look>\r\n    </object>\r\n  </object>\r\n  <function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"><![CDATA[\r\n    value = Trim(LCase(value))\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt <> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // allow referring to objects from the previous command by gender or article\r\n    if (objtype = \"object\" and game.lastobjects <> null) {\r\n      foreach (obj, game.lastobjects) {\r\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n      }\r\n    }\r\n    // Also check the secondary scope, but only if we have not found anything yet\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\r\n      foreach (obj, secondaryscope) {\r\n        name = LCase(GetDisplayAlias(obj))\r\n        CompareNames (name, value, obj, fullmatches, partialmatches)\r\n        if (obj.alt <> null) {\r\n          foreach (altname, obj.alt) {\r\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // ADDED BY KV\r\n    // Also allow referring to objects IN SCOPE by gender or article\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0) {\r\n      if (objtype = \"object\") {\r\n        foreach (obj, scope) {\r\n          CompareNames (obj.gender, value, obj, fullmatches, partialmatches)\r\n          CompareNames (obj.article, value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // END OF ADDITION BY KV\r\n    if (ListCount(fullmatches) = 1) {\r\n      return (ListItem(fullmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\r\n      return (ListItem(partialmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\r\n      return (null)\r\n    }\r\n    else {\r\n      candidates = ListCompact(fullmatches + partialmatches)\r\n      if (LengthOf(variable) > 0) {\r\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\r\n        game.pov.currentcommandpendingvariable = variable\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          varname = game.pov.currentcommandpendingvariable\r\n          game.pov.currentcommandpendingvariable = null\r\n          if (result <> null) {\r\n            AddToResolvedNames (varname, GetObject(result))\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // multi-object command, so after showing the menu, add the object to the list\r\n        game.pov.currentcommandmultiobjectpending = true\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          if (result <> null) {\r\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\r\n            ResolveNextNameListItem\r\n          }\r\n        }\r\n      }\r\n      return (null)\r\n    }\r\n  ]]></function>\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay...</p>\n<p>What if THIS was the only change made?</p>\n<pre><code>  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"&gt;&lt;![CDATA[\n    value = Trim(LCase(value))\n    fullmatches = NewObjectList()\n    partialmatches = NewObjectList()\n    foreach (obj, scope) {\n      name = LCase(GetDisplayAlias(obj))\n      CompareNames (name, value, obj, fullmatches, partialmatches)\n      if (obj.alt &lt;&gt; null) {\n        foreach (altname, obj.alt) {\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // allow referring to objects from the previous command by gender or article\n    if (objtype = \"object\" and game.lastobjects &lt;&gt; null) {\n      foreach (obj, game.lastobjects) {\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n      }\n    }\n    // Also check the secondary scope, but only if we have not found anything yet\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\n      foreach (obj, secondaryscope) {\n        name = LCase(GetDisplayAlias(obj))\n        CompareNames (name, value, obj, fullmatches, partialmatches)\n        if (obj.alt &lt;&gt; null) {\n          foreach (altname, obj.alt) {\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n          }\n        }\n      }\n    }\n    // ADDED BY KV\n    // Also allow referring to objects IN SCOPE by gender or article\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0) {\n      if (objtype = \"object\") {\n        foreach (obj, scope) {\n          CompareNames (obj.gender, value, obj, fullmatches, partialmatches)\n          CompareNames (obj.article, value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // END OF ADDITION BY KV\n    if (ListCount(fullmatches) = 1) {\n      return (ListItem(fullmatches, 0))\n    }\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\n      return (ListItem(partialmatches, 0))\n    }\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\n      return (null)\n    }\n    else {\n      candidates = ListCompact(fullmatches + partialmatches)\n      if (LengthOf(variable) &gt; 0) {\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\n        game.pov.currentcommandpendingvariable = variable\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          varname = game.pov.currentcommandpendingvariable\n          game.pov.currentcommandpendingvariable = null\n          if (result &lt;&gt; null) {\n            AddToResolvedNames (varname, GetObject(result))\n          }\n        }\n      }\n      else {\n        // multi-object command, so after showing the menu, add the object to the list\n        game.pov.currentcommandmultiobjectpending = true\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          if (result &lt;&gt; null) {\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\n            ResolveNextNameListItem\n          }\n        }\n      }\n      return (null)\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<hr>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/38838853-bfbe1cf6-419d-11e8-9001-774ef8ae67b8.gif\"><img src=\"https://user-images.githubusercontent.com/30656341/38838853-bfbe1cf6-419d-11e8-9001-774ef8ae67b8.gif\" alt=\"it\"></a></p>\n<hr>\n<p>Example game:</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"It REV3\"&gt;\n    &lt;gameid&gt;9f053cbe-65e3-4589-b95f-295682497bc3&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"John\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;look&gt;He looks like a man.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Mary\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedfemale\" /&gt;\n      &lt;look&gt;She looks like a woman.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;A small stick.&lt;/look&gt;\n      &lt;ondrop type=\"script\"&gt;\n      &lt;/ondrop&gt;\n    &lt;/object&gt;\n    &lt;object name=\"lamp\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"switchable\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;It is {either lamp.switchedon:on|off}.&lt;/look&gt;\n      &lt;feature_switchable /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"second room\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"second room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"Ralph\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;look&gt;He looks like a penguin.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"ball\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;A red ball.&lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"&gt;&lt;![CDATA[\n    value = Trim(LCase(value))\n    fullmatches = NewObjectList()\n    partialmatches = NewObjectList()\n    foreach (obj, scope) {\n      name = LCase(GetDisplayAlias(obj))\n      CompareNames (name, value, obj, fullmatches, partialmatches)\n      if (obj.alt &lt;&gt; null) {\n        foreach (altname, obj.alt) {\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // allow referring to objects from the previous command by gender or article\n    if (objtype = \"object\" and game.lastobjects &lt;&gt; null) {\n      foreach (obj, game.lastobjects) {\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n      }\n    }\n    // Also check the secondary scope, but only if we have not found anything yet\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\n      foreach (obj, secondaryscope) {\n        name = LCase(GetDisplayAlias(obj))\n        CompareNames (name, value, obj, fullmatches, partialmatches)\n        if (obj.alt &lt;&gt; null) {\n          foreach (altname, obj.alt) {\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n          }\n        }\n      }\n    }\n    // ADDED BY KV\n    // Also allow referring to objects IN SCOPE by gender or article\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0) {\n      if (objtype = \"object\") {\n        foreach (obj, scope) {\n          CompareNames (obj.gender, value, obj, fullmatches, partialmatches)\n          CompareNames (obj.article, value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // END OF ADDITION BY KV\n    if (ListCount(fullmatches) = 1) {\n      return (ListItem(fullmatches, 0))\n    }\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\n      return (ListItem(partialmatches, 0))\n    }\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\n      return (null)\n    }\n    else {\n      candidates = ListCompact(fullmatches + partialmatches)\n      if (LengthOf(variable) &gt; 0) {\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\n        game.pov.currentcommandpendingvariable = variable\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          varname = game.pov.currentcommandpendingvariable\n          game.pov.currentcommandpendingvariable = null\n          if (result &lt;&gt; null) {\n            AddToResolvedNames (varname, GetObject(result))\n          }\n        }\n      }\n      else {\n        // multi-object command, so after showing the menu, add the object to the list\n        game.pov.currentcommandmultiobjectpending = true\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          if (result &lt;&gt; null) {\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\n            ResolveNextNameListItem\n          }\n        }\n      }\n      return (null)\n    }\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2018-04-16T22:44:29.4681003Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "73e27f0e-0ba3-4008-aee1-d633ddc16b0f",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OFF-TOPIC, BUT CONCERNING THIS CODE\r\n\r\n<details>\r\n\r\nIt seems that I could use some code from this function to compare input to objects during ASK NPC ABOUT TEXT when the text isn't matched to a topic.\r\n\r\nI looks like ASK checks against each entire word in each of an object's keys.  So it doesn't parse like everything else does...  If I see a defibrillator, I can enter X DEF to examine it, but I can't ASK BOB ABOUT DEF.  I have to ASK ABOUT ABOUT DEFIBRILLATOR.  \r\n\r\nI also can't X DEF, then ASK BOB ABOUT IT.\r\n\r\nI'm thinking I can use something from ```ResolveNameFromList``` to check the text against all objects before going with the default reply if there is no match found.\r\n\r\n---\r\nUPDATE\r\n\r\nI got it so you can ASK OBJECT1 ABOUT TEXT/#OBJECT2#.  You just can't ask about IT/HIM/HER/THEM.\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Ask About an Object\">\r\n    <gameid>124f1873-d66e-460f-b41e-33d5e26bfe60</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_asktell />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"Bob\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <ask type=\"scriptdictionary\">\r\n        <item key=\"defibrillator\">\r\n          msg (\"\\\"I like to keep one handy,\\\" says Bob.\")\r\n        </item>\r\n        <item key=\"game\">\r\n          msg (\"\\\"It's just a test game,\\\" says Bob.\")\r\n        </item>\r\n      </ask>\r\n    </object>\r\n    <object name=\"defibrillator\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>A heart defibrillator can magically revive a dead person, if all those hospital dramas are to be believed.</look>\r\n    </object>\r\n  </object>\r\n  <command name=\"askaboutstuff\">\r\n    <pattern>ask #object1# about #text#</pattern>\r\n    <script>\r\n      pronouns = Split(\"it;he;him;her;she;them;those\",\";\")\r\n      foundpronoun = false\r\n      foreach (p, pronouns) {\r\n        if (Trim(LCase(text)) = p) {\r\n          foundpronoun = true\r\n        }\r\n      }\r\n      if (foundpronoun) {\r\n        msg (\"Try asking about things without using pronouns.\")\r\n      }\r\n      else {\r\n        DoAskTell (object1, text, \"ask\", \"askdefault\", \"DefaultAsk\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <function name=\"DoAskTell\" parameters=\"object, text, property, defaultscript, defaulttemplate\"><![CDATA[\r\n    handled = false\r\n    maxstrength = 0\r\n    match = null\r\n    text = LCase(text)\r\n    if (TypeOf(object, property) = \"scriptdictionary\") {\r\n      dictionary = GetAttribute(object, property)\r\n      foreach (keywords, dictionary) {\r\n        strength = GetKeywordsMatchStrength(LCase(keywords), text)\r\n        if (strength >= maxstrength and strength>0) {\r\n          match = ScriptDictionaryItem(dictionary, keywords)\r\n          maxstrength = strength\r\n        }\r\n      }\r\n      if (match <> null) {\r\n        parameters = NewObjectDictionary()\r\n        dictionary add (parameters, \"this\", object)\r\n        invoke (match, parameters)\r\n        handled = true\r\n      }\r\n    }\r\n    if (not handled) {\r\n      partialmatches = NewStringList()\r\n      foreach (obj, AllObjects()) {\r\n        oda = GetDisplayAlias(obj)\r\n        // check if input matches the start of any word in the name\r\n        if (HasAttribute(obj,\"alt\")) {\r\n          foreach (value, obj.alt) {\r\n            if (Instr(value,text) > 0) {\r\n              if (not ListContains(partialmatches, oda)) {\r\n                list add (partialmatches, oda)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (Instr(oda,text) > 0) {\r\n            list add (partialmatches, oda)\r\n          }\r\n        }\r\n      }\r\n      if (ListCount(partialmatches)>0) {\r\n        if (ListCount(partialmatches)=1) {\r\n          text = partialmatches[0]\r\n        }\r\n        else {\r\n          ShowMenu (DynamicTemplate(\"DisambiguateMenu\", \"object\"), partialmatches, true) {\r\n            if (result <> null) {\r\n              text = result\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (not handled) {\r\n      if (ListCount(partialmatches)=0) {\r\n        if (ListCount(partialmatches)>0) {\r\n          if (ListCount(partialmatches)=1) {\r\n            text = partialmatches[0]\r\n          }\r\n          else {\r\n            ShowMenu (DynamicTemplate(\"DisambiguateMenu\", \"object\"), partialmatches, true) {\r\n              if (result <> null) {\r\n                text = result\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (not handled) {\r\n      if (TypeOf(object, property) = \"scriptdictionary\") {\r\n        dictionary = GetAttribute(object, property)\r\n        foreach (keywords, dictionary) {\r\n          strength = GetKeywordsMatchStrength(LCase(keywords), text)\r\n          if (strength >= maxstrength and strength>0) {\r\n            match = ScriptDictionaryItem(dictionary, keywords)\r\n            maxstrength = strength\r\n          }\r\n        }\r\n        if (match <> null) {\r\n          parameters = NewObjectDictionary()\r\n          dictionary add (parameters, \"this\", object)\r\n          invoke (match, parameters)\r\n          handled = true\r\n        }\r\n      }\r\n    }\r\n    if (not handled) {\r\n      if (HasScript(object, defaultscript)) {\r\n        d = NewDictionary()\r\n        dictionary add (d, \"text\", text)\r\n        do (object, defaultscript, d)\r\n      }\r\n      else {\r\n        msg (DynamicTemplate(defaulttemplate, object))\r\n      }\r\n    }\r\n  ]]></function>\r\n</asl>\r\n```\r\n\r\n---\r\nPixie can probably turn that into much less code.  It's a very dirty hack.\r\n\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>OFF-TOPIC, BUT CONCERNING THIS CODE</p>\n<details>\n<p>It seems that I could use some code from this function to compare input to objects during ASK NPC ABOUT TEXT when the text isn't matched to a topic.</p>\n<p>I looks like ASK checks against each entire word in each of an object's keys.  So it doesn't parse like everything else does...  If I see a defibrillator, I can enter X DEF to examine it, but I can't ASK BOB ABOUT DEF.  I have to ASK ABOUT ABOUT DEFIBRILLATOR.</p>\n<p>I also can't X DEF, then ASK BOB ABOUT IT.</p>\n<p>I'm thinking I can use something from <code>ResolveNameFromList</code> to check the text against all objects before going with the default reply if there is no match found.</p>\n<hr>\n<p>UPDATE</p>\n<p>I got it so you can ASK OBJECT1 ABOUT TEXT/#OBJECT2#.  You just can't ask about IT/HIM/HER/THEM.</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Ask About an Object\"&gt;\n    &lt;gameid&gt;124f1873-d66e-460f-b41e-33d5e26bfe60&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_asktell /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Bob\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;ask type=\"scriptdictionary\"&gt;\n        &lt;item key=\"defibrillator\"&gt;\n          msg (\"\\\"I like to keep one handy,\\\" says Bob.\")\n        &lt;/item&gt;\n        &lt;item key=\"game\"&gt;\n          msg (\"\\\"It's just a test game,\\\" says Bob.\")\n        &lt;/item&gt;\n      &lt;/ask&gt;\n    &lt;/object&gt;\n    &lt;object name=\"defibrillator\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;A heart defibrillator can magically revive a dead person, if all those hospital dramas are to be believed.&lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"askaboutstuff\"&gt;\n    &lt;pattern&gt;ask #object1# about #text#&lt;/pattern&gt;\n    &lt;script&gt;\n      pronouns = Split(\"it;he;him;her;she;them;those\",\";\")\n      foundpronoun = false\n      foreach (p, pronouns) {\n        if (Trim(LCase(text)) = p) {\n          foundpronoun = true\n        }\n      }\n      if (foundpronoun) {\n        msg (\"Try asking about things without using pronouns.\")\n      }\n      else {\n        DoAskTell (object1, text, \"ask\", \"askdefault\", \"DefaultAsk\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;function name=\"DoAskTell\" parameters=\"object, text, property, defaultscript, defaulttemplate\"&gt;&lt;![CDATA[\n    handled = false\n    maxstrength = 0\n    match = null\n    text = LCase(text)\n    if (TypeOf(object, property) = \"scriptdictionary\") {\n      dictionary = GetAttribute(object, property)\n      foreach (keywords, dictionary) {\n        strength = GetKeywordsMatchStrength(LCase(keywords), text)\n        if (strength &gt;= maxstrength and strength&gt;0) {\n          match = ScriptDictionaryItem(dictionary, keywords)\n          maxstrength = strength\n        }\n      }\n      if (match &lt;&gt; null) {\n        parameters = NewObjectDictionary()\n        dictionary add (parameters, \"this\", object)\n        invoke (match, parameters)\n        handled = true\n      }\n    }\n    if (not handled) {\n      partialmatches = NewStringList()\n      foreach (obj, AllObjects()) {\n        oda = GetDisplayAlias(obj)\n        // check if input matches the start of any word in the name\n        if (HasAttribute(obj,\"alt\")) {\n          foreach (value, obj.alt) {\n            if (Instr(value,text) &gt; 0) {\n              if (not ListContains(partialmatches, oda)) {\n                list add (partialmatches, oda)\n              }\n            }\n          }\n        }\n        else {\n          if (Instr(oda,text) &gt; 0) {\n            list add (partialmatches, oda)\n          }\n        }\n      }\n      if (ListCount(partialmatches)&gt;0) {\n        if (ListCount(partialmatches)=1) {\n          text = partialmatches[0]\n        }\n        else {\n          ShowMenu (DynamicTemplate(\"DisambiguateMenu\", \"object\"), partialmatches, true) {\n            if (result &lt;&gt; null) {\n              text = result\n            }\n          }\n        }\n      }\n    }\n    if (not handled) {\n      if (ListCount(partialmatches)=0) {\n        if (ListCount(partialmatches)&gt;0) {\n          if (ListCount(partialmatches)=1) {\n            text = partialmatches[0]\n          }\n          else {\n            ShowMenu (DynamicTemplate(\"DisambiguateMenu\", \"object\"), partialmatches, true) {\n              if (result &lt;&gt; null) {\n                text = result\n              }\n            }\n          }\n        }\n      }\n    }\n    if (not handled) {\n      if (TypeOf(object, property) = \"scriptdictionary\") {\n        dictionary = GetAttribute(object, property)\n        foreach (keywords, dictionary) {\n          strength = GetKeywordsMatchStrength(LCase(keywords), text)\n          if (strength &gt;= maxstrength and strength&gt;0) {\n            match = ScriptDictionaryItem(dictionary, keywords)\n            maxstrength = strength\n          }\n        }\n        if (match &lt;&gt; null) {\n          parameters = NewObjectDictionary()\n          dictionary add (parameters, \"this\", object)\n          invoke (match, parameters)\n          handled = true\n        }\n      }\n    }\n    if (not handled) {\n      if (HasScript(object, defaultscript)) {\n        d = NewDictionary()\n        dictionary add (d, \"text\", text)\n        do (object, defaultscript, d)\n      }\n      else {\n        msg (DynamicTemplate(defaulttemplate, object))\n      }\n    }\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>Pixie can probably turn that into much less code.  It's a very dirty hack.</p>\n</details>\n\n",
      "PostDate": "2018-04-16T23:48:17.8077828Z",
      "LastEditDate": "2018-04-17T01:35:08.3457482Z",
      "link": null
    },
    {
      "PostId": "0ca0c939-88ae-470c-abd9-eed243e1c2ab",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Pixie can probably turn that into much less code. It's a very dirty hack.\r\n\r\nI did on the thread about using \"it\" with ask/tell, but now I cannot find the thread. I did not imagine that thread, did I?\r\n\r\nIt is just some extra code for `DoAskTell`; try to match the text against pronouns, ifthey match, recursively call `DoAskTell`.\r\n```\r\nif (DictionaryContains(game.lastobjects, text)) {\r\n  DoAskTell (object, GetDisplayAlias(ObjectDictionaryItem(game.lastobjects, text)), property, defaultscript, defaulttemplate)\r\n}\r\nelse {\r\n  handled = false\r\n  maxstrength = 0\r\n  match = null\r\n  text = LCase(text)\r\n  if (TypeOf(object, property) = \"scriptdictionary\") {\r\n    dictionary = GetAttribute(object, property)\r\n    foreach (keywords, dictionary) {\r\n      strength = GetKeywordsMatchStrength(LCase(keywords), text)\r\n      if (strength >= maxstrength and strength>0) {\r\n        match = ScriptDictionaryItem(dictionary, keywords)\r\n        maxstrength = strength\r\n      }\r\n    }\r\n    if (match <> null) {\r\n      parameters = NewObjectDictionary()\r\n      dictionary add (parameters, \"this\", object)\r\n      invoke (match, parameters)\r\n      handled = true\r\n    }\r\n  }\r\n  if (not handled) {\r\n    if (HasScript(object, defaultscript)) {\r\n      d = NewDictionary()\r\n      dictionary add (d, \"text\", text)\r\n      do (object, defaultscript, d)\r\n    }\r\n    else {\r\n      msg (DynamicTemplate(defaulttemplate, object))\r\n    }\r\n  }\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Pixie can probably turn that into much less code. It's a very dirty hack.</p>\n</blockquote>\n<p>I did on the thread about using \"it\" with ask/tell, but now I cannot find the thread. I did not imagine that thread, did I?</p>\n<p>It is just some extra code for <code>DoAskTell</code>; try to match the text against pronouns, ifthey match, recursively call <code>DoAskTell</code>.</p>\n<pre><code>if (DictionaryContains(game.lastobjects, text)) {\n  DoAskTell (object, GetDisplayAlias(ObjectDictionaryItem(game.lastobjects, text)), property, defaultscript, defaulttemplate)\n}\nelse {\n  handled = false\n  maxstrength = 0\n  match = null\n  text = LCase(text)\n  if (TypeOf(object, property) = \"scriptdictionary\") {\n    dictionary = GetAttribute(object, property)\n    foreach (keywords, dictionary) {\n      strength = GetKeywordsMatchStrength(LCase(keywords), text)\n      if (strength &gt;= maxstrength and strength&gt;0) {\n        match = ScriptDictionaryItem(dictionary, keywords)\n        maxstrength = strength\n      }\n    }\n    if (match &lt;&gt; null) {\n      parameters = NewObjectDictionary()\n      dictionary add (parameters, \"this\", object)\n      invoke (match, parameters)\n      handled = true\n    }\n  }\n  if (not handled) {\n    if (HasScript(object, defaultscript)) {\n      d = NewDictionary()\n      dictionary add (d, \"text\", text)\n      do (object, defaultscript, d)\n    }\n    else {\n      msg (DynamicTemplate(defaulttemplate, object))\n    }\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-04-17T07:04:50.9170754Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "75aa9a88-fca8-48f0-ae3e-2d068340542d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "With regards to things going out of scope, one approach would be to go through the list every turn and remove any objects that are no longer there (whether because they were eaten, or the player is in a different room). This would allow them to persist when changing rooms, if appropriate.",
      "EditableFormat": "markdown",
      "HTML": "<p>With regards to things going out of scope, one approach would be to go through the list every turn and remove any objects that are no longer there (whether because they were eaten, or the player is in a different room). This would allow them to persist when changing rooms, if appropriate.</p>\n\n",
      "PostDate": "2018-04-17T07:08:59.2856427Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "807c9a45-9c8d-43f1-af1a-9a665c26a364",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Anyone think Quest should show the object's display name in parentheses when we enter GET IT/HER/HIM/THEM?\r\n\r\n---\r\nYou can see a chair and a table.\r\n\r\n\\>x table\r\nA nice, oak table.\r\n\r\nOn it, you see a basket and a salt shaker.\r\n\r\n\\>get it\r\n(the table)\r\nIt's much too heavy.",
      "EditableFormat": "markdown",
      "HTML": "<p>Anyone think Quest should show the object's display name in parentheses when we enter GET IT/HER/HIM/THEM?</p>\n<hr>\n<p>You can see a chair and a table.</p>\n<p>&gt;x table<br>\nA nice, oak table.</p>\n<p>On it, you see a basket and a salt shaker.</p>\n<p>&gt;get it<br>\n(the table)<br>\nIt's much too heavy.</p>\n\n",
      "PostDate": "2018-06-09T09:18:20.0361264Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3237f93d-48c0-4f04-9ff2-062bfa0a38cf",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "BAD CODE REMOVED\r\n\r\nSee the next post.",
      "EditableFormat": "markdown",
      "HTML": "<p>BAD CODE REMOVED</p>\n<p>See the next post.</p>\n\n",
      "PostDate": "2018-06-10T23:03:14.5591291Z",
      "LastEditDate": "2018-06-11T00:44:58.5833732Z",
      "link": null
    },
    {
      "PostId": "c90d276d-073e-4fad-9005-7ec62f0439c9",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here we are.  This only adds the text if lastobjects was used (I think).\r\n\r\n---\r\n\r\n<div style=\"font-family:monospace;\">\r\n\r\n**<center><h3>What is it?</h3></center>**\r\n\r\n**A room**\r\n\r\nYou can see a stick and Phil.\r\n\r\n\\> x stick\r\nA small stick.\r\n\r\n\\> x it\r\n(stick)\r\nA small stick.\r\n\r\n\\> x stick\r\nA small stick.\r\n\r\n\\> x st\r\nA small stick.\r\n\r\n\\> x ph\r\nHe looks like a \"Phil\".\r\n\r\n\\> x phil\r\nHe looks like a \"Phil\".\r\n\r\n\\> x him\r\n(Phil)\r\nHe looks like a \"Phil\".\r\n\r\n\\> x ph\r\nHe looks like a \"Phil\".\r\n\r\n\\> x it\r\nI can't see that.\r\n\r\n\\> x stick\r\nA small stick.\r\n\r\n\\> x it\r\n(stick)\r\nA small stick.\r\n\r\n</div>\r\n\r\n\r\n---\r\nThe functions:\r\n\r\n\r\n\r\n<details>\r\n\r\n```xml\r\n  <function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"><![CDATA[\r\n    value = Trim(LCase(value))\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt <> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // allow referring to objects from the previous command by gender or article\r\n    // This attribute added by KV to print the alias when using lastobjects in a command.\r\n    game.usedlastobjects = false\r\n    if (objtype = \"object\" and game.lastobjects <> null) {\r\n      foreach (obj, game.lastobjects) {\r\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n        // Check if we are using an object from lastobjects.\r\n        mentioned = DictionaryItem(game.pov.currentcommandvarlist, \"object\")\r\n        if (ListCount(fullmatches) = 1 and ListContains(fullmatches, obj) and (mentioned = obj.gender or mentioned =  obj.article)) {\r\n          // This attribute added by KV to print the alias when using lastobjects in a command.\r\n          game.usedlastobjects = true\r\n        }\r\n      }\r\n     }\r\n    // Also check the secondary scope, but only if we have not found anything yet\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\r\n      foreach (obj, secondaryscope) {\r\n        name = LCase(GetDisplayAlias(obj))\r\n        CompareNames (name, value, obj, fullmatches, partialmatches)\r\n        if (obj.alt <> null) {\r\n          foreach (altname, obj.alt) {\r\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (ListCount(fullmatches) = 1) {\r\n      return (ListItem(fullmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\r\n      return (ListItem(partialmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\r\n      return (null)\r\n    }\r\n    else {\r\n      // Added this line to resolve issue with new FinishTurn setup in 580\r\n      if (HasAttribute (game, \"runturnscripts\") or GetAttribute(game, \"aslversion\") = \"580\") {\r\n        game.disambiguating = true\r\n      }\r\n      game.disambiguating = true\r\n      candidates = ListCompact(ListCombine(fullmatches, partialmatches))\r\n      if (LengthOf(variable) > 0) {\r\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\r\n        game.pov.currentcommandpendingvariable = variable\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          varname = game.pov.currentcommandpendingvariable\r\n          game.pov.currentcommandpendingvariable = null\r\n          if (result <> null) {\r\n            AddToResolvedNames (varname, GetObject(result))\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // multi-object command, so after showing the menu, add the object to the list\r\n        game.pov.currentcommandmultiobjectpending = true\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          if (result <> null) {\r\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\r\n            ResolveNextNameListItem\r\n          }\r\n        }\r\n      }\r\n      return (null)\r\n    }\r\n  ]]></function>\r\n```\r\n\r\n```xml\r\n  <function name=\"ResolveNextName\"><![CDATA[\r\n    resolvedall = false\r\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\r\n    if (queuetype = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\r\n      if (queuelength > 0) {\r\n        // Pop next variable off the queue\r\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\r\n        if (queuelength = 1) {\r\n          game.pov.currentcommandvarlistqueue = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\r\n          }\r\n          game.pov.currentcommandvarlistqueue = newqueue\r\n        }\r\n        // Resolve variable\r\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n        if (value <> \"\") {\r\n          result = null\r\n          resolvinglist = false\r\n          // This is to resolve issue 626\r\n          if (StartsWith(var, \"objectexit\")) {\r\n            result = ResolveName(var, value, \"exit\")\r\n          }\r\n          if (result = null) {\r\n            if (StartsWith(var, \"object\")) {\r\n              if (GetBoolean(game.pov.currentcommandpattern, \"allow_all\")) {\r\n                scope = FilterByAttribute(GetScope(\"object\", \"\", \"object\"), \"scenery\", false)\r\n                game.pov.currentcommandpendingobjectscope = ListExclude(scope, FilterByAttribute(scope, \"not_all\", true))\r\n                game.pov.currentcommandpendingvariable = var\r\n                ResolveNameList (value, \"object\")\r\n                resolvinglist = true\r\n              }\r\n              else if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\r\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\r\n                game.pov.currentcommandpendingvariable = var\r\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\r\n                ResolveNameList (value, \"object\")\r\n                resolvinglist = true\r\n              }\r\n              else {\r\n                result = ResolveName(var, value, \"object\")\r\n              }\r\n            }\r\n            else if (StartsWith(var, \"exit\")) {\r\n              result = ResolveName(var, value, \"exit\")\r\n            }\r\n            else if (StartsWith(var, \"text\")) {\r\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n            }\r\n            else {\r\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\r\n            }\r\n          }\r\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\r\n          if (result = null) {\r\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\r\n              UnresolvedCommand (value, var)\r\n            }\r\n          }\r\n          else {\r\n            AddToResolvedNames (var, result)\r\n          }\r\n        }\r\n        else {\r\n          ResolveNextName\r\n        }\r\n      }\r\n      else {\r\n        resolvedall = true\r\n      }\r\n    }\r\n    else if (queuetype = \"null\") {\r\n      resolvedall = true\r\n    }\r\n    else {\r\n      error (\"Invalid queue type\")\r\n    }\r\n    if (resolvedall) {\r\n      // All the objects have been resolved, so now we can actually do the command\r\n      // TO DO: game.lastobjects should be game.pov.lastobjects\r\n      // msg (ListCount(game.pov.currentcommandresolvedobjects))\r\n      game.lastobjects = game.pov.currentcommandresolvedobjects\r\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\r\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\r\n        if (LengthOf(game.pov.currentcommand) > 0) {\r\n          start transaction (game.pov.currentcommand)\r\n        }\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\r\n        // TO DO: game.unresolved* should be game.pov.unresolved*\r\n        game.unresolvedcommand = null\r\n        game.unresolvedcommandvarlist = null\r\n        game.unresolvedcommandkey = null\r\n      }\r\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n        // KV added this bit to show which object we're interacting with if partialmatches was used.\r\n        if (GetBoolean (game, \"usedlastobjects\")) {\r\n          mentioned = DictionaryItem(game.pov.currentcommandvarlist, \"object\")\r\n          if (GetObject(mentioned) = null) {\r\n            it = game.pov.currentcommandresolvedobjects[0]\r\n            msg (\"(\"+ GetDisplayAlias(it) +\")\")\r\n          }\r\n        }\r\n        // END OF BIT ADDED BY KV\r\n        // This is the bit that actually runs the commands\r\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n      }\r\n      //\r\n      // Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\r\n      // This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\r\n      // The game.aslversion attribute exists only in my mod of Quest.\r\n      // - KV\r\n      if (HasAttribute (game, \"runturnscripts\") or GetAttribute(game, \"aslversion\") = \"580\" or GetBoolean(game, \"multiplecommands\")) {\r\n        game.runturnscripts = true\r\n        FinishTurn\r\n      }\r\n      HandleNextCommandQueueItem\r\n    }\r\n  ]]></function>\r\n```\r\n\r\n</details>\r\n\r\n\r\n---\r\nExample game:\r\n\r\n<details>\r\n\r\n```xml\r\n<!--Saved by Quest 5.7.6735.33664-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"What is it?\">\r\n    <gameid>ab721896-e3b1-439d-83d4-715c2162d748</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>A small stick.</look>\r\n    </object>\r\n    <object name=\"Phil\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <look>He looks like a \"Phil\".</look>\r\n      <speak>{once:Phil nods.}{notfirst:Phil waves you away.}</speak>\r\n    </object>\r\n  </object>\r\n  <function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"><![CDATA[\r\n    value = Trim(LCase(value))\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt <> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // allow referring to objects from the previous command by gender or article\r\n    // This attribute added by KV to print the alias when using lastobjects in a command.\r\n    game.usedlastobjects = false\r\n    if (objtype = \"object\" and game.lastobjects <> null) {\r\n      foreach (obj, game.lastobjects) {\r\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n        // Check if we are using an object from lastobjects.\r\n        mentioned = DictionaryItem(game.pov.currentcommandvarlist, \"object\")\r\n        if (ListCount(fullmatches) = 1 and ListContains(fullmatches, obj) and (mentioned = obj.gender or mentioned =  obj.article)) {\r\n          // This attribute added by KV to print the alias when using lastobjects in a command.\r\n          game.usedlastobjects = true\r\n        }\r\n      }\r\n     }\r\n    // Also check the secondary scope, but only if we have not found anything yet\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\r\n      foreach (obj, secondaryscope) {\r\n        name = LCase(GetDisplayAlias(obj))\r\n        CompareNames (name, value, obj, fullmatches, partialmatches)\r\n        if (obj.alt <> null) {\r\n          foreach (altname, obj.alt) {\r\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (ListCount(fullmatches) = 1) {\r\n      return (ListItem(fullmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\r\n      return (ListItem(partialmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\r\n      return (null)\r\n    }\r\n    else {\r\n      // Added this line to resolve issue with new FinishTurn setup in 580\r\n      if (HasAttribute (game, \"runturnscripts\") or GetAttribute(game, \"aslversion\") = \"580\") {\r\n        game.disambiguating = true\r\n      }\r\n      game.disambiguating = true\r\n      candidates = ListCompact(ListCombine(fullmatches, partialmatches))\r\n      if (LengthOf(variable) > 0) {\r\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\r\n        game.pov.currentcommandpendingvariable = variable\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          varname = game.pov.currentcommandpendingvariable\r\n          game.pov.currentcommandpendingvariable = null\r\n          if (result <> null) {\r\n            AddToResolvedNames (varname, GetObject(result))\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // multi-object command, so after showing the menu, add the object to the list\r\n        game.pov.currentcommandmultiobjectpending = true\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\r\n          if (result <> null) {\r\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\r\n            ResolveNextNameListItem\r\n          }\r\n        }\r\n      }\r\n      return (null)\r\n    }\r\n  ]]></function>\r\n  <function name=\"ResolveNextName\"><![CDATA[\r\n    resolvedall = false\r\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\r\n    if (queuetype = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\r\n      if (queuelength > 0) {\r\n        // Pop next variable off the queue\r\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\r\n        if (queuelength = 1) {\r\n          game.pov.currentcommandvarlistqueue = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\r\n          }\r\n          game.pov.currentcommandvarlistqueue = newqueue\r\n        }\r\n        // Resolve variable\r\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n        if (value <> \"\") {\r\n          result = null\r\n          resolvinglist = false\r\n          // This is to resolve issue 626\r\n          if (StartsWith(var, \"objectexit\")) {\r\n            result = ResolveName(var, value, \"exit\")\r\n          }\r\n          if (result = null) {\r\n            if (StartsWith(var, \"object\")) {\r\n              if (GetBoolean(game.pov.currentcommandpattern, \"allow_all\")) {\r\n                scope = FilterByAttribute(GetScope(\"object\", \"\", \"object\"), \"scenery\", false)\r\n                game.pov.currentcommandpendingobjectscope = ListExclude(scope, FilterByAttribute(scope, \"not_all\", true))\r\n                game.pov.currentcommandpendingvariable = var\r\n                ResolveNameList (value, \"object\")\r\n                resolvinglist = true\r\n              }\r\n              else if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\r\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\r\n                game.pov.currentcommandpendingvariable = var\r\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\r\n                ResolveNameList (value, \"object\")\r\n                resolvinglist = true\r\n              }\r\n              else {\r\n                result = ResolveName(var, value, \"object\")\r\n              }\r\n            }\r\n            else if (StartsWith(var, \"exit\")) {\r\n              result = ResolveName(var, value, \"exit\")\r\n            }\r\n            else if (StartsWith(var, \"text\")) {\r\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n            }\r\n            else {\r\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\r\n            }\r\n          }\r\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\r\n          if (result = null) {\r\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\r\n              UnresolvedCommand (value, var)\r\n            }\r\n          }\r\n          else {\r\n            AddToResolvedNames (var, result)\r\n          }\r\n        }\r\n        else {\r\n          ResolveNextName\r\n        }\r\n      }\r\n      else {\r\n        resolvedall = true\r\n      }\r\n    }\r\n    else if (queuetype = \"null\") {\r\n      resolvedall = true\r\n    }\r\n    else {\r\n      error (\"Invalid queue type\")\r\n    }\r\n    if (resolvedall) {\r\n      // All the objects have been resolved, so now we can actually do the command\r\n      // TO DO: game.lastobjects should be game.pov.lastobjects\r\n      // msg (ListCount(game.pov.currentcommandresolvedobjects))\r\n      game.lastobjects = game.pov.currentcommandresolvedobjects\r\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\r\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\r\n        if (LengthOf(game.pov.currentcommand) > 0) {\r\n          start transaction (game.pov.currentcommand)\r\n        }\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\r\n        // TO DO: game.unresolved* should be game.pov.unresolved*\r\n        game.unresolvedcommand = null\r\n        game.unresolvedcommandvarlist = null\r\n        game.unresolvedcommandkey = null\r\n      }\r\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n        // KV added this bit to show which object we're interacting with if partialmatches was used.\r\n        if (GetBoolean (game, \"usedlastobjects\")) {\r\n          mentioned = DictionaryItem(game.pov.currentcommandvarlist, \"object\")\r\n          if (GetObject(mentioned) = null) {\r\n            it = game.pov.currentcommandresolvedobjects[0]\r\n            msg (\"(\"+ GetDisplayAlias(it) +\")\")\r\n          }\r\n        }\r\n        // END OF BIT ADDED BY KV\r\n        // This is the bit that actually runs the commands\r\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n      }\r\n      //\r\n      // Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\r\n      // This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\r\n      // The game.aslversion attribute exists only in my mod of Quest.\r\n      // - KV\r\n      if (HasAttribute (game, \"runturnscripts\") or GetAttribute(game, \"aslversion\") = \"580\" or GetBoolean(game, \"multiplecommands\")) {\r\n        game.runturnscripts = true\r\n        FinishTurn\r\n      }\r\n      HandleNextCommandQueueItem\r\n    }\r\n  ]]></function>\r\n</asl>\r\n```\r\n\r\n</details>\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Here we are.  This only adds the text if lastobjects was used (I think).</p>\n<hr>\n<div style=\"font-family: monospace\">\n<p><strong></strong></p><center><h3><strong>What is it?</strong></h3></center><p></p>\n<p><strong>A room</strong></p>\n<p>You can see a stick and Phil.</p>\n<p>&gt; x stick<br>\nA small stick.</p>\n<p>&gt; x it<br>\n(stick)<br>\nA small stick.</p>\n<p>&gt; x stick<br>\nA small stick.</p>\n<p>&gt; x st<br>\nA small stick.</p>\n<p>&gt; x ph<br>\nHe looks like a \"Phil\".</p>\n<p>&gt; x phil<br>\nHe looks like a \"Phil\".</p>\n<p>&gt; x him<br>\n(Phil)<br>\nHe looks like a \"Phil\".</p>\n<p>&gt; x ph<br>\nHe looks like a \"Phil\".</p>\n<p>&gt; x it<br>\nI can't see that.</p>\n<p>&gt; x stick<br>\nA small stick.</p>\n<p>&gt; x it<br>\n(stick)<br>\nA small stick.</p>\n</div>\n<hr>\n<p>The functions:</p>\n<details>\n<pre><code>  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"&gt;&lt;![CDATA[\n    value = Trim(LCase(value))\n    fullmatches = NewObjectList()\n    partialmatches = NewObjectList()\n    foreach (obj, scope) {\n      name = LCase(GetDisplayAlias(obj))\n      CompareNames (name, value, obj, fullmatches, partialmatches)\n      if (obj.alt &lt;&gt; null) {\n        foreach (altname, obj.alt) {\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // allow referring to objects from the previous command by gender or article\n    // This attribute added by KV to print the alias when using lastobjects in a command.\n    game.usedlastobjects = false\n    if (objtype = \"object\" and game.lastobjects &lt;&gt; null) {\n      foreach (obj, game.lastobjects) {\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n        // Check if we are using an object from lastobjects.\n        mentioned = DictionaryItem(game.pov.currentcommandvarlist, \"object\")\n        if (ListCount(fullmatches) = 1 and ListContains(fullmatches, obj) and (mentioned = obj.gender or mentioned =  obj.article)) {\n          // This attribute added by KV to print the alias when using lastobjects in a command.\n          game.usedlastobjects = true\n        }\n      }\n     }\n    // Also check the secondary scope, but only if we have not found anything yet\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\n      foreach (obj, secondaryscope) {\n        name = LCase(GetDisplayAlias(obj))\n        CompareNames (name, value, obj, fullmatches, partialmatches)\n        if (obj.alt &lt;&gt; null) {\n          foreach (altname, obj.alt) {\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n          }\n        }\n      }\n    }\n    if (ListCount(fullmatches) = 1) {\n      return (ListItem(fullmatches, 0))\n    }\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\n      return (ListItem(partialmatches, 0))\n    }\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\n      return (null)\n    }\n    else {\n      // Added this line to resolve issue with new FinishTurn setup in 580\n      if (HasAttribute (game, \"runturnscripts\") or GetAttribute(game, \"aslversion\") = \"580\") {\n        game.disambiguating = true\n      }\n      game.disambiguating = true\n      candidates = ListCompact(ListCombine(fullmatches, partialmatches))\n      if (LengthOf(variable) &gt; 0) {\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\n        game.pov.currentcommandpendingvariable = variable\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          varname = game.pov.currentcommandpendingvariable\n          game.pov.currentcommandpendingvariable = null\n          if (result &lt;&gt; null) {\n            AddToResolvedNames (varname, GetObject(result))\n          }\n        }\n      }\n      else {\n        // multi-object command, so after showing the menu, add the object to the list\n        game.pov.currentcommandmultiobjectpending = true\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          if (result &lt;&gt; null) {\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\n            ResolveNextNameListItem\n          }\n        }\n      }\n      return (null)\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"ResolveNextName\"&gt;&lt;![CDATA[\n    resolvedall = false\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\n    if (queuetype = \"stringlist\") {\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\n      if (queuelength &gt; 0) {\n        // Pop next variable off the queue\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\n        if (queuelength = 1) {\n          game.pov.currentcommandvarlistqueue = null\n        }\n        else {\n          newqueue = NewStringList()\n          for (i, 1, queuelength - 1) {\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\n          }\n          game.pov.currentcommandvarlistqueue = newqueue\n        }\n        // Resolve variable\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n        if (value &lt;&gt; \"\") {\n          result = null\n          resolvinglist = false\n          // This is to resolve issue 626\n          if (StartsWith(var, \"objectexit\")) {\n            result = ResolveName(var, value, \"exit\")\n          }\n          if (result = null) {\n            if (StartsWith(var, \"object\")) {\n              if (GetBoolean(game.pov.currentcommandpattern, \"allow_all\")) {\n                scope = FilterByAttribute(GetScope(\"object\", \"\", \"object\"), \"scenery\", false)\n                game.pov.currentcommandpendingobjectscope = ListExclude(scope, FilterByAttribute(scope, \"not_all\", true))\n                game.pov.currentcommandpendingvariable = var\n                ResolveNameList (value, \"object\")\n                resolvinglist = true\n              }\n              else if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\n                game.pov.currentcommandpendingvariable = var\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\n                ResolveNameList (value, \"object\")\n                resolvinglist = true\n              }\n              else {\n                result = ResolveName(var, value, \"object\")\n              }\n            }\n            else if (StartsWith(var, \"exit\")) {\n              result = ResolveName(var, value, \"exit\")\n            }\n            else if (StartsWith(var, \"text\")) {\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n            }\n            else {\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\n            }\n          }\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\n          if (result = null) {\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\n              UnresolvedCommand (value, var)\n            }\n          }\n          else {\n            AddToResolvedNames (var, result)\n          }\n        }\n        else {\n          ResolveNextName\n        }\n      }\n      else {\n        resolvedall = true\n      }\n    }\n    else if (queuetype = \"null\") {\n      resolvedall = true\n    }\n    else {\n      error (\"Invalid queue type\")\n    }\n    if (resolvedall) {\n      // All the objects have been resolved, so now we can actually do the command\n      // TO DO: game.lastobjects should be game.pov.lastobjects\n      // msg (ListCount(game.pov.currentcommandresolvedobjects))\n      game.lastobjects = game.pov.currentcommandresolvedobjects\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\n        if (LengthOf(game.pov.currentcommand) &gt; 0) {\n          start transaction (game.pov.currentcommand)\n        }\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\n        // TO DO: game.unresolved* should be game.pov.unresolved*\n        game.unresolvedcommand = null\n        game.unresolvedcommandvarlist = null\n        game.unresolvedcommandkey = null\n      }\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\n        // KV added this bit to show which object we're interacting with if partialmatches was used.\n        if (GetBoolean (game, \"usedlastobjects\")) {\n          mentioned = DictionaryItem(game.pov.currentcommandvarlist, \"object\")\n          if (GetObject(mentioned) = null) {\n            it = game.pov.currentcommandresolvedobjects[0]\n            msg (\"(\"+ GetDisplayAlias(it) +\")\")\n          }\n        }\n        // END OF BIT ADDED BY KV\n        // This is the bit that actually runs the commands\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\n      }\n      //\n      // Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\n      // This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\n      // The game.aslversion attribute exists only in my mod of Quest.\n      // - KV\n      if (HasAttribute (game, \"runturnscripts\") or GetAttribute(game, \"aslversion\") = \"580\" or GetBoolean(game, \"multiplecommands\")) {\n        game.runturnscripts = true\n        FinishTurn\n      }\n      HandleNextCommandQueueItem\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n</details>\n<hr>\n<p>Example game:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6735.33664--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"What is it?\"&gt;\n    &lt;gameid&gt;ab721896-e3b1-439d-83d4-715c2162d748&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;A small stick.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Phil\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;look&gt;He looks like a \"Phil\".&lt;/look&gt;\n      &lt;speak&gt;{once:Phil nods.}{notfirst:Phil waves you away.}&lt;/speak&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"&gt;&lt;![CDATA[\n    value = Trim(LCase(value))\n    fullmatches = NewObjectList()\n    partialmatches = NewObjectList()\n    foreach (obj, scope) {\n      name = LCase(GetDisplayAlias(obj))\n      CompareNames (name, value, obj, fullmatches, partialmatches)\n      if (obj.alt &lt;&gt; null) {\n        foreach (altname, obj.alt) {\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n        }\n      }\n    }\n    // allow referring to objects from the previous command by gender or article\n    // This attribute added by KV to print the alias when using lastobjects in a command.\n    game.usedlastobjects = false\n    if (objtype = \"object\" and game.lastobjects &lt;&gt; null) {\n      foreach (obj, game.lastobjects) {\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n        // Check if we are using an object from lastobjects.\n        mentioned = DictionaryItem(game.pov.currentcommandvarlist, \"object\")\n        if (ListCount(fullmatches) = 1 and ListContains(fullmatches, obj) and (mentioned = obj.gender or mentioned =  obj.article)) {\n          // This attribute added by KV to print the alias when using lastobjects in a command.\n          game.usedlastobjects = true\n        }\n      }\n     }\n    // Also check the secondary scope, but only if we have not found anything yet\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\n      foreach (obj, secondaryscope) {\n        name = LCase(GetDisplayAlias(obj))\n        CompareNames (name, value, obj, fullmatches, partialmatches)\n        if (obj.alt &lt;&gt; null) {\n          foreach (altname, obj.alt) {\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n          }\n        }\n      }\n    }\n    if (ListCount(fullmatches) = 1) {\n      return (ListItem(fullmatches, 0))\n    }\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\n      return (ListItem(partialmatches, 0))\n    }\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\n      return (null)\n    }\n    else {\n      // Added this line to resolve issue with new FinishTurn setup in 580\n      if (HasAttribute (game, \"runturnscripts\") or GetAttribute(game, \"aslversion\") = \"580\") {\n        game.disambiguating = true\n      }\n      game.disambiguating = true\n      candidates = ListCompact(ListCombine(fullmatches, partialmatches))\n      if (LengthOf(variable) &gt; 0) {\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\n        game.pov.currentcommandpendingvariable = variable\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          varname = game.pov.currentcommandpendingvariable\n          game.pov.currentcommandpendingvariable = null\n          if (result &lt;&gt; null) {\n            AddToResolvedNames (varname, GetObject(result))\n          }\n        }\n      }\n      else {\n        // multi-object command, so after showing the menu, add the object to the list\n        game.pov.currentcommandmultiobjectpending = true\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), candidates, true) {\n          if (result &lt;&gt; null) {\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\n            ResolveNextNameListItem\n          }\n        }\n      }\n      return (null)\n    }\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"ResolveNextName\"&gt;&lt;![CDATA[\n    resolvedall = false\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\n    if (queuetype = \"stringlist\") {\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\n      if (queuelength &gt; 0) {\n        // Pop next variable off the queue\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\n        if (queuelength = 1) {\n          game.pov.currentcommandvarlistqueue = null\n        }\n        else {\n          newqueue = NewStringList()\n          for (i, 1, queuelength - 1) {\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\n          }\n          game.pov.currentcommandvarlistqueue = newqueue\n        }\n        // Resolve variable\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n        if (value &lt;&gt; \"\") {\n          result = null\n          resolvinglist = false\n          // This is to resolve issue 626\n          if (StartsWith(var, \"objectexit\")) {\n            result = ResolveName(var, value, \"exit\")\n          }\n          if (result = null) {\n            if (StartsWith(var, \"object\")) {\n              if (GetBoolean(game.pov.currentcommandpattern, \"allow_all\")) {\n                scope = FilterByAttribute(GetScope(\"object\", \"\", \"object\"), \"scenery\", false)\n                game.pov.currentcommandpendingobjectscope = ListExclude(scope, FilterByAttribute(scope, \"not_all\", true))\n                game.pov.currentcommandpendingvariable = var\n                ResolveNameList (value, \"object\")\n                resolvinglist = true\n              }\n              else if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\n                game.pov.currentcommandpendingvariable = var\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\n                ResolveNameList (value, \"object\")\n                resolvinglist = true\n              }\n              else {\n                result = ResolveName(var, value, \"object\")\n              }\n            }\n            else if (StartsWith(var, \"exit\")) {\n              result = ResolveName(var, value, \"exit\")\n            }\n            else if (StartsWith(var, \"text\")) {\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n            }\n            else {\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\n            }\n          }\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\n          if (result = null) {\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\n              UnresolvedCommand (value, var)\n            }\n          }\n          else {\n            AddToResolvedNames (var, result)\n          }\n        }\n        else {\n          ResolveNextName\n        }\n      }\n      else {\n        resolvedall = true\n      }\n    }\n    else if (queuetype = \"null\") {\n      resolvedall = true\n    }\n    else {\n      error (\"Invalid queue type\")\n    }\n    if (resolvedall) {\n      // All the objects have been resolved, so now we can actually do the command\n      // TO DO: game.lastobjects should be game.pov.lastobjects\n      // msg (ListCount(game.pov.currentcommandresolvedobjects))\n      game.lastobjects = game.pov.currentcommandresolvedobjects\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\n        if (LengthOf(game.pov.currentcommand) &gt; 0) {\n          start transaction (game.pov.currentcommand)\n        }\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\n        // TO DO: game.unresolved* should be game.pov.unresolved*\n        game.unresolvedcommand = null\n        game.unresolvedcommandvarlist = null\n        game.unresolvedcommandkey = null\n      }\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\n        // KV added this bit to show which object we're interacting with if partialmatches was used.\n        if (GetBoolean (game, \"usedlastobjects\")) {\n          mentioned = DictionaryItem(game.pov.currentcommandvarlist, \"object\")\n          if (GetObject(mentioned) = null) {\n            it = game.pov.currentcommandresolvedobjects[0]\n            msg (\"(\"+ GetDisplayAlias(it) +\")\")\n          }\n        }\n        // END OF BIT ADDED BY KV\n        // This is the bit that actually runs the commands\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\n      }\n      //\n      // Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\n      // This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\n      // The game.aslversion attribute exists only in my mod of Quest.\n      // - KV\n      if (HasAttribute (game, \"runturnscripts\") or GetAttribute(game, \"aslversion\") = \"580\" or GetBoolean(game, \"multiplecommands\")) {\n        game.runturnscripts = true\n        FinishTurn\n      }\n      HandleNextCommandQueueItem\n    }\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-06-11T00:44:27.8039559Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "492d37ad-ce00-4b3a-8967-1f4720a20659",
      "UserId": 341771,
      "Username": "JenniferCampbell",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8b9a63b5bbacc531368953df3a1709ec?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Knight: \"Suffice to say, is one of the words we cannot say.\"\r\nKing Arthur: \"What is it?\"\r\nKnight: \"Ahhh!  He said the word!\"\r\nKing Arthur: \"What is it?\"\r\nKnight: \"Ahhh!  He said it again!\"\r\nKnight: \"Oh no!  I said it!\"\r\nKnight: \"Oh no!  I said it again!\"\r\nKnight: \"Ahhh!  I keep saying it!\"",
      "EditableFormat": "markdown",
      "HTML": "<p>Knight: \"Suffice to say, is one of the words we cannot say.\"<br>\nKing Arthur: \"What is it?\"<br>\nKnight: \"Ahhh!  He said the word!\"<br>\nKing Arthur: \"What is it?\"<br>\nKnight: \"Ahhh!  He said it again!\"<br>\nKnight: \"Oh no!  I said it!\"<br>\nKnight: \"Oh no!  I said it again!\"<br>\nKnight: \"Ahhh!  I keep saying it!\"</p>\n\n",
      "PostDate": "2018-06-11T12:03:49.3960814Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
