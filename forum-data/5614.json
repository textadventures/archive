{
  "Topic": {
    "TopicId": "5614",
    "ForumId": "18",
    "Title": "Some useful functions",
    "LastUpdated": "2016-05-14T11:10:04+00:00",
    "ReplyCount": 4
  },
  "Posts": [
    {
      "PostId": "38647",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "A collection of general functions that may be of use to people.\n\nIn case you are wondering, &lt;!-- indicates the start of an XML comment, and --&gt; the end, so each function starts with a comment that explains what it does (Quest will delete XML comments by the way).\n\nTo add to your game, go to Tools - Code View, scroll down to the bottom, the last line will be &lt;/asl&gt;. Insert these just above that line. If you do not want them all, just pick the ones you do want (if a function needs another one to work it will state that in the comments.\n\n[b:2hsi4nxs][i:2hsi4nxs]The Random Functions[/i:2hsi4nxs][/b:2hsi4nxs]\n\n[code:2hsi4nxs]  &lt;!--\n  Randomly picks one object from the given object list&#46;\n  --&gt;\n  &lt;function name=&quot;PickOneObj&quot; parameters=&quot;lst&quot; type=&quot;object&quot;&gt;\n    index = GetRandomInt(0, ListCount(lst) - 1)\n    return (ObjectListItem(lst, index))\n  &lt;/function&gt;[/code:2hsi4nxs]\n  \n  \n[code:2hsi4nxs]  &lt;!--\n  Randomly picks one string from the given string list&#46;\n  Alternatively, if sent a string, it will randomly pick a substring of it&#46;\n  Substrings should be separated by a semi-colon eg&#58;\n  \n    randomnumber = PickOneStr(&quot;one;two;three&quot;)\n  --&gt;\n  &lt;function name=&quot;PickOneStr&quot; parameters=&quot;lst&quot; type=&quot;string&quot;&gt;\n    if (TypeOf(lst) = &quot;string&quot;) {\n      lst = Split(lst, &quot;;&quot;)\n    }\n    index = GetRandomInt(0, ListCount(lst) - 1)\n    return (StringListItem(lst, index))\n  &lt;/function&gt;[/code:2hsi4nxs]\n  \n  \n[code:2hsi4nxs]  &lt;!--\n  Randomly picks one of the direct children objects of the given object&#46;\n  For example, if you sent it a room, it will pick an object in that room\n  (which could be the player, if it is the current room)&#46;\n  \n  NOTE&#58; You must also have PickOneObj&#46;\n  --&gt;\n  &lt;function name=&quot;PickFromObject&quot; parameters=&quot;obj&quot; type=&quot;object&quot;&gt;\n    return (PickOneObj(GetDirectChildren(obj)))\n  &lt;/function&gt;[/code:2hsi4nxs]\n  \n\n[code:2hsi4nxs]  &lt;!--\n  Randomly picks one object of the given type from the given room&#46;\n  The type should be specified as a string&#46;\n  Note that editor_room and editor_object will be removed from your game\n  when it is pubished, so do not used them!\n\n    randomman = PickOneOfType(player&#46;parent, &quot;male&quot;)\n  --&gt;\n  &lt;function name=&quot;PickOneOfType&quot; parameters=&quot;room, objtype&quot; type=&quot;object&quot;&gt;\n    l = NewObjectList()\n    foreach (o, GetDirectChildren(room)) {\n      if (DoesInherit(o, objtype)) {\n        list add (l, o)\n      }\n    }\n    return (PickOneObj(l))\n  &lt;/function&gt;[/code:2hsi4nxs]",
      "EditableFormat": "bbcode",
      "HTML": "A collection of general functions that may be of use to people.<br/><br/>In case you are wondering, &lt;!-- indicates the start of an XML comment, and --&gt; the end, so each function starts with a comment that explains what it does (Quest will delete XML comments by the way).<br/><br/>To add to your game, go to Tools - Code View, scroll down to the bottom, the last line will be &lt;/asl&gt;. Insert these just above that line. If you do not want them all, just pick the ones you do want (if a function needs another one to work it will state that in the comments.<br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">The Random Functions</span></span><br/><br/><pre><code>  &lt;!--<br/>  Randomly picks one object from the given object list&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;PickOneObj&quot; parameters=&quot;lst&quot; type=&quot;object&quot;&gt;<br/>    index = GetRandomInt(0, ListCount(lst) - 1)<br/>    return (ObjectListItem(lst, index))<br/>  &lt;/function&gt;</code></pre><br/>  <br/>  <br/><pre><code>  &lt;!--<br/>  Randomly picks one string from the given string list&#46;<br/>  Alternatively, if sent a string, it will randomly pick a substring of it&#46;<br/>  Substrings should be separated by a semi-colon eg&#58;<br/>  <br/>    randomnumber = PickOneStr(&quot;one;two;three&quot;)<br/>  --&gt;<br/>  &lt;function name=&quot;PickOneStr&quot; parameters=&quot;lst&quot; type=&quot;string&quot;&gt;<br/>    if (TypeOf(lst) = &quot;string&quot;) {<br/>      lst = Split(lst, &quot;;&quot;)<br/>    }<br/>    index = GetRandomInt(0, ListCount(lst) - 1)<br/>    return (StringListItem(lst, index))<br/>  &lt;/function&gt;</code></pre><br/>  <br/>  <br/><pre><code>  &lt;!--<br/>  Randomly picks one of the direct children objects of the given object&#46;<br/>  For example, if you sent it a room, it will pick an object in that room<br/>  (which could be the player, if it is the current room)&#46;<br/>  <br/>  NOTE&#58; You must also have PickOneObj&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;PickFromObject&quot; parameters=&quot;obj&quot; type=&quot;object&quot;&gt;<br/>    return (PickOneObj(GetDirectChildren(obj)))<br/>  &lt;/function&gt;</code></pre><br/>  <br/><br/><pre><code>  &lt;!--<br/>  Randomly picks one object of the given type from the given room&#46;<br/>  The type should be specified as a string&#46;<br/>  Note that editor_room and editor_object will be removed from your game<br/>  when it is pubished, so do not used them!<br/><br/>    randomman = PickOneOfType(player&#46;parent, &quot;male&quot;)<br/>  --&gt;<br/>  &lt;function name=&quot;PickOneOfType&quot; parameters=&quot;room, objtype&quot; type=&quot;object&quot;&gt;<br/>    l = NewObjectList()<br/>    foreach (o, GetDirectChildren(room)) {<br/>      if (DoesInherit(o, objtype)) {<br/>        list add (l, o)<br/>      }<br/>    }<br/>    return (PickOneObj(l))<br/>  &lt;/function&gt;</code></pre>",
      "PostDate": "2015-11-12T08:20:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38648",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[b:2qkx2juq][i:2qkx2juq]Miscellany[/i:2qkx2juq][/b:2qkx2juq]\n\n[code:2qkx2juq]  &lt;!--\n  This function will tell you which attribute of an object is the highest&#46;\n  The first parameter is the object, the second parameter must be a list of integer parameters&#46;\n  It returns the name of the attribute&#46;\n  \n  s = GetHighestAtt(hat, list)\n  \n  specialisation = GetHighestAtt(player, Split(&quot;strength|agility|intelligence&quot;, &quot;|&quot;))\n  \n  If any attribute is not set or is not a number you will get an error!\n  --&gt;\n  &lt;function name=&quot;GetHighestAtt&quot; parameters=&quot;obj, atts&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;\n    highest = StringListItem(atts, 0)\n    foreach (s, atts) {\n      if (GetInt(obj, s) &gt; GetInt(obj, highest)) {\n        highest = s\n      }\n    }\n    return (highest)\n  &#93;&#93;&gt;&lt;/function&gt;\n  \n  &lt;!--\n  This function will return the next object in the list after the given object&#46;\n  If the given object is at the end,it will return the first object&#46;\n  If the given object is not in the list, null is returned&#46;\n  The first parameter is the list, the second parameter the given object&#46;\n  --&gt;  &lt;function name=&quot;NextInList&quot; parameters=&quot;l, obj&quot; type=&quot;object&quot;&gt;\n    flag = false\n    foreach (o, l) {\n      if (flag) {\n        return (o)\n      }\n      if (o = obj) {\n        flag = true\n      }\n    }\n    if (flag) {\n      return (ObjectListItem(l, 0))\n    }\n    return (null)\n  &lt;/function&gt;\n  \n  [/code:2qkx2juq]",
      "EditableFormat": "bbcode",
      "HTML": "<span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Miscellany</span></span><br/><br/><pre><code>  &lt;!--<br/>  This function will tell you which attribute of an object is the highest&#46;<br/>  The first parameter is the object, the second parameter must be a list of integer parameters&#46;<br/>  It returns the name of the attribute&#46;<br/>  <br/>  s = GetHighestAtt(hat, list)<br/>  <br/>  specialisation = GetHighestAtt(player, Split(&quot;strength|agility|intelligence&quot;, &quot;|&quot;))<br/>  <br/>  If any attribute is not set or is not a number you will get an error!<br/>  --&gt;<br/>  &lt;function name=&quot;GetHighestAtt&quot; parameters=&quot;obj, atts&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    highest = StringListItem(atts, 0)<br/>    foreach (s, atts) {<br/>      if (GetInt(obj, s) &gt; GetInt(obj, highest)) {<br/>        highest = s<br/>      }<br/>    }<br/>    return (highest)<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/>  <br/>  &lt;!--<br/>  This function will return the next object in the list after the given object&#46;<br/>  If the given object is at the end,it will return the first object&#46;<br/>  If the given object is not in the list, null is returned&#46;<br/>  The first parameter is the list, the second parameter the given object&#46;<br/>  --&gt;  &lt;function name=&quot;NextInList&quot; parameters=&quot;l, obj&quot; type=&quot;object&quot;&gt;<br/>    flag = false<br/>    foreach (o, l) {<br/>      if (flag) {<br/>        return (o)<br/>      }<br/>      if (o = obj) {<br/>        flag = true<br/>      }<br/>    }<br/>    if (flag) {<br/>      return (ObjectListItem(l, 0))<br/>    }<br/>    return (null)<br/>  &lt;/function&gt;<br/>  <br/>  </code></pre>",
      "PostDate": "2015-11-12T08:21:08+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38649",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[b:364txxqe][i:364txxqe]String Functions[/i:364txxqe][/b:364txxqe]\n\n[code:364txxqe]  &lt;!--\n  Returns the given number as a string, in Roman numerals&#46; It can handle numbers from one up to a few thousand\n  (there was no zero or negative numbers in those days)&#46;\n  --&gt;\n  &lt;function name=&quot;Roman&quot; parameters=&quot;n&quot; type=&quot;string&quot;&gt;\n    arabic = Split(&quot;1000,900,500,400,100,90,50,40,10,9,5,4,1&quot;, &quot;,&quot;)\n    roman = Split(&quot;M,CM,D,CD,C,XC,L,XL,X,IX,V,IV,I&quot;, &quot;,&quot;)\n    \n    result = &quot;&quot;\n    for(i, 0, 12) {\n      a = ToInt(StringListItem(arabic, i))\n      r = StringListItem(roman, i)\n      while (n &gt;= a) {\n        result = result + r\n        n = n - a\n      }\n    }\n    return (result)\n  &lt;/function&gt;[/code:364txxqe]\n  \n  \n[code:364txxqe]  &lt;!--\n  Returns the given number as a string, in words&#46; It can handle numbers from -1999 to 1999&#46;\n  Note that it consists of an object and a function&#46;\n  --&gt;\n  &lt;object name=&quot;pix_string_struct&quot;&gt;\n    &lt;number_units type=&quot;simplestringlist&quot;&gt;zero;one;two;three;four;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty&lt;/number_units&gt;\n    &lt;number_tens type=&quot;simplestringlist&quot;&gt;twenty;thirty;forty;fifty;sixty;seventy;eighty;ninety&lt;/number_tens&gt;\n  &lt;/object&gt;\n  &lt;function name=&quot;ToWords&quot; parameters=&quot;number&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;\n    if (not TypeOf(number) = &quot;int&quot;) {\n      error (&quot;NumberInWords can only handle ints&quot;)\n    }\n\n    s = &quot;&quot;\n    if (number &lt; 0) {\n      s = &quot;minus &quot;\n      number = -number\n    }\n    if (number &lt;= 1999) {\n      hundreds = number / 100\n      number = number % 100\n      if (hundreds &gt; 0) {\n        s = s + StringListItem(pix_string_struct&#46;number_units, hundreds) + &quot; hundred &quot;\n        if (number &gt; 0) {\n          s = s + &quot;and &quot;\n        }\n      }\n      if (number &lt; 20) {\n        if (not number = 0 or s = &quot;&quot;) {\n          s = s + StringListItem(pix_string_struct&#46;number_units, number)\n        }\n      }\n      else {\n        units = number % 10\n        tens = (number / 10) % 10\n        s = s + StringListItem(pix_string_struct&#46;number_tens, tens - 2)\n        if (not units = 0) {\n          s = s + StringListItem(pix_string_struct&#46;number_units, units)\n        }\n      }\n    }\n    else {\n      s = ToString(number)\n    }\n    return (Trim(s))\n  &#93;&#93;&gt;&lt;/function&gt;[/code:364txxqe]\n  \n  \n[code:364txxqe]  &lt;!--\n  Provides a string of spaces, of the given length&#46; HTML collapses white space, so a simple string of five\n  spaces will be reduced to a single space in the Quest output&#46; This function offers a work-around&#46;\n  --&gt;\n  &lt;function name=&quot;Whitespaces&quot; parameters=&quot;number&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;\n    game&#46;command_successful = True\n    text = &quot;&quot;\n    for (x, 1, number) {\n      text = text+ &quot;&amp;nbsp;&quot;\n    }\n    return (text)\n  &#93;&#93;&gt;&lt;/function&gt;[/code:364txxqe]",
      "EditableFormat": "bbcode",
      "HTML": "<span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">String Functions</span></span><br/><br/><pre><code>  &lt;!--<br/>  Returns the given number as a string, in Roman numerals&#46; It can handle numbers from one up to a few thousand<br/>  (there was no zero or negative numbers in those days)&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;Roman&quot; parameters=&quot;n&quot; type=&quot;string&quot;&gt;<br/>    arabic = Split(&quot;1000,900,500,400,100,90,50,40,10,9,5,4,1&quot;, &quot;,&quot;)<br/>    roman = Split(&quot;M,CM,D,CD,C,XC,L,XL,X,IX,V,IV,I&quot;, &quot;,&quot;)<br/>    <br/>    result = &quot;&quot;<br/>    for(i, 0, 12) {<br/>      a = ToInt(StringListItem(arabic, i))<br/>      r = StringListItem(roman, i)<br/>      while (n &gt;= a) {<br/>        result = result + r<br/>        n = n - a<br/>      }<br/>    }<br/>    return (result)<br/>  &lt;/function&gt;</code></pre><br/>  <br/>  <br/><pre><code>  &lt;!--<br/>  Returns the given number as a string, in words&#46; It can handle numbers from -1999 to 1999&#46;<br/>  Note that it consists of an object and a function&#46;<br/>  --&gt;<br/>  &lt;object name=&quot;pix_string_struct&quot;&gt;<br/>    &lt;number_units type=&quot;simplestringlist&quot;&gt;zero;one;two;three;four;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty&lt;/number_units&gt;<br/>    &lt;number_tens type=&quot;simplestringlist&quot;&gt;twenty;thirty;forty;fifty;sixty;seventy;eighty;ninety&lt;/number_tens&gt;<br/>  &lt;/object&gt;<br/>  &lt;function name=&quot;ToWords&quot; parameters=&quot;number&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    if (not TypeOf(number) = &quot;int&quot;) {<br/>      error (&quot;NumberInWords can only handle ints&quot;)<br/>    }<br/><br/>    s = &quot;&quot;<br/>    if (number &lt; 0) {<br/>      s = &quot;minus &quot;<br/>      number = -number<br/>    }<br/>    if (number &lt;= 1999) {<br/>      hundreds = number / 100<br/>      number = number % 100<br/>      if (hundreds &gt; 0) {<br/>        s = s + StringListItem(pix_string_struct&#46;number_units, hundreds) + &quot; hundred &quot;<br/>        if (number &gt; 0) {<br/>          s = s + &quot;and &quot;<br/>        }<br/>      }<br/>      if (number &lt; 20) {<br/>        if (not number = 0 or s = &quot;&quot;) {<br/>          s = s + StringListItem(pix_string_struct&#46;number_units, number)<br/>        }<br/>      }<br/>      else {<br/>        units = number % 10<br/>        tens = (number / 10) % 10<br/>        s = s + StringListItem(pix_string_struct&#46;number_tens, tens - 2)<br/>        if (not units = 0) {<br/>          s = s + StringListItem(pix_string_struct&#46;number_units, units)<br/>        }<br/>      }<br/>    }<br/>    else {<br/>      s = ToString(number)<br/>    }<br/>    return (Trim(s))<br/>  &#93;&#93;&gt;&lt;/function&gt;</code></pre><br/>  <br/>  <br/><pre><code>  &lt;!--<br/>  Provides a string of spaces, of the given length&#46; HTML collapses white space, so a simple string of five<br/>  spaces will be reduced to a single space in the Quest output&#46; This function offers a work-around&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;Whitespaces&quot; parameters=&quot;number&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    game&#46;command_successful = True<br/>    text = &quot;&quot;<br/>    for (x, 1, number) {<br/>      text = text+ &quot;&amp;nbsp;&quot;<br/>    }<br/>    return (text)<br/>  &#93;&#93;&gt;&lt;/function&gt;</code></pre>",
      "PostDate": "2015-11-12T08:22:11+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "42620",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Some functions for making NPCs wander about. In particular RandomNextUnlockedRoom will return a room the NPC can wander to, i.e. a room choosen at random from the given room, where the exit is visible and not locked.\n[code:34t7pz4k]  &lt;!--\n  Returns a list of exits for the given room&#46;\n  An alternative to ScopeExitsForRoom that will only get the\n  exits for the given room that are unlocked&#46;\n  --&gt;\n  &lt;function name=&quot;ScopeUnlockedExitsForRoom&quot; parameters=&quot;room&quot; type=&quot;objectlist&quot;&gt;\n    result = NewObjectList()\n    foreach (exit, AllExits()) {\n      if (exit&#46;parent = room) {\n        if (exit&#46;visible and not exit&#46;locked) {\n          if (GetBoolean(room, &quot;darklevel&quot;)) {\n            if (GetBoolean(exit, &quot;lightsource&quot;)) {\n              list add (result, exit)\n            }\n          }\n          else {\n            list add (result, exit)\n          }\n        }\n      }\n    }\n    return (result)\n  &lt;/function&gt;[/code:34t7pz4k]\n\n[code:34t7pz4k]  &lt;!--\n  Returns a room picked at random from the rooms that can be directly accessed from this room\n  (i&#46;e&#46;, there is an exit from this room to it)&#46;\n  The returned room could be the other side of a locked door&#46;\n  Returns the given room if there are no such room&#46;\n  --&gt;\n  &lt;function name=&quot;RandomNextRoom&quot; parameters=&quot;currentroom&quot; type=&quot;object&quot;&gt;\n    exts = ScopeExitsForRoom (currentroom)\n    if (ListCount(exts) = 0) {\n      return (currentroom)\n    }\n    exit = ObjectListItem(exts, GetRandomInt(0, ListCount(exts) - 1))\n    return (exit&#46;to)\n  &lt;/function&gt;[/code:34t7pz4k]\n\n[code:34t7pz4k]  &lt;!--\n  Returns a room picked at random from the rooms that can be directly accessed from this room\n  (i&#46;e&#46;, there is an exit from this room to it)&#46;\n  Rooms behind locked doors will not be returned&#46;\n  Returns the given room if there are no such room&#46;\n  --&gt;\n  &lt;function name=&quot;RandomNextUnlockedRoom&quot; parameters=&quot;currentroom&quot; type=&quot;object&quot;&gt;\n    exts = ScopeUnlockedExitsForRoom (currentroom)\n    if (ListCount(exts) = 0) {\n      return (currentroom)\n    }\n    exit = ObjectListItem(exts, GetRandomInt(0, ListCount(exts) - 1))\n    return (exit&#46;to)\n  &lt;/function&gt;[/code:34t7pz4k]",
      "EditableFormat": "bbcode",
      "HTML": "Some functions for making NPCs wander about. In particular RandomNextUnlockedRoom will return a room the NPC can wander to, i.e. a room choosen at random from the given room, where the exit is visible and not locked.<br/><pre><code>  &lt;!--<br/>  Returns a list of exits for the given room&#46;<br/>  An alternative to ScopeExitsForRoom that will only get the<br/>  exits for the given room that are unlocked&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;ScopeUnlockedExitsForRoom&quot; parameters=&quot;room&quot; type=&quot;objectlist&quot;&gt;<br/>    result = NewObjectList()<br/>    foreach (exit, AllExits()) {<br/>      if (exit&#46;parent = room) {<br/>        if (exit&#46;visible and not exit&#46;locked) {<br/>          if (GetBoolean(room, &quot;darklevel&quot;)) {<br/>            if (GetBoolean(exit, &quot;lightsource&quot;)) {<br/>              list add (result, exit)<br/>            }<br/>          }<br/>          else {<br/>            list add (result, exit)<br/>          }<br/>        }<br/>      }<br/>    }<br/>    return (result)<br/>  &lt;/function&gt;</code></pre><br/><br/><pre><code>  &lt;!--<br/>  Returns a room picked at random from the rooms that can be directly accessed from this room<br/>  (i&#46;e&#46;, there is an exit from this room to it)&#46;<br/>  The returned room could be the other side of a locked door&#46;<br/>  Returns the given room if there are no such room&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;RandomNextRoom&quot; parameters=&quot;currentroom&quot; type=&quot;object&quot;&gt;<br/>    exts = ScopeExitsForRoom (currentroom)<br/>    if (ListCount(exts) = 0) {<br/>      return (currentroom)<br/>    }<br/>    exit = ObjectListItem(exts, GetRandomInt(0, ListCount(exts) - 1))<br/>    return (exit&#46;to)<br/>  &lt;/function&gt;</code></pre><br/><br/><pre><code>  &lt;!--<br/>  Returns a room picked at random from the rooms that can be directly accessed from this room<br/>  (i&#46;e&#46;, there is an exit from this room to it)&#46;<br/>  Rooms behind locked doors will not be returned&#46;<br/>  Returns the given room if there are no such room&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;RandomNextUnlockedRoom&quot; parameters=&quot;currentroom&quot; type=&quot;object&quot;&gt;<br/>    exts = ScopeUnlockedExitsForRoom (currentroom)<br/>    if (ListCount(exts) = 0) {<br/>      return (currentroom)<br/>    }<br/>    exit = ObjectListItem(exts, GetRandomInt(0, ListCount(exts) - 1))<br/>    return (exit&#46;to)<br/>  &lt;/function&gt;</code></pre>",
      "PostDate": "2016-05-04T18:05:35+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "42811",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[b:10gf6v34][i:10gf6v34]List Functions[/i:10gf6v34][/b:10gf6v34]\n\n[code:10gf6v34]  &lt;!--\n  Picks the next object in the list after the given, or the first object\n  if the last is given&#46;\n  Returns null if the given object is not in the list&#46;\n  --&gt;\n  &lt;function name=&quot;NextInList&quot; parameters=&quot;l, obj&quot; type=&quot;object&quot;&gt;\n    flag = false\n    foreach (o, l) {\n      if (flag) {\n        return (o)\n      }\n      if (o = obj) {\n        flag = true\n      }\n    }\n    if (flag) {\n      return (ObjectListItem(l, 0))\n    }\n    return (null)\n  &lt;/function&gt;  [/code:10gf6v34]\n  \n  \n[code:10gf6v34]  &lt;!--\n  Returns the given object list as a string in the form a one, a two, a three&#46;\n  Note this is two functions&#46;\n  --&gt;\n  &lt;function name=&quot;List&quot; parameters=&quot;ol&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;\n    if (ListCount(ol) = 0) return (&quot;nothing&quot;)\n    strings = (TypeOf(ol) = &quot;stringlist&quot;)\n    if (ListCount(ol) = 1 and strings) return (StringListItem(ol, 0))\n    if (ListCount(ol) = 1) return (Indefinite(ObjectListItem(ol, 0)))\n\n    if (strings) {\n      sl = ol\n      s2 = StringListItem(ol, ListCount(ol) - 1)\n    }\n    else {\n      sl = NewStringList()\n      foreach (o, ol) {\n        s2 = Indefinite(o)\n        list add (sl, s2)\n      }\n    }\n\n    list remove (sl, s2) \n    s = LCase(Join(sl, &quot;, &quot;) + &quot; and &quot; + s2)\n    return (s)\n  &#93;&#93;&gt;&lt;/function&gt;\n  &lt;function name=&quot;Indefinite&quot; parameters=&quot;o&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;\n      if (DoesInherit(o, &quot;plural&quot;)) {\n        return (LCase(&quot;some &quot; + o&#46;alias))\n      }\n      else {\n        return (LCase(&quot;a &quot; + o&#46;alias))\n      }\n  &#93;&#93;&gt;&lt;/function&gt;[/code:10gf6v34]\n\n  \n[code:10gf6v34]  &lt;!--\n  Two functions that return a list of exits to the given room, excluding invisble exits&#46;\n  The first also excludes locked exits&#46;\n  --&gt;\n  &lt;function name=&quot;ScopeUnlockedExitsTo&quot; parameters=&quot;loc&quot; type=&quot;objectlist&quot;&gt;\n    l = NewObjectList()\n    foreach (o, AllExits ()) {\n      if (o&#46;to = loc and o&#46;visible and not o&#46;locked) {\n        list add (l, o)\n      }\n    }\n    return (l)\n  &lt;/function&gt;\n  &lt;function name=&quot;ScopeAllExitsTo&quot; parameters=&quot;loc&quot; type=&quot;objectlist&quot;&gt;\n    l = NewObjectList()\n    foreach (o, AllExits ()) {\n      if (o&#46;to = loc and o&#46;visible) {\n        list add (l, o)\n      }\n    }\n    return (l)\n  &lt;/function&gt;[/code:10gf6v34]",
      "EditableFormat": "bbcode",
      "HTML": "<span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">List Functions</span></span><br/><br/><pre><code>  &lt;!--<br/>  Picks the next object in the list after the given, or the first object<br/>  if the last is given&#46;<br/>  Returns null if the given object is not in the list&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;NextInList&quot; parameters=&quot;l, obj&quot; type=&quot;object&quot;&gt;<br/>    flag = false<br/>    foreach (o, l) {<br/>      if (flag) {<br/>        return (o)<br/>      }<br/>      if (o = obj) {<br/>        flag = true<br/>      }<br/>    }<br/>    if (flag) {<br/>      return (ObjectListItem(l, 0))<br/>    }<br/>    return (null)<br/>  &lt;/function&gt;  </code></pre><br/>  <br/>  <br/><pre><code>  &lt;!--<br/>  Returns the given object list as a string in the form a one, a two, a three&#46;<br/>  Note this is two functions&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;List&quot; parameters=&quot;ol&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    if (ListCount(ol) = 0) return (&quot;nothing&quot;)<br/>    strings = (TypeOf(ol) = &quot;stringlist&quot;)<br/>    if (ListCount(ol) = 1 and strings) return (StringListItem(ol, 0))<br/>    if (ListCount(ol) = 1) return (Indefinite(ObjectListItem(ol, 0)))<br/><br/>    if (strings) {<br/>      sl = ol<br/>      s2 = StringListItem(ol, ListCount(ol) - 1)<br/>    }<br/>    else {<br/>      sl = NewStringList()<br/>      foreach (o, ol) {<br/>        s2 = Indefinite(o)<br/>        list add (sl, s2)<br/>      }<br/>    }<br/><br/>    list remove (sl, s2) <br/>    s = LCase(Join(sl, &quot;, &quot;) + &quot; and &quot; + s2)<br/>    return (s)<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/>  &lt;function name=&quot;Indefinite&quot; parameters=&quot;o&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;<br/>      if (DoesInherit(o, &quot;plural&quot;)) {<br/>        return (LCase(&quot;some &quot; + o&#46;alias))<br/>      }<br/>      else {<br/>        return (LCase(&quot;a &quot; + o&#46;alias))<br/>      }<br/>  &#93;&#93;&gt;&lt;/function&gt;</code></pre><br/><br/>  <br/><pre><code>  &lt;!--<br/>  Two functions that return a list of exits to the given room, excluding invisble exits&#46;<br/>  The first also excludes locked exits&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;ScopeUnlockedExitsTo&quot; parameters=&quot;loc&quot; type=&quot;objectlist&quot;&gt;<br/>    l = NewObjectList()<br/>    foreach (o, AllExits ()) {<br/>      if (o&#46;to = loc and o&#46;visible and not o&#46;locked) {<br/>        list add (l, o)<br/>      }<br/>    }<br/>    return (l)<br/>  &lt;/function&gt;<br/>  &lt;function name=&quot;ScopeAllExitsTo&quot; parameters=&quot;loc&quot; type=&quot;objectlist&quot;&gt;<br/>    l = NewObjectList()<br/>    foreach (o, AllExits ()) {<br/>      if (o&#46;to = loc and o&#46;visible) {<br/>        list add (l, o)<br/>      }<br/>    }<br/>    return (l)<br/>  &lt;/function&gt;</code></pre>",
      "PostDate": "2016-05-14T11:10:04+00:00",
      "LastEditDate": null
    }
  ]
}
