{
  "Topic": {
    "TopicId": "xxilsihkq0_at3flkleeea",
    "ForumId": "24",
    "Title": "Two games side by side?",
    "LastUpdated": "2023-02-05T06:58:49.8033874Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "5cd50775-7bef-4d7c-b2d6-90534719c06c",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Like, let's say my game is about a spy talking to a wealthy businessman with the aid of Mission Control in their ear. How can I have these two conversations happening simultaneously but on different sides of the screen?",
      "EditableFormat": "markdown",
      "HTML": "<p>Like, let's say my game is about a spy talking to a wealthy businessman with the aid of Mission Control in their ear. How can I have these two conversations happening simultaneously but on different sides of the screen?</p>\n\n",
      "PostDate": "2023-02-05T06:58:49.8033874Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "632be071-2cb8-4be1-bcc7-6b7a49745533",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm… I don't think this should be too hard to achieve. Would probably need some changes to the HTML to add a second output section; and a system for determining which side a given page should be loaded on. Would you want a link to always load a section on the same side; or perhaps have each section tagged with which output area you want it to appear in?\r\n\r\nEither way, it would need quite a bit of tweaking to the HTML document, and to `squiffy.template.js`. Do you have much javascript experience?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm… I don't think this should be too hard to achieve. Would probably need some changes to the HTML to add a second output section; and a system for determining which side a given page should be loaded on. Would you want a link to always load a section on the same side; or perhaps have each section tagged with which output area you want it to appear in?</p>\n<p>Either way, it would need quite a bit of tweaking to the HTML document, and to <code>squiffy.template.js</code>. Do you have much javascript experience?</p>\n\n",
      "PostDate": "2023-02-05T07:37:18.4512183Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1a5c3ef3-c859-418b-a24e-3e203614b3dc",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah! Always great to see you, mrangel!\r\n\r\nI have some experience. I've learned a lot just from making a few games. I'm very experienced with tweaking the HTML and CSS of a game. Although it would take forever for me to come up with solutions, I'm experienced enough to understand what every line of code does and tweak it to my needs.\r\n\r\nI think this interface should possess a few of the same qualities as the inventory interface you created. I've studied that a bit, so we're not in completely new territory!\r\n\r\nI think the project I'm currently working on only calls for links to always load a section on the same side. But afterward, it would be worth exploring the latter option you suggested for our fellow Squiffy community.\r\n\r\nOne other thing I want to point out is that this split screen view should have the ability to be toggled on and off (not by the player. Just by me. I decide when this feature can be used).",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah! Always great to see you, mrangel!</p>\n<p>I have some experience. I've learned a lot just from making a few games. I'm very experienced with tweaking the HTML and CSS of a game. Although it would take forever for me to come up with solutions, I'm experienced enough to understand what every line of code does and tweak it to my needs.</p>\n<p>I think this interface should possess a few of the same qualities as the inventory interface you created. I've studied that a bit, so we're not in completely new territory!</p>\n<p>I think the project I'm currently working on only calls for links to always load a section on the same side. But afterward, it would be worth exploring the latter option you suggested for our fellow Squiffy community.</p>\n<p>One other thing I want to point out is that this split screen view should have the ability to be toggled on and off (not by the player. Just by me. I decide when this feature can be used).</p>\n\n",
      "PostDate": "2023-02-05T08:11:25.8938763Z",
      "LastEditDate": "2023-02-05T08:20:38.8445814Z",
      "link": null
    },
    {
      "PostId": "929cd4e8-2539-4c94-ad86-cfe4dc4c0d93",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I haven't got Squiffy on my new laptop yet; but I suspect adding a second output area to the HTML document should be easy enough.\r\n\r\nI suspect that you'll need to use some code in the click handler to identify which output area the link is in, and set a variable accordingly. Maybe set a squiffy attribute, like `_outputpane`, so that you can use a normal `@set`  line to change it if you want to. Then you could  modify `squiffy.ui.write` and similar functions to make them deal with the appropriate pane.\r\n\r\nIt may also be necessary to make sure that the save and load functions deal with both panes; unless you create them inside the default output container.",
      "EditableFormat": "markdown",
      "HTML": "<p>I haven't got Squiffy on my new laptop yet; but I suspect adding a second output area to the HTML document should be easy enough.</p>\n<p>I suspect that you'll need to use some code in the click handler to identify which output area the link is in, and set a variable accordingly. Maybe set a squiffy attribute, like <code>_outputpane</code>, so that you can use a normal <code>@set</code>  line to change it if you want to. Then you could  modify <code>squiffy.ui.write</code> and similar functions to make them deal with the appropriate pane.</p>\n<p>It may also be necessary to make sure that the save and load functions deal with both panes; unless you create them inside the default output container.</p>\n\n",
      "PostDate": "2023-02-05T14:25:27.2328885Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9ddff8c9-797c-450b-92f0-8ded6f39c410",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So yeah. This feels much trickier than I thought (for me. Probably not for you). My initial instinct is to make something like\r\n\r\n```var rightPane = link.attr('rightPane');```\r\n\r\n```\r\nif (rightPane) {\r\n               appear on the right pane. Duh.\r\n            }\r\n```\r\n\r\nBut I'm also having a bit of trouble creating two divs for these left and right panes that act the same but aren't. I know the solution isn't to duplicate all the code.\r\n\r\nOne of the other things I have to figure out is how to make it so that attributes are shared through both panels but that a section in one panel doesn't disable the section links in the other.\r\n\r\nI think I just need a bit of guidance, and maybe that starts with knowing what I should change about this:\r\n```\r\n<div id=\"squiffy\"></div>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>So yeah. This feels much trickier than I thought (for me. Probably not for you). My initial instinct is to make something like</p>\n<p><code>var rightPane = link.attr('rightPane');</code></p>\n<pre><code>if (rightPane) {\n               appear on the right pane. Duh.\n            }\n</code></pre>\n<p>But I'm also having a bit of trouble creating two divs for these left and right panes that act the same but aren't. I know the solution isn't to duplicate all the code.</p>\n<p>One of the other things I have to figure out is how to make it so that attributes are shared through both panels but that a section in one panel doesn't disable the section links in the other.</p>\n<p>I think I just need a bit of guidance, and maybe that starts with knowing what I should change about this:</p>\n<pre><code>&lt;div id=\"squiffy\"&gt;&lt;/div&gt;\n</code></pre>\n\n",
      "PostDate": "2023-02-06T05:45:45.4570379Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d8ead3b-3c9c-4d02-ac8e-462edaff1cd7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I think I just need a bit of guidance, and maybe that starts with knowing what I should change about this:\r\n> <pre><code>&lt;div id=\"squiffy\">&lt;/div></code></div>\r\n\r\nI'd suggest something like:\r\n```\r\n<div id=\"squiffy\" class=\"outputpane\">\r\n  <div id=\"outputLeft\" class=\"outputpane\"/>\r\n  <div id=\"outputRight\" class=\"outputpane\"/>\r\n</div>\r\n```\r\nAlthough you'll need a bunch of CSS to make the divs appear and look how you want them. I'm thinking that the `outputpane` class can be used later; when a link is clicked, we search for the closest parent with that class.\r\n\r\nSo near the start of the function `handleLink`, you'd have something like:\r\n```\r\n    var outputPane = link.parents().filter('.outputpane').first();\r\n```\r\n(this means that you can also have silly stuff like inline panes if you want; any div which has the `outputpane` class will cause links inside it to be opened inside the div)\r\n\r\nIt looks like this will be more complex than I expected, because you also need to be tracking `currentSection`. Now, there's two ways I can see to do this. One is to drop the tracking of the current section and hunt for the last section in the selected outputpane; the other would be replacing the currentSection variable with a plain object, and changing every place it is used.\r\n\r\nOff the top of my head, I'd suggest adding a function which accesses the current section. So, in `handleLink` you would have something like:\r\n```\r\n    var outputPane = link.parents().filter('.outputpane').first();\r\n    squiffy.set(\"_outputpane\", outputPane.attr(\"id\"));\r\n```\r\n\r\nThen everywhere `currentSection` is accessed, change it to a function. So:\r\n> <pre><code>currentSection.append('&lt;hr/>');</code></pre>\r\n\r\nbecomes:\r\n```\r\nsquiffy.getCurrentSection().append('<hr/>');\r\n```\r\n\r\nThe function would be defined as something like:\r\n```\r\nsquiffy.getCurrentSection = function (pane) {\r\n    if (pane && $('#'+pane).length) {\r\n        squiffy.set(\"_currentpane\", pane);\r\n    } else {\r\n        pane = squiffy.get(\"_currentpane\");\r\n    }\r\n    if (!squiffy.ui.currentSections) {\r\n        squiffy.ui.currentSections = {};\r\n    }\r\n    if (!squiffy.ui.currentSections[pane]) {\r\n        squiffy.ui.currentSections[pane] = $('#'+pane).children('div').last();\r\n    }\r\n    return (squiffy.ui.currentSections[pane]);\r\n};\r\n```\r\n(This changes the current pane if it is given a pane name as an argument; and uses the current one otherwise)\r\n\r\nThen you'd need to modify the function to create a new section:\r\n<pre><code>\r\n    var newSection = function(<b style=\"color: blue\">pane</b>) {\r\n        <b style=\"color: blue\">if (pane && $('#'+pane).length) {\r\n            squiffy.set(\"_currentpane\", pane);\r\n        } else {\r\n            pane = squiffy.get(\"_currentpane\");\r\n        }\r\n        var currentSection = getCurrentSection(pane);</b>\r\n        if (currentSection) {\r\n            disableLink(jQuery('.squiffy-link', currentSection));\r\n            currentSection.find('input[attribute]').each(function () {\r\n                set ($(this).data('attribute'), this.value);\r\n                this.disabled = true;\r\n            });\r\n            currentSection.find(\"[contenteditable][attribute]\").each(function () {\r\n                set ($(this).data('attribute'), this.innerHTML);\r\n                this.disabled = true;\r\n            });\r\n            currentSection.find('textarea[attribute]').each(function () {\r\n                set ($(this).data('attribute'), this.value);\r\n                this.disabled = true;\r\n            });\r\n        }\r\n\r\n        var sectionCount = squiffy.get('_section-count') + 1;\r\n        squiffy.set('_section-count', sectionCount);\r\n        var id = 'squiffy-section-' + sectionCount;\r\n        currentSection = jQuery('&lt;div/>', {\r\n            id: id,\r\n        }).appendTo(<b style=\"color: blue\">$('#'+pane)</b>);\r\n        squiffy.set('_output-section', id);\r\n        <b style=\"color: blue\">if(!squiffy.ui.currentSections) {\r\n            squiffy.ui.currentSections = {};\r\n        }\r\n        squiffy.ui.currentSections[pane] = currentSection;</b>\r\n    };\r\n</code></pre>\r\n\r\nOutside that function, everywhere that `currentSection` is accessed, it would change to `getCurrentSection()`. And you'd also want to change:\r\n<pre><code>    squiffy.story.save = function() {\r\n        squiffy.set('_output', squiffy.ui.output.html());\r\n        <b style=\"color: blue\">squiffy.set('_current_sections', jQuery.map(squiffy.ui.currentSections, (section, pane) => ({pane: pane, section: section.attr('id')}));</b>\r\n    };\r\n\r\n    squiffy.story.load = function() {\r\n        var output = squiffy.get('_output');\r\n        if (!output) return false;\r\n        squiffy.ui.output.html(output);\r\n        <b style=\"color: blue\">squiffy.ui.currentSections = {};\r\n        jQuery.each(squiffy.get('_current_sections'), function(i, v) {\r\n            squiffy.ui.currentSections[v.pane] = jQuery('#'+v.section);\r\n        })</b>\r\n        squiffy.story.section = squiffy.story.sections[squiffy.get('_section')];\r\n        var transition = squiffy.get('_transition');\r\n        if (transition) {\r\n            eval('(' + transition + ')()');\r\n        }\r\n        return true;\r\n    };</code></pre>\r\n\r\nThat's all off the top of my head, not tested. But I hope it makes a decent starting point.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I think I just need a bit of guidance, and maybe that starts with knowing what I should change about this:</p>\n<pre><code>&lt;div id=\"squiffy\"&gt;&lt;/div&gt;</code>\n</pre></blockquote>\n<p>I'd suggest something like:</p>\n<pre><code>&lt;div id=\"squiffy\" class=\"outputpane\"&gt;\n  &lt;div id=\"outputLeft\" class=\"outputpane\"/&gt;\n  &lt;div id=\"outputRight\" class=\"outputpane\"/&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Although you'll need a bunch of CSS to make the divs appear and look how you want them. I'm thinking that the <code>outputpane</code> class can be used later; when a link is clicked, we search for the closest parent with that class.</p>\n<p>So near the start of the function <code>handleLink</code>, you'd have something like:</p>\n<pre><code>    var outputPane = link.parents().filter('.outputpane').first();\n</code></pre>\n<p>(this means that you can also have silly stuff like inline panes if you want; any div which has the <code>outputpane</code> class will cause links inside it to be opened inside the div)</p>\n<p>It looks like this will be more complex than I expected, because you also need to be tracking <code>currentSection</code>. Now, there's two ways I can see to do this. One is to drop the tracking of the current section and hunt for the last section in the selected outputpane; the other would be replacing the currentSection variable with a plain object, and changing every place it is used.</p>\n<p>Off the top of my head, I'd suggest adding a function which accesses the current section. So, in <code>handleLink</code> you would have something like:</p>\n<pre><code>    var outputPane = link.parents().filter('.outputpane').first();\n    squiffy.set(\"_outputpane\", outputPane.attr(\"id\"));\n</code></pre>\n<p>Then everywhere <code>currentSection</code> is accessed, change it to a function. So:</p>\n<blockquote>\n<pre><code>currentSection.append('&lt;hr/&gt;');</code></pre>\n</blockquote>\n<p>becomes:</p>\n<pre><code>squiffy.getCurrentSection().append('&lt;hr/&gt;');\n</code></pre>\n<p>The function would be defined as something like:</p>\n<pre><code>squiffy.getCurrentSection = function (pane) {\n    if (pane &amp;&amp; $('#'+pane).length) {\n        squiffy.set(\"_currentpane\", pane);\n    } else {\n        pane = squiffy.get(\"_currentpane\");\n    }\n    if (!squiffy.ui.currentSections) {\n        squiffy.ui.currentSections = {};\n    }\n    if (!squiffy.ui.currentSections[pane]) {\n        squiffy.ui.currentSections[pane] = $('#'+pane).children('div').last();\n    }\n    return (squiffy.ui.currentSections[pane]);\n};\n</code></pre>\n<p>(This changes the current pane if it is given a pane name as an argument; and uses the current one otherwise)</p>\n<p>Then you'd need to modify the function to create a new section:</p>\n<pre><code>\n    var newSection = function(<b style=\"color: blue\">pane</b>) {\n        <b style=\"color: blue\">if (pane &amp;&amp; $('#'+pane).length) {\n            squiffy.set(\"_currentpane\", pane);\n        } else {\n            pane = squiffy.get(\"_currentpane\");\n        }\n        var currentSection = getCurrentSection(pane);</b>\n        if (currentSection) {\n            disableLink(jQuery('.squiffy-link', currentSection));\n            currentSection.find('input[attribute]').each(function () {\n                set ($(this).data('attribute'), this.value);\n                this.disabled = true;\n            });\n            currentSection.find(\"[contenteditable][attribute]\").each(function () {\n                set ($(this).data('attribute'), this.innerHTML);\n                this.disabled = true;\n            });\n            currentSection.find('textarea[attribute]').each(function () {\n                set ($(this).data('attribute'), this.value);\n                this.disabled = true;\n            });\n        }\n\n        var sectionCount = squiffy.get('_section-count') + 1;\n        squiffy.set('_section-count', sectionCount);\n        var id = 'squiffy-section-' + sectionCount;\n        currentSection = jQuery('&lt;div/&gt;', {\n            id: id,\n        }).appendTo(<b style=\"color: blue\">$('#'+pane)</b>);\n        squiffy.set('_output-section', id);\n        <b style=\"color: blue\">if(!squiffy.ui.currentSections) {\n            squiffy.ui.currentSections = {};\n        }\n        squiffy.ui.currentSections[pane] = currentSection;</b>\n    };\n</code></pre>\n<p>Outside that function, everywhere that <code>currentSection</code> is accessed, it would change to <code>getCurrentSection()</code>. And you'd also want to change:</p>\n<pre><code>    squiffy.story.save = function() {\n        squiffy.set('_output', squiffy.ui.output.html());\n        <b style=\"color: blue\">squiffy.set('_current_sections', jQuery.map(squiffy.ui.currentSections, (section, pane) =&gt; ({pane: pane, section: section.attr('id')}));</b>\n    };\n\n    squiffy.story.load = function() {\n        var output = squiffy.get('_output');\n        if (!output) return false;\n        squiffy.ui.output.html(output);\n        <b style=\"color: blue\">squiffy.ui.currentSections = {};\n        jQuery.each(squiffy.get('_current_sections'), function(i, v) {\n            squiffy.ui.currentSections[v.pane] = jQuery('#'+v.section);\n        })</b>\n        squiffy.story.section = squiffy.story.sections[squiffy.get('_section')];\n        var transition = squiffy.get('_transition');\n        if (transition) {\n            eval('(' + transition + ')()');\n        }\n        return true;\n    };</code></pre>\n<p>That's all off the top of my head, not tested. But I hope it makes a decent starting point.</p>\n\n",
      "PostDate": "2023-02-06T10:12:28.5144807Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "acbe3c53-66b8-4a14-a4ef-7efb92d21b2a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "… that's going to break passages. I think that passage links look for a passage in the *last loaded* section; which means that they'll start breaking if you go to a different section in the other pane.",
      "EditableFormat": "markdown",
      "HTML": "<p>… that's going to break passages. I think that passage links look for a passage in the <em>last loaded</em> section; which means that they'll start breaking if you go to a different section in the other pane.</p>\n\n",
      "PostDate": "2023-02-06T10:15:13.6168085Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "50324a7e-1089-4633-ac11-5cc22d4b8528",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wowzers. Off the top of your head. One day I will be able to do that.\r\n\r\nLet me test it out and fiddle with it, and I'll get back to you on how it works.\r\n\r\nThank you so much for your help!",
      "EditableFormat": "markdown",
      "HTML": "<p>Wowzers. Off the top of your head. One day I will be able to do that.</p>\n<p>Let me test it out and fiddle with it, and I'll get back to you on how it works.</p>\n<p>Thank you so much for your help!</p>\n\n",
      "PostDate": "2023-02-06T17:57:29.5574706Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2af50219-c76f-4e09-9bfd-82607103bdfb",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So one thing that really makes it difficult for me to test this out is that when I preview my game, the divs inside:\r\n```\r\n<div id=\"squiffy\" class=\"outputpane\">\r\n  <div id=\"outputLeft\" class=\"outputpane\"/>\r\n  <div id=\"outputRight\" class=\"outputpane\"/>\r\n</div>\r\n```\r\nJust keep disappearing. I think this might be because when Squiffy restarts a game, it deletes the squiffy-section divs by removing all divs every single div inside div#squiffy. How can I bypass this?",
      "EditableFormat": "markdown",
      "HTML": "<p>So one thing that really makes it difficult for me to test this out is that when I preview my game, the divs inside:</p>\n<pre><code>&lt;div id=\"squiffy\" class=\"outputpane\"&gt;\n  &lt;div id=\"outputLeft\" class=\"outputpane\"/&gt;\n  &lt;div id=\"outputRight\" class=\"outputpane\"/&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Just keep disappearing. I think this might be because when Squiffy restarts a game, it deletes the squiffy-section divs by removing all divs every single div inside div#squiffy. How can I bypass this?</p>\n\n",
      "PostDate": "2023-02-06T19:16:09.6389075Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "675e9daa-b4d5-425c-8105-17c687e00a8c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In the function `squiffy.story.restart` is the line:\r\n>     squiffy.ui.output.html('');\r\n\r\nYou could either put the HTML inside the quotes in that line; or change it to (another top-of-my-head kludge):\r\n\r\n```\r\nsquiffy.ui.output.find(':not(.outputpane):not(:contains(.outputpane))').remove();\r\n```\r\nWhich I think should only remove elements which don't have the `outputpane` class.\r\n\r\nYou probably also want to add\r\n```\r\nsquiffy.ui.currentSections = {};\r\n```\r\nto the restart function, do that it doesn't try to disable links in previous sections that no longer exist.",
      "EditableFormat": "markdown",
      "HTML": "<p>In the function <code>squiffy.story.restart</code> is the line:</p>\n<blockquote>\n<pre><code>squiffy.ui.output.html('');\n</code></pre>\n</blockquote>\n<p>You could either put the HTML inside the quotes in that line; or change it to (another top-of-my-head kludge):</p>\n<pre><code>squiffy.ui.output.find(':not(.outputpane):not(:contains(.outputpane))').remove();\n</code></pre>\n<p>Which I think should only remove elements which don't have the <code>outputpane</code> class.</p>\n<p>You probably also want to add</p>\n<pre><code>squiffy.ui.currentSections = {};\n</code></pre>\n<p>to the restart function, do that it doesn't try to disable links in previous sections that no longer exist.</p>\n\n",
      "PostDate": "2023-02-07T00:21:41.1412546Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "41701966-1fd9-484b-acbc-3fd64b8cde0b",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Huzzah! It worked! Now I can see my two divs! Now it's time to try putting things together.\r\n\r\nThanks again for your quick responses!",
      "EditableFormat": "markdown",
      "HTML": "<p>Huzzah! It worked! Now I can see my two divs! Now it's time to try putting things together.</p>\n<p>Thanks again for your quick responses!</p>\n\n",
      "PostDate": "2023-02-07T02:57:50.3131212Z",
      "LastEditDate": "2023-02-07T02:58:15.723323Z",
      "link": null
    },
    {
      "PostId": "65497e7d-e175-4028-b37b-4be8bdf21803",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So far, all the code seems to fit in nicely. After digging around, I noticed that this line of code\r\n```\r\nsquiffy.set('_current_sections', jQuery.map(squiffy.ui.currentSections, (section, pane) => ({pane: pane, section: section.attr('id')}));\r\n```\r\n\r\nis missing a parenthesis. I think the corrected code should be\r\n\r\n```\r\nsquiffy.set('_current_sections', jQuery.map(squiffy.ui.currentSections, (section, pane) => ({pane: pane, section: section.attr('id')})));\r\n```\r\nAlso, there is a reference error here:\r\n\r\n```\r\nvar currentSection = getCurrentSection(pane);\r\n```\r\nIt says that ```getCurrentSection``` is not defined. I'm unsure where to define it and what to put in that variable. I know we've defined the ```squiffy.getCurrentSection``` function in the ```handleLink``` function.\r\n\r\nAnd when I do get this all to work, how do I assign an output area to a section?",
      "EditableFormat": "markdown",
      "HTML": "<p>So far, all the code seems to fit in nicely. After digging around, I noticed that this line of code</p>\n<pre><code>squiffy.set('_current_sections', jQuery.map(squiffy.ui.currentSections, (section, pane) =&gt; ({pane: pane, section: section.attr('id')}));\n</code></pre>\n<p>is missing a parenthesis. I think the corrected code should be</p>\n<pre><code>squiffy.set('_current_sections', jQuery.map(squiffy.ui.currentSections, (section, pane) =&gt; ({pane: pane, section: section.attr('id')})));\n</code></pre>\n<p>Also, there is a reference error here:</p>\n<pre><code>var currentSection = getCurrentSection(pane);\n</code></pre>\n<p>It says that <code>getCurrentSection</code> is not defined. I'm unsure where to define it and what to put in that variable. I know we've defined the <code>squiffy.getCurrentSection</code> function in the <code>handleLink</code> function.</p>\n<p>And when I do get this all to work, how do I assign an output area to a section?</p>\n\n",
      "PostDate": "2023-02-07T05:34:01.5801885Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ea7e50be-a94d-4c8a-b458-0564a63c9a77",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> It says that getCurrentSection is not defined. \r\n\r\nAh… it should be squiffy.getCurrentSection, the same as the other ones. That's me being careless.\r\n\r\n> And when I do get this all to work, how do I assign an output area to a section?\r\n\r\nI've thought again about the restart issue. It might actually make more sense to put the divs for the two panes in the first section. So your first section would look something like:\r\n```\r\n<div id=\"outputLeft\" class=\"outputpane\">\r\nInitial contents of left pane goes here.\r\n</div>\r\n<div id=\"outputRighr\" class=\"outputpane\">\r\nInitial contents of right pane goes here.\r\n</div>\r\n```\r\nThat way, they automatically come out when the game is restarted; and both panes can have something in them. Clicking a link in either pane will cause the target section to open in the same pane. And if you want to override that, I think you could do something like:\r\n\r\n```\r\n@set _outputpane = outputLeft\r\n```\r\n(Assuming I've not got confused about the order things are evaluated in)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>It says that getCurrentSection is not defined.</p>\n</blockquote>\n<p>Ah… it should be squiffy.getCurrentSection, the same as the other ones. That's me being careless.</p>\n<blockquote>\n<p>And when I do get this all to work, how do I assign an output area to a section?</p>\n</blockquote>\n<p>I've thought again about the restart issue. It might actually make more sense to put the divs for the two panes in the first section. So your first section would look something like:</p>\n<pre><code>&lt;div id=\"outputLeft\" class=\"outputpane\"&gt;\nInitial contents of left pane goes here.\n&lt;/div&gt;\n&lt;div id=\"outputRighr\" class=\"outputpane\"&gt;\nInitial contents of right pane goes here.\n&lt;/div&gt;\n</code></pre>\n<p>That way, they automatically come out when the game is restarted; and both panes can have something in them. Clicking a link in either pane will cause the target section to open in the same pane. And if you want to override that, I think you could do something like:</p>\n<pre><code>@set _outputpane = outputLeft\n</code></pre>\n<p>(Assuming I've not got confused about the order things are evaluated in)</p>\n\n",
      "PostDate": "2023-02-07T12:27:54.760221Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ac7a470b-0e95-49db-a257-cadaada8d6ac",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Gah! I’ve been messing with this on and off for a while, but there’s still a lot of errors. I think I’ll post a work in progress demo very soon that I can link into this forum so you can take a look at what I have so far.",
      "EditableFormat": "markdown",
      "HTML": "<p>Gah! I’ve been messing with this on and off for a while, but there’s still a lot of errors. I think I’ll post a work in progress demo very soon that I can link into this forum so you can take a look at what I have so far.</p>\n\n",
      "PostDate": "2023-02-23T19:33:25.3781679Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2b01e723-e7e1-4953-a80a-60e8470ca3f9",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, I made a demo.\r\n\r\nhttps://textadventures.co.uk/games/view/osxyqeno50oglnxr3qo9dq/two-games-side-by-side-test\r\n\r\nThe only problem is nothing is showing up.\r\n\r\nThis is not a publishing bug. It's just the way it is.\r\n\r\nThis is the bugless version that I've composited. There shouldn't be any bugs other than you can't see the game. But I can't make much progress given my lack of JS knowledge.\r\n\r\nAgain, it is always greatly appreciated if you can help in any way. Thank you for what you have done so far!",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, I made a demo.</p>\n<p>https://textadventures.co.uk/games/view/osxyqeno50oglnxr3qo9dq/two-games-side-by-side-test</p>\n<p>The only problem is nothing is showing up.</p>\n<p>This is not a publishing bug. It's just the way it is.</p>\n<p>This is the bugless version that I've composited. There shouldn't be any bugs other than you can't see the game. But I can't make much progress given my lack of JS knowledge.</p>\n<p>Again, it is always greatly appreciated if you can help in any way. Thank you for what you have done so far!</p>\n\n",
      "PostDate": "2023-04-17T08:01:08.673415Z",
      "LastEditDate": "2023-04-17T08:01:59.1959454Z",
      "link": null
    },
    {
      "PostId": "759df49a-5a46-4d63-b856-66c285389d6a",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel's [DeSquiff](http://angelverse.mrangel.info/desquiff.html) tool is not even seeing this as a Squiffy game, if that provides any clues. I see you're using Squiffy 5.0.0 for for OS X. I had such a janky and disappointing time with that when I used to use it. ",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel's <a href=\"http://angelverse.mrangel.info/desquiff.html\">DeSquiff</a> tool is not even seeing this as a Squiffy game, if that provides any clues. I see you're using Squiffy 5.0.0 for for OS X. I had such a janky and disappointing time with that when I used to use it.</p>\n\n",
      "PostDate": "2023-04-17T23:35:00.7494545Z",
      "LastEditDate": "2023-04-17T23:37:49.408843Z",
      "link": null
    },
    {
      "PostId": "13f8513a-e188-4128-9ac8-5bfc5a7d1cd9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is confusing me a lot; I'm not sure why the game isn't working, but the issue with desquiff is (probably?) a separate thing.\r\n\r\nThe weird thing is that I can't get any kind of output from it. I tried modifying a copy of it to add debug statements, and nothing seems to be coming out; which I really can't understand.\r\n\r\nI'll keep on trying this when I've got a little more time (really behind schedule with work this month). I'll try to remember to keep this on my \"to do\" list.",
      "EditableFormat": "markdown",
      "HTML": "<p>This is confusing me a lot; I'm not sure why the game isn't working, but the issue with desquiff is (probably?) a separate thing.</p>\n<p>The weird thing is that I can't get any kind of output from it. I tried modifying a copy of it to add debug statements, and nothing seems to be coming out; which I really can't understand.</p>\n<p>I'll keep on trying this when I've got a little more time (really behind schedule with work this month). I'll try to remember to keep this on my \"to do\" list.</p>\n\n",
      "PostDate": "2023-04-18T11:57:43.7045142Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "25c795d9-ee3a-4e42-9ea2-feeb02d0d19e",
      "UserId": 312695,
      "Username": "broadwaydude",
      "AvatarUrl": "https://i.imgur.com/ZtaIo6Yb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you, fellers! Means a lot to me. Hopefully, some really cool things can come about from this!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you, fellers! Means a lot to me. Hopefully, some really cool things can come about from this!</p>\n\n",
      "PostDate": "2023-04-18T17:13:36.7681626Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
