{
  "Topic": {
    "TopicId": "ilyf8bdrs0eeb5twycqw6a",
    "ForumId": "10",
    "Title": "RegEx Help on a magic spell",
    "LastUpdated": "2020-04-22T17:12:54.0993998Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "93cce045-c2a6-48b9-a86f-1c73d02f8f3b",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So... I want to cast a spell ON something specific instead of the player just saying it in random rooms to see what happens.\r\n\r\nIn a RegEx I have typed this:\r\n```\r\n^(cast|say|speak) (transform|transform spell) (on|at|to|toward|towards) (?<object>.*)$\r\n```\r\nand that will account for JUST ABOUT everything I want.  \"Cast transform on cat\" for example. \r\n\r\nI have the following code to account for spell stuff.  Don't worry... it's a little more in the actual game itself =)\r\n```\r\nif (GetBoolean(Heavy Spell Book, \"TransformLearned\")) {\r\n  if (object = cat2) {\r\n    if (ListContains(ScopeVisible(), cat2)) {\r\n      msg (\"You say \\\"transform\\\" in the direction of the cat and... POOF!  It has magically turned into a dog!\")\r\n      MakeObjectInvisible (cat2)\r\n      MakeObjectVisible (dog1)\r\n    }\r\n    else {\r\n      msg (\"I don't see a cat here.\")\r\n    }\r\n  }\r\n  else if (object = dog1) {\r\n    msg (\"You say \\\"transform\\\" in the direction of the dog and... POOF!  It has magically turned into a cat!\")\r\n    MakeObjectInvisible (dog1)\r\n    MakeObjectVisible (cat2)\r\n  }\r\n  else {\r\n    msg (\"You cast transform in that direction and it does nothing.\")\r\n  }\r\n}\r\nelse {\r\n  msg (\"It doesn't appear you know that spell.\")\r\n}\r\n```\r\nNow... my question is this.  What if the player wants to type <i>  transform cat</i>\r\n?\r\nSeems reasonable.  How would I alter this RegEx to account for that?  Or would I have to create another RegEx to deal with that verbage?\r\n\r\nOh... and this... does my RegEx account for capitalization?  I think it does, but...?\r\nDang... SORRY.  Also, how could I handle a player input like:  <i>cast transform</i> but not followed by a prep and noun.\r\n\r\nThanks in advance!",
      "EditableFormat": "markdown",
      "HTML": "<p>So... I want to cast a spell ON something specific instead of the player just saying it in random rooms to see what happens.</p>\n<p>In a RegEx I have typed this:</p>\n<pre><code>^(cast|say|speak) (transform|transform spell) (on|at|to|toward|towards) (?&lt;object&gt;.*)$\n</code></pre>\n<p>and that will account for JUST ABOUT everything I want.  \"Cast transform on cat\" for example.</p>\n<p>I have the following code to account for spell stuff.  Don't worry... it's a little more in the actual game itself =)</p>\n<pre><code>if (GetBoolean(Heavy Spell Book, \"TransformLearned\")) {\n  if (object = cat2) {\n    if (ListContains(ScopeVisible(), cat2)) {\n      msg (\"You say \\\"transform\\\" in the direction of the cat and... POOF!  It has magically turned into a dog!\")\n      MakeObjectInvisible (cat2)\n      MakeObjectVisible (dog1)\n    }\n    else {\n      msg (\"I don't see a cat here.\")\n    }\n  }\n  else if (object = dog1) {\n    msg (\"You say \\\"transform\\\" in the direction of the dog and... POOF!  It has magically turned into a cat!\")\n    MakeObjectInvisible (dog1)\n    MakeObjectVisible (cat2)\n  }\n  else {\n    msg (\"You cast transform in that direction and it does nothing.\")\n  }\n}\nelse {\n  msg (\"It doesn't appear you know that spell.\")\n}\n</code></pre>\n<p>Now... my question is this.  What if the player wants to type <i>  transform cat</i><br>\n?<br>\nSeems reasonable.  How would I alter this RegEx to account for that?  Or would I have to create another RegEx to deal with that verbage?</p>\n<p>Oh... and this... does my RegEx account for capitalization?  I think it does, but...?<br>\nDang... SORRY.  Also, how could I handle a player input like:  <i>cast transform</i> but not followed by a prep and noun.</p>\n<p>Thanks in advance!</p>\n\n",
      "PostDate": "2020-04-22T17:12:54.0993998Z",
      "LastEditDate": "2020-04-22T17:35:17.7990968Z",
      "link": null
    },
    {
      "PostId": "62ac0dbe-41c2-44a1-8670-1655a84f7cdf",
      "UserId": 442719,
      "Username": "Phadion",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm extremely new to quest, so I'm sorry if this seems like a dumb question, but why are you using a RegEx if you're only implementing one object in it? You could make verbs on the different objects instead. If you're using a RegEx to avoid having to account for the many ways a player could input the command, I guess I can understand that, but if you used verbs, you would only have to input the different ways the player could say it once, and then copy and paste them for other objects. What I mean is, for example, you could make a verb under the object \"cat2\" called \"cast transform on; cast transform spell on; say transform spell on\" ... Etc., one of which you could make simply \"transform\". In my very limited experience with RegEx (literally just experimenting with it today after reading your post) I've found it more trouble than it's worth, and if I was trying what you are, this is what I would do. Hope this Helps, and I'm sorry if it doesn't make sense, some times I have trouble articulating my thoughts.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm extremely new to quest, so I'm sorry if this seems like a dumb question, but why are you using a RegEx if you're only implementing one object in it? You could make verbs on the different objects instead. If you're using a RegEx to avoid having to account for the many ways a player could input the command, I guess I can understand that, but if you used verbs, you would only have to input the different ways the player could say it once, and then copy and paste them for other objects. What I mean is, for example, you could make a verb under the object \"cat2\" called \"cast transform on; cast transform spell on; say transform spell on\" ... Etc., one of which you could make simply \"transform\". In my very limited experience with RegEx (literally just experimenting with it today after reading your post) I've found it more trouble than it's worth, and if I was trying what you are, this is what I would do. Hope this Helps, and I'm sorry if it doesn't make sense, some times I have trouble articulating my thoughts.</p>\n\n",
      "PostDate": "2020-04-22T19:55:45.4388479Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "45b20142-5b76-4da1-aab5-3deab95a2988",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would have tried `^(cast|say|speak|use|) ?transform( spell)? (on |at |to |towards? |)(?<object>.+)$`. You don't really lose anything like that. The pattern matches non-gramatical phrases like \"transform at cat\" and \"cast transform cat\"; but I think that shouldn't be a problem because a player typing those phrases is unlikely to mean any other command.\r\n\r\n@Phadion: Why does it make any difference if it's a verb? The pattern works the same anyway.\r\n\r\nIt's perfectly permissible to have a verb with a pattern like `cast transform on;cast transform at;cast transform to;cast transform toward;cast transform towards;cast transform spell on;cast transform spell at;cast transform spell to;cast transform spell toward;cast transform spell towards;say transform on;say transform at;say transform to;say transform toward;say transform towards;say transform spell on;say transform spell at;say transform spell to;say transform spell toward;say transform spell towards;speak transform on;speak transform at;speak transform to;speak transform toward;speak transform towards;speak transform spell on;speak transform spell at;speak transform spell to;speak transform spell toward;speak transform spell towards` (which is exactly the same as XanMag's original regex).\r\n\r\nBut what's the benefit of doing it that way? If you think of another word to put in later – like you realise players are going to try \"use transform spell on cat\" – then it'll take you at least a few minutes to update it. The power of using a regex in that case is that you can mix and match the different elements, and you don't need to think of every possible combination someone might use them in. And it's also easier to make changes to.\r\n\r\nBut really, you're talking about the difference between simple pattern and regexp pattern. Verbs vs regular commands is a separate issue. (I likely would use a verb in this case; but I'd still keep the regex pattern)\r\n\r\n<details><summary>If you're really curious, click here to see the non-regex version of the line I put at the beginning of this post</summary>\r\n\r\n<code>cast transform on;cast transform at;cast transform to;cast transform toward;cast transform towards;cast transform;cast transform spell on;cast transform spell at;cast transform spell to;cast transform spell toward;cast transform spell towards;cast transform spell;say transform on;say transform at;say transform to;say transform toward;say transform towards;say transform;say transform spell on;say transform spell at;say transform spell to;say transform spell toward;say transform spell towards;say transform spell;speak transform on;speak transform at;speak transform to;speak transform toward;speak transform towards;speak transform;speak transform spell on;speak transform spell at;speak transform spell to;speak transform spell toward;speak transform spell towards;speak transform spell;use transform on;use transform at;use transform to;use transform toward;use transform towards;use transform;use transform spell on;use transform spell at;use transform spell to;use transform spell toward;use transform spell towards;use transform spell;transform on;transform at;transform to;transform toward;transform towards;transform;transform spell on;transform spell at;transform spell to;transform spell toward;transform spell towards;transform spell</code>\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>I would have tried <code>^(cast|say|speak|use|) ?transform( spell)? (on |at |to |towards? |)(?&lt;object&gt;.+)$</code>. You don't really lose anything like that. The pattern matches non-gramatical phrases like \"transform at cat\" and \"cast transform cat\"; but I think that shouldn't be a problem because a player typing those phrases is unlikely to mean any other command.</p>\n<p>@Phadion: Why does it make any difference if it's a verb? The pattern works the same anyway.</p>\n<p>It's perfectly permissible to have a verb with a pattern like <code>cast transform on;cast transform at;cast transform to;cast transform toward;cast transform towards;cast transform spell on;cast transform spell at;cast transform spell to;cast transform spell toward;cast transform spell towards;say transform on;say transform at;say transform to;say transform toward;say transform towards;say transform spell on;say transform spell at;say transform spell to;say transform spell toward;say transform spell towards;speak transform on;speak transform at;speak transform to;speak transform toward;speak transform towards;speak transform spell on;speak transform spell at;speak transform spell to;speak transform spell toward;speak transform spell towards</code> (which is exactly the same as XanMag's original regex).</p>\n<p>But what's the benefit of doing it that way? If you think of another word to put in later – like you realise players are going to try \"use transform spell on cat\" – then it'll take you at least a few minutes to update it. The power of using a regex in that case is that you can mix and match the different elements, and you don't need to think of every possible combination someone might use them in. And it's also easier to make changes to.</p>\n<p>But really, you're talking about the difference between simple pattern and regexp pattern. Verbs vs regular commands is a separate issue. (I likely would use a verb in this case; but I'd still keep the regex pattern)</p>\n<details><summary>If you're really curious, click here to see the non-regex version of the line I put at the beginning of this post</summary>\n<p><code>cast transform on;cast transform at;cast transform to;cast transform toward;cast transform towards;cast transform;cast transform spell on;cast transform spell at;cast transform spell to;cast transform spell toward;cast transform spell towards;cast transform spell;say transform on;say transform at;say transform to;say transform toward;say transform towards;say transform;say transform spell on;say transform spell at;say transform spell to;say transform spell toward;say transform spell towards;say transform spell;speak transform on;speak transform at;speak transform to;speak transform toward;speak transform towards;speak transform;speak transform spell on;speak transform spell at;speak transform spell to;speak transform spell toward;speak transform spell towards;speak transform spell;use transform on;use transform at;use transform to;use transform toward;use transform towards;use transform;use transform spell on;use transform spell at;use transform spell to;use transform spell toward;use transform spell towards;use transform spell;transform on;transform at;transform to;transform toward;transform towards;transform;transform spell on;transform spell at;transform spell to;transform spell toward;transform spell towards;transform spell</code></p>\n</details>\n\n",
      "PostDate": "2020-04-22T20:34:38.6314867Z",
      "LastEditDate": "2020-04-22T20:37:11.3877447Z",
      "link": null
    },
    {
      "PostId": "afbfb292-6e96-47b5-96bc-3316bf2e60f8",
      "UserId": 442719,
      "Username": "Phadion",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Like I said, I'm new to quest, and today was the first time I have ever tried to implement RegEx, and I personally found too many errors come up then I wanted to deal with. I was simply saying what I would have done in the situation with my limited understanding of quest. Perhaps I should not have responded to this before having full understanding of regex, so I'm sorry.",
      "EditableFormat": "markdown",
      "HTML": "<p>Like I said, I'm new to quest, and today was the first time I have ever tried to implement RegEx, and I personally found too many errors come up then I wanted to deal with. I was simply saying what I would have done in the situation with my limited understanding of quest. Perhaps I should not have responded to this before having full understanding of regex, so I'm sorry.</p>\n\n",
      "PostDate": "2020-04-22T20:50:18.2868224Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "98846f5c-911a-4187-a445-2a3a445d8c57",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@Phadion - no problem.  I used to do that in the past and I ended up running into errors.  Either I would leave out an option(s) (which forces the player to guess the verbage), duplicate a verb option, or I'd run into errors with pre-formatted verbs.  All of which threw up some error messages.  Using RegEx, even though the writing of it is more difficult, I did run into fewer issues.  Continue offering suggestions here though even if you are not confident.  I've been around FOREVER and I offer suggestions that are way more...different... than what most people suggest.  There are a LOT of different ways to skin a cat with code so your way may work for some and not others.\r\n\r\n@mrangel - I have never seen that used before - ?transform( spell)? .  I think I may just copy-paste what you suggested and use that.  That will account for <i> transform cat</i> and all the other reasonable options mentioned above?  And then all I would have to do is to use an If expression object = [object name] then run scripts for any object I want a specific response to.  Also, what would happen if the player just typed <i>cast transform</i> in any random room?  \r\n\r\nEDIT:  I think I will make a global <i>cast transform</i> command with a generic response (that is, unless I hear back about a better idea.)  Or will that interrupt the RegEx?\r\n\r\nThanks again!",
      "EditableFormat": "markdown",
      "HTML": "<p>@Phadion - no problem.  I used to do that in the past and I ended up running into errors.  Either I would leave out an option(s) (which forces the player to guess the verbage), duplicate a verb option, or I'd run into errors with pre-formatted verbs.  All of which threw up some error messages.  Using RegEx, even though the writing of it is more difficult, I did run into fewer issues.  Continue offering suggestions here though even if you are not confident.  I've been around FOREVER and I offer suggestions that are way more...different... than what most people suggest.  There are a LOT of different ways to skin a cat with code so your way may work for some and not others.</p>\n<p>@mrangel - I have never seen that used before - ?transform( spell)? .  I think I may just copy-paste what you suggested and use that.  That will account for <i> transform cat</i> and all the other reasonable options mentioned above?  And then all I would have to do is to use an If expression object = [object name] then run scripts for any object I want a specific response to.  Also, what would happen if the player just typed <i>cast transform</i> in any random room?</p>\n<p>EDIT:  I think I will make a global <i>cast transform</i> command with a generic response (that is, unless I hear back about a better idea.)  Or will that interrupt the RegEx?</p>\n<p>Thanks again!</p>\n\n",
      "PostDate": "2020-04-22T21:16:47.4101955Z",
      "LastEditDate": "2020-04-22T21:55:47.2471635Z",
      "link": null
    },
    {
      "PostId": "d5376f9f-8e1f-49ce-8b51-5cd881d800c9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">  I have never seen that used before - ?transform( spell)?\r\n\r\nQuestion marks make the previous character optional. As the first set of brackets `(cast|say|speak|use|)` has a 'nothing' option at the end, I put a `?` after the space that follows it - because a player typing \"transform cat\" won't have a space before \"transform\", but a player typing \"cast transform cat\" will have a space. It would have been equivalent to write `(cast|say|speak|use|) ?transform` or `(cast |say |speak |use |)transform` - but the former seems more natural to me.\r\n\r\nIn the case of `summon( spell)?`, the question mark makes the part in parentheses optional, so it matches either \"summon\" or \"summon spell\"; and later on I did the same with `towards?`, making the 's' optional so it matches either \"towards\" or \"toward\",\r\n\r\n> Also, what would happen if the player just typed cast transform in any random room?\r\n\r\nIt wouldn't match. There's a non-optional space in the pattern (the one after `( spell)?`) - so there has to be something after that.\r\n\r\nIf you wanted \"cast transform\" to work, you could use: `^(cast|say|speak|use|) ?transform( spell)?( (on |at |to |towards? |)(?<object>.+))?$` - making the space, preposition, and object all optional. In that case, you would have to check `if (IsDefined (\"object\")) {` in your function first. If a variable pattern is inside an optional part, it will be completely undefined so comparing it to anything (even `null`) is a fatal error.\r\n\r\nHope I'm making sense here.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I have never seen that used before - ?transform( spell)?</p>\n</blockquote>\n<p>Question marks make the previous character optional. As the first set of brackets <code>(cast|say|speak|use|)</code> has a 'nothing' option at the end, I put a <code>?</code> after the space that follows it - because a player typing \"transform cat\" won't have a space before \"transform\", but a player typing \"cast transform cat\" will have a space. It would have been equivalent to write <code>(cast|say|speak|use|) ?transform</code> or <code>(cast |say |speak |use |)transform</code> - but the former seems more natural to me.</p>\n<p>In the case of <code>summon( spell)?</code>, the question mark makes the part in parentheses optional, so it matches either \"summon\" or \"summon spell\"; and later on I did the same with <code>towards?</code>, making the 's' optional so it matches either \"towards\" or \"toward\",</p>\n<blockquote>\n<p>Also, what would happen if the player just typed cast transform in any random room?</p>\n</blockquote>\n<p>It wouldn't match. There's a non-optional space in the pattern (the one after <code>( spell)?</code>) - so there has to be something after that.</p>\n<p>If you wanted \"cast transform\" to work, you could use: <code>^(cast|say|speak|use|) ?transform( spell)?( (on |at |to |towards? |)(?&lt;object&gt;.+))?$</code> - making the space, preposition, and object all optional. In that case, you would have to check <code>if (IsDefined (\"object\")) {</code> in your function first. If a variable pattern is inside an optional part, it will be completely undefined so comparing it to anything (even <code>null</code>) is a fatal error.</p>\n<p>Hope I'm making sense here.</p>\n\n",
      "PostDate": "2020-04-22T22:10:03.4804931Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dc6bbbff-b8f0-406b-a462-5577a79829c0",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So... lol... what I'm hearing is \"Make a global command to handle the lazy adventurer who wants to type <i>cast transform</i> in random places just to see what happens\".\r\n\r\nPrint message \"Just walking around willy-nillying spells is apt to lead to failure or your death.  Why don't you trying casting that spell <b>ON</b> something?",
      "EditableFormat": "markdown",
      "HTML": "<p>So... lol... what I'm hearing is \"Make a global command to handle the lazy adventurer who wants to type <i>cast transform</i> in random places just to see what happens\".</p>\n<p>Print message \"Just walking around willy-nillying spells is apt to lead to failure or your death.  Why don't you trying casting that spell <b>ON</b> something?</p>\n\n",
      "PostDate": "2020-04-22T23:22:39.9046442Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1315715b-f1a5-4ad2-803b-533f082e5242",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mrangel, how do you know to do these things in Quest?  Is it JavaScript or HTML that you have experimented with in Quest?  Perhaps you have dissected the Quest core? I'm sure there is no Quest tutorial like this. Or is there? \r\nEither way, it is sure nice when code like this is shared.",
      "EditableFormat": "markdown",
      "HTML": "<p>Mrangel, how do you know to do these things in Quest?  Is it JavaScript or HTML that you have experimented with in Quest?  Perhaps you have dissected the Quest core? I'm sure there is no Quest tutorial like this. Or is there?<br>\nEither way, it is sure nice when code like this is shared.</p>\n\n",
      "PostDate": "2020-04-23T13:59:13.8903728Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "40323f98-5b15-47e6-a862-1977db4cd760",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For most of the Quest stuff, I skimmed over the core code when trying to answer people's questions on here. I find the source easier to understand than the documentation in a lot of cases.\r\n\r\nIn the case of regular expressions, they're used in a lot of languages. My preferred programming language, Perl, uses them everywhere; as does Javascript.\r\n\r\nI actually have a book somewhere titled _Mastering Regular Expressions_; 544 pages in paperback. The things you use them for in Quest barely scratch the surface (and Quest sadly doesn't support all of their capabilities).",
      "EditableFormat": "markdown",
      "HTML": "<p>For most of the Quest stuff, I skimmed over the core code when trying to answer people's questions on here. I find the source easier to understand than the documentation in a lot of cases.</p>\n<p>In the case of regular expressions, they're used in a lot of languages. My preferred programming language, Perl, uses them everywhere; as does Javascript.</p>\n<p>I actually have a book somewhere titled <em>Mastering Regular Expressions</em>; 544 pages in paperback. The things you use them for in Quest barely scratch the surface (and Quest sadly doesn't support all of their capabilities).</p>\n\n",
      "PostDate": "2020-04-23T15:43:41.9460907Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
