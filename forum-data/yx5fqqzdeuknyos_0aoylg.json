{
  "Topic": {
    "TopicId": "yx5fqqzdeuknyos_0aoylg",
    "ForumId": "10",
    "Title": "Require another object ",
    "LastUpdated": "2021-10-28T16:33:49.6225775Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "90f5463b-dcf8-4acc-8f19-be745a76fdbb",
      "UserId": 32920,
      "Username": "Father",
      "AvatarUrl": "http://i.imgur.com/ogRXH9lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I realise this is a basic question for code savvy people but. \r\nIs it possible for a non coder to eliminate the list of miscellaneous objects that appear when setting up a verb with require another item \r\nI.e. . hit man\r\nWith what object \r\n1 table\r\n2 door\r\n3 wallpaper \r\nAnd just restrict it to certain objects   ( club?) or say there’s nothing suitable.\r\n\r\n)",
      "EditableFormat": "markdown",
      "HTML": "<p>I realise this is a basic question for code savvy people but.<br>\nIs it possible for a non coder to eliminate the list of miscellaneous objects that appear when setting up a verb with require another item<br>\nI.e. . hit man<br>\nWith what object<br>\n1 table<br>\n2 door<br>\n3 wallpaper<br>\nAnd just restrict it to certain objects   ( club?) or say there’s nothing suitable.</p>\n<p>)</p>\n\n",
      "PostDate": "2021-10-28T16:33:49.6225775Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "684e383b-aa3e-4023-87e3-6721a9acdcc5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would expect this a standard feature, but it doesn't seem to be. This is one of the reasons I would disagree with the way `Getcope` was split up in Quest 5.8 – I can see a way to handle it more logically, but it would mean replacing a couple of the core functions. (I would have made it so that multiverbs can have a `scope` attribute in the same way commands do, to specify what they can be used with)\r\n\r\nIt should be possible to write up a command script that you can copy and paste for this; but I don't have time to work on that right now (as I haven't finished writing a chapter that's supposed to be posted today). But if you want me to work on it, I can give it a shot when I have a little more time.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would expect this a standard feature, but it doesn't seem to be. This is one of the reasons I would disagree with the way <code>Getcope</code> was split up in Quest 5.8 – I can see a way to handle it more logically, but it would mean replacing a couple of the core functions. (I would have made it so that multiverbs can have a <code>scope</code> attribute in the same way commands do, to specify what they can be used with)</p>\n<p>It should be possible to write up a command script that you can copy and paste for this; but I don't have time to work on that right now (as I haven't finished writing a chapter that's supposed to be posted today). But if you want me to work on it, I can give it a shot when I have a little more time.</p>\n\n",
      "PostDate": "2021-10-28T22:05:44.062254Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e2053df2-0f87-4cbe-8373-a7d585ba523d",
      "UserId": 195121,
      "Username": "iantommo",
      "AvatarUrl": "https://i.imgur.com/NUcwrIKb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The way I do stuff is easier and simple :\r\n\r\nMake a new global command (the very top \"command\" menu on the online left menu bar list) called : hit man\r\n\r\nI tend to add additional possible things people may type onto the 1 command i.e. hit man;punch man;kill man;kick man\r\n\r\nNow you have control of \"hit man\" as a command.\r\n\r\nSo you decide what happens and what conditions there are by using the choice of multiple \"scripts\" available. \"if\" scripts are very handy.\r\n\r\ne.g. if object \"bat\"is not visible....print message : You need a weapon (bat) to hurt this person. He is too powerful to fight with your bare hands.\r\n\r\nYou can have fun deciding the rules of what a player can and cannot do based on your scripts guiding the player.\r\n\r\nHope that helps. ",
      "EditableFormat": "markdown",
      "HTML": "<p>The way I do stuff is easier and simple :</p>\n<p>Make a new global command (the very top \"command\" menu on the online left menu bar list) called : hit man</p>\n<p>I tend to add additional possible things people may type onto the 1 command i.e. hit man;punch man;kill man;kick man</p>\n<p>Now you have control of \"hit man\" as a command.</p>\n<p>So you decide what happens and what conditions there are by using the choice of multiple \"scripts\" available. \"if\" scripts are very handy.</p>\n<p>e.g. if object \"bat\"is not visible....print message : You need a weapon (bat) to hurt this person. He is too powerful to fight with your bare hands.</p>\n<p>You can have fun deciding the rules of what a player can and cannot do based on your scripts guiding the player.</p>\n<p>Hope that helps.</p>\n\n",
      "PostDate": "2021-10-29T11:22:01.9075837Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bbef6082-e424-401a-8d21-1e0ca853f66b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you make your own command, it gives you a lot more flexibility than a verb.\r\n\r\nThe basic structure would be a command with a pattern that looks like `^(hit|attack)\\s+(?<object>.+)(\\s+(with|using)\\s+(?<object2>.+))?$`. That allows the player to enter \"hit man\" or \"hit man with bat\".\r\n\r\nThen you'd have a script something like:\r\n```\r\nif (IsDefined (\"object2\")) {\r\n  // the player has entered \"hit man with bat\" or similar\r\n}\r\nelse {\r\n  // no weapon specified\r\n}\r\n```\r\n\r\nNow, if you want it to behave like a verb, where every person you can hit has the same script, you'd fill that in with something similar to the `defaultverb` script:\r\n\r\n<pre><code>if (HasAttribute (object, \"<em style=\"color: purple\">hit</em>\")) {\r\n  params = QuickParams (\"target\", object, \"this\", object)\r\n  action = object.<em style=\"color: purple\">hit</em>\r\n  if (IsDefined (\"object2\")) {\r\n    dictionary add (params, \"<em style=\"color: green\">weapon</em>\", object2)\r\n  }\r\n  else {\r\n    object2 = null\r\n  }\r\n  switch (TypeOf (action)) {\r\n    case (\"string\") {\r\n      game.text_processor_variables = params\r\n      msg (action)\r\n    }\r\n    case (\"script\") {\r\n      invoke (action, params)\r\n    }\r\n    case (\"scriptdictionary\") {\r\n      if (object2 = null) {\r\n        if (DictionaryContains (action, game.pov.name)) {\r\n          invoke (ScriptDictionaryItem (action, game.pov.name), params)\r\n        }\r\n        else {\r\n          options = NewObjectList()\r\n          foreach (weapon, ScopeReachableInventory()) {\r\n            if (DictionaryContains (action, weapon.name)) {\r\n              list add (options, weapon)\r\n            }\r\n          }\r\n          if (ListCount (options) = 0) {\r\n            msg (\"<em style=\"color: blue; font-family: initial\">You haven't got anything to hit \" + object.article + \" with.</em>\")\r\n          }\r\n          else if (ListCount (options) = 1) {\r\n            // If there's only one option, we don't need to show a menu\r\n            do (<em style=\"color: purple\">hit</em>, \"script\", QuickParams (\"object\", object, \"object2\", ListItem (options, 0)))\r\n          }\r\n          else {\r\n            <em style=\"color: purple\">hit</em>.target = object\r\n            SuppressTurnScripts()\r\n            ShowMenu (\"<em style=\"color: blue; font-family: initial\">What do you want to hit \" + object.article + \" with?</em>\", options, true) {\r\n              do (<em style=\"color: purple\">hit</em>, \"script\", QuickParams (\"object\", <em style=\"color: purple\">hit</em>.target, \"object2\", GetObject (result))\r\n            }\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        if (not ContainsReachable (game.pov, object2)) {\r\n          msg (\"<em style=\"color: blue; font-family: initial\">You haven't got that.</em>\")\r\n        }\r\n        else if (not DictionaryContains (action, object2.name)) {\r\n          if (DictionaryContains (action, \"default\")) {\r\n            invoke (DictionaryItem (action, \"default\"), params)\r\n          }\r\n          else {\r\n            msg (\"<em style=\"color: blue; font-family: initial\">That's not something you can hit \" + object.article + \" with.</em>\")\r\n          }\r\n        }\r\n        else {\r\n          invoke (DictionaryItem (action, object2.name), params)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\nelse {\r\n  msg (\"<em style=\"color: blue; font-family: initial\">That's not something you can hit.</em>\")\r\n}</code></pre>\r\n\r\nThat should give you a menu something like what you want.\r\nIf you want to change the behaviour of the default verb but still have the ability to tweak stuff on the object's \"Verbs\" tab and have it do the usual verb magic, you could go to full code view, find the bit with all the `<verb … />` lines, and add:\r\n<pre><code>  &lt;verb template=\"hit\" property=\"hit\" response=\"DefaultHit\">\r\n    &lt;script>&lt;![CDATA[\r\n      <b style=\"color: green; font-family: initial\">Insert the code block here</b>\r\n    ]]>&lt;/script>\r\n  &lt;/verb></code></pre>\r\n\r\nOr if you're using the online editor, in your game start script you would put:\r\n<pre><code>hit.script => {\r\n  <b style=\"color: green; font-family: initial\">Insert the code block here</b>\r\n}</code></pre>\r\n\r\nThis should make it so that it will only present you with a menu of the objects that are actually available for that verb.\r\n\r\nHope that works… writing on my phone again, so haven't tested it.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you make your own command, it gives you a lot more flexibility than a verb.</p>\n<p>The basic structure would be a command with a pattern that looks like <code>^(hit|attack)\\s+(?&lt;object&gt;.+)(\\s+(with|using)\\s+(?&lt;object2&gt;.+))?$</code>. That allows the player to enter \"hit man\" or \"hit man with bat\".</p>\n<p>Then you'd have a script something like:</p>\n<pre><code>if (IsDefined (\"object2\")) {\n  // the player has entered \"hit man with bat\" or similar\n}\nelse {\n  // no weapon specified\n}\n</code></pre>\n<p>Now, if you want it to behave like a verb, where every person you can hit has the same script, you'd fill that in with something similar to the <code>defaultverb</code> script:</p>\n<pre><code>if (HasAttribute (object, \"<em style=\"color: purple\">hit</em>\")) {\n  params = QuickParams (\"target\", object, \"this\", object)\n  action = object.<em style=\"color: purple\">hit</em>\n  if (IsDefined (\"object2\")) {\n    dictionary add (params, \"<em style=\"color: green\">weapon</em>\", object2)\n  }\n  else {\n    object2 = null\n  }\n  switch (TypeOf (action)) {\n    case (\"string\") {\n      game.text_processor_variables = params\n      msg (action)\n    }\n    case (\"script\") {\n      invoke (action, params)\n    }\n    case (\"scriptdictionary\") {\n      if (object2 = null) {\n        if (DictionaryContains (action, game.pov.name)) {\n          invoke (ScriptDictionaryItem (action, game.pov.name), params)\n        }\n        else {\n          options = NewObjectList()\n          foreach (weapon, ScopeReachableInventory()) {\n            if (DictionaryContains (action, weapon.name)) {\n              list add (options, weapon)\n            }\n          }\n          if (ListCount (options) = 0) {\n            msg (\"<em style=\"color: blue; font-family: initial\">You haven't got anything to hit \" + object.article + \" with.</em>\")\n          }\n          else if (ListCount (options) = 1) {\n            // If there's only one option, we don't need to show a menu\n            do (<em style=\"color: purple\">hit</em>, \"script\", QuickParams (\"object\", object, \"object2\", ListItem (options, 0)))\n          }\n          else {\n            <em style=\"color: purple\">hit</em>.target = object\n            SuppressTurnScripts()\n            ShowMenu (\"<em style=\"color: blue; font-family: initial\">What do you want to hit \" + object.article + \" with?</em>\", options, true) {\n              do (<em style=\"color: purple\">hit</em>, \"script\", QuickParams (\"object\", <em style=\"color: purple\">hit</em>.target, \"object2\", GetObject (result))\n            }\n          }\n        }\n      }\n      else {\n        if (not ContainsReachable (game.pov, object2)) {\n          msg (\"<em style=\"color: blue; font-family: initial\">You haven't got that.</em>\")\n        }\n        else if (not DictionaryContains (action, object2.name)) {\n          if (DictionaryContains (action, \"default\")) {\n            invoke (DictionaryItem (action, \"default\"), params)\n          }\n          else {\n            msg (\"<em style=\"color: blue; font-family: initial\">That's not something you can hit \" + object.article + \" with.</em>\")\n          }\n        }\n        else {\n          invoke (DictionaryItem (action, object2.name), params)\n        }\n      }\n    }\n  }\n}\nelse {\n  msg (\"<em style=\"color: blue; font-family: initial\">That's not something you can hit.</em>\")\n}</code></pre>\n<p>That should give you a menu something like what you want.<br>\nIf you want to change the behaviour of the default verb but still have the ability to tweak stuff on the object's \"Verbs\" tab and have it do the usual verb magic, you could go to full code view, find the bit with all the <code>&lt;verb … /&gt;</code> lines, and add:</p>\n<pre><code>  &lt;verb template=\"hit\" property=\"hit\" response=\"DefaultHit\"&gt;\n    &lt;script&gt;&lt;![CDATA[\n      <b style=\"color: green; font-family: initial\">Insert the code block here</b>\n    ]]&gt;&lt;/script&gt;\n  &lt;/verb&gt;</code></pre>\n<p>Or if you're using the online editor, in your game start script you would put:</p>\n<pre><code>hit.script =&gt; {\n  <b style=\"color: green; font-family: initial\">Insert the code block here</b>\n}</code></pre>\n<p>This should make it so that it will only present you with a menu of the objects that are actually available for that verb.</p>\n<p>Hope that works… writing on my phone again, so haven't tested it.</p>\n\n",
      "PostDate": "2021-10-29T13:39:30.4836361Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e573290c-873c-402e-8248-cadc90e25dee",
      "UserId": 32920,
      "Username": "Father",
      "AvatarUrl": "http://i.imgur.com/ogRXH9lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you both. I never thought of using commands instead of custom verbs. Much better. I think iantommo’s way is adequate to my simple programming. But thank you mrangel for taking all that trouble.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you both. I never thought of using commands instead of custom verbs. Much better. I think iantommo’s way is adequate to my simple programming. But thank you mrangel for taking all that trouble.</p>\n\n",
      "PostDate": "2021-10-29T16:05:26.4328469Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
