{
  "Topic": {
    "TopicId": "bfm-lppdkk2tx75iirkm0q",
    "ForumId": "10",
    "Title": "How to set a value by player input? Creating a 'wait' command - How to let the player decide for how long.",
    "LastUpdated": "2018-01-22T22:36:20.4730016Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e5b71866-1303-47b0-8d16-1f31e55bfd8f",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi mates, \r\nI made a turn script for the time of day and counting the numbers of in-game days. The printed clock is working well and now I want to make a 'wait' and/or 'rest' command. I thing this is needed if quests or something else only appears at certain day times.\r\n\r\nI want the player types something like...\r\n> \\>wait 2 hours\r\n..or..\r\n> \\>wait 5 minutes\r\n..or..\r\n> \\>wait 1 day\r\n\r\nThinking, this would be useful for sleeping as well.\r\n\r\nIs it possible to set a attribute's value by player input? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi mates,<br>\nI made a turn script for the time of day and counting the numbers of in-game days. The printed clock is working well and now I want to make a 'wait' and/or 'rest' command. I thing this is needed if quests or something else only appears at certain day times.</p>\n<p>I want the player types something like...</p>\n<blockquote>\n<p>&gt;wait 2 hours<br>\n..or..<br>\n&gt;wait 5 minutes<br>\n..or..<br>\n&gt;wait 1 day</p>\n</blockquote>\n<p>Thinking, this would be useful for sleeping as well.</p>\n<p>Is it possible to set a attribute's value by player input?</p>\n\n",
      "PostDate": "2018-01-22T22:36:20.4730016Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "943789a3-5d71-4aad-bb4c-6d14d6bb6f89",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello,\r\n\r\nI use The Pixie's Clock Library, so you will have to tailor this, but this is the command that lets you choose to wait n amount of minutes (or turns):\r\n\r\n```\r\ngame_clock.event = true\r\nif (not IsInt(text)) {\r\n  msg (\"Wait how long (I did not understand \\\"\" + text + \"\\\")?\")\r\n}\r\nelse {\r\n  game.waitcount = WaitN(ToInt(text))\r\n  msg (\"You wait for \" + game.waitcount + \" minute{if game.waitcount>1:s}.\")\r\n}\r\n```\r\n\r\n---\r\n\r\n\r\nhttps://github.com/ThePix/quest/wiki/Clock-Library",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello,</p>\n<p>I use The Pixie's Clock Library, so you will have to tailor this, but this is the command that lets you choose to wait n amount of minutes (or turns):</p>\n<pre><code>game_clock.event = true\nif (not IsInt(text)) {\n  msg (\"Wait how long (I did not understand \\\"\" + text + \"\\\")?\")\n}\nelse {\n  game.waitcount = WaitN(ToInt(text))\n  msg (\"You wait for \" + game.waitcount + \" minute{if game.waitcount&gt;1:s}.\")\n}\n</code></pre>\n<hr>\n<p>https://github.com/ThePix/quest/wiki/Clock-Library</p>\n\n",
      "PostDate": "2018-01-22T23:46:29.0071885Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "788d638d-8ed7-4d3f-a7d0-93904f5683cf",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's only two ways of getting typed-in user input:\r\n\r\n1. the 'get input' Script/Function: http://docs.textadventures.co.uk/quest/scripts/get_input.html\r\n2. the 'Command' Element: http://docs.textadventures.co.uk/quest/elements/command.html\r\n\r\nother method of getting user input: menu selection:\r\n\r\nthe, 'show menu' (popup menu window) or the 'ShowMenu' (\"in-line\"/hyperlinks), Scripts/Functions:\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/show_menu.html\r\nhttp://docs.textadventures.co.uk/quest/functions/showmenu.html\r\n\r\nand there's also the 'ask/Ask' (yes/no questions) Scripts/Functions too:\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/ask.html (popup menu window)\r\nhttp://docs.textadventures.co.uk/quest/functions/ask.html (\"in-line\"/hyperlinks)\r\n\r\n---------------\r\n\r\nask if you need help with anything",
      "EditableFormat": "markdown",
      "HTML": "<p>there's only two ways of getting typed-in user input:</p>\n<ol>\n<li>the 'get input' Script/Function: http://docs.textadventures.co.uk/quest/scripts/get_input.html</li>\n<li>the 'Command' Element: http://docs.textadventures.co.uk/quest/elements/command.html</li>\n</ol>\n<p>other method of getting user input: menu selection:</p>\n<p>the, 'show menu' (popup menu window) or the 'ShowMenu' (\"in-line\"/hyperlinks), Scripts/Functions:</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/show_menu.html<br>\nhttp://docs.textadventures.co.uk/quest/functions/showmenu.html</p>\n<p>and there's also the 'ask/Ask' (yes/no questions) Scripts/Functions too:</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/ask.html (popup menu window)<br>\nhttp://docs.textadventures.co.uk/quest/functions/ask.html (\"in-line\"/hyperlinks)</p>\n<hr>\n<p>ask if you need help with anything</p>\n\n",
      "PostDate": "2018-01-23T02:58:57.2952901Z",
      "LastEditDate": "2018-01-23T03:01:45.5942848Z",
      "link": null
    },
    {
      "PostId": "8ba96ff0-6719-40ca-a2eb-e003138bd9bd",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, the clock library doesn't fulfill my needs. Also, Pixie's 'wait' command is like my current one.\r\n\r\n**hegemonkhan**, I found a earlier post of your's just tried to understand it. So for now this IsInt seems to be the big deal. My main problem is still to set an value by a player typed integer. \r\n\r\n**HegemonKhan**:\r\n[topic/6086/convert-player-input-into-numeric-values](https://textadventures.co.uk/forum/quest/topic/6086/convert-player-input-into-numeric-values)\r\n``` <object name=\"player\">\r\n  <attr name=\"age_integer\" type=\"int\">0</attr> // this is the same as... *\r\n</object>\r\n\r\n// * within the GUI~Editor:\r\n// 'player' Player Object -> 'Attributes' Tab -> Attributes (the bottom box, I believe) -> Add -> (see below)\r\n// (Object Name: player)\r\n// Attribute Name: age_integer // if you prefer, you can label-name it just as 'age' for example (also note that quest IS case-sensitive: age =/= AGE), but then everywhere you'd have to use 'age', and not 'age_integer', which is just how I personally like to label-name things, as for example, it allows for me to have another Attribute 'age_string', a String Attribute, to hold string values such as \"baby\", \"child\", \"teen\", or \"adult\", .... (develop your own convention/system for labeling/naming as quickly as you can!), as remember that names MUST be unique, as the 'name' String Attribute is the way quest 'IDs' them.\r\n// Attribute Type: int\r\n// Attribute Value: 0\r\n\r\n<function name=\"age_integer_function\">\r\n  msg (\"What is your age?\")\r\n  get input {\r\n    if (IsInt (result) and ToInt (result) >= 16) { // checks if your inputted value is an Integer (a non-decimal number) and also then checks if the person typed in a number 16 or greater. Both conditions must be true, else they're prompted to input again (see further down for this looping).\r\n      player.age_integer = ToInt (result) // converts your input into an Integer and stores it into the 'player' Player Object's 'age_integer' Attribute (which has to be created/added as an Integer Type Attribute, if you've used the GUI~Editor to create/add this Attribute for your 'player' Player Object)\r\n    } else {\r\n      msg (\"wrong input, try again, make sure you input an integer number and that it is 16 or greater.\")\r\n      wait {\r\n       ClearScreen\r\n       age_integer_function // in code, the name of the function calls/activates the function and thus loops/repeats the function, requiring the person to input again. In the GUI~Editor, you find the 'add new script' that is the 'call function' Script, and just type in the small rectangle the name of the function that you wish to call/activate (you can ignore the adding of parameters for the time being, if you don't know how functions and parameters work). \r\n      }\r\n    }\r\n  }\r\n</function> ```",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, the clock library doesn't fulfill my needs. Also, Pixie's 'wait' command is like my current one.</p>\n<p><strong>hegemonkhan</strong>, I found a earlier post of your's just tried to understand it. So for now this IsInt seems to be the big deal. My main problem is still to set an value by a player typed integer.</p>\n<p><strong>HegemonKhan</strong>:<br>\n<a href=\"https://textadventures.co.uk/forum/quest/topic/6086/convert-player-input-into-numeric-values\">topic/6086/convert-player-input-into-numeric-values</a></p>\n<pre><code>  &lt;attr name=\"age_integer\" type=\"int\"&gt;0&lt;/attr&gt; // this is the same as... *\n&lt;/object&gt;\n\n// * within the GUI~Editor:\n// 'player' Player Object -&gt; 'Attributes' Tab -&gt; Attributes (the bottom box, I believe) -&gt; Add -&gt; (see below)\n// (Object Name: player)\n// Attribute Name: age_integer // if you prefer, you can label-name it just as 'age' for example (also note that quest IS case-sensitive: age =/= AGE), but then everywhere you'd have to use 'age', and not 'age_integer', which is just how I personally like to label-name things, as for example, it allows for me to have another Attribute 'age_string', a String Attribute, to hold string values such as \"baby\", \"child\", \"teen\", or \"adult\", .... (develop your own convention/system for labeling/naming as quickly as you can!), as remember that names MUST be unique, as the 'name' String Attribute is the way quest 'IDs' them.\n// Attribute Type: int\n// Attribute Value: 0\n\n&lt;function name=\"age_integer_function\"&gt;\n  msg (\"What is your age?\")\n  get input {\n    if (IsInt (result) and ToInt (result) &gt;= 16) { // checks if your inputted value is an Integer (a non-decimal number) and also then checks if the person typed in a number 16 or greater. Both conditions must be true, else they're prompted to input again (see further down for this looping).\n      player.age_integer = ToInt (result) // converts your input into an Integer and stores it into the 'player' Player Object's 'age_integer' Attribute (which has to be created/added as an Integer Type Attribute, if you've used the GUI~Editor to create/add this Attribute for your 'player' Player Object)\n    } else {\n      msg (\"wrong input, try again, make sure you input an integer number and that it is 16 or greater.\")\n      wait {\n       ClearScreen\n       age_integer_function // in code, the name of the function calls/activates the function and thus loops/repeats the function, requiring the person to input again. In the GUI~Editor, you find the 'add new script' that is the 'call function' Script, and just type in the small rectangle the name of the function that you wish to call/activate (you can ignore the adding of parameters for the time being, if you don't know how functions and parameters work). \n      }\n    }\n  }\n&lt;/function&gt; ```\n</code></pre>\n\n",
      "PostDate": "2018-01-23T03:39:37.6741271Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9a936417-0f13-44fb-8bb8-2aeebbbb175e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's an example:\r\n\r\n```\r\nmsg (\"Type in whatever you want\")\r\nget input {\r\n\r\n  // quest automatically (hidden from you) stores your typed-in input into a built-in 'result' Variable, and no matter what you typed-in, it'll be a String Value, however you can convert a String Value into a different Data/Value Type via using the 'ToXXX' Scripts/Functions, and you can check what value/variable type it is, via the 'IsXXX' and/or the 'TypeOf' Scripts/Functions\r\n\r\n  // result = YOUR_TYPED-IN_INPUT_AS_A_STRING_VALUE_REGARDLESS_OF_WHAT_YOU_TYPED_IN\r\n\r\n  game.string_attribute = result // your typed-in input is always a string\r\n\r\n  game.string_attribute = ToString (result) // we don't need to do this (see the line above), as your typed-in input is always a string, see next block below for examples of really (needing to) use this to convert it into a string\r\n\r\n  game.integer_attribute = ToInt (result) // your typed-in input needs to be an integer else you'll have an error here (to handle the error, we'd need to first use an 'if (IsInt (result))' check first, and then if true, we then do the 'game.integer_attribute = ToInt (result)', see below:\r\n\r\n  if (IsInt (result)) {\r\n    game.integer_attribute = ToInt (result)\r\n  }\r\n\r\n  game.double_attribute = ToDouble (result) // your typed-in input needs to be a double, else you'll have an error here (to handle the error, we'd need to first use an 'if (IsDouble (result))' check first, and then if true, we then do the 'game.double_attribute = ToDouble (result)', see below:\r\n\r\n  if (IsDouble (result)) {\r\n    game.double_attribute = ToDouble (result)\r\n  }\r\n\r\n  game.object_attribute = GetObject (result) // There needs to be an actual existing Object having the same name as your typed-in input (which is again, stored within the built-in 'result' Variable)\r\n\r\n  game.string_attribute = ToString (game.integer_attribute)\r\n  game.string_attribute = ToString (game.double_attribute)\r\n  game.string_attribute = game.object_attribute.name // this is a way of converting an 'object' value into a 'string' value\r\n\r\n  if (IsInt (game.integer_attribute) or TypeOf (game.integer_attribute) = \"int\") {\r\n    msg (\"game.integer_attribute is an integer type\")\r\n  } else {\r\n    msg (\"game.integer_attribute is NOT an integer type\")\r\n  }\r\n\r\n  if (IsString (game.string_attribute) or TypeOf (game.string_attribute) = \"string\") {\r\n    msg (\"game.string_attribute is a string type\")\r\n  } else {\r\n    msg (\"game.string_attribute is NOT an string type\")\r\n  }\r\n\r\n  if (IsDouble (game.double_attribute) or TypeOf (game.double_attribute) = \"double\") {\r\n    msg (\"game.double_attribute is a double type\")\r\n  } else {\r\n    msg (\"game.double_attribute is NOT an double type\")\r\n  }\r\n\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>here's an example:</p>\n<pre><code>msg (\"Type in whatever you want\")\nget input {\n\n  // quest automatically (hidden from you) stores your typed-in input into a built-in 'result' Variable, and no matter what you typed-in, it'll be a String Value, however you can convert a String Value into a different Data/Value Type via using the 'ToXXX' Scripts/Functions, and you can check what value/variable type it is, via the 'IsXXX' and/or the 'TypeOf' Scripts/Functions\n\n  // result = YOUR_TYPED-IN_INPUT_AS_A_STRING_VALUE_REGARDLESS_OF_WHAT_YOU_TYPED_IN\n\n  game.string_attribute = result // your typed-in input is always a string\n\n  game.string_attribute = ToString (result) // we don't need to do this (see the line above), as your typed-in input is always a string, see next block below for examples of really (needing to) use this to convert it into a string\n\n  game.integer_attribute = ToInt (result) // your typed-in input needs to be an integer else you'll have an error here (to handle the error, we'd need to first use an 'if (IsInt (result))' check first, and then if true, we then do the 'game.integer_attribute = ToInt (result)', see below:\n\n  if (IsInt (result)) {\n    game.integer_attribute = ToInt (result)\n  }\n\n  game.double_attribute = ToDouble (result) // your typed-in input needs to be a double, else you'll have an error here (to handle the error, we'd need to first use an 'if (IsDouble (result))' check first, and then if true, we then do the 'game.double_attribute = ToDouble (result)', see below:\n\n  if (IsDouble (result)) {\n    game.double_attribute = ToDouble (result)\n  }\n\n  game.object_attribute = GetObject (result) // There needs to be an actual existing Object having the same name as your typed-in input (which is again, stored within the built-in 'result' Variable)\n\n  game.string_attribute = ToString (game.integer_attribute)\n  game.string_attribute = ToString (game.double_attribute)\n  game.string_attribute = game.object_attribute.name // this is a way of converting an 'object' value into a 'string' value\n\n  if (IsInt (game.integer_attribute) or TypeOf (game.integer_attribute) = \"int\") {\n    msg (\"game.integer_attribute is an integer type\")\n  } else {\n    msg (\"game.integer_attribute is NOT an integer type\")\n  }\n\n  if (IsString (game.string_attribute) or TypeOf (game.string_attribute) = \"string\") {\n    msg (\"game.string_attribute is a string type\")\n  } else {\n    msg (\"game.string_attribute is NOT an string type\")\n  }\n\n  if (IsDouble (game.double_attribute) or TypeOf (game.double_attribute) = \"double\") {\n    msg (\"game.double_attribute is a double type\")\n  } else {\n    msg (\"game.double_attribute is NOT an double type\")\n  }\n\n}\n</code></pre>\n\n",
      "PostDate": "2018-01-23T06:37:10.1664802Z",
      "LastEditDate": "2018-01-23T06:49:38.2519309Z",
      "link": null
    },
    {
      "PostId": "582c4a38-b57f-417a-b351-6114eba07009",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'd give the wait function a pattern (regex) like:\r\n`^(wait|rest)\\s+(for\\s+)?(?<text_number>\\d*)\\s*(?<text_unit>d|h|m|s|day|hour|minute|second|turn|)s?\\s*$`\r\n\r\nThen in your command script, if the player types \"wait for 6 minutes\" or \"rest 6m\", you will have access to the local variable `text_number` which is \"6\", and `text_unit` which is \"minute\".\r\nI'd probably make the script for the command something like this:\r\n```\r\nnumber = 1\r\nif (not text_number = \"\") {\r\n  number = ToInt(text_number)\r\n}\r\nswitch (LCase(Left(text_unit,1))) {\r\n  case (\"d\") {\r\n    WaitForSeconds (number * 86400)\r\n  }\r\n  case (\"h\") {\r\n    WaitForSeconds (number * 3600)\r\n  }\r\n  case (\"m\") {\r\n    WaitForSeconds (number * 60)\r\n  }\r\n  case (\"s\") {\r\n    WaitForSeconds (number)\r\n  }\r\n  default {\r\n    WaitForTurns (number)\r\n  }\r\n}\r\n```\r\n\r\n(assuming you have functions WaitForSeconds and WaitForTurns that handle the actual waiting… it should be easy enough to come up with a similar script more tailored to your needs)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd give the wait function a pattern (regex) like:<br>\n<code>^(wait|rest)\\s+(for\\s+)?(?&lt;text_number&gt;\\d*)\\s*(?&lt;text_unit&gt;d|h|m|s|day|hour|minute|second|turn|)s?\\s*$</code></p>\n<p>Then in your command script, if the player types \"wait for 6 minutes\" or \"rest 6m\", you will have access to the local variable <code>text_number</code> which is \"6\", and <code>text_unit</code> which is \"minute\".<br>\nI'd probably make the script for the command something like this:</p>\n<pre><code>number = 1\nif (not text_number = \"\") {\n  number = ToInt(text_number)\n}\nswitch (LCase(Left(text_unit,1))) {\n  case (\"d\") {\n    WaitForSeconds (number * 86400)\n  }\n  case (\"h\") {\n    WaitForSeconds (number * 3600)\n  }\n  case (\"m\") {\n    WaitForSeconds (number * 60)\n  }\n  case (\"s\") {\n    WaitForSeconds (number)\n  }\n  default {\n    WaitForTurns (number)\n  }\n}\n</code></pre>\n<p>(assuming you have functions WaitForSeconds and WaitForTurns that handle the actual waiting… it should be easy enough to come up with a similar script more tailored to your needs)</p>\n\n",
      "PostDate": "2018-01-23T16:23:46.5962546Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5402d5b4-6e84-48c7-adb5-bd94ec4f6637",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh nice, this really helped me, **hegemonkhan**\r\nFirst of all I thought I understood your explanation, but I needed workover the command first. I a made switch to recognize which time unit (minutes, hours, ..)  the player is typing. \r\nWith this in the command 'result' always led me each time to a error.\r\n\r\n```\r\n  <command name=\"waiting\">\r\n    <pattern>wait #text#  #object#</pattern>\r\n    <script>\r\n      if (IsInt (text)) {\r\n    player.waiting_integer = ToInt (text)\r\n      switch (object) {\r\n        }\r\n        case (seconds) {\r\n          msg (\"You wait \" + player.waiting_integer + \" seconds.\")\r\n        }\r\n        case (minutes) {\r\n          msg (\"You wait \" + player.waiting_integer + \" minutes.\")\r\n        }\r\n```\r\n\r\nThis small script totally worked even with the aliases for 'minutes' and 'seconds' (minute, min, second, sec). Now I'll add the other time units, double and string cases and get the correct effect for the clock.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh nice, this really helped me, <strong>hegemonkhan</strong><br>\nFirst of all I thought I understood your explanation, but I needed workover the command first. I a made switch to recognize which time unit (minutes, hours, ..)  the player is typing.<br>\nWith this in the command 'result' always led me each time to a error.</p>\n<pre><code>  &lt;command name=\"waiting\"&gt;\n    &lt;pattern&gt;wait #text#  #object#&lt;/pattern&gt;\n    &lt;script&gt;\n      if (IsInt (text)) {\n    player.waiting_integer = ToInt (text)\n      switch (object) {\n        }\n        case (seconds) {\n          msg (\"You wait \" + player.waiting_integer + \" seconds.\")\n        }\n        case (minutes) {\n          msg (\"You wait \" + player.waiting_integer + \" minutes.\")\n        }\n</code></pre>\n<p>This small script totally worked even with the aliases for 'minutes' and 'seconds' (minute, min, second, sec). Now I'll add the other time units, double and string cases and get the correct effect for the clock.</p>\n\n",
      "PostDate": "2018-01-23T17:30:40.0895796Z",
      "LastEditDate": "2018-01-23T17:39:40.4854818Z",
      "link": null
    },
    {
      "PostId": "b43e395d-9162-4f4a-9e1d-a071e35c89af",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted, argh)\r\n(again, filler for getting my edited post, updated/posted, argh)\r\n\r\n------------------------------\r\n\r\nmore on DATA (VALUE and/or VARIABLE: Attribute/Variable/Parameter) TYPES:\r\n\r\n-------------\r\n\r\nthere's also the 'IsNumeric' too:\r\n\r\nnumeric (a number) = integer number or double number\r\n\r\n-----------\r\n\r\ninteger number (non-decimal/non-fractional number) = ..., -999, -1, 0, 1, 999, ...\r\n\r\ndouble number (floating point / float / decimal-fractional number) = ..., -999.123, -1.8, 0.0, 3.6, 999.77, ...\r\n\r\n---------\r\n\r\nstring (aka, 'text'): a collection of alphanumeric (letters/alphabet and/or numbers) and/or some other characters/symbols too\r\n\r\n(in programming, string's can't/don't start with a number, as it makes parsing coding much more complicated/difficult or maybe near impossible or impossible, lol. In some programming languages you can start with some of the 'other characters/symbols' like an underscore '_' or a hash/pound '#' or whatever. But to always be safe, just start with a letter/alphabet character)\r\n\r\n(string values MUST be encased within double quotes, and thus, any value encased in double quotes IS a string value)\r\n\r\n\"a\"\r\n\"abc\"\r\n\"a1\"\r\n\"abc123\"\r\n\"abc_123\"\r\n\"abc_123_xyz\"\r\n\"Hi, my name is HK. What is your name?\"\r\n\"true\"\r\n\"false\"\r\n\"HK\"\r\n\"game\"\r\n\"player\"\r\n\"orc\"\r\n\r\n----------------------\r\n\r\nBooleans:\r\n\r\n(these are special/reserved words, as boolean values)\r\n\r\ntrue\r\nTrue\r\nfalse\r\nFalse\r\n\r\n------------\r\n\r\nin all programming languages, booleans (AND EVERYTHING!), are actually underneath broken down further into:\r\n\r\n0  // (usually: 0 = false/no)\r\n1 // (usually: 1 =true/yes)\r\n\r\nas programming (thus all programming) is binary (machine language): 0s and 1s\r\n\r\nfor a pretend example:\r\n\r\nif you type in: HK\r\n\r\nit gets broken-down/converted/translated into:\r\n\r\nhttp://www.asciitable.com\r\n\r\n72 decimal = \"H\"\r\n75 decimal = \"K\"\r\n\r\n0100 1000 binary = 72 decimal = \"H\"\r\n(0 x 2^7) + (1 x 2^6) + (0 x 2^5) + (0 x 2^4) + (1 x 2^3) + (0 x 2^2) + (0 x 2^1) + (0 x 2^0) = 72\r\n(0) + (64) + (0) + (0) + (8) + (0) + (0) + (0) = 72\r\n\r\n0100 1011 binary = 75 decimal = \"K\"\r\n(0 x 2^7) + (1 x 2^6) + (0 x 2^5) + (0 x 2^4) + (1 x 2^3) + (0 x 2^2) + (1 x 2^1) + (1 x 2^0) = 75\r\n(0) + (64) + (0) + (0) + (8) + (0) + (2) + (1) = 75\r\n\r\nand thus:\r\n\r\n0100 1000 0100 1011 (binary/machine-language) = \"HK\"\r\n\r\nyou type in and see/use \"HK\" (as this is human friendly/readable/understandable) (thanks to high level programming/software), but the computer itself is actually using '0100 1000 0100 1011' (which is NOT human friendly/readable/understandable). If '0100 1000 0100 1011' is just \"HK\", imagine what just a single paragraph would be in machine language:\r\n\r\n0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001\r\n\r\nya... who can recognize this as some paragraph, lol. Not people, but computers can, lol.\r\n\r\n---------------------\r\n\r\nObjects:\r\n\r\n(any value NOT in double quotes and NOT a special/reserved word, such as the boolean values. Also, again, you can't start with a number)\r\n\r\n(and they have to be actually existing/created Objects in your game, of course)\r\n\r\nHK\r\norc\r\ngame\r\nplayer\r\nplayer_99\r\ndragon\r\nbook\r\nabc\r\nabc123\r\nabc_123\r\nspell_object\r\nspell\r\norc_1_object\r\n\r\n----------------------------\r\n\r\n```\r\nif (IsNumeric (VARIABLE_OR_VALUE)) {\r\n  msg (\"Your VARIABLE_OR_VALUE is either an integer or a double\")\r\n  if (IsInt (VARIABLE_OR_VALUE)) {\r\n    msg (\"Your VARIABLE_OR_VALUE is an integer\")\r\n  } else {\r\n    msg (\"Your VARIABLE_OR_VALUE is NOT an integer\")\r\n  }\r\n  if (IsDouble (VARIABLE_OR_VALUE)) {\r\n    msg (\"Your VARIABLE_OR_VALUE is a double\")\r\n  } else {\r\n    msg (\"Your VARIABLE_OR_VALUE is NOT a double\")\r\n  }\r\n} else {\r\n  msg (\"Your VARIABLE_OR_VALUE is NOT numeric (aka: it's NOT an integer and it's NOT a double)\")\r\n  if (IsString (VARIABLE_OR_VALUE)) {\r\n    msg (\"Your VARIABLE_OR_VALUE is a string\")\r\n  } else {\r\n    msg (\"Your VARIABLE_OR_VALUE is NOT a string\")\r\n  }\r\n  if (IsBoolean (VARIABLE_OR_VALUE)) {\r\n    msg (\"Your VARIABLE_OR_VALUE is a boolean\")\r\n  } else {\r\n    msg (\"Your VARIABLE_OR_VALUE is NOT a boolean\")\r\n  }\r\n  if (not GetObject (VARIABLE_OR_VALUE = null)) {\r\n    msg (\"Your VARIABLE_OR_VALUE is an Object\")\r\n  } else {\r\n    msg (\"Your VARIABLE_OR_VALUE is NOT an object\")\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted, argh)<br>\n(again, filler for getting my edited post, updated/posted, argh)</p>\n<hr>\n<p>more on DATA (VALUE and/or VARIABLE: Attribute/Variable/Parameter) TYPES:</p>\n<hr>\n<p>there's also the 'IsNumeric' too:</p>\n<p>numeric (a number) = integer number or double number</p>\n<hr>\n<p>integer number (non-decimal/non-fractional number) = ..., -999, -1, 0, 1, 999, ...</p>\n<p>double number (floating point / float / decimal-fractional number) = ..., -999.123, -1.8, 0.0, 3.6, 999.77, ...</p>\n<hr>\n<p>string (aka, 'text'): a collection of alphanumeric (letters/alphabet and/or numbers) and/or some other characters/symbols too</p>\n<p>(in programming, string's can't/don't start with a number, as it makes parsing coding much more complicated/difficult or maybe near impossible or impossible, lol. In some programming languages you can start with some of the 'other characters/symbols' like an underscore '_' or a hash/pound '#' or whatever. But to always be safe, just start with a letter/alphabet character)</p>\n<p>(string values MUST be encased within double quotes, and thus, any value encased in double quotes IS a string value)</p>\n<p>\"a\"<br>\n\"abc\"<br>\n\"a1\"<br>\n\"abc123\"<br>\n\"abc_123\"<br>\n\"abc_123_xyz\"<br>\n\"Hi, my name is HK. What is your name?\"<br>\n\"true\"<br>\n\"false\"<br>\n\"HK\"<br>\n\"game\"<br>\n\"player\"<br>\n\"orc\"</p>\n<hr>\n<p>Booleans:</p>\n<p>(these are special/reserved words, as boolean values)</p>\n<p>true<br>\nTrue<br>\nfalse<br>\nFalse</p>\n<hr>\n<p>in all programming languages, booleans (AND EVERYTHING!), are actually underneath broken down further into:</p>\n<p>0  // (usually: 0 = false/no)<br>\n1 // (usually: 1 =true/yes)</p>\n<p>as programming (thus all programming) is binary (machine language): 0s and 1s</p>\n<p>for a pretend example:</p>\n<p>if you type in: HK</p>\n<p>it gets broken-down/converted/translated into:</p>\n<p>http://www.asciitable.com</p>\n<p>72 decimal = \"H\"<br>\n75 decimal = \"K\"</p>\n<p>0100 1000 binary = 72 decimal = \"H\"<br>\n(0 x 2^7) + (1 x 2^6) + (0 x 2^5) + (0 x 2^4) + (1 x 2^3) + (0 x 2^2) + (0 x 2^1) + (0 x 2^0) = 72<br>\n(0) + (64) + (0) + (0) + (8) + (0) + (0) + (0) = 72</p>\n<p>0100 1011 binary = 75 decimal = \"K\"<br>\n(0 x 2^7) + (1 x 2^6) + (0 x 2^5) + (0 x 2^4) + (1 x 2^3) + (0 x 2^2) + (1 x 2^1) + (1 x 2^0) = 75<br>\n(0) + (64) + (0) + (0) + (8) + (0) + (2) + (1) = 75</p>\n<p>and thus:</p>\n<p>0100 1000 0100 1011 (binary/machine-language) = \"HK\"</p>\n<p>you type in and see/use \"HK\" (as this is human friendly/readable/understandable) (thanks to high level programming/software), but the computer itself is actually using '0100 1000 0100 1011' (which is NOT human friendly/readable/understandable). If '0100 1000 0100 1011' is just \"HK\", imagine what just a single paragraph would be in machine language:</p>\n<p>0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001 0000 1111 1100 0011 0101 1010 0110 1001 1000 0001 0010 0100 0101 0110 1111 0000 1010 0101 0011 1100 1001</p>\n<p>ya... who can recognize this as some paragraph, lol. Not people, but computers can, lol.</p>\n<hr>\n<p>Objects:</p>\n<p>(any value NOT in double quotes and NOT a special/reserved word, such as the boolean values. Also, again, you can't start with a number)</p>\n<p>(and they have to be actually existing/created Objects in your game, of course)</p>\n<p>HK<br>\norc<br>\ngame<br>\nplayer<br>\nplayer_99<br>\ndragon<br>\nbook<br>\nabc<br>\nabc123<br>\nabc_123<br>\nspell_object<br>\nspell<br>\norc_1_object</p>\n<hr>\n<pre><code>if (IsNumeric (VARIABLE_OR_VALUE)) {\n  msg (\"Your VARIABLE_OR_VALUE is either an integer or a double\")\n  if (IsInt (VARIABLE_OR_VALUE)) {\n    msg (\"Your VARIABLE_OR_VALUE is an integer\")\n  } else {\n    msg (\"Your VARIABLE_OR_VALUE is NOT an integer\")\n  }\n  if (IsDouble (VARIABLE_OR_VALUE)) {\n    msg (\"Your VARIABLE_OR_VALUE is a double\")\n  } else {\n    msg (\"Your VARIABLE_OR_VALUE is NOT a double\")\n  }\n} else {\n  msg (\"Your VARIABLE_OR_VALUE is NOT numeric (aka: it's NOT an integer and it's NOT a double)\")\n  if (IsString (VARIABLE_OR_VALUE)) {\n    msg (\"Your VARIABLE_OR_VALUE is a string\")\n  } else {\n    msg (\"Your VARIABLE_OR_VALUE is NOT a string\")\n  }\n  if (IsBoolean (VARIABLE_OR_VALUE)) {\n    msg (\"Your VARIABLE_OR_VALUE is a boolean\")\n  } else {\n    msg (\"Your VARIABLE_OR_VALUE is NOT a boolean\")\n  }\n  if (not GetObject (VARIABLE_OR_VALUE = null)) {\n    msg (\"Your VARIABLE_OR_VALUE is an Object\")\n  } else {\n    msg (\"Your VARIABLE_OR_VALUE is NOT an object\")\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-01-23T19:39:33.9625449Z",
      "LastEditDate": "2018-01-23T20:47:00.2877375Z",
      "link": null
    },
    {
      "PostId": "3764ae0e-1734-426a-8529-58568c170405",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You have an object called seconds and an object called hours, huh?\r\n\r\nPretty slick!",
      "EditableFormat": "markdown",
      "HTML": "<p>You have an object called seconds and an object called hours, huh?</p>\n<p>Pretty slick!</p>\n\n",
      "PostDate": "2018-01-23T20:35:29.4451131Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "92a82804-d79e-45d9-8321-3fddb4b65e15",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> (in programming, string's can't/don't start with a number, as it makes parsing coding much more complicated/difficult or maybe near impossible or impossible, lol. In some programming languages you can start with some of the 'other characters/symbols' like an underscore '_' or a hash/pound '#' or whatever. But to always be safe, just start with a letter/alphabet character)\r\n\r\nNo. A string is any sequence of characters. It's variable names (and object names) that have limits about what characters they can contain. `\"555\"` and `\"   \"` are both strings.\r\n\r\n> if (IsNumeric (VARIABLE_OR_VALUE)) {\r\n  msg (\"Your VARIABLE_OR_VALUE is either an integer or a double\")\r\n\r\nNot quite.\r\n`IsNumeric(\"5\")` returns true, because \"5\" is a string that represents a numeric value\r\n`IsInt(\"5\")` likewise returns true\r\n`IsNumeric(\"-6.55\")` returns true, because its argument is a string that can be converted to a number\r\n`IsInt(\"-6.55\")` returns false, because that string doesn't represent an int\r\n`IsInt(\"abc\")` and `IsNumeric(\"def\")` both return false\r\n`IsInt(666)` shows you what happens if you pass it an int - it displays an error and the script crashes. Because the IsInt function tests a string to see if it's a string representing an int. Giving it something that isn't a string is an error. (Unless this behaviour was changed since November)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>(in programming, string's can't/don't start with a number, as it makes parsing coding much more complicated/difficult or maybe near impossible or impossible, lol. In some programming languages you can start with some of the 'other characters/symbols' like an underscore '_' or a hash/pound '#' or whatever. But to always be safe, just start with a letter/alphabet character)</p>\n</blockquote>\n<p>No. A string is any sequence of characters. It's variable names (and object names) that have limits about what characters they can contain. <code>\"555\"</code> and <code>\" \"</code> are both strings.</p>\n<blockquote>\n<p>if (IsNumeric (VARIABLE_OR_VALUE)) {<br>\nmsg (\"Your VARIABLE_OR_VALUE is either an integer or a double\")</p>\n</blockquote>\n<p>Not quite.<br>\n<code>IsNumeric(\"5\")</code> returns true, because \"5\" is a string that represents a numeric value<br>\n<code>IsInt(\"5\")</code> likewise returns true<br>\n<code>IsNumeric(\"-6.55\")</code> returns true, because its argument is a string that can be converted to a number<br>\n<code>IsInt(\"-6.55\")</code> returns false, because that string doesn't represent an int<br>\n<code>IsInt(\"abc\")</code> and <code>IsNumeric(\"def\")</code> both return false<br>\n<code>IsInt(666)</code> shows you what happens if you pass it an int - it displays an error and the script crashes. Because the IsInt function tests a string to see if it's a string representing an int. Giving it something that isn't a string is an error. (Unless this behaviour was changed since November)</p>\n\n",
      "PostDate": "2018-01-23T20:45:32.5875845Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "014831fc-da77-4209-a32b-9c50e33b10d0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ah, thank you for correcting me! sorry about my post's mis-information.\r\n\r\nI assumed in quest that VARIABLES and Object 'names (IDs)' were seen as string data types, so I lumped them all together with the rule that you can't start with a number. Yes, a String Value can indeed start with a number, but VARIABLES and Object's (names/IDs) can't.\r\n\r\nYa, I know the 'IsXXX' are true/false (and then you got to actually convert the VARIABLE_OR_VALUE into the data type you want --- that you can do so with of course), but I didn't want to get into that specifics (extra-explaining - lazy) into my post, lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>ah, thank you for correcting me! sorry about my post's mis-information.</p>\n<p>I assumed in quest that VARIABLES and Object 'names (IDs)' were seen as string data types, so I lumped them all together with the rule that you can't start with a number. Yes, a String Value can indeed start with a number, but VARIABLES and Object's (names/IDs) can't.</p>\n<p>Ya, I know the 'IsXXX' are true/false (and then you got to actually convert the VARIABLE_OR_VALUE into the data type you want --- that you can do so with of course), but I didn't want to get into that specifics (extra-explaining - lazy) into my post, lol.</p>\n\n",
      "PostDate": "2018-01-23T20:48:47.5373816Z",
      "LastEditDate": "2018-01-23T20:54:17.9448265Z",
      "link": null
    },
    {
      "PostId": "e655b9ac-1771-4fb4-a071-42ca83d11c00",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">**K.V.** \r\n>You have an object called seconds and an object called hours, huh?\r\n>\r\n>Pretty slick! \r\n\r\nYes, but I made this objects only for this command. Seconds, minutes, hours and days. I thought it's a good way to add some aliases for the command. ",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p><strong>K.V.</strong><br>\nYou have an object called seconds and an object called hours, huh?</p>\n<p>Pretty slick!</p>\n</blockquote>\n<p>Yes, but I made this objects only for this command. Seconds, minutes, hours and days. I thought it's a good way to add some aliases for the command.</p>\n\n",
      "PostDate": "2018-01-24T17:20:42.1240967Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "75c860d6-6beb-44dd-9d70-0ecdf3a17cac",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There was much to figure out, but finally I did it. I wasn't sure to let the player being able to wait multiple days so I removed days from the 'waiting' command. \r\nSo, my first problem was to handle the high input numbers like when the player types, \"wait 39831 min\". This was so much frustrating calculating and I ran always against a wall. \r\n\r\nI tried a other way. The waiting time for each unit is now limited. The player can only wait for maximal 60 seconds, 60 minutes or 24 hours.\r\nThis way I only need to handle to set the next higher unit correctly. \r\nFor example, \r\nif the time is \"08:50\" \r\nand the player types, \"wait 20 minutes\",\r\nthen the hours should be increased by 1 and the minutes should be started over from 0 to 10; \"09:10\".\r\nThis was much easier since the higher units can't be affected by the limited waiting duration. And if it is 23:59:59 (hh:mm:ss) o'clock, which means any duration of time increasing would have a effect on the next and over next unit, but thanks to the limitation again, the over next unit can't be increased more than 1. \r\n\r\nIf the player types anything else as a integer he get the message to use a number and it can't be a fractional number. Same for the unit; typing anything else as sec, min or hour shows a message to use one of these units. If both is wrong he get both messages.\r\n\r\nAs the player give input it counts as turn and increase the 'seconds' by 1 after wait. To get the correct time I set a \"is_no_turn\" flag at the end of each game aspects which shouldn't cost time, like looking for stats. I think, I saw something like this in Pixie's Adv. Clock Library. So, thanks for the idea.\r\n\r\n```\r\n<command name=\"waiting\">\r\n <pattern>wait #text#  #object#</pattern>\r\n  <script>\r\n     if (IsInt (text)) {\r\n      player.waiting_integer = ToInt (text)\r\n  switch (object) {\r\n    case (seconds) {\r\n      msg (\"  \")\r\n      if (player.waiting_integer = 1) {\r\n        msg (\"You wait \" + player.waiting_integer + \" second.\")\r\n      }\r\n      else {\r\n        msg (\"You wait \" + player.waiting_integer + \" seconds.\")\r\n      }\r\n      if (world_time.clock_seconds + player.waiting_integer >= 60) {\r\n        if (player.waiting_integer <= 60) {\r\n          player.waiting_integer = world_time.clock_seconds + player.waiting_integer - 60\r\n          world_time.clock_seconds = 0\r\n          world_time.clock_seconds = world_time.clock_seconds + player.waiting_integer\r\n          if (world_time.clock_minutes = 59) {\r\n            world_time.clock_hours = world_time.clock_hours + 1\r\n            if (world_time.clock_hours = 59) {\r\n              world_time.clock_days = world_time.clock_days + 1\r\n            }\r\n          }\r\n          world_time.clock_minutes = world_time.clock_minutes + 1\r\n        }\r\n      }\r\n      else {\r\n        SetObjectFlagOn (world_time, \"wait_check_1\")\r\n      }\r\n      if (player.waiting_integer >= 60) {\r\n        msg (\"<br/>You can only wait 60 seconds. Please type minutes or hours for longer waiting sessions.<br/>\")\r\n      }\r\n      else {\r\n        SetObjectFlagOn (world_time, \"wait_check_2\")\r\n      }\r\n      if (GetBoolean(world_time, \"wait_check_1\")) {\r\n        if (GetBoolean(world_time, \"wait_check_2\")) {\r\n          world_time.clock_seconds = world_time.clock_seconds + player.waiting_integer\r\n        }\r\n      }\r\n    }\r\n    case (minutes) {\r\n      msg (\"   \")\r\n      if (player.waiting_integer = 1) {\r\n        msg (\"You wait \" + player.waiting_integer + \" minute.\")\r\n      }\r\n      else {\r\n        msg (\"You wait \" + player.waiting_integer + \" minutes.\")\r\n      }\r\n      if (world_time.clock_minutes + player.waiting_integer >= 60) {\r\n        if (player.waiting_integer <= 60) {\r\n          player.waiting_integer = world_time.clock_minutes + player.waiting_integer - 60\r\n          world_time.clock_minutes = 0\r\n          world_time.clock_minutes = world_time.clock_minutes + player.waiting_integer\r\n          if (world_time.clock_hours = 59) {\r\n            world_time.clock_days = world_time.clock_days + 1\r\n          }\r\n          world_time.clock_hours = world_time.clock_hours + 1\r\n        }\r\n      }\r\n      else {\r\n        SetObjectFlagOn (world_time, \"wait_check_1\")\r\n      }\r\n      if (player.waiting_integer >= 60) {\r\n        msg (\"<br/>You can only wait 60 minutes. Please type hours for longer waiting sessions.<br/>\")\r\n      }\r\n      else {\r\n        SetObjectFlagOn (world_time, \"wait_check_2\")\r\n      }\r\n      if (GetBoolean(world_time, \"wait_check_1\")) {\r\n        if (GetBoolean(world_time, \"wait_check_2\")) {\r\n          world_time.clock_minutes = world_time.clock_minutes + player.waiting_integer\r\n        }\r\n      }\r\n    }\r\n    case (hours) {\r\n      msg (\"   \")\r\n      if (player.waiting_integer = 1) {\r\n        msg (\"You wait \" + player.waiting_integer + \" hour.\")\r\n      }\r\n      else {\r\n        msg (\"You wait \" + player.waiting_integer + \" hours.\")\r\n      }\r\n      if (world_time.clock_hours + player.waiting_integer >= 24) {\r\n        if (player.waiting_integer <= 24) {\r\n          player.waiting_integer = world_time.clock_hours + player.waiting_integer - 24\r\n          world_time.clock_hours = 0\r\n          world_time.clock_hours = world_time.clock_hours + player.waiting_integer\r\n          world_time.clock_days = world_time.clock_days + 1\r\n        }\r\n      }\r\n      else {\r\n        SetObjectFlagOn (world_time, \"wait_check_1\")\r\n      }\r\n      if (player.waiting_integer >= 24) {\r\n        msg (\"<br/>You can only wait 24 hours. Please type days for longer waiting sessions.<br/>\")\r\n      }\r\n      else {\r\n        SetObjectFlagOn (world_time, \"wait_check_2\")\r\n      }\r\n      if (GetBoolean(world_time, \"wait_check_1\")) {\r\n        if (GetBoolean(world_time, \"wait_check_2\")) {\r\n          world_time.clock_hours = world_time.clock_hours + player.waiting_integer\r\n        }\r\n      }\r\n    }\r\n    case (days) {\r\n    }\r\n  }\r\n}\r\nelse {\r\n  msg (\"<br/>You have to use a number for the waiting duration. It can't be a fractional number.<br/>\")\r\n}\r\nSetObjectFlagOn (player, \"no_real_turn\")\r\nSetObjectFlagOff (world_time, \"wait_check_1\")\r\nSetObjectFlagOff (world_time, \"wait_check_2\")\r\n    </script>\r\n    <unresolved>You can only use seconds, minutes or hours for waiting. (Also second, sec, minute, min and hour for short.)</unresolved>\r\n  </command>\r\n```\r\n\r\nIt seems I'm finished with this command. Any test with the waiting command I can imagine works correctly and the time is always exactly displayed like it should. \r\nThanks to the help of this forum here. ",
      "EditableFormat": "markdown",
      "HTML": "<p>There was much to figure out, but finally I did it. I wasn't sure to let the player being able to wait multiple days so I removed days from the 'waiting' command.<br>\nSo, my first problem was to handle the high input numbers like when the player types, \"wait 39831 min\". This was so much frustrating calculating and I ran always against a wall.</p>\n<p>I tried a other way. The waiting time for each unit is now limited. The player can only wait for maximal 60 seconds, 60 minutes or 24 hours.<br>\nThis way I only need to handle to set the next higher unit correctly.<br>\nFor example,<br>\nif the time is \"08:50\"<br>\nand the player types, \"wait 20 minutes\",<br>\nthen the hours should be increased by 1 and the minutes should be started over from 0 to 10; \"09:10\".<br>\nThis was much easier since the higher units can't be affected by the limited waiting duration. And if it is 23:59:59 (hh:mm:ss) o'clock, which means any duration of time increasing would have a effect on the next and over next unit, but thanks to the limitation again, the over next unit can't be increased more than 1.</p>\n<p>If the player types anything else as a integer he get the message to use a number and it can't be a fractional number. Same for the unit; typing anything else as sec, min or hour shows a message to use one of these units. If both is wrong he get both messages.</p>\n<p>As the player give input it counts as turn and increase the 'seconds' by 1 after wait. To get the correct time I set a \"is_no_turn\" flag at the end of each game aspects which shouldn't cost time, like looking for stats. I think, I saw something like this in Pixie's Adv. Clock Library. So, thanks for the idea.</p>\n<pre><code>&lt;command name=\"waiting\"&gt;\n &lt;pattern&gt;wait #text#  #object#&lt;/pattern&gt;\n  &lt;script&gt;\n     if (IsInt (text)) {\n      player.waiting_integer = ToInt (text)\n  switch (object) {\n    case (seconds) {\n      msg (\"  \")\n      if (player.waiting_integer = 1) {\n        msg (\"You wait \" + player.waiting_integer + \" second.\")\n      }\n      else {\n        msg (\"You wait \" + player.waiting_integer + \" seconds.\")\n      }\n      if (world_time.clock_seconds + player.waiting_integer &gt;= 60) {\n        if (player.waiting_integer &lt;= 60) {\n          player.waiting_integer = world_time.clock_seconds + player.waiting_integer - 60\n          world_time.clock_seconds = 0\n          world_time.clock_seconds = world_time.clock_seconds + player.waiting_integer\n          if (world_time.clock_minutes = 59) {\n            world_time.clock_hours = world_time.clock_hours + 1\n            if (world_time.clock_hours = 59) {\n              world_time.clock_days = world_time.clock_days + 1\n            }\n          }\n          world_time.clock_minutes = world_time.clock_minutes + 1\n        }\n      }\n      else {\n        SetObjectFlagOn (world_time, \"wait_check_1\")\n      }\n      if (player.waiting_integer &gt;= 60) {\n        msg (\"&lt;br/&gt;You can only wait 60 seconds. Please type minutes or hours for longer waiting sessions.&lt;br/&gt;\")\n      }\n      else {\n        SetObjectFlagOn (world_time, \"wait_check_2\")\n      }\n      if (GetBoolean(world_time, \"wait_check_1\")) {\n        if (GetBoolean(world_time, \"wait_check_2\")) {\n          world_time.clock_seconds = world_time.clock_seconds + player.waiting_integer\n        }\n      }\n    }\n    case (minutes) {\n      msg (\"   \")\n      if (player.waiting_integer = 1) {\n        msg (\"You wait \" + player.waiting_integer + \" minute.\")\n      }\n      else {\n        msg (\"You wait \" + player.waiting_integer + \" minutes.\")\n      }\n      if (world_time.clock_minutes + player.waiting_integer &gt;= 60) {\n        if (player.waiting_integer &lt;= 60) {\n          player.waiting_integer = world_time.clock_minutes + player.waiting_integer - 60\n          world_time.clock_minutes = 0\n          world_time.clock_minutes = world_time.clock_minutes + player.waiting_integer\n          if (world_time.clock_hours = 59) {\n            world_time.clock_days = world_time.clock_days + 1\n          }\n          world_time.clock_hours = world_time.clock_hours + 1\n        }\n      }\n      else {\n        SetObjectFlagOn (world_time, \"wait_check_1\")\n      }\n      if (player.waiting_integer &gt;= 60) {\n        msg (\"&lt;br/&gt;You can only wait 60 minutes. Please type hours for longer waiting sessions.&lt;br/&gt;\")\n      }\n      else {\n        SetObjectFlagOn (world_time, \"wait_check_2\")\n      }\n      if (GetBoolean(world_time, \"wait_check_1\")) {\n        if (GetBoolean(world_time, \"wait_check_2\")) {\n          world_time.clock_minutes = world_time.clock_minutes + player.waiting_integer\n        }\n      }\n    }\n    case (hours) {\n      msg (\"   \")\n      if (player.waiting_integer = 1) {\n        msg (\"You wait \" + player.waiting_integer + \" hour.\")\n      }\n      else {\n        msg (\"You wait \" + player.waiting_integer + \" hours.\")\n      }\n      if (world_time.clock_hours + player.waiting_integer &gt;= 24) {\n        if (player.waiting_integer &lt;= 24) {\n          player.waiting_integer = world_time.clock_hours + player.waiting_integer - 24\n          world_time.clock_hours = 0\n          world_time.clock_hours = world_time.clock_hours + player.waiting_integer\n          world_time.clock_days = world_time.clock_days + 1\n        }\n      }\n      else {\n        SetObjectFlagOn (world_time, \"wait_check_1\")\n      }\n      if (player.waiting_integer &gt;= 24) {\n        msg (\"&lt;br/&gt;You can only wait 24 hours. Please type days for longer waiting sessions.&lt;br/&gt;\")\n      }\n      else {\n        SetObjectFlagOn (world_time, \"wait_check_2\")\n      }\n      if (GetBoolean(world_time, \"wait_check_1\")) {\n        if (GetBoolean(world_time, \"wait_check_2\")) {\n          world_time.clock_hours = world_time.clock_hours + player.waiting_integer\n        }\n      }\n    }\n    case (days) {\n    }\n  }\n}\nelse {\n  msg (\"&lt;br/&gt;You have to use a number for the waiting duration. It can't be a fractional number.&lt;br/&gt;\")\n}\nSetObjectFlagOn (player, \"no_real_turn\")\nSetObjectFlagOff (world_time, \"wait_check_1\")\nSetObjectFlagOff (world_time, \"wait_check_2\")\n    &lt;/script&gt;\n    &lt;unresolved&gt;You can only use seconds, minutes or hours for waiting. (Also second, sec, minute, min and hour for short.)&lt;/unresolved&gt;\n  &lt;/command&gt;\n</code></pre>\n<p>It seems I'm finished with this command. Any test with the waiting command I can imagine works correctly and the time is always exactly displayed like it should.<br>\nThanks to the help of this forum here.</p>\n\n",
      "PostDate": "2018-01-25T01:09:08.3660853Z",
      "LastEditDate": "2018-01-25T01:57:38.4808558Z",
      "link": null
    },
    {
      "PostId": "6be3c123-fefa-4420-aac5-71c83d08db40",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "date and time isn't easy stuff to code in, especially as you dig more into accuracy (in regards to date) with it, lol.\r\n\r\n-------\r\n\r\nif you can take a look at this complicated (but novel, lol) 'countdown timer' I made years ago now, sighs. Time goes by so fast... sighs...\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/4162/countdown-timer-code\r\n\r\nand if you want a link on some time and date coding:\r\n\r\nhttps://textadventures.co.uk/forum/quest/topic/_xfqu-xbq0gv1zlbkvvxew/calendar-system\r\n\r\nask if you need any help (I can only help so much... as I'm still struggling with time and date coding myself)",
      "EditableFormat": "markdown",
      "HTML": "<p>date and time isn't easy stuff to code in, especially as you dig more into accuracy (in regards to date) with it, lol.</p>\n<hr>\n<p>if you can take a look at this complicated (but novel, lol) 'countdown timer' I made years ago now, sighs. Time goes by so fast... sighs...</p>\n<p>http://textadventures.co.uk/forum/samples/topic/4162/countdown-timer-code</p>\n<p>and if you want a link on some time and date coding:</p>\n<p>https://textadventures.co.uk/forum/quest/topic/_xfqu-xbq0gv1zlbkvvxew/calendar-system</p>\n<p>ask if you need any help (I can only help so much... as I'm still struggling with time and date coding myself)</p>\n\n",
      "PostDate": "2018-01-25T02:52:06.7632409Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "60c10ef4-0870-40df-9310-d5bf78b6164d",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes I see how much work some more complex time and date systems would need. That's why I've alread removed weeks, months and years. After all it doesn't bother in a fantasy setting. \r\n\r\nBut for now I just found a mistake here. If the player types exactly the maximum (60 sec, 60 min, 24 hours) the clock doesn't change correctly. No big deal for now... I'm tired. Spend my whole day with this. Just finish the quest menu first. Not sure it will be useful for anything, but I add the place, time and day of receiving a quest to the journal's quest entries. Give's stuff some immersion. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes I see how much work some more complex time and date systems would need. That's why I've alread removed weeks, months and years. After all it doesn't bother in a fantasy setting.</p>\n<p>But for now I just found a mistake here. If the player types exactly the maximum (60 sec, 60 min, 24 hours) the clock doesn't change correctly. No big deal for now... I'm tired. Spend my whole day with this. Just finish the quest menu first. Not sure it will be useful for anything, but I add the place, time and day of receiving a quest to the journal's quest entries. Give's stuff some immersion.</p>\n\n",
      "PostDate": "2018-01-25T03:28:25.2273455Z",
      "LastEditDate": "2018-01-25T10:17:10.0107157Z",
      "link": null
    },
    {
      "PostId": "36f0e3a2-6409-42dd-9d22-8f8dc3581d90",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "it can be useful, as it allows for doing a lot of dynamic/random stuff (npcs moving around depending on the time of day and/or what day/month/year it is, shops closing at night, seasons, weather, events, etc), but you got to be a very good coder/programmer, as it's not easy, especially as you try to make it more advanced, doing more stuff.",
      "EditableFormat": "markdown",
      "HTML": "<p>it can be useful, as it allows for doing a lot of dynamic/random stuff (npcs moving around depending on the time of day and/or what day/month/year it is, shops closing at night, seasons, weather, events, etc), but you got to be a very good coder/programmer, as it's not easy, especially as you try to make it more advanced, doing more stuff.</p>\n\n",
      "PostDate": "2018-01-25T22:22:19.1043305Z",
      "LastEditDate": "2018-01-25T22:23:28.2672478Z",
      "link": null
    },
    {
      "PostId": "c8d9797f-7fb9-42c9-9465-4376f36d46ac",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nmaybe you already corrected this, but in your code above, you're missing the 'CDATA' tags, as these are required, if you want to use any '<, >, <=, >=, <>' (greater/lesser than, and/or greater/lesser than and equal to, and/or not equals) symbols/characters/operations in your scripting\r\n\r\n```\r\n<NAME_OF_ELEMENT>\r\n\r\n  <![CDATA[[\r\n\r\n    // your scripting, an example:\r\n\r\n    get input {\r\n      if (IsInt (result)) {\r\n        integer_variable = ToInt (result)\r\n        if (integer_variable >= 0 and integer_variable <= 100) {\r\n          // blah\r\n        }\r\n      }\r\n    }\r\n\r\n  ]]>\r\n\r\n</NAME_OF_ELEMENT>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>maybe you already corrected this, but in your code above, you're missing the 'CDATA' tags, as these are required, if you want to use any '&lt;, &gt;, &lt;=, &gt;=, &lt;&gt;' (greater/lesser than, and/or greater/lesser than and equal to, and/or not equals) symbols/characters/operations in your scripting</p>\n<pre><code>&lt;NAME_OF_ELEMENT&gt;\n\n  &lt;![CDATA[[\n\n    // your scripting, an example:\n\n    get input {\n      if (IsInt (result)) {\n        integer_variable = ToInt (result)\n        if (integer_variable &gt;= 0 and integer_variable &lt;= 100) {\n          // blah\n        }\n      }\n    }\n\n  ]]&gt;\n\n&lt;/NAME_OF_ELEMENT&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-25T22:28:44.0672884Z",
      "LastEditDate": "2018-01-25T22:34:05.453206Z",
      "link": null
    }
  ]
}
