{
  "Topic": {
    "TopicId": "2019",
    "ForumId": "10",
    "Title": "List Library Full",
    "LastUpdated": "2009-05-21T03:16:33+01:00",
    "ReplyCount": 6
  },
  "Posts": [
    {
      "PostId": "16467",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "The full version of the List Library is [url=http&#58;//sites&#46;google&#46;com/site/queststuff/list-libraryprogress:rzpdf3dj]well on it's way[/url:rzpdf3dj].  You can chart the progress at [url=http&#58;//sites&#46;google&#46;com/site/queststuff/Home:rzpdf3dj]Quest Stuff[/url:rzpdf3dj].  (Not that anyone is dying to get their hands on it - Google Sites just had a cool feature I had to try out.)\n\nOne major change from the lite version is that all lists are now &quot;indexed&quot;.  (Not sure if that is the right term, but it's what I'm sticking to for now.)  What this means is that you can leave off the processing of a list mid-stride and return to it at a later time.  For instance, this is possible:\n\n[code:rzpdf3dj]afterturn {\n    set string &lt;item; $GetNext(SomeList)$&gt;\n    if (#item# &lt;&gt; OBJECT_INVALID) then {\n        'process here\n    else {\n        set string &lt;item; $GetFirst(SomeList)$&gt;\n        'process here\n    }\n}[/code:rzpdf3dj]\n\nSomeList could be a list of NPC's who each get to take turns producing ambient behaviour.  (You don't want them acting all at once, so you limit NPC actions to one per turn.)  Or SomeList could be a list of yet other lists that you only want to process individually in order to avoid lag.\n\nThe method employed above (GetNext, GetFirst, etc.) is taken from Bioware's Neverwinter Nights SDK, [url=http&#58;//nwn&#46;bioware&#46;com/builders/:rzpdf3dj]Aurora[/url:rzpdf3dj].  Anyone who has scripted in Aurora will recognize the OBJECT_INVALID keyword, which, in the case of the list library, is a special string that is returned when one attempts to move beyond the last or first item in a list.  (You can step through a list backwards with GetLast and GetPrevious.)\n\nIf anyone cares to, I would appreciate feedback about what is being implemented at the moment.  Currently there are 70 functions, procedures, and actions that can manipulate and/or query a list for information.  I realize that the majority of folks on these forums don't hand script anything, so really I'm making an appeal to a small subset of you.\n\nSome new features:\n\n[list:rzpdf3dj]random shuffling\nremoving of duplicates\nsorting\nswapping items[/list:u:rzpdf3dj]\n\nIf anyone can think of anything that would be cool to implement that's not on the [url=http&#58;//sites&#46;google&#46;com/site/queststuff/list-libraryprogress:rzpdf3dj]progress sheet[/url:rzpdf3dj], just let me know.  I'm willing to collaborate as well, so if you want to go ahead and code a handy routine, feel free.  (If you want to do this, take a look at the source for the [url=http&#58;//sites&#46;google&#46;com/site/queststuff/list-library:rzpdf3dj]lite version[/url:rzpdf3dj]:  there are standard debugging statements that &quot;cushion&quot; every routine.  You can put those in yourself, or I can modify any ASL you write to include them.)\n\nAfter it is completed I'd also like to keep the library open to those who would like to optimize it or make additions and/or suggestions.  I guess we'll just have to see how useful any scripters out there deem the library to be.  (Could be a wasted effort on my part, but I think it's fun in any case!)  The documentation will take some time to write.  I'm also going to include a small game to highlight some of the features.  It won't be a &quot;game&quot; in the traditional sense:  I'll probably implement a textual mp3 player, or something that intuitively uses lists.  (Heck, I could probably create a real - albeit hackish - music player that let's you add and remove actual songs from your hard drive.  <!-- s8) --><img src=\"{SMILIES_PATH}/icon_cool.gif\" alt=\"8)\" title=\"Cool\" /><!-- s8) --> )",
      "EditableFormat": "bbcode",
      "HTML": "The full version of the List Library is <a href=\"http&#58;//sites&#46;google&#46;com/site/queststuff/list-libraryprogress\" rel=\"nofollow\">well on it's way</a>.  You can chart the progress at <a href=\"http&#58;//sites&#46;google&#46;com/site/queststuff/Home\" rel=\"nofollow\">Quest Stuff</a>.  (Not that anyone is dying to get their hands on it - Google Sites just had a cool feature I had to try out.)<br/><br/>One major change from the lite version is that all lists are now &quot;indexed&quot;.  (Not sure if that is the right term, but it's what I'm sticking to for now.)  What this means is that you can leave off the processing of a list mid-stride and return to it at a later time.  For instance, this is possible:<br/><br/><pre><code>afterturn {<br/>    set string &lt;item; $GetNext(SomeList)$&gt;<br/>    if (#item# &lt;&gt; OBJECT_INVALID) then {<br/>        'process here<br/>    else {<br/>        set string &lt;item; $GetFirst(SomeList)$&gt;<br/>        'process here<br/>    }<br/>}</code></pre><br/><br/>SomeList could be a list of NPC's who each get to take turns producing ambient behaviour.  (You don't want them acting all at once, so you limit NPC actions to one per turn.)  Or SomeList could be a list of yet other lists that you only want to process individually in order to avoid lag.<br/><br/>The method employed above (GetNext, GetFirst, etc.) is taken from Bioware's Neverwinter Nights SDK, <a href=\"http&#58;//nwn&#46;bioware&#46;com/builders/\" rel=\"nofollow\">Aurora</a>.  Anyone who has scripted in Aurora will recognize the OBJECT_INVALID keyword, which, in the case of the list library, is a special string that is returned when one attempts to move beyond the last or first item in a list.  (You can step through a list backwards with GetLast and GetPrevious.)<br/><br/>If anyone cares to, I would appreciate feedback about what is being implemented at the moment.  Currently there are 70 functions, procedures, and actions that can manipulate and/or query a list for information.  I realize that the majority of folks on these forums don't hand script anything, so really I'm making an appeal to a small subset of you.<br/><br/>Some new features:<br/><br/>[list]random shuffling<br/>removing of duplicates<br/>sorting<br/>swapping items[/list:u]<br/><br/>If anyone can think of anything that would be cool to implement that's not on the <a href=\"http&#58;//sites&#46;google&#46;com/site/queststuff/list-libraryprogress\" rel=\"nofollow\">progress sheet</a>, just let me know.  I'm willing to collaborate as well, so if you want to go ahead and code a handy routine, feel free.  (If you want to do this, take a look at the source for the <a href=\"http&#58;//sites&#46;google&#46;com/site/queststuff/list-library\" rel=\"nofollow\">lite version</a>:  there are standard debugging statements that &quot;cushion&quot; every routine.  You can put those in yourself, or I can modify any ASL you write to include them.)<br/><br/>After it is completed I'd also like to keep the library open to those who would like to optimize it or make additions and/or suggestions.  I guess we'll just have to see how useful any scripters out there deem the library to be.  (Could be a wasted effort on my part, but I think it's fun in any case!)  The documentation will take some time to write.  I'm also going to include a small game to highlight some of the features.  It won't be a &quot;game&quot; in the traditional sense:  I'll probably implement a textual mp3 player, or something that intuitively uses lists.  (Heck, I could probably create a real - albeit hackish - music player that let's you add and remove actual songs from your hard drive.  <!-- s8) --><img src=\"{SMILIES_PATH}/icon_cool.gif\" alt=\"8)\" title=\"Cool\" /><!-- s8) --> )",
      "PostDate": "2009-04-22T13:33:21+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16475",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "What advantage does that have over just keeping track of the index?  (And it looks like you can only have one iterator per list.)\n\nAurora probably does things that way because it uses a linked list architecture underneath.",
      "EditableFormat": "bbcode",
      "HTML": "What advantage does that have over just keeping track of the index?  (And it looks like you can only have one iterator per list.)<br/><br/>Aurora probably does things that way because it uses a linked list architecture underneath.",
      "PostDate": "2009-04-23T01:07:42+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16476",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "I wasn't sure if calling the lists &quot;indexed&quot; was the right term or not.  What I'm doing behind the scenes is just recording the current &quot;position&quot; of each list for recall and incremental stepping.  Is that what you mean by &quot;keeping track of the index&quot;?  If so, then yes - it is easier!  I hid the manipulation of the index position because it is faster to just assign an item to a variable with $GetNext(ListObject)$ than it is to...\n\n[list:32csflay]* increment the index\n* check if the position is valid\n* assign the returned item at the new position[/list:u:32csflay]\n\n...each and every time a scripter wants the next item in a list.\n\n[quote:32csflay]Aurora probably does things that way because it uses a linked list architecture underneath.[/quote:32csflay]\n\nYeah, I guess linked lists make sense for that - I never really thought about it before.  I haven't had occassion to use linked lists all that much (in C (have to build 'em yourself, don't you?), or C# - ArrayList?).  Probably because I'm not exactly a professional programmer - there is so much to learn!\n\nIn any case, the lists in the list library dynamically resize like a linked list.  (Yes, I realize it's all done with properties, but if the effect is the same, who cares?)",
      "EditableFormat": "bbcode",
      "HTML": "I wasn't sure if calling the lists &quot;indexed&quot; was the right term or not.  What I'm doing behind the scenes is just recording the current &quot;position&quot; of each list for recall and incremental stepping.  Is that what you mean by &quot;keeping track of the index&quot;?  If so, then yes - it is easier!  I hid the manipulation of the index position because it is faster to just assign an item to a variable with $GetNext(ListObject)$ than it is to...<br/><br/>[list]* increment the index<br/>* check if the position is valid<br/>* assign the returned item at the new position[/list:u]<br/><br/>...each and every time a scripter wants the next item in a list.<br/><br/><blockquote><p>Aurora probably does things that way because it uses a linked list architecture underneath.</p></blockquote><br/><br/>Yeah, I guess linked lists make sense for that - I never really thought about it before.  I haven't had occassion to use linked lists all that much (in C (have to build 'em yourself, don't you?), or C# - ArrayList?).  Probably because I'm not exactly a professional programmer - there is so much to learn!<br/><br/>In any case, the lists in the list library dynamically resize like a linked list.  (Yes, I realize it's all done with properties, but if the effect is the same, who cares?)",
      "PostDate": "2009-04-23T02:48:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16479",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "What sort of complexity guarantees does your system have?",
      "EditableFormat": "bbcode",
      "HTML": "What sort of complexity guarantees does your system have?",
      "PostDate": "2009-04-23T12:51:20+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16483",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Okay, now you made me go look up &quot;complexity guarantees&quot;, which was a little hard to find.\n\nI'm assuming what you mean by that term is, &quot;what guarantees can I make against the algorithmic complexity of the library.&quot;  So, for instance, how long would it take to retrieve any given item as the size of a list increases (does it behave in constant time, do the steps increase linearly, quadratically, etc.).\n\nSimple answer:  I haven't thought about that at all.  Perhaps when the library comes out you could tell me - or I could email the incomplete source to you.\n\nI do know that large iterations in Quest cause lag, no matter what you're doing.  I expressly made it possible (which wasn't hard) to store lists within lists, so that one could process a long list in more manageable &quot;chunks&quot; if lag became an issue.  A little lag ain't so bad, but anything more than half a second or so seems to bug me.\n\nMan, you're really stretching my poor brain.",
      "EditableFormat": "bbcode",
      "HTML": "Okay, now you made me go look up &quot;complexity guarantees&quot;, which was a little hard to find.<br/><br/>I'm assuming what you mean by that term is, &quot;what guarantees can I make against the algorithmic complexity of the library.&quot;  So, for instance, how long would it take to retrieve any given item as the size of a list increases (does it behave in constant time, do the steps increase linearly, quadratically, etc.).<br/><br/>Simple answer:  I haven't thought about that at all.  Perhaps when the library comes out you could tell me - or I could email the incomplete source to you.<br/><br/>I do know that large iterations in Quest cause lag, no matter what you're doing.  I expressly made it possible (which wasn't hard) to store lists within lists, so that one could process a long list in more manageable &quot;chunks&quot; if lag became an issue.  A little lag ain't so bad, but anything more than half a second or so seems to bug me.<br/><br/>Man, you're really stretching my poor brain.",
      "PostDate": "2009-04-23T13:35:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16607",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "[quote=&quot;Overcat&quot;:3nl99fqt]I wasn't sure if calling the lists &quot;indexed&quot; was the right term or not.  What I'm doing behind the scenes is just recording the current &quot;position&quot; of each list for recall and incremental stepping.  Is that what you mean by &quot;keeping track of the index&quot;?  If so, then yes - it is easier!  I hid the manipulation of the index position because it is faster to just assign an item to a variable with $GetNext(ListObject)$ than it is to...\n\n[list:3nl99fqt]* increment the index\n* check if the position is valid\n* assign the returned item at the new position[/list:u:3nl99fqt]\n\n...each and every time a scripter wants the next item in a list.\n[/quote:3nl99fqt]\n\nFrom my experience in C / C++, keeping track of the index would be a matter of:\n[code:3nl99fqt]for (i = 0; i &lt; LIST&#46;size; ++ i) {\n  // Do stuff with LIST&#91;i&#93;\n}[/code:3nl99fqt]\n\nOr doing it with iterators (which is closer to your method) would be \n[code:3nl99fqt]for (iter = LIST&#46;begin(); iter != LIST&#46;end(); ++ iter) {\n  // Do stuff with *iter\n}[/code:3nl99fqt]\n\nBoth methods have the advantage that you can have multiple iterators running over one list at a time.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Overcat wrote:</cite>I wasn't sure if calling the lists &quot;indexed&quot; was the right term or not.  What I'm doing behind the scenes is just recording the current &quot;position&quot; of each list for recall and incremental stepping.  Is that what you mean by &quot;keeping track of the index&quot;?  If so, then yes - it is easier!  I hid the manipulation of the index position because it is faster to just assign an item to a variable with $GetNext(ListObject)$ than it is to...<br/><br/>[list]* increment the index<br/>* check if the position is valid<br/>* assign the returned item at the new position[/list:u]<br/><br/>...each and every time a scripter wants the next item in a list.<br/></blockquote><br/><br/>From my experience in C / C++, keeping track of the index would be a matter of:<br/><pre><code>for (i = 0; i &lt; LIST&#46;size; ++ i) {<br/>  // Do stuff with LIST&#91;i&#93;<br/>}</code></pre><br/><br/>Or doing it with iterators (which is closer to your method) would be <br/><pre><code>for (iter = LIST&#46;begin(); iter != LIST&#46;end(); ++ iter) {<br/>  // Do stuff with *iter<br/>}</code></pre><br/><br/>Both methods have the advantage that you can have multiple iterators running over one list at a time.",
      "PostDate": "2009-05-20T22:53:55+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16610",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:m6ouwwi9]Both methods have the advantage that you can have multiple iterators running over one list at a time.[/quote:m6ouwwi9]\n\nYeah, the GetNext, GetPrevious, etc. functions only allow one iterator, since there is only one property (in my scheme) that keeps track of the current position of any given list on an object.  I implemented them so one could incrementally step through a list between player &quot;turns&quot;.  For instance, the GetCurrent function will always return the item currently being pointed to by the index property of a given list.  (You can still use these functions to iterate through a list in one go.)\n\nYou can have multiple iterators on a list with a for-loop:\n\n[code:m6ouwwi9]for &lt;i; 1; $ListLength(SomeObject; SomeList)$&gt; {\n    for &lt;n; 1; $ListLength(SomeObject; SomeList)$&gt; {\n        set string &lt;str; $GetByPosition(SomeObject; %i%; SomeList)$&gt;\n        set string &lt;str2; $GetByPosition(SomeObject; %n%; SomeList)$&gt;\n        'do stuff with #str# and #str2#\n    }\n}[/code:m6ouwwi9]\n\nThat is rather unwieldy, so...\n\n[code:m6ouwwi9]do &lt;SetActiveList(SomeObject; SomeList)&gt;\nfor &lt;i; 1; $ListLength(SomeObject)$&gt; {\n    for &lt;n; 1; $ListLength(SomeObject)$&gt; {\n        set string &lt;str; $GetByPosition(SomeObject; %i%)$&gt;\n        set string &lt;str2; $GetByPosition(SomeObject; %n%)$&gt;\n        'do stuff with #str# and #str2#\n    }\n}[/code:m6ouwwi9]\n\nBut for one iterator, it is better (in my opinion) to...\n\n[code:m6ouwwi9]set string &lt;str; $GetFirst(SomeObject)$&gt;\nrepeat until (#str# = OBJECT_INVALID) {\n    'do stuff with #str#\n    set &lt;str; $GetNext(SomeObject)$&gt;\n}[/code:m6ouwwi9]\n\nThat, in contrast to how one would have to do it without interfacing with the functions of the list library (assuming my scheme for storing lists is at work)...\n\n[code:m6ouwwi9]for &lt;i; 1; $objectproperty(SomeObject; no#ListName#)$&gt;\n    set string &lt;str; $objectproperty(SomeObject; #ListName#_%i%)$&gt;\n    'do stuff with #str#\n}[/code:m6ouwwi9]\n\nAs part of the aim of the library is ease of use, I think I would have a much easier time explaining to a newbie scripter how to work with lists using GetFirst and GetNext than with the jabberwocky immediately above.  Then again, it may be that the only ones who ever attempt to use the [url=http&#58;//sites&#46;google&#46;com/site/queststuff/list-library:m6ouwwi9]list library[/url:m6ouwwi9] are those who are already at a sufficient level of understanding to read that jabberwocky with ease.  <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->  In any case, I find GetFirst and GetNext much more readable!  (One can employ the same syntax to run backwards through the list, too, with GetLast and GetPrevious.)",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>Both methods have the advantage that you can have multiple iterators running over one list at a time.</p></blockquote><br/><br/>Yeah, the GetNext, GetPrevious, etc. functions only allow one iterator, since there is only one property (in my scheme) that keeps track of the current position of any given list on an object.  I implemented them so one could incrementally step through a list between player &quot;turns&quot;.  For instance, the GetCurrent function will always return the item currently being pointed to by the index property of a given list.  (You can still use these functions to iterate through a list in one go.)<br/><br/>You can have multiple iterators on a list with a for-loop:<br/><br/><pre><code>for &lt;i; 1; $ListLength(SomeObject; SomeList)$&gt; {<br/>    for &lt;n; 1; $ListLength(SomeObject; SomeList)$&gt; {<br/>        set string &lt;str; $GetByPosition(SomeObject; %i%; SomeList)$&gt;<br/>        set string &lt;str2; $GetByPosition(SomeObject; %n%; SomeList)$&gt;<br/>        'do stuff with #str# and #str2#<br/>    }<br/>}</code></pre><br/><br/>That is rather unwieldy, so...<br/><br/><pre><code>do &lt;SetActiveList(SomeObject; SomeList)&gt;<br/>for &lt;i; 1; $ListLength(SomeObject)$&gt; {<br/>    for &lt;n; 1; $ListLength(SomeObject)$&gt; {<br/>        set string &lt;str; $GetByPosition(SomeObject; %i%)$&gt;<br/>        set string &lt;str2; $GetByPosition(SomeObject; %n%)$&gt;<br/>        'do stuff with #str# and #str2#<br/>    }<br/>}</code></pre><br/><br/>But for one iterator, it is better (in my opinion) to...<br/><br/><pre><code>set string &lt;str; $GetFirst(SomeObject)$&gt;<br/>repeat until (#str# = OBJECT_INVALID) {<br/>    'do stuff with #str#<br/>    set &lt;str; $GetNext(SomeObject)$&gt;<br/>}</code></pre><br/><br/>That, in contrast to how one would have to do it without interfacing with the functions of the list library (assuming my scheme for storing lists is at work)...<br/><br/><pre><code>for &lt;i; 1; $objectproperty(SomeObject; no#ListName#)$&gt;<br/>    set string &lt;str; $objectproperty(SomeObject; #ListName#_%i%)$&gt;<br/>    'do stuff with #str#<br/>}</code></pre><br/><br/>As part of the aim of the library is ease of use, I think I would have a much easier time explaining to a newbie scripter how to work with lists using GetFirst and GetNext than with the jabberwocky immediately above.  Then again, it may be that the only ones who ever attempt to use the <a href=\"http&#58;//sites&#46;google&#46;com/site/queststuff/list-library\" rel=\"nofollow\">list library</a> are those who are already at a sufficient level of understanding to read that jabberwocky with ease.  <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->  In any case, I find GetFirst and GetNext much more readable!  (One can employ the same syntax to run backwards through the list, too, with GetLast and GetPrevious.)",
      "PostDate": "2009-05-21T03:16:33+01:00",
      "LastEditDate": null
    }
  ]
}
