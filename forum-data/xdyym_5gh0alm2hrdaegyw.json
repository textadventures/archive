{
  "Topic": {
    "TopicId": "xdyym_5gh0alm2hrdaegyw",
    "ForumId": "24",
    "Title": "A different way to do stuff like an inventory system:",
    "LastUpdated": "2020-10-07T17:18:57.2910704Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "ce285df7-0526-4f2e-a858-9624c28987ba",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "EDIT: fixed bugs\r\n\r\nTaking a look at some of the code behind Squiffy, I wonder if there's a neater way to make passages work. Changing the function to something like this might make some easier stuff possible:\r\n\r\n```\r\n    squiffy.story.passage = function(passageName) {\r\n        var masterSection = squiffy.story.sections[''];\r\n        var passage = squiffy.story.section.passages[passageName];\r\n        if (passage) {\r\n            // This is the function `setSeen`; which is local so needs to be copied\r\n            // into this code. I think it might be better to remove this, but it's\r\n            // in the original code\r\n            var seenSections = squiffy.get('_seen_sections');\r\n            if (!seenSections) seenSections = [];\r\n            if (seenSections.indexOf(passageName) == -1) {\r\n                seenSections.push(passageName);\r\n                squiffy.set('_seen_sections', seenSections);\r\n            }\r\n        } else if (masterSection && masterSection.passages[passageName]) {\r\n            passage = masterSection.passages[passageName];\r\n        } else {\r\n            return;\r\n        }\r\n        var passages = [passage];\r\n        var masterPassage = masterSection && masterSection.passages[''];\r\n        if (masterPassage) {\r\n            passages.push(masterPassage);\r\n        }\r\n        var master = squiffy.story.section.passages[''];\r\n        if (master) {\r\n            passages.push(master);\r\n        }\r\n        $.each(passages, function (i, p) {\r\n            squiffy.story.run(p);\r\n        });\r\n        $.each(passages.reverse(), function (i, p) {\r\n            squiffy.ui.write(p.text);\r\n        });\r\n        squiffy.story.save();\r\n    };\r\n```\r\n\r\nA few things changed here. The order of operations changes for master passages. Basically, the scripts run and then the test is displayed, rather than sctipt-text-script-text.\r\n\r\nAnd secondly, a passage in the master section can be called from anywhere, if the section doesn't have a passage with the same name. So you could have stuff like links to `[inventory]`, `[stats]`, or `[help]` in the master section and those links will then work anywhere in the game.",
      "EditableFormat": "markdown",
      "HTML": "<p>EDIT: fixed bugs</p>\n<p>Taking a look at some of the code behind Squiffy, I wonder if there's a neater way to make passages work. Changing the function to something like this might make some easier stuff possible:</p>\n<pre><code>    squiffy.story.passage = function(passageName) {\n        var masterSection = squiffy.story.sections[''];\n        var passage = squiffy.story.section.passages[passageName];\n        if (passage) {\n            // This is the function `setSeen`; which is local so needs to be copied\n            // into this code. I think it might be better to remove this, but it's\n            // in the original code\n            var seenSections = squiffy.get('_seen_sections');\n            if (!seenSections) seenSections = [];\n            if (seenSections.indexOf(passageName) == -1) {\n                seenSections.push(passageName);\n                squiffy.set('_seen_sections', seenSections);\n            }\n        } else if (masterSection &amp;&amp; masterSection.passages[passageName]) {\n            passage = masterSection.passages[passageName];\n        } else {\n            return;\n        }\n        var passages = [passage];\n        var masterPassage = masterSection &amp;&amp; masterSection.passages[''];\n        if (masterPassage) {\n            passages.push(masterPassage);\n        }\n        var master = squiffy.story.section.passages[''];\n        if (master) {\n            passages.push(master);\n        }\n        $.each(passages, function (i, p) {\n            squiffy.story.run(p);\n        });\n        $.each(passages.reverse(), function (i, p) {\n            squiffy.ui.write(p.text);\n        });\n        squiffy.story.save();\n    };\n</code></pre>\n<p>A few things changed here. The order of operations changes for master passages. Basically, the scripts run and then the test is displayed, rather than sctipt-text-script-text.</p>\n<p>And secondly, a passage in the master section can be called from anywhere, if the section doesn't have a passage with the same name. So you could have stuff like links to <code>[inventory]</code>, <code>[stats]</code>, or <code>[help]</code> in the master section and those links will then work anywhere in the game.</p>\n\n",
      "PostDate": "2020-10-07T17:18:57.2910704Z",
      "LastEditDate": "2020-10-15T11:05:48.6110224Z",
      "link": null
    },
    {
      "PostId": "e0c37c93-c3f7-418e-b1ee-4b018126aabd",
      "UserId": 10695,
      "Username": "Rich Bunnett",
      "AvatarUrl": "https://graph.facebook.com/500025716/picture?width=80&height=80",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Where would this be placed?",
      "EditableFormat": "markdown",
      "HTML": "<p>Where would this be placed?</p>\n\n",
      "PostDate": "2020-10-14T23:28:45.2650008Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "47e64cff-fa79-4f88-a3bf-0718fc90b960",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It needs to run before any links that use it. I'd suggest at the start of the game; but then I'm not sure how that will interact with loading saved games. You could put it in the master section; it would be inefficient, but probably not enough to be noticeable.",
      "EditableFormat": "markdown",
      "HTML": "<p>It needs to run before any links that use it. I'd suggest at the start of the game; but then I'm not sure how that will interact with loading saved games. You could put it in the master section; it would be inefficient, but probably not enough to be noticeable.</p>\n\n",
      "PostDate": "2020-10-15T10:52:47.4498127Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "31729dc3-b5d8-4307-b756-3b5552f8fcf6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, I tested it myself now, putting it in the master section.\r\n\r\nCorrected two variable names in the code above (careless typo, my phone isn't good at capitals), and included the body of the function `setSeen` because it can't be called from user code.\r\n\r\nWorks for me now :)",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, I tested it myself now, putting it in the master section.</p>\n<p>Corrected two variable names in the code above (careless typo, my phone isn't good at capitals), and included the body of the function <code>setSeen</code> because it can't be called from user code.</p>\n<p>Works for me now :)</p>\n\n",
      "PostDate": "2020-10-15T11:07:34.8868122Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "391252f7-ab32-41e7-af44-d514e292ce7b",
      "UserId": 10695,
      "Username": "Rich Bunnett",
      "AvatarUrl": "https://graph.facebook.com/500025716/picture?width=80&height=80",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The passage works:\r\n\r\n```\r\n[[]]:\r\n<button onclick=\"window.story.passage('inventory');\">Inventory</button>}\r\n\r\n[inventory]:\r\nYou have Gold x {gold}\r\n```\r\nBut to avoid my header [] being filled up with lots of passages as I add buttons into the header, would it be better to use sections outside of it? I get the sections to run, but then I don't know how to \"return\" to the original section:\r\n\r\n```\r\n[[]]:\r\n<button onclick=\"window.story.go('inventory');\">Inventory</button>}\r\n\r\n[[inventory]]:\r\nYou have Gold x {gold}\r\n\r\n[[section 1]]:\r\nSection 1 appeared, player pressed inventory, once completed, how do I get control back here?\r\nSo they can now go to [[section 2]]\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The passage works:</p>\n<pre><code>[[]]:\n&lt;button onclick=\"window.story.passage('inventory');\"&gt;Inventory&lt;/button&gt;}\n\n[inventory]:\nYou have Gold x {gold}\n</code></pre>\n<p>But to avoid my header [] being filled up with lots of passages as I add buttons into the header, would it be better to use sections outside of it? I get the sections to run, but then I don't know how to \"return\" to the original section:</p>\n<pre><code>[[]]:\n&lt;button onclick=\"window.story.go('inventory');\"&gt;Inventory&lt;/button&gt;}\n\n[[inventory]]:\nYou have Gold x {gold}\n\n[[section 1]]:\nSection 1 appeared, player pressed inventory, once completed, how do I get control back here?\nSo they can now go to [[section 2]]\n</code></pre>\n\n",
      "PostDate": "2020-10-15T20:45:55.5743689Z",
      "LastEditDate": "2020-10-15T20:47:21.8832301Z",
      "link": null
    },
    {
      "PostId": "3f6e3dcd-a676-4f96-873e-c4a74bf5795b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> but then I don't know how to \"return\" to the original section:\r\n\r\nYou can only be in one section at a time. If you want to be able to click a link and do something but then go back, you need to use passages.\r\n\r\nBy default, passages have to be inside the current section. My modification makes it so that passages can be inside the current section *or* the master section.\r\n\r\nI'm not  sure why doing it with passages would be a problem. The code looks virtually the same whether it has single or double [brackets] in.\r\n\r\nBut, if you really want to do it that way, you could change:\r\n<pre><code style=\"color: brown\">        } else if (masterSection && masterSection.passages[passageName]) {\r\n            passage = masterSection.passages[passageName];</code></pre>\r\nto:\r\n<pre><code style=\"color: green\">        } else if (squiffy.story.sections[passageName]) {\r\n            passage = squiffy.story.sections[passageName];</code></pre>\r\n\r\nThis  would mean that you can now use passage links that point to a section.\r\n\r\nSo, using `window.story.go('inventory')` or `[[inventory]]` will go to the inventory, and disable all other links to the current section.\r\nBut using `window.story.passage('inventory')` or `[inventory]` will *display* the inventory section, without changing the current section, and without disabling any links currently on the screen.\r\n\r\nIs that what you were looking for?\r\n\r\n(If  there is a passage with that name, the behaviour will be as default. This modification just causes Squiffy to treat a section as a passage if the passage isn't found)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>but then I don't know how to \"return\" to the original section:</p>\n</blockquote>\n<p>You can only be in one section at a time. If you want to be able to click a link and do something but then go back, you need to use passages.</p>\n<p>By default, passages have to be inside the current section. My modification makes it so that passages can be inside the current section <em>or</em> the master section.</p>\n<p>I'm not  sure why doing it with passages would be a problem. The code looks virtually the same whether it has single or double [brackets] in.</p>\n<p>But, if you really want to do it that way, you could change:</p>\n<pre><code style=\"color: brown\">        } else if (masterSection &amp;&amp; masterSection.passages[passageName]) {\n            passage = masterSection.passages[passageName];</code></pre>\n<p>to:</p>\n<pre><code style=\"color: green\">        } else if (squiffy.story.sections[passageName]) {\n            passage = squiffy.story.sections[passageName];</code></pre>\n<p>This  would mean that you can now use passage links that point to a section.</p>\n<p>So, using <code>window.story.go('inventory')</code> or <code>[[inventory]]</code> will go to the inventory, and disable all other links to the current section.<br>\nBut using <code>window.story.passage('inventory')</code> or <code>[inventory]</code> will <em>display</em> the inventory section, without changing the current section, and without disabling any links currently on the screen.</p>\n<p>Is that what you were looking for?</p>\n<p>(If  there is a passage with that name, the behaviour will be as default. This modification just causes Squiffy to treat a section as a passage if the passage isn't found)</p>\n\n",
      "PostDate": "2020-10-15T22:52:25.768758Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8fb88252-19d5-47ed-a783-bfb95c591aae",
      "UserId": 10695,
      "Username": "Rich Bunnett",
      "AvatarUrl": "https://graph.facebook.com/500025716/picture?width=80&height=80",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "_I'm not sure why doing it with passages would be a problem._\r\n\r\nIt might be my design or simply my understanding. I plan on having several buttons in the master section so they are always available so people can eat, inventory, take a potion etc. at any time regardless of the actual section they are in. Is this the best way to do this - is it good practice to do it that way, and then using your script, is it ok to have several large passages in the master section to be called by them? i.e. they are always going to be \"referred to\" (although ignored unless button pressed) every new section as the master is called every time?",
      "EditableFormat": "markdown",
      "HTML": "<p><em>I'm not sure why doing it with passages would be a problem.</em></p>\n<p>It might be my design or simply my understanding. I plan on having several buttons in the master section so they are always available so people can eat, inventory, take a potion etc. at any time regardless of the actual section they are in. Is this the best way to do this - is it good practice to do it that way, and then using your script, is it ok to have several large passages in the master section to be called by them? i.e. they are always going to be \"referred to\" (although ignored unless button pressed) every new section as the master is called every time?</p>\n\n",
      "PostDate": "2020-10-16T21:26:43.6018163Z",
      "LastEditDate": "2020-10-16T21:27:39.5374451Z",
      "link": null
    },
    {
      "PostId": "1bfc4ed1-c2e3-4429-8478-43e9bf4117e7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> is it ok to have several large passages in the master section to be called by them?\r\n\r\nEfficiency wise, it could go either way. I can't see any problem having a section containing a large number of passages. It's like putting a bunch of files into a folder.\r\n\r\nWhat I understand from looking at the code is that passages are designed to be things that you look at, while sections are things you go to. Squiffy keeps track of the 'current section', and once that changes all links in the old section are no longer usable. A passage doesn't affect what section you're in, and there is no concept of a current passage. You can look at a whole bunch of passages one after another, and all the links will remain active until you leave the section.\r\n\r\nFrom this understanding, it seems that stuff the player can do anywhere is more like a passage than a section.\r\n\r\nBut, with the code above you could do it either way. Even include both if you want to. So you can structure your game whichever way is easier for you to understand.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>is it ok to have several large passages in the master section to be called by them?</p>\n</blockquote>\n<p>Efficiency wise, it could go either way. I can't see any problem having a section containing a large number of passages. It's like putting a bunch of files into a folder.</p>\n<p>What I understand from looking at the code is that passages are designed to be things that you look at, while sections are things you go to. Squiffy keeps track of the 'current section', and once that changes all links in the old section are no longer usable. A passage doesn't affect what section you're in, and there is no concept of a current passage. You can look at a whole bunch of passages one after another, and all the links will remain active until you leave the section.</p>\n<p>From this understanding, it seems that stuff the player can do anywhere is more like a passage than a section.</p>\n<p>But, with the code above you could do it either way. Even include both if you want to. So you can structure your game whichever way is easier for you to understand.</p>\n\n",
      "PostDate": "2020-10-16T23:39:29.8057213Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "18a8b13e-54d2-4fff-9c3f-2dd1ce3c312a",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel, I agree. These would be extremely helpful changes to the next version.",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel, I agree. These would be extremely helpful changes to the next version.</p>\n\n",
      "PostDate": "2020-11-17T00:34:46.9006784Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
