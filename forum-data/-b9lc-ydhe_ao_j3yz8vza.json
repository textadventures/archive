{
  "Topic": {
    "TopicId": "-b9lc-ydhe_ao_j3yz8vza",
    "ForumId": "10",
    "Title": "Menu Structure",
    "LastUpdated": "2020-04-26T02:57:01.8022765Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "629bfd37-9318-439c-a8a5-ab81e8ae80f4",
      "UserId": 17092,
      "Username": "GAGE HOLSTON",
      "AvatarUrl": "https://secure.gravatar.com/avatar/57b86a567d503acfa104a604accfa863?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In my game, the player at one point gains access to a computer terminal in a store and has to use it to buy something. What I would like to do is have a menu the player has to go through to get to the item, but there are other stuff the player can look at it and essitentally have this whole system of menus to go through\r\n\r\nFor Example\r\nPlayer uses the terminal and gets the following choices in a menu\r\n\r\n1- Item Set A\r\n2- Item Set B\r\n3- Item Set C\r\n4- Leave (Exit Terminal)\r\n\r\nThe player chooses Item Set A\r\n\r\n1- Item 1\r\n2- Item 2\r\n3- Item 3\r\n4- Return (Takes them back to Item Set Menu)\r\n\r\nThe player chooses Item 1\r\n\r\n(Description of Item 1)\r\n\r\n1- Buy (Will trigger an event if the player is allowed. Otherwise throws up a message saying why the player can't buy it)\r\n2- Return (Back to Item menu)\r\n\r\nThat might be a little too complicated, but I felt it would just be something fun the player can mess around with while also getting the item they actually need, like the RadioShock/Hz. So Good from SQ4.\r\n\r\nThe main issue, as the topic name might indicate, is how would I go pulling this off in Quest? And will I actually be able to follow how to do it?",
      "EditableFormat": "markdown",
      "HTML": "<p>In my game, the player at one point gains access to a computer terminal in a store and has to use it to buy something. What I would like to do is have a menu the player has to go through to get to the item, but there are other stuff the player can look at it and essitentally have this whole system of menus to go through</p>\n<p>For Example<br>\nPlayer uses the terminal and gets the following choices in a menu</p>\n<p>1- Item Set A<br>\n2- Item Set B<br>\n3- Item Set C<br>\n4- Leave (Exit Terminal)</p>\n<p>The player chooses Item Set A</p>\n<p>1- Item 1<br>\n2- Item 2<br>\n3- Item 3<br>\n4- Return (Takes them back to Item Set Menu)</p>\n<p>The player chooses Item 1</p>\n<p>(Description of Item 1)</p>\n<p>1- Buy (Will trigger an event if the player is allowed. Otherwise throws up a message saying why the player can't buy it)<br>\n2- Return (Back to Item menu)</p>\n<p>That might be a little too complicated, but I felt it would just be something fun the player can mess around with while also getting the item they actually need, like the RadioShock/Hz. So Good from SQ4.</p>\n<p>The main issue, as the topic name might indicate, is how would I go pulling this off in Quest? And will I actually be able to follow how to do it?</p>\n\n",
      "PostDate": "2020-04-26T02:57:01.8022765Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "96ef4dea-e0de-4f27-b3a2-9836de668121",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could make a function for each menu, with an option which calls the function for the menu above. But I'd probably end up doing something like:\r\n\r\n```\r\n<function name=\"shopmenu\" parameters=\"submenu\">\r\n  if (not HasAttribute (game, \"menuoptions\")) {\r\n    game.menuoptions = NewDictionary()\r\n    dictionary add (game.menuoptions, \"A\", Split(\"item1;item2;item3\"))\r\n    dictionary add (game.menuoptions, \"B\", Split(\"item3;item4;item5\"))\r\n    dictionary add (game.menuoptions, \"C\", Split(\"item6;item7\"))\r\n    dictionary add (game.menuoptions, \"buy:item5\", \"Sorry, that item is out of stock\")\r\n\r\n    mainmenu = NewStringDictionary()\r\n    dictionary add (mainmenu, \"A\", \"Item Set A\")\r\n    dictionary add (mainmenu, \"B\", \"Item Set B\")\r\n    dictionary add (mainmenu, \"C\", \"Item Set C\")\r\n    dictionary add (mainmenu, \"examples\", \"Silly examples of things this script can do\")\r\n    dictionary add (mainmenu, \"exit_menu\", \"Leave\")\r\n    dictionary add (game.menuoptions, \"main\", mainmenu)\r\n\r\n    // Some silly examples\r\n    dictionary add (game.menuoptions, \"examples\", Split(\"alarm;explode\"))\r\n    alarmscript => {\r\n      msg (\"The alarm starts going off! Security might be here soon\")\r\n      game.alarm_sounded = true\r\n      shopmenu (\"return\")\r\n    }\r\n    dictionary add (game.menuoptions, \"alarm\", alarmscript)\r\n    explodescript => {\r\n      msg (\"The terminal explodes!\")\r\n      RemoveObject (shop terminal)\r\n      shopmenu (\"exit_menu\")\r\n    }\r\n    dictionary add (game.menuoptions, \"alarm\", alarmscript)\r\n\r\n    game.parentmenu = NewStringList()\r\n  }\r\n\r\n  switch (submenu) {\r\n    case (\"exit_menu\") {\r\n      ShowRoomDescription()\r\n      game.menuoptions = null\r\n      game.parentmenu = null\r\n    }\r\n    case (\"return\", \"Return to previous menu\") {\r\n      currentmenu = ListItem (game.parentmenu, 0)\r\n      list remove (game.parentmenu, currentmenu)\r\n      previousmenu = ListItem (game.parentmenu, 0)\r\n      list remove (game.parentmenu, previousmenu)\r\n      shopmenu (previousmenu)\r\n    }\r\n    default {\r\n      // clunky way to add an item to the beginning of a list:\r\n      game.parentmenu = ListCombine (Split(submenu), game.parentmenu)\r\n\r\n      if (DictionaryContains (game.menuoptions, submenu)) {\r\n        options = DictionaryItem (game.menuoptions, submenu)\r\n        if (TypeOf (options) = \"string\") {\r\n          // It's a \"sorry you can't buy that\" message\r\n          msg (options)\r\n          wait {\r\n            shopmenu (\"return\")\r\n          }\r\n        }\r\n        else if (TypeOf (options) = \"script\") {\r\n          invoke (options)\r\n        }\r\n        else {\r\n          if (EndsWith(TypeOf(options), \"dictionary\")) {\r\n            if (not DictionaryContains (options, \"return\") and not DictionaryContains (options, \"exit_menu\") ) {\r\n              if (not DictionaryContains (options, \"return\")) {\r\n                dictionary add (options, \"return\", \"Return to previous menu\")\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            if (not ListContains (options, \"return\") and not ListContains (options, \"exit_menu\") ) {\r\n              list add (options, \"Return to previous menu\")\r\n            }\r\n          }\r\n          ShowMenu (\"Choose an option!\", options, false) {\r\n            shopmenu (result)\r\n          }\r\n        }\r\n      }\r\n      else if (not GetObject (submenu) = null) {\r\n        item = GetObject (submenu)\r\n        // Add whatever code you want to use for displaying the object; I just use its name and 'look' description\r\n        msg (\"{b:{object:\"+submenu+\"}}\")\r\n        msg (GetString (item, \"look\"))\r\n        options = NewStringDictionary()\r\n        dictionary add (options, \"buy:\"+submenu, \"Buy\")\r\n        dictionary add (options, \"return\"+submenu, \"Return\")\r\n        ShowMenu (\"Buy this item?\", options, false) {\r\n          shopmenu (result)\r\n        }\r\n      }\r\n      else if (StartsWith (submenu, \"buy:\")) {\r\n        item = GetObject (Mid (submenu, 5))\r\n        AddToInventory (item)\r\n        msg (\"You purchase the {object:\"+item+\"}\")\r\n\r\n        // We probably want to return to the list of items, not to the item we just bought, so these 2 lines go up an extra level\r\n        currentmenu = ListItem (game.parentmenu, 0)\r\n        list remove (game.parentmenu, currentmenu)\r\n\r\n        shopmenu (\"return\")\r\n      }\r\n      else {\r\n        error (\"Can't find menu:\" + submenu)\r\n      }\r\n    }\r\n  }\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You could make a function for each menu, with an option which calls the function for the menu above. But I'd probably end up doing something like:</p>\n<pre><code>&lt;function name=\"shopmenu\" parameters=\"submenu\"&gt;\n  if (not HasAttribute (game, \"menuoptions\")) {\n    game.menuoptions = NewDictionary()\n    dictionary add (game.menuoptions, \"A\", Split(\"item1;item2;item3\"))\n    dictionary add (game.menuoptions, \"B\", Split(\"item3;item4;item5\"))\n    dictionary add (game.menuoptions, \"C\", Split(\"item6;item7\"))\n    dictionary add (game.menuoptions, \"buy:item5\", \"Sorry, that item is out of stock\")\n\n    mainmenu = NewStringDictionary()\n    dictionary add (mainmenu, \"A\", \"Item Set A\")\n    dictionary add (mainmenu, \"B\", \"Item Set B\")\n    dictionary add (mainmenu, \"C\", \"Item Set C\")\n    dictionary add (mainmenu, \"examples\", \"Silly examples of things this script can do\")\n    dictionary add (mainmenu, \"exit_menu\", \"Leave\")\n    dictionary add (game.menuoptions, \"main\", mainmenu)\n\n    // Some silly examples\n    dictionary add (game.menuoptions, \"examples\", Split(\"alarm;explode\"))\n    alarmscript =&gt; {\n      msg (\"The alarm starts going off! Security might be here soon\")\n      game.alarm_sounded = true\n      shopmenu (\"return\")\n    }\n    dictionary add (game.menuoptions, \"alarm\", alarmscript)\n    explodescript =&gt; {\n      msg (\"The terminal explodes!\")\n      RemoveObject (shop terminal)\n      shopmenu (\"exit_menu\")\n    }\n    dictionary add (game.menuoptions, \"alarm\", alarmscript)\n\n    game.parentmenu = NewStringList()\n  }\n\n  switch (submenu) {\n    case (\"exit_menu\") {\n      ShowRoomDescription()\n      game.menuoptions = null\n      game.parentmenu = null\n    }\n    case (\"return\", \"Return to previous menu\") {\n      currentmenu = ListItem (game.parentmenu, 0)\n      list remove (game.parentmenu, currentmenu)\n      previousmenu = ListItem (game.parentmenu, 0)\n      list remove (game.parentmenu, previousmenu)\n      shopmenu (previousmenu)\n    }\n    default {\n      // clunky way to add an item to the beginning of a list:\n      game.parentmenu = ListCombine (Split(submenu), game.parentmenu)\n\n      if (DictionaryContains (game.menuoptions, submenu)) {\n        options = DictionaryItem (game.menuoptions, submenu)\n        if (TypeOf (options) = \"string\") {\n          // It's a \"sorry you can't buy that\" message\n          msg (options)\n          wait {\n            shopmenu (\"return\")\n          }\n        }\n        else if (TypeOf (options) = \"script\") {\n          invoke (options)\n        }\n        else {\n          if (EndsWith(TypeOf(options), \"dictionary\")) {\n            if (not DictionaryContains (options, \"return\") and not DictionaryContains (options, \"exit_menu\") ) {\n              if (not DictionaryContains (options, \"return\")) {\n                dictionary add (options, \"return\", \"Return to previous menu\")\n              }\n            }\n          }\n          else {\n            if (not ListContains (options, \"return\") and not ListContains (options, \"exit_menu\") ) {\n              list add (options, \"Return to previous menu\")\n            }\n          }\n          ShowMenu (\"Choose an option!\", options, false) {\n            shopmenu (result)\n          }\n        }\n      }\n      else if (not GetObject (submenu) = null) {\n        item = GetObject (submenu)\n        // Add whatever code you want to use for displaying the object; I just use its name and 'look' description\n        msg (\"{b:{object:\"+submenu+\"}}\")\n        msg (GetString (item, \"look\"))\n        options = NewStringDictionary()\n        dictionary add (options, \"buy:\"+submenu, \"Buy\")\n        dictionary add (options, \"return\"+submenu, \"Return\")\n        ShowMenu (\"Buy this item?\", options, false) {\n          shopmenu (result)\n        }\n      }\n      else if (StartsWith (submenu, \"buy:\")) {\n        item = GetObject (Mid (submenu, 5))\n        AddToInventory (item)\n        msg (\"You purchase the {object:\"+item+\"}\")\n\n        // We probably want to return to the list of items, not to the item we just bought, so these 2 lines go up an extra level\n        currentmenu = ListItem (game.parentmenu, 0)\n        list remove (game.parentmenu, currentmenu)\n\n        shopmenu (\"return\")\n      }\n      else {\n        error (\"Can't find menu:\" + submenu)\n      }\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2020-04-26T11:59:01.9396378Z",
      "LastEditDate": "2020-04-26T13:28:06.5209068Z",
      "link": null
    },
    {
      "PostId": "b2fcc0ff-0999-428f-8caa-098738586a07",
      "UserId": 17092,
      "Username": "GAGE HOLSTON",
      "AvatarUrl": "https://secure.gravatar.com/avatar/57b86a567d503acfa104a604accfa863?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, I got it working. Thanks for the help.",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, I got it working. Thanks for the help.</p>\n\n",
      "PostDate": "2020-04-28T01:12:15.082401Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
