{
  "Topic": {
    "TopicId": "kdgzfynd-e2ql6zgpdalsq",
    "ForumId": "10",
    "Title": "Classes and types and base objects... (oh my!)",
    "LastUpdated": "2017-08-29T03:35:09.5727208Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "fae80e62-51d6-4dbc-b3b9-5da5f2d13c7d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay....\r\n\r\n\r\n1. Type\r\n\r\n- I make a type with attributes.\r\n- I make and object of that type, than enable the attributes which are darkened out?\r\n\r\n2. classes\r\n - no idea\r\n\r\n3. base objects\r\n- Mmmm...\r\n- Yeah... No clue.\r\n\r\n\r\n---\r\n@HK\r\n\r\nI figured I'd start a new thread, instead of totally taking over Anthony the Tiger's thread.\r\n\r\n\r\n---\r\nOkay.\r\n\r\nSomebody hit me with something. \r\n\r\nLinks. Examples. Theories...\r\n\r\nI'm ready.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay....</p>\n<ol>\n<li>Type</li>\n</ol>\n<ul>\n<li>I make a type with attributes.</li>\n<li>I make and object of that type, than enable the attributes which are darkened out?</li>\n</ul>\n<ol start=\"2\">\n<li>classes</li>\n</ol>\n<ul>\n<li>no idea</li>\n</ul>\n<ol start=\"3\">\n<li>base objects</li>\n</ol>\n<ul>\n<li>Mmmm...</li>\n<li>Yeah... No clue.</li>\n</ul>\n<hr>\n<p>@HK</p>\n<p>I figured I'd start a new thread, instead of totally taking over Anthony the Tiger's thread.</p>\n<hr>\n<p>Okay.</p>\n<p>Somebody hit me with something.</p>\n<p>Links. Examples. Theories...</p>\n<p>I'm ready.</p>\n\n",
      "PostDate": "2017-08-29T03:35:09.5727208Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "db23cf71-1822-4a0b-b9ef-0d7c7818e657",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "well, in quest at the user level, it's much more simple:\r\n\r\nObject Types / Types / Inherited Attributes\r\n\r\nthink of an Object Type basically as a basket of eggs (Attributes), so instead of manually giving/handing an Object, an egg by an egg (Attribute by Attribute), you can just give the Object a basket (an Object Type, via as an Inherited Attribute).\r\n\r\n----------------------\r\n\r\nfor example, not using an Object Type (YUCK!):\r\n\r\n```\r\n<object name=\"player_1\">\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n  <attr name=\"parent\" type=\"object\">player_data_room_object</attr>\r\n  <attr name=\"alias\" type=\"string\">unknown</attr>\r\n  <attr name=\"strength\" type=\"int\">0</attr>\r\n  <attr name=\"endurance\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity\" type=\"int\">0</attr>\r\n  <attr name=\"agility\" type=\"int\">0</attr>\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"luck\" type=\"int\">0</attr>\r\n  <attr name=\"look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"pov_look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"current_level\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_level\" type=\"int\">0</attr>\r\n  <attr name=\"minimum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"current_experience\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_experience\" type=\"int\">0</attr>\r\n  <attr name=\"life\" type=\"string\">unknown</attr>\r\n  <attr name=\"current_life\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">0</attr>\r\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\r\n</object>\r\n\r\n<object name=\"player_2\">\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n  <attr name=\"parent\" type=\"object\">player_data_room_object</attr>\r\n  <attr name=\"alias\" type=\"string\">unknown</attr>\r\n  <attr name=\"strength\" type=\"int\">0</attr>\r\n  <attr name=\"endurance\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity\" type=\"int\">0</attr>\r\n  <attr name=\"agility\" type=\"int\">0</attr>\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"luck\" type=\"int\">0</attr>\r\n  <attr name=\"look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"pov_look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"current_level\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_level\" type=\"int\">0</attr>\r\n  <attr name=\"minimum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"current_experience\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_experience\" type=\"int\">0</attr>\r\n  <attr name=\"life\" type=\"string\">unknown</attr>\r\n  <attr name=\"current_life\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">0</attr>\r\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\r\n</object>\r\n\r\n<object name=\"player_3\">\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n  <attr name=\"parent\" type=\"object\">player_data_room_object</attr>\r\n  <attr name=\"alias\" type=\"string\">unknown</attr>\r\n  <attr name=\"strength\" type=\"int\">0</attr>\r\n  <attr name=\"endurance\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity\" type=\"int\">0</attr>\r\n  <attr name=\"agility\" type=\"int\">0</attr>\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"luck\" type=\"int\">0</attr>\r\n  <attr name=\"look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"pov_look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"current_level\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_level\" type=\"int\">0</attr>\r\n  <attr name=\"minimum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"current_experience\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_experience\" type=\"int\">0</attr>\r\n  <attr name=\"life\" type=\"string\">unknown</attr>\r\n  <attr name=\"current_life\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">0</attr>\r\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\r\n</object>\r\n```\r\n\r\n-----------\r\n\r\nvs using an Object Type (much better!):\r\n\r\n```\r\n<type name=\"player_type\">\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n  <attr name=\"parent\" type=\"object\">player_data_room_object</attr>\r\n  <attr name=\"alias\" type=\"string\">unknown</attr>\r\n  <attr name=\"strength\" type=\"int\">0</attr>\r\n  <attr name=\"endurance\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity\" type=\"int\">0</attr>\r\n  <attr name=\"agility\" type=\"int\">0</attr>\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"luck\" type=\"int\">0</attr>\r\n  <attr name=\"look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"pov_look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"current_level\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_level\" type=\"int\">0</attr>\r\n  <attr name=\"minimum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"current_experience\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_experience\" type=\"int\">0</attr>\r\n  <attr name=\"life\" type=\"string\">unknown</attr>\r\n  <attr name=\"current_life\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">0</attr>\r\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\r\n</type>\r\n\r\n<object name=\"player_1\">\r\n  <inherit name=\"player_type\" />\r\n</object>\r\n\r\n<object name=\"player_2\">\r\n  <inherit name=\"player_type\" />\r\n</object>\r\n\r\n<object name=\"player_3\">\r\n  <inherit name=\"player_type\" />\r\n</object>\r\n```\r\n\r\n-------------\r\n\r\nyou can also over-ride/over-write inherited Attributes too (or if you want to be able to manipulate those Inherited Attributes, you MUST over-ride / over-write them first, before you can then manipulate/change/adjust/alter them):\r\n\r\n```\r\n<type name=\"player_type\">\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n  <attr name=\"parent\" type=\"object\">player_data_room_object</attr>\r\n  <attr name=\"alias\" type=\"string\">unknown</attr>\r\n  <attr name=\"strength\" type=\"int\">0</attr>\r\n  <attr name=\"endurance\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity\" type=\"int\">0</attr>\r\n  <attr name=\"agility\" type=\"int\">0</attr>\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"luck\" type=\"int\">0</attr>\r\n  <attr name=\"look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"pov_look\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n  <attr name=\"current_level\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_level\" type=\"int\">0</attr>\r\n  <attr name=\"minimum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_currency\" type=\"int\">0</attr>\r\n  <attr name=\"current_experience\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_experience\" type=\"int\">0</attr>\r\n  <attr name=\"life\" type=\"string\">unknown</attr>\r\n  <attr name=\"current_life\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">0</attr>\r\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\r\n</type>\r\n\r\n<object name=\"player_1\">\r\n  <inherit name=\"player_type\" />\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n</object>\r\n\r\n<object name=\"player_2\">\r\n  <inherit name=\"player_type\" />\r\n</object>\r\n\r\n<object name=\"player_3\">\r\n  <inherit name=\"player_type\" />\r\n</object>\r\n\r\n// results:\r\n\r\nPlayer 1 Strength: 100 // the '100' Value replaces the Inherited '0' Value, as you over-rode/over-written the Inherited Attribute\r\nPlayer 2 Strength: 0\r\nPlayer 3 Strength: 0\r\n\r\n// also:\r\n\r\nplayer_1.strength = player_1.strength + 1 // NO error, as since we over-ridden/over-wrote the Inherited Attribute, we can now do this manipulation of it.\r\n\r\nplayer_2.strength = player_2.strength + 1 // ERROR!!! Inherited Attributes are blocked-off from being manipulated/changed!!!\r\n```\r\n\r\n---------------\r\n\r\nObject Types / Types / Inherited Attributes:\r\n\r\nreally useful for Script Attributes, as usually these are universally the same for their related Objects, and you can use the 'this' key-word/key-command as well too (works wonderfully with Object Types)\r\n\r\nSome non-Script Attributes are universal/shared in their Values across related Objects (for example, for monster types of Objects, usually for simple designs, you use a 'dead' Boolean Attribute, and thus all of them start of as 'alive', aka: 'false' for their initial Value), but most non-Script Attributes are individual for each related Object, so generally not too great for using with Object Types (unless you want to ensure they have an Attribute, instead of using scripting to check if they have an Attribute, and create it if they don't).\r\n\r\nAlso, if you don't use the 'cloning' feature, then Object Types are good with Attributes (if you want your Objects to be the exact same):\r\n\r\n```\r\n<type name=\"orc_type\">\r\n  <attr name=\"strength\" type=\"int\">10</attr>\r\n  <attr name=\"endurance\" type=\"int\">10</attr>\r\n  <attr name=\"dexterity\" type=\"int\">10</attr>\r\n  <attr name=\"agility\" type=\"int\">10</attr>\r\n  <attr name=\"speed\" type=\"int\">10</attr>\r\n  <attr name=\"luck\" type=\"int\">10</attr>\r\n</type>\r\n\r\n<object name=\"orc_1\">\r\n  <inherit name=\"orc_type\" />\r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <inherit name=\"orc_type\" />\r\n</object>\r\n\r\n<object name=\"orc_3\">\r\n  <inherit name=\"orc_type\" />\r\n</object>\r\n\r\n<type name=\"orc_king_type\">\r\n  <attr name=\"strength\" type=\"int\">20</attr>\r\n  <attr name=\"endurance\" type=\"int\">20</attr>\r\n  <attr name=\"dexterity\" type=\"int\">20</attr>\r\n  <attr name=\"agility\" type=\"int\">20</attr>\r\n  <attr name=\"speed\" type=\"int\">20</attr>\r\n  <attr name=\"luck\" type=\"int\">20</attr>\r\n</type>\r\n\r\n<object name=\"orc_king_1\">\r\n  <inherit name=\"orc_king_type\" />\r\n</object>\r\n\r\n<object name=\"orc_king_2\">\r\n  <inherit name=\"orc_king_type\" />\r\n</object>\r\n\r\n<object name=\"orc_king_3\">\r\n  <inherit name=\"orc_king_type\" />\r\n</object>\r\n\r\n<type name=\"ogre_type\">\r\n  <attr name=\"strength\" type=\"int\">50</attr>\r\n  <attr name=\"endurance\" type=\"int\">50</attr>\r\n  <attr name=\"dexterity\" type=\"int\">50</attr>\r\n  <attr name=\"agility\" type=\"int\">50</attr>\r\n  <attr name=\"speed\" type=\"int\">50</attr>\r\n  <attr name=\"luck\" type=\"int\">50</attr>\r\n</type>\r\n\r\n<object name=\"ogre_1\">\r\n  <inherit name=\"ogre_type\" />\r\n</object>\r\n\r\n<object name=\"ogre_2\">\r\n  <inherit name=\"ogre_type\" />\r\n</object>\r\n\r\n<object name=\"ogre_3\">\r\n  <inherit name=\"ogre_type\" />\r\n</object>\r\n\r\n<type name=\"ogre_magi_type\">\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n  <attr name=\"endurance\" type=\"int\">100</attr>\r\n  <attr name=\"dexterity\" type=\"int\">100</attr>\r\n  <attr name=\"agility\" type=\"int\">100</attr>\r\n  <attr name=\"speed\" type=\"int\">100</attr>\r\n  <attr name=\"luck\" type=\"int\">100</attr>\r\n</type>\r\n\r\n<object name=\"ogre_magi_1\">\r\n  <inherit name=\"ogre_magi_type\" />\r\n</object>\r\n\r\n<object name=\"ogre_magi_2\">\r\n  <inherit name=\"ogre_magi_type\" />\r\n</object>\r\n\r\n<object name=\"ogre_magi_3\">\r\n  <inherit name=\"ogre_magi_type\" />\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>well, in quest at the user level, it's much more simple:</p>\n<p>Object Types / Types / Inherited Attributes</p>\n<p>think of an Object Type basically as a basket of eggs (Attributes), so instead of manually giving/handing an Object, an egg by an egg (Attribute by Attribute), you can just give the Object a basket (an Object Type, via as an Inherited Attribute).</p>\n<hr>\n<p>for example, not using an Object Type (YUCK!):</p>\n<pre><code>&lt;object name=\"player_1\"&gt;\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player_data_room_object&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"pov_look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"current_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"minimum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"current_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\n&lt;/object&gt;\n\n&lt;object name=\"player_2\"&gt;\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player_data_room_object&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"pov_look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"current_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"minimum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"current_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\n&lt;/object&gt;\n\n&lt;object name=\"player_3\"&gt;\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player_data_room_object&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"pov_look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"current_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"minimum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"current_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>vs using an Object Type (much better!):</p>\n<pre><code>&lt;type name=\"player_type\"&gt;\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player_data_room_object&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"pov_look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"current_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"minimum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"current_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\n&lt;/type&gt;\n\n&lt;object name=\"player_1\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player_2\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player_3\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>you can also over-ride/over-write inherited Attributes too (or if you want to be able to manipulate those Inherited Attributes, you MUST over-ride / over-write them first, before you can then manipulate/change/adjust/alter them):</p>\n<pre><code>&lt;type name=\"player_type\"&gt;\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player_data_room_object&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"pov_look\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"current_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"minimum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_currency\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"current_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;0&lt;/attr&gt;\n  // etc etc etc common/universal/shared Attributes amongst your Player Objects\n&lt;/type&gt;\n\n&lt;object name=\"player_1\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player_2\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player_3\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n&lt;/object&gt;\n\n// results:\n\nPlayer 1 Strength: 100 // the '100' Value replaces the Inherited '0' Value, as you over-rode/over-written the Inherited Attribute\nPlayer 2 Strength: 0\nPlayer 3 Strength: 0\n\n// also:\n\nplayer_1.strength = player_1.strength + 1 // NO error, as since we over-ridden/over-wrote the Inherited Attribute, we can now do this manipulation of it.\n\nplayer_2.strength = player_2.strength + 1 // ERROR!!! Inherited Attributes are blocked-off from being manipulated/changed!!!\n</code></pre>\n<hr>\n<p>Object Types / Types / Inherited Attributes:</p>\n<p>really useful for Script Attributes, as usually these are universally the same for their related Objects, and you can use the 'this' key-word/key-command as well too (works wonderfully with Object Types)</p>\n<p>Some non-Script Attributes are universal/shared in their Values across related Objects (for example, for monster types of Objects, usually for simple designs, you use a 'dead' Boolean Attribute, and thus all of them start of as 'alive', aka: 'false' for their initial Value), but most non-Script Attributes are individual for each related Object, so generally not too great for using with Object Types (unless you want to ensure they have an Attribute, instead of using scripting to check if they have an Attribute, and create it if they don't).</p>\n<p>Also, if you don't use the 'cloning' feature, then Object Types are good with Attributes (if you want your Objects to be the exact same):</p>\n<pre><code>&lt;type name=\"orc_type\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;10&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_3\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"orc_king_type\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;20&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;20&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;20&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;20&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;20&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;20&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;object name=\"orc_king_1\"&gt;\n  &lt;inherit name=\"orc_king_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_king_2\"&gt;\n  &lt;inherit name=\"orc_king_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_king_3\"&gt;\n  &lt;inherit name=\"orc_king_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"ogre_type\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;50&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;object name=\"ogre_1\"&gt;\n  &lt;inherit name=\"ogre_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ogre_2\"&gt;\n  &lt;inherit name=\"ogre_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ogre_3\"&gt;\n  &lt;inherit name=\"ogre_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"ogre_magi_type\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;100&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;object name=\"ogre_magi_1\"&gt;\n  &lt;inherit name=\"ogre_magi_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ogre_magi_2\"&gt;\n  &lt;inherit name=\"ogre_magi_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ogre_magi_3\"&gt;\n  &lt;inherit name=\"ogre_magi_type\" /&gt;\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2017-08-29T04:07:29.2320073Z",
      "LastEditDate": "2017-08-29T04:20:01.6576763Z",
      "link": null
    },
    {
      "PostId": "dc71a3fa-0801-4305-b536-0567f705378e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you're talking about actual programming learning:\r\n\r\nDATA STRUCTURES, OBJECT-Oriented Programming (OOP) / OBJECT-Oriented Design (OOD), CLASSES, OBJECTS/INSTANCES, INSTANTIATION, declaration, initializing, ENCAPSULATION, INHERITANCE, POLYMORPHISM, and ETC\r\n\r\nthis is actually how the quest software is created and how it allows you to create your own library files (including your own engine library files), its actual underlying code (not the built-in user-level stuff): https://github.com/textadventures/quest --- notice how the code looks a lot like the stuff you read about in your research/learning of the 3 main full-bore programming languages:\r\n\r\nhttp://www.cplusplus.com/doc/tutorial/classes/\r\nhttps://www.tutorialspoint.com/cplusplus/cpp_classes_objects.htm\r\n\r\nhttps://docs.oracle.com/javase/tutorial/java/javaOO/\r\nhttps://www.tutorialspoint.com/java/java_object_classes.htm\r\n\r\nhttps://docs.python.org/3/tutorial/classes.html\r\nhttps://www.learnpython.org/en/Classes_and_Objects\r\n\r\n(there's A LOT MORE to using/learning these full-bore programming languages, and actually, you should NOT be starting with this stuff... as it's a lot more advanced than scripting... most first intro programming classes have you learn a language's scripting first, then they get into learning the stuff in the links above, over 1 to 2 classes, for each language. 1 to 2 classes to learn C++, 1 to 2 classes to learn Java, 1 to 2 classes to learn Python. And this is just learning the \"basics\" of these 3 programming languages: their scripting: \"hello world\" output/displayment, formatting output/displayment, VARIABLES, 'if', 'switch', looping, iteration, 'for', 'foreach', Functions, 'while', 'do while', terminators, recursion, input/output, displayment, and their Object-Oriented Programming/Design: Encapsulation, Inheritance, Polymorphism, CLASSES, OBJECTS, INSTANTIATING, pointers, constructors, destructors, structures / structs, arrays, lists, matrix'es, dictionaries, error and exception handling / 'throw/catch', etc etc etc)\r\n\r\n(then, you learn Data Structures Design / Data Management Design as a class: linked lists, abstract data structures, trees, maps, dictionaries, stacks, queues, etc)\r\n\r\n(then, you learn Assembly Language and \"basic\" Computer-Architecture/Digital-Design/Circuitry/logic-gates/computer-parts-components/half-adders/full-adders/multiplexors-mutex/registers/combinational-circuits/sequential-circuits/etc, etc etc etc)\r\n\r\n(then you're done with lower division classes... lol...now you got upper division classes to do, which I don't know, as I'm still stuck on Data Structures and Assembly Language and Computer Architecture, sighs. I do know that there's more classes on computer architecture and probably/definitely mathematical/theory programming classes too... I hate math!!!...)\r\n\r\nthis is the Computer Science (CS) field/major: the 'programming' (and beyond: everyone can program and be a programmer, but not everyone can program well --- this is what you learn from CS, becoming: a software engineer, an expert programmer, not an amateur programmer, which everyone can be/learn/do on their own) field/major, you can then if you want branch out into whatever specializations (A.I., neurological: man-machine, theorists, etc etc etc. I don't really know the field/s that well, lol)",
      "EditableFormat": "markdown",
      "HTML": "<p>if you're talking about actual programming learning:</p>\n<p>DATA STRUCTURES, OBJECT-Oriented Programming (OOP) / OBJECT-Oriented Design (OOD), CLASSES, OBJECTS/INSTANCES, INSTANTIATION, declaration, initializing, ENCAPSULATION, INHERITANCE, POLYMORPHISM, and ETC</p>\n<p>this is actually how the quest software is created and how it allows you to create your own library files (including your own engine library files), its actual underlying code (not the built-in user-level stuff): https://github.com/textadventures/quest --- notice how the code looks a lot like the stuff you read about in your research/learning of the 3 main full-bore programming languages:</p>\n<p>http://www.cplusplus.com/doc/tutorial/classes/<br>\nhttps://www.tutorialspoint.com/cplusplus/cpp_classes_objects.htm</p>\n<p>https://docs.oracle.com/javase/tutorial/java/javaOO/<br>\nhttps://www.tutorialspoint.com/java/java_object_classes.htm</p>\n<p>https://docs.python.org/3/tutorial/classes.html<br>\nhttps://www.learnpython.org/en/Classes_and_Objects</p>\n<p>(there's A LOT MORE to using/learning these full-bore programming languages, and actually, you should NOT be starting with this stuff... as it's a lot more advanced than scripting... most first intro programming classes have you learn a language's scripting first, then they get into learning the stuff in the links above, over 1 to 2 classes, for each language. 1 to 2 classes to learn C++, 1 to 2 classes to learn Java, 1 to 2 classes to learn Python. And this is just learning the \"basics\" of these 3 programming languages: their scripting: \"hello world\" output/displayment, formatting output/displayment, VARIABLES, 'if', 'switch', looping, iteration, 'for', 'foreach', Functions, 'while', 'do while', terminators, recursion, input/output, displayment, and their Object-Oriented Programming/Design: Encapsulation, Inheritance, Polymorphism, CLASSES, OBJECTS, INSTANTIATING, pointers, constructors, destructors, structures / structs, arrays, lists, matrix'es, dictionaries, error and exception handling / 'throw/catch', etc etc etc)</p>\n<p>(then, you learn Data Structures Design / Data Management Design as a class: linked lists, abstract data structures, trees, maps, dictionaries, stacks, queues, etc)</p>\n<p>(then, you learn Assembly Language and \"basic\" Computer-Architecture/Digital-Design/Circuitry/logic-gates/computer-parts-components/half-adders/full-adders/multiplexors-mutex/registers/combinational-circuits/sequential-circuits/etc, etc etc etc)</p>\n<p>(then you're done with lower division classes... lol...now you got upper division classes to do, which I don't know, as I'm still stuck on Data Structures and Assembly Language and Computer Architecture, sighs. I do know that there's more classes on computer architecture and probably/definitely mathematical/theory programming classes too... I hate math!!!...)</p>\n<p>this is the Computer Science (CS) field/major: the 'programming' (and beyond: everyone can program and be a programmer, but not everyone can program well --- this is what you learn from CS, becoming: a software engineer, an expert programmer, not an amateur programmer, which everyone can be/learn/do on their own) field/major, you can then if you want branch out into whatever specializations (A.I., neurological: man-machine, theorists, etc etc etc. I don't really know the field/s that well, lol)</p>\n\n",
      "PostDate": "2017-08-29T04:43:46.6764439Z",
      "LastEditDate": "2017-08-29T05:07:43.6196342Z",
      "link": null
    },
    {
      "PostId": "94ced7fc-39a4-4652-a19b-70f790685fad",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Types are how Quest implements classes; they are not the same, but equivalent. Types have attributes just as objects do, and any object that inherits from a type will get all those attributes. ~If it inherits multiple types, and those types have the same attributes, the type listed later will take priority. Any attribute that is inherited will be in grey, any attribute specific t the object will be black.\r\n\r\nNot sure about base objects. Where have you seen hem mentioned?",
      "EditableFormat": "markdown",
      "HTML": "<p>Types are how Quest implements classes; they are not the same, but equivalent. Types have attributes just as objects do, and any object that inherits from a type will get all those attributes. ~If it inherits multiple types, and those types have the same attributes, the type listed later will take priority. Any attribute that is inherited will be in grey, any attribute specific t the object will be black.</p>\n<p>Not sure about base objects. Where have you seen hem mentioned?</p>\n\n",
      "PostDate": "2017-08-29T07:13:24.4410652Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "47b9affd-2e6d-425d-9fc1-5088c579a93c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ Pixie:\r\n\r\none poster was talking of 'base objects' in some other thread, I thought the poster was talking about quest's underlying OBJECTS (its Attribute Types and Elements).\r\n\r\nbut in a later post by the poster, I think they were just talking about the Object Types, if I understood their later post.\r\n\r\nHK edit: found it: http://textadventures.co.uk/forum/quest/topic/zhzl_m8hd0qoookndtqrqq/inheriting-commands-from-the-direct-parent-object-is-it-possible",
      "EditableFormat": "markdown",
      "HTML": "<p>@ Pixie:</p>\n<p>one poster was talking of 'base objects' in some other thread, I thought the poster was talking about quest's underlying OBJECTS (its Attribute Types and Elements).</p>\n<p>but in a later post by the poster, I think they were just talking about the Object Types, if I understood their later post.</p>\n<p>HK edit: found it: http://textadventures.co.uk/forum/quest/topic/zhzl_m8hd0qoookndtqrqq/inheriting-commands-from-the-direct-parent-object-is-it-possible</p>\n\n",
      "PostDate": "2017-08-29T07:27:44.375733Z",
      "LastEditDate": "2017-08-29T07:34:25.7078548Z",
      "link": null
    },
    {
      "PostId": "3d8e1baf-0e64-47b1-948c-0d0a37b3258e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\n@ KV:\r\n\r\nhere's an earlier post from the other thread that is similar to the one that I posted/wrote here:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/sy2qb0ng9umzw-eyefe6ag/why-does-showmenu-lose-variable-contents#5c26e6ad-c972-42f9-a9b7-91043a772bb5\r\n\r\nmight have some bits different, so might be of some informational value",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>@ KV:</p>\n<p>here's an earlier post from the other thread that is similar to the one that I posted/wrote here:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/sy2qb0ng9umzw-eyefe6ag/why-does-showmenu-lose-variable-contents#5c26e6ad-c972-42f9-a9b7-91043a772bb5</p>\n<p>might have some bits different, so might be of some informational value</p>\n\n",
      "PostDate": "2017-08-29T07:48:27.8929362Z",
      "LastEditDate": "2017-08-29T07:49:18.1997908Z",
      "link": null
    },
    {
      "PostId": "c70d9c37-a1f8-4a59-98ef-9e02af113345",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, so types just have the attributes sort of 'on retainer', and you just have to enable them instead of setting each one up on each similar object?",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, so types just have the attributes sort of 'on retainer', and you just have to enable them instead of setting each one up on each similar object?</p>\n\n",
      "PostDate": "2017-08-31T09:34:00.5541043Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "96f904b9-ad3d-4a83-88e9-438e78a3e509",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Not sure about base objects. Where have you seen them mentioned?\r\n\r\nYeah, it was that link HK posted. I was trying to make a command in a room, then put rooms in that room that would inherit the command.\r\n\r\nI just ended up making a command and dropping it inside of an object, then using your script from that thread to move it to the main room's parent object when I wanted it to be there. (Why didn't I just use IF...THEN... to limit the command? That's no fun at all, is it?)\r\n\r\n\r\n---\r\n\r\nSo are commands, exits, and verbs classes?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Not sure about base objects. Where have you seen them mentioned?</p>\n</blockquote>\n<p>Yeah, it was that link HK posted. I was trying to make a command in a room, then put rooms in that room that would inherit the command.</p>\n<p>I just ended up making a command and dropping it inside of an object, then using your script from that thread to move it to the main room's parent object when I wanted it to be there. (Why didn't I just use IF...THEN... to limit the command? That's no fun at all, is it?)</p>\n<hr>\n<p>So are commands, exits, and verbs classes?</p>\n\n",
      "PostDate": "2017-08-31T10:15:02.9781181Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4965fd11-97cb-4f66-824a-da226ed99144",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> So are commands, exits, and verbs classes?\r\n\r\nIt is very simple. There are two types of _type_. Every object has a single type, but can have several inherited types, some of which may be inherited from other inherited types. \r\n\r\nEach command is an object (look at the \"elementtype\" attribute for a command), of the \"command\" type. Commands all have the \"defaultcommand\" inherited type.\r\n\r\nSame for exits, but they have several inherited types. \r\n\r\nVerbs are actually commands, so are objects of the command type, and have \"defaultcommand\" and defaultverb\" inherited types.\r\n\r\nIn case you are wondering, rooms are objects of the object type, with the \"defaultobject\" inherited type.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>So are commands, exits, and verbs classes?</p>\n</blockquote>\n<p>It is very simple. There are two types of <em>type</em>. Every object has a single type, but can have several inherited types, some of which may be inherited from other inherited types.</p>\n<p>Each command is an object (look at the \"elementtype\" attribute for a command), of the \"command\" type. Commands all have the \"defaultcommand\" inherited type.</p>\n<p>Same for exits, but they have several inherited types.</p>\n<p>Verbs are actually commands, so are objects of the command type, and have \"defaultcommand\" and defaultverb\" inherited types.</p>\n<p>In case you are wondering, rooms are objects of the object type, with the \"defaultobject\" inherited type.</p>\n\n",
      "PostDate": "2017-08-31T10:45:00.2248629Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d228cd5e-b797-42a3-b3ae-f4867b7d813b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "in/for quest, at the user-level, as Pixie stated, Object Types / Types, are somewhat like classes.\r\n\r\nin quest's underlying code, yes, it uses CLASSES, and its OBJECTS are called 'Elements' (Objects, Exits, Verbs, Commands, Functions, Turnscript, Timer, Object Types, etc):\r\n\r\nhttps://github.com/textadventures/quest/blob/master/WorldModel/WorldModel/Element.cs (look for anything with the 'class', specifically, find the: 'class Element')",
      "EditableFormat": "markdown",
      "HTML": "<p>in/for quest, at the user-level, as Pixie stated, Object Types / Types, are somewhat like classes.</p>\n<p>in quest's underlying code, yes, it uses CLASSES, and its OBJECTS are called 'Elements' (Objects, Exits, Verbs, Commands, Functions, Turnscript, Timer, Object Types, etc):</p>\n<p>https://github.com/textadventures/quest/blob/master/WorldModel/WorldModel/Element.cs (look for anything with the 'class', specifically, find the: 'class Element')</p>\n\n",
      "PostDate": "2017-08-31T11:34:01.7555995Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
