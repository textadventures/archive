{
  "Topic": {
    "TopicId": "cknuhciiqkauhydcxhwr6a",
    "ForumId": "10",
    "Title": "Run script on startup without using game.inituserinterface?",
    "LastUpdated": "2018-04-06T13:30:31.3190527Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "5eb96fb7-0a8b-4bc4-9fd7-675f24518541",
      "UserId": 313914,
      "Username": "SoonGames",
      "AvatarUrl": "https://i.imgur.com/hvzLt5Qb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi to all adventure fans. ;-)\r\n\r\nDo any of you have an idea like me at development time, so if I have developed my own tab in the game menu, can add a script to run when starting the game without having to use the script game.inituserinterface? To my knowledge, I can only execute the script language during runtime. That's why I've ruled out that option so far.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi to all adventure fans. ;-)</p>\n<p>Do any of you have an idea like me at development time, so if I have developed my own tab in the game menu, can add a script to run when starting the game without having to use the script game.inituserinterface? To my knowledge, I can only execute the script language during runtime. That's why I've ruled out that option so far.</p>\n\n",
      "PostDate": "2018-04-06T13:30:31.3190527Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f53b9dc4-e72e-43ed-b626-cfa281d2321b",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not sure I get what you mean, but you can have an initialisation script run on any object at start-up. Activate on the _Features_ tab to see it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not sure I get what you mean, but you can have an initialisation script run on any object at start-up. Activate on the <em>Features</em> tab to see it.</p>\n\n",
      "PostDate": "2018-04-06T14:41:58.7655829Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cf32fddc-f3e7-4a88-a426-8bfeb6e634f2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think the question was \"Is it possible for my library to put code into the inituserinterface script?\"\r\n\r\n(This is an extension of something that bugs me about the library system in general; the various scripts on an object or on the game can be replaced but not modified. Writing more complex libraries would be a *lot* easier if the attribute passed to `do()` could be either a script, or a list of scripts. Then it would be fairly easy to write a function which adds a script to a certain object, without having to worry about other libraries using the same event)",
      "EditableFormat": "markdown",
      "HTML": "<p>I think the question was \"Is it possible for my library to put code into the inituserinterface script?\"</p>\n<p>(This is an extension of something that bugs me about the library system in general; the various scripts on an object or on the game can be replaced but not modified. Writing more complex libraries would be a <em>lot</em> easier if the attribute passed to <code>do()</code> could be either a script, or a list of scripts. Then it would be fairly easy to write a function which adds a script to a certain object, without having to worry about other libraries using the same event)</p>\n\n",
      "PostDate": "2018-04-09T10:50:00.9125159Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eaacfeb4-1261-47c4-aca5-ded8299e87c8",
      "UserId": 313914,
      "Username": "SoonGames",
      "AvatarUrl": "https://i.imgur.com/hvzLt5Qb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, it's difficult to explain. For example, I use the game.inituserinterface for the library \"StyleSheet\" (<a href=\"http://textadventures.co.uk/forum/samples/topic/fusqbwm5i0__zqmmf2egzq/stylesheet-in-the-game-tab-to-extract-and-set-modified-css-code-from-the-game-i\">To see here</a>) to be able to execute the settings at game start. However, if changes already made by the user had to be made in the script, the user must insert the function call himself.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, it's difficult to explain. For example, I use the game.inituserinterface for the library \"StyleSheet\" (<a href=\"http://textadventures.co.uk/forum/samples/topic/fusqbwm5i0__zqmmf2egzq/stylesheet-in-the-game-tab-to-extract-and-set-modified-css-code-from-the-game-i\">To see here</a>) to be able to execute the settings at game start. However, if changes already made by the user had to be made in the script, the user must insert the function call himself.</p>\n\n",
      "PostDate": "2018-04-09T15:41:35.172728Z",
      "LastEditDate": "2018-04-09T15:42:09.09719Z",
      "link": null
    },
    {
      "PostId": "27a25393-a98c-41cd-89de-d9048c9d3a25",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I do think that it would be very useful to have a couple of extra functions in core:\r\n```\r\n<function name=\"AddScriptAttribute\" parameters=\"object, attribute, script\">\r\n  if (not HasAttribute(object, attribute)) {\r\n    set (object, attribute, script)\r\n  }\r\n  else {\r\n    value = GetAttribute (object, attribute)\r\n    if (not Equal(value, script)) {\r\n      if (TypeOf(value) = \"list\") {\r\n        if (not ListContains(value, script)) {\r\n          list add (value, script)\r\n        }\r\n      }\r\n      else {\r\n        list = NewList()\r\n        if (EndsWith(TypeOf(value), \"list\")) {\r\n          foreach (i, value) {\r\n            list add (list, i)\r\n          }\r\n        }\r\n        else {\r\n          list add (list, value)\r\n        }\r\n        if (not ListContains(list, script)) {\r\n          list add (list, script)\r\n        }\r\n        set (object, attribute, list)\r\n      }\r\n    }\r\n  }\r\n</function>\r\n\r\n<function name=\"RunScriptAttribute\" parameters=\"object, attribute, params\">\r\n  if (HasAttribute(object, attribute)) {\r\n    attr = GetAttribute(object, attribute)\r\n    if (TypeOf(attr) = \"script\") {\r\n      do (object, attribute, params)\r\n    }\r\n    else if (TypeOf(attr) = \"list\") {\r\n      params = params\r\n      dictionary add (params, \"this\", object)\r\n      foreach (script, attr) {\r\n        if (TypeOf(script) = \"script\") {\r\n          invoke (script, params)\r\n        }\r\n      }\r\n    }\r\n  }\r\n</function>\r\n```\r\n\r\nIf the core scripts used a function like this RunScriptAttribute to call things like inituserinterface, then a library could simply call AddScriptAttribute, without having to worry if another library also needs to add interface initialisation stuff. Like in Javascript's event handlers, you could have a list of scripts to run without needing to worry. It's still *possible* to use script lists like this (storing the list under a different name, and setting a script that loops over the list), but it's a lot less stable.\r\n\r\nI'd really like to see `do()` handle lists of scripts in this way natively, or a script like RunScriptAttribute wrapped around it. But really, that's only useful if you know that all the libraries you're using will understand it.",
      "EditableFormat": "markdown",
      "HTML": "<p>I do think that it would be very useful to have a couple of extra functions in core:</p>\n<pre><code>&lt;function name=\"AddScriptAttribute\" parameters=\"object, attribute, script\"&gt;\n  if (not HasAttribute(object, attribute)) {\n    set (object, attribute, script)\n  }\n  else {\n    value = GetAttribute (object, attribute)\n    if (not Equal(value, script)) {\n      if (TypeOf(value) = \"list\") {\n        if (not ListContains(value, script)) {\n          list add (value, script)\n        }\n      }\n      else {\n        list = NewList()\n        if (EndsWith(TypeOf(value), \"list\")) {\n          foreach (i, value) {\n            list add (list, i)\n          }\n        }\n        else {\n          list add (list, value)\n        }\n        if (not ListContains(list, script)) {\n          list add (list, script)\n        }\n        set (object, attribute, list)\n      }\n    }\n  }\n&lt;/function&gt;\n\n&lt;function name=\"RunScriptAttribute\" parameters=\"object, attribute, params\"&gt;\n  if (HasAttribute(object, attribute)) {\n    attr = GetAttribute(object, attribute)\n    if (TypeOf(attr) = \"script\") {\n      do (object, attribute, params)\n    }\n    else if (TypeOf(attr) = \"list\") {\n      params = params\n      dictionary add (params, \"this\", object)\n      foreach (script, attr) {\n        if (TypeOf(script) = \"script\") {\n          invoke (script, params)\n        }\n      }\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n<p>If the core scripts used a function like this RunScriptAttribute to call things like inituserinterface, then a library could simply call AddScriptAttribute, without having to worry if another library also needs to add interface initialisation stuff. Like in Javascript's event handlers, you could have a list of scripts to run without needing to worry. It's still <em>possible</em> to use script lists like this (storing the list under a different name, and setting a script that loops over the list), but it's a lot less stable.</p>\n<p>I'd really like to see <code>do()</code> handle lists of scripts in this way natively, or a script like RunScriptAttribute wrapped around it. But really, that's only useful if you know that all the libraries you're using will understand it.</p>\n\n",
      "PostDate": "2018-04-09T16:40:03.2791595Z",
      "LastEditDate": "2018-04-09T16:41:58.0914159Z",
      "link": null
    }
  ]
}
