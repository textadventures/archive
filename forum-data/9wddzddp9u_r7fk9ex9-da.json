{
  "Topic": {
    "TopicId": "9wddzddp9u_r7fk9ex9-da",
    "ForumId": "10",
    "Title": "[solved] Question on Status Attributes -  displaying a maximum value ",
    "LastUpdated": "2019-10-31T16:01:45.3153866Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6f718b89-5838-4721-9550-74b8d4c7e603",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So, I kinda had this solved in the past but completely forgot about it. \r\nThe player has an LP (life points)  status attribute and also a maximum LP attribute. \r\n\r\n**How can I display both values in a single status attribute line?**\r\n\r\nLP: ! / {player.max_lp}\r\n&\r\nLP:!  / \" +  player.max_lp + \" \r\ndidn't work and now I'm kinda clueless...\r\n\r\nAlso, I prefer to avoid JS custom status panes since this a bit too complicated for me yet.",
      "EditableFormat": "markdown",
      "HTML": "<p>So, I kinda had this solved in the past but completely forgot about it.<br>\nThe player has an LP (life points)  status attribute and also a maximum LP attribute.</p>\n<p><strong>How can I display both values in a single status attribute line?</strong></p>\n<p>LP: ! / {player.max_lp}<br>\n&amp;<br>\nLP:!  / \" +  player.max_lp + \"<br>\ndidn't work and now I'm kinda clueless...</p>\n<p>Also, I prefer to avoid JS custom status panes since this a bit too complicated for me yet.</p>\n\n",
      "PostDate": "2019-10-31T16:01:45.3153866Z",
      "LastEditDate": "2019-11-14T09:23:11.3998372Z",
      "link": null
    },
    {
      "PostId": "098873ce-f431-4b8e-a98b-49fc733bd46b",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just remembered... \r\nI put both into a single string value and display that in the status. \r\n\r\n\r\n```\r\nset (player, \"lp\", 10)\r\nset (player, \"max_lp\", 10)\r\nplayer.life_points_string = \"LP: \" + player.lp + \" / \" + player.max_lp + \"\"\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Just remembered...<br>\nI put both into a single string value and display that in the status.</p>\n<pre><code>set (player, \"lp\", 10)\nset (player, \"max_lp\", 10)\nplayer.life_points_string = \"LP: \" + player.lp + \" / \" + player.max_lp + \"\"\n</code></pre>\n\n",
      "PostDate": "2019-10-31T16:09:19.2923435Z",
      "LastEditDate": "2019-10-31T16:10:59.1489044Z",
      "link": null
    },
    {
      "PostId": "51a72be6-d3ea-4729-ab64-ea8c3ea3fd6f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's the most common way of doing it.\r\n\r\nMost often, you'd use the script attribute `changedlp` to set the string attribute, so that it changes automatically every time the player gains or loses LP.\r\n\r\n<hr />\r\n\r\nAlternatively, you could have a `changedmax_lp` script something like:\r\n```\r\nDictionaryAdd (this.statusattributes, \"lp\", \"LP: ! / \"+this.max_lp)\r\n```\r\nSo every time the max changes, it adds the \"lp\" entry to the status attributes, but with the new max in the string.",
      "EditableFormat": "markdown",
      "HTML": "<p>That's the most common way of doing it.</p>\n<p>Most often, you'd use the script attribute <code>changedlp</code> to set the string attribute, so that it changes automatically every time the player gains or loses LP.</p>\n<hr>\n<p>Alternatively, you could have a <code>changedmax_lp</code> script something like:</p>\n<pre><code>DictionaryAdd (this.statusattributes, \"lp\", \"LP: ! / \"+this.max_lp)\n</code></pre>\n<p>So every time the max changes, it adds the \"lp\" entry to the status attributes, but with the new max in the string.</p>\n\n",
      "PostDate": "2019-10-31T23:06:43.8640483Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d51d66ae-9b2c-4ebf-afe5-2d541d2cd8da",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just, how exactly do changed scripts work? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Just, how exactly do changed scripts work?</p>\n\n",
      "PostDate": "2019-11-01T08:55:21.6013024Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1d7d9e8d-99a3-4960-b25c-fa2dc2c1f725",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Changescripts are script  attributes whose name is \"changed\" followed by the name of another attribute of the same object. Whenever an attribute is changed, Quest checks if there is a corresponding changescript, and runs it.\r\n\r\nWithin the changescript, there may be a special variable `oldvalue`  which contains the old value of the attribute.\r\n\r\nSo, for example, your `changedlp` might simply be:\r\n```\r\nthis.life_points_string = \"LP: \" + this.lp + \" / \" + this.max_lp\r\n```\r\n\r\nThough in reality, a lot of people already have a `changedlp` script that does a couple of other things too:\r\n```\r\nif (this.lp < 0) {\r\n  msg (\"You are dead!\")\r\n  finish()\r\n}\r\nelse if (this.lp > this.lp_max) {\r\n  this.lp = this.lp_max\r\n}\r\nelse {\r\n  this.life_points_string = \"LP: \" + this.lp + \" / \" + this.max_lp\r\n}\r\n```\r\n(that means that anywhere you increase or reduce the player's LP, the changescript will automatically kick in to make sure that healing items don't raise it over the max; or trigger a 'game over' screen if LP drops below zero)",
      "EditableFormat": "markdown",
      "HTML": "<p>Changescripts are script  attributes whose name is \"changed\" followed by the name of another attribute of the same object. Whenever an attribute is changed, Quest checks if there is a corresponding changescript, and runs it.</p>\n<p>Within the changescript, there may be a special variable <code>oldvalue</code>  which contains the old value of the attribute.</p>\n<p>So, for example, your <code>changedlp</code> might simply be:</p>\n<pre><code>this.life_points_string = \"LP: \" + this.lp + \" / \" + this.max_lp\n</code></pre>\n<p>Though in reality, a lot of people already have a <code>changedlp</code> script that does a couple of other things too:</p>\n<pre><code>if (this.lp &lt; 0) {\n  msg (\"You are dead!\")\n  finish()\n}\nelse if (this.lp &gt; this.lp_max) {\n  this.lp = this.lp_max\n}\nelse {\n  this.life_points_string = \"LP: \" + this.lp + \" / \" + this.max_lp\n}\n</code></pre>\n<p>(that means that anywhere you increase or reduce the player's LP, the changescript will automatically kick in to make sure that healing items don't raise it over the max; or trigger a 'game over' screen if LP drops below zero)</p>\n\n",
      "PostDate": "2019-11-01T09:12:32.3160038Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a6c91d7f-5cf5-4bdd-89c6-9adbd9ffa514",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nthis.life_points_string = \"LP: \" + this.lp + \" / \" + this.max_lp\r\n```\r\n\r\n```\r\nif (this.lp < 0) {\r\n  msg (\"You are dead!\")\r\n  finish()\r\n}\r\nelse if (this.lp > this.lp_max) {\r\n  this.lp = this.lp_max\r\n}\r\nelse {\r\n  this.life_points_string = \"LP: \" + this.lp + \" / \" + this.max_lp\r\n}\r\n```\r\nI have all of this already but I still don't understand how or where comes a changed script in.  Absolutely no clue, sorry...",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>this.life_points_string = \"LP: \" + this.lp + \" / \" + this.max_lp\n</code></pre>\n<pre><code>if (this.lp &lt; 0) {\n  msg (\"You are dead!\")\n  finish()\n}\nelse if (this.lp &gt; this.lp_max) {\n  this.lp = this.lp_max\n}\nelse {\n  this.life_points_string = \"LP: \" + this.lp + \" / \" + this.max_lp\n}\n</code></pre>\n<p>I have all of this already but I still don't understand how or where comes a changed script in.  Absolutely no clue, sorry...</p>\n\n",
      "PostDate": "2019-11-01T09:28:26.4006387Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "030fcc8e-f542-475c-bd4a-d719740bf7b5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Do you mean you don't know how to add an attribute?\r\n\r\nIf you're on the desktop version:\r\n* Go to the \"Attributes\" tab of the player object\r\n* Create an attribute called \"changedlp\"\r\n* Set its type to \"Script\"\r\n* Whenever you change, `player.lp`, Quest will run the script `player.changedlp`\r\n\r\n(I think there might be another way to do it, but I don't use the desktop version)\r\n\r\nIf you're using the web editor:\r\n<ul><li>Go to the \"Features\" tab of the player object, and tick \"Run an initialisation script\"</li>\r\n<li>Go to the \"Initialisation\" tab</li>\r\n<li>Enter the script:\r\n<pre><code>this.changedlp => {\r\n  // change script goes here\r\n}</code></pre></li></ul>",
      "EditableFormat": "markdown",
      "HTML": "<p>Do you mean you don't know how to add an attribute?</p>\n<p>If you're on the desktop version:</p>\n<ul>\n<li>Go to the \"Attributes\" tab of the player object</li>\n<li>Create an attribute called \"changedlp\"</li>\n<li>Set its type to \"Script\"</li>\n<li>Whenever you change, <code>player.lp</code>, Quest will run the script <code>player.changedlp</code></li>\n</ul>\n<p>(I think there might be another way to do it, but I don't use the desktop version)</p>\n<p>If you're using the web editor:</p>\n<ul><li>Go to the \"Features\" tab of the player object, and tick \"Run an initialisation script\"</li>\n<li>Go to the \"Initialisation\" tab</li>\n<li>Enter the script:\n<pre><code>this.changedlp =&gt; {\n  // change script goes here\n}</code></pre></li></ul>\n\n",
      "PostDate": "2019-11-01T11:27:50.3583766Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "da9410ef-cdba-49b3-8932-29c703aa4dec",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just to echo mrangel:\r\n\r\n'changedNAME_OF_ATTRIBUTE' change Scripts are special scripts that activate whenever/everytime the Value of your 'NAME_OF_ATTRIBUTE' Attribute, changes\r\n\r\nfor example:\r\n\r\n[Object Name: player]\r\nAttribute Name: strength\r\nAttribute Type: int\r\nAttribute Value: 0\r\n\r\n[Object Name: player]\r\nAttribute Name: changedstrength\r\nAttribute Type: script\r\nAttribute Value: (see below)\r\n\r\nmsg (\"Player Strength: \" + player.strength)\r\n\r\nthis 'changedstrength' change Script, will display your strength, everytime/whenever the Value of your 'strength' Integer Attribute changes\r\n\r\n(you got to think a bit though, if you don't need/want stuff to happen every time an Attribute's Value changes, don't put it into a change script, but sometimes, it's also just unavoidable too, and the only thing you can do is to make the scripting as efficient as possible: less operations, so your game doesn't lag, but this is only for more extreme/rare cases of more complex coding, due to how fast modern computers are and how well quest itself was coding/programmed)\r\n\r\nthis makes these special changed scripts extremely useful, though they might cause issues, as they get high priority, in that they immediately activate whenever that Attribute's Value changes, but there might be other stuff that still has higher priority, or quest/game is already doing something, and the change script activates, \"rudely butting in\", which can then possibly mess up what quest/game was doing, as it then continues after the change script is done doing its thing\r\n\r\nthe other method in quest is to use the 'Turnscript' (or the 'Timer') Elements, which does offer you more control over when what scripts are activating (as you can enable/disable them), but it can get messy using them too, instead of the changed Scripts...\r\n\r\nTurnscripts activate every internal turn: any action you do is always an internal turn (don't know/remember if mrangel/pixie found the internal turn mechanism and thus can control/alter it, or if they just use their own custom 'turn' Integer Attributes, controlling when they increase or not): an action is either (1) typing in something into the text command bar at the bottom of the screen, (2) clicking on an Object's Verb button, or (3) clicking on the blue hyperlinks in the big text box on the left\r\n\r\nTimers are self explanatory, but they can easily be/become the most messy of all, again, for (hopefully) obvious reasons...\r\n\r\nWhat makes Turnscripts/Timers useful over changed Scripts:\r\n\r\nif you want to do multiple actions, you set the order that they're occurring within a Turnscript/Timer, which while you can do multiple actions within a changed Script, the difference is that the changed Script is already requiring some Value of some Attribute to change, which usually isn't involved when you just want do control multiple actions, and thus the usefulness of Turnscripts/Timers, as they completely allow you to control everything: via enable/disable them and also in that you're deciding/setting the order of the actions (scripting) within them\r\n\r\n---------\r\n\r\nusing the changed Scripts and/or Turnscripts/timers often go with using the 'statusattributes', when you need to update those Attributes that have multiple (usually Integer) Attribute Value's within them (such as a String Attribute used for displayment of min/max stats, for example: 999/999 Life), as the 'statusattributes' only display the current Value of the Attribute itself, but that means if you got a String, you need a method to change its Integer Attributes' Values within it, so that when the String Attribute is displayed by the 'statusattributes', it's displaying the current/new (correct) Integer Values within it, so a way to think about it: the 'statusattributes' just does DISPLAYMENT of the CURRENT Value of the Attribute itself, but if you got a String Attribute, that uses Integer Values within it, then you need a method for updating/changing those Integer Attributes, which can be done through the changed Scripts and/or the Turnscripts/Timers\r\n\r\nthere's some other uses too, but usually it involves wanting a min/max stat display, and thus a String Attribute with Integer Attributes within it, which is done usually via using the changed Script and/or Turnscript/Timer and the built-in 'statusattributes' displayment feature\r\n\r\n--------\r\n\r\nif you want to control stuff, then you wouldn't use the change Scripts, you'd be using the Turnscripts/Timers (as you can enable/disable them as wanted/needed) and/or \"set\" Scripting/Actions (like using an Object's Verbs and/or a Command and/or the special 'start' Script of the 'game' Object, for some examples)",
      "EditableFormat": "markdown",
      "HTML": "<p>just to echo mrangel:</p>\n<p>'changedNAME_OF_ATTRIBUTE' change Scripts are special scripts that activate whenever/everytime the Value of your 'NAME_OF_ATTRIBUTE' Attribute, changes</p>\n<p>for example:</p>\n<p>[Object Name: player]<br>\nAttribute Name: strength<br>\nAttribute Type: int<br>\nAttribute Value: 0</p>\n<p>[Object Name: player]<br>\nAttribute Name: changedstrength<br>\nAttribute Type: script<br>\nAttribute Value: (see below)</p>\n<p>msg (\"Player Strength: \" + player.strength)</p>\n<p>this 'changedstrength' change Script, will display your strength, everytime/whenever the Value of your 'strength' Integer Attribute changes</p>\n<p>(you got to think a bit though, if you don't need/want stuff to happen every time an Attribute's Value changes, don't put it into a change script, but sometimes, it's also just unavoidable too, and the only thing you can do is to make the scripting as efficient as possible: less operations, so your game doesn't lag, but this is only for more extreme/rare cases of more complex coding, due to how fast modern computers are and how well quest itself was coding/programmed)</p>\n<p>this makes these special changed scripts extremely useful, though they might cause issues, as they get high priority, in that they immediately activate whenever that Attribute's Value changes, but there might be other stuff that still has higher priority, or quest/game is already doing something, and the change script activates, \"rudely butting in\", which can then possibly mess up what quest/game was doing, as it then continues after the change script is done doing its thing</p>\n<p>the other method in quest is to use the 'Turnscript' (or the 'Timer') Elements, which does offer you more control over when what scripts are activating (as you can enable/disable them), but it can get messy using them too, instead of the changed Scripts...</p>\n<p>Turnscripts activate every internal turn: any action you do is always an internal turn (don't know/remember if mrangel/pixie found the internal turn mechanism and thus can control/alter it, or if they just use their own custom 'turn' Integer Attributes, controlling when they increase or not): an action is either (1) typing in something into the text command bar at the bottom of the screen, (2) clicking on an Object's Verb button, or (3) clicking on the blue hyperlinks in the big text box on the left</p>\n<p>Timers are self explanatory, but they can easily be/become the most messy of all, again, for (hopefully) obvious reasons...</p>\n<p>What makes Turnscripts/Timers useful over changed Scripts:</p>\n<p>if you want to do multiple actions, you set the order that they're occurring within a Turnscript/Timer, which while you can do multiple actions within a changed Script, the difference is that the changed Script is already requiring some Value of some Attribute to change, which usually isn't involved when you just want do control multiple actions, and thus the usefulness of Turnscripts/Timers, as they completely allow you to control everything: via enable/disable them and also in that you're deciding/setting the order of the actions (scripting) within them</p>\n<hr>\n<p>using the changed Scripts and/or Turnscripts/timers often go with using the 'statusattributes', when you need to update those Attributes that have multiple (usually Integer) Attribute Value's within them (such as a String Attribute used for displayment of min/max stats, for example: 999/999 Life), as the 'statusattributes' only display the current Value of the Attribute itself, but that means if you got a String, you need a method to change its Integer Attributes' Values within it, so that when the String Attribute is displayed by the 'statusattributes', it's displaying the current/new (correct) Integer Values within it, so a way to think about it: the 'statusattributes' just does DISPLAYMENT of the CURRENT Value of the Attribute itself, but if you got a String Attribute, that uses Integer Values within it, then you need a method for updating/changing those Integer Attributes, which can be done through the changed Scripts and/or the Turnscripts/Timers</p>\n<p>there's some other uses too, but usually it involves wanting a min/max stat display, and thus a String Attribute with Integer Attributes within it, which is done usually via using the changed Script and/or Turnscript/Timer and the built-in 'statusattributes' displayment feature</p>\n<hr>\n<p>if you want to control stuff, then you wouldn't use the change Scripts, you'd be using the Turnscripts/Timers (as you can enable/disable them as wanted/needed) and/or \"set\" Scripting/Actions (like using an Object's Verbs and/or a Command and/or the special 'start' Script of the 'game' Object, for some examples)</p>\n\n",
      "PostDate": "2019-11-01T18:55:05.0763194Z",
      "LastEditDate": "2019-11-01T19:02:43.5111208Z",
      "link": null
    },
    {
      "PostId": "6bae6b96-df5e-4ae3-b32e-36770e17e5de",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry for the late response.\r\n\r\n**mrangel** -I just couldn't understand the changedscript attribute. Where does it start and where is it placed! Or which part of the script must be in the changedscript! However, I've finally got it. Thanks for the help.  \r\n**hegemonkhan** -Thank you, this explanation was very helpful in understanding the basics of the changedscript.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry for the late response.</p>\n<p><strong>mrangel</strong> -I just couldn't understand the changedscript attribute. Where does it start and where is it placed! Or which part of the script must be in the changedscript! However, I've finally got it. Thanks for the help.<br>\n<strong>hegemonkhan</strong> -Thank you, this explanation was very helpful in understanding the basics of the changedscript.</p>\n\n",
      "PostDate": "2019-11-14T09:22:26.4477071Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
