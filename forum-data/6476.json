{
  "Topic": {
    "TopicId": "6476",
    "ForumId": "10",
    "Title": "Taking/Using/Scripting multiple objects at once",
    "LastUpdated": "2016-07-03T01:30:50+00:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "43873",
      "UserId": 0,
      "Username": "Proudly Humble",
      "UserAvatar": null,
      "UserGravatar": "6b87c09044d98343eba2c7f21f8314bc",
      "EditableText": "I'm new to this sort of thing. I know next to nothing about coding, which is why I love the interface of Quest. I'm actually fairly well along in creating my first game. I just need to add a couple more puzzles to it, then decorate it with room/object descriptions. I'm looking forward to finishing it soon.  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> \n\nAnyway, to the question at hand, which has nothing to do with my planned game. [b:18h8q5b6][u:18h8q5b6]Is there a way to gather or use multiple objects at once[/u:18h8q5b6][/b:18h8q5b6] (other than saying something like &quot;take all&quot;)? Let's look at the tutorial example, with the fridge. Now let's say a I add a knife to the kitchen. When I run the tutorial game and open the fridge, is the a way I can say something like &quot;get food&quot; and take all the food from the fridge, but leave the knife and key alone?\n\nI've tried creating an object type &quot;food&quot; and then applied it to the appropriate objects, but that got me nowhere. I then tried editing the type itself, created an alias of &quot;food,&quot; but as you probably can guess, everything was named &quot;food&quot; and when I tried to take food, I had to choose:\n\n1. food\n2. food\n3. food\n(etc.)\n\nIt's not a critical issue for me, I'm just trying to think outside of the box here and see what I can and cannot do with Quest. The extension of this concept would be to apply a script to objects that share a common element without having to specify each object by its actual name within the script. For instance, say I added a DVR and a stereo to the lounge and wanted to &quot;turn on electronics.&quot;\n\nSo is there a way to apply a certain action to every object in a room that meets a certain category?",
      "EditableFormat": "bbcode",
      "HTML": "I'm new to this sort of thing. I know next to nothing about coding, which is why I love the interface of Quest. I'm actually fairly well along in creating my first game. I just need to add a couple more puzzles to it, then decorate it with room/object descriptions. I'm looking forward to finishing it soon.  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> <br/><br/>Anyway, to the question at hand, which has nothing to do with my planned game. <span style=\"font-weight:bold;\"><span style=\"text-decoration:underline;\">Is there a way to gather or use multiple objects at once</span></span> (other than saying something like &quot;take all&quot;)? Let's look at the tutorial example, with the fridge. Now let's say a I add a knife to the kitchen. When I run the tutorial game and open the fridge, is the a way I can say something like &quot;get food&quot; and take all the food from the fridge, but leave the knife and key alone?<br/><br/>I've tried creating an object type &quot;food&quot; and then applied it to the appropriate objects, but that got me nowhere. I then tried editing the type itself, created an alias of &quot;food,&quot; but as you probably can guess, everything was named &quot;food&quot; and when I tried to take food, I had to choose:<br/><br/>1. food<br/>2. food<br/>3. food<br/>(etc.)<br/><br/>It's not a critical issue for me, I'm just trying to think outside of the box here and see what I can and cannot do with Quest. The extension of this concept would be to apply a script to objects that share a common element without having to specify each object by its actual name within the script. For instance, say I added a DVR and a stereo to the lounge and wanted to &quot;turn on electronics.&quot;<br/><br/>So is there a way to apply a certain action to every object in a room that meets a certain category?",
      "PostDate": "2016-07-02T17:58:43+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "43874",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "you are half way there by realizing you needed an Attribute (such as using Object Types / Inherited Attributes --- quest's user level of Groups/Classes, good job in learning about these, as they're a bit more advanced, than in just using the &quot;normal&quot; Attributes!) to be an &quot;indicator/flag&quot; to distinguish each Object from another Object (&quot;food&quot; vs &quot;monster&quot; vs &quot;item&quot; vs &quot;equipment&quot; vs &quot;npc&quot; vs &quot;environment&quot; vs &quot;room&quot; vs &quot;etc etc etc&quot;).\n\nThe other half you're missing is a more advanced concept, involving using List Attributes and the 'foreach' Script/Function, to iterate (cycle) through those Objects (or Text) added as items to the List Attribute, to be able to then do whatever action you wish upon whichever of them (via using the 'if' Script/Function).\n\nhere's some links on it:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/\">http://docs.textadventures.co.uk/quest/scripts/</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/\">http://docs.textadventures.co.uk/quest/functions/</a><!-- m --> (categorical order)\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/index_allfunctions.html\">http://docs.textadventures.co.uk/quest/ ... tions.html</a><!-- m --> (alphabetical order)\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=5137\">viewtopic.php?f=18&amp;t=5137</a><!-- l -->\n\nthere's also:\n\nAllObjects(), Got(), Contains(), ListContains(), DictionaryContains() --- see the '(alphabetical order)' link\n\nand there's also the 'displayverbs' and 'inventoryverbs' too, and the 'populate/format' ones too.\n\n-------------------\n\na quick brief sample example in code (hopefully you can understand it), using a Command to demonstrate it quickly:\n\n[code:plh7b2dy]&lt;game name=&quot;sample&quot;&gt;\n&lt;/game&gt;\n\n&lt;object name=&quot;room&quot;&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;player&quot;&gt;\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;pc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;apple&quot;&gt;\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;food&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;banana&quot;&gt;\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;food&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;orc&quot;&gt;\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;monster&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;tavernmaid&quot;&gt;\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;npc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;command name=&quot;collect_food_command&quot;&gt;\n  &lt;pattern&gt;collect food&lt;/pattern&gt; // you'd type this in when playing the game&#58; collect food\n  &lt;script&gt;\n    foreach (object_variable, ScopeReachableNotHeld()) {\n      if (GetString (object_variable, &quot;type_of_object_string_attribute&quot;) = &quot;food&quot;) {\n        object_variable&#46;parent = player\n      }\n    }\n  &lt;/script&gt;\n&lt;/command&gt;[/code:plh7b2dy]\n\nonly the 'apple' and 'banana' Objects will be put into your &quot;inventory&quot;, you won't put the 'orc', 'tavernmaid', and 'player' Objects into your inventory, lol.\n\n(putting something into the &quot;inventory&quot; is actually jsut putting something inside of the Player Object, the so-called &quot;inventory&quot; is actually just the currently controlled Player Object itself and probably there's a built-in ObjectList Attribute too)\n\n(I wonder what would happen if you try to put the 'player' Player Object inside of the 'player' Player Object, LOLOLOL --- I'm curious about what would happen!)",
      "EditableFormat": "bbcode",
      "HTML": "you are half way there by realizing you needed an Attribute (such as using Object Types / Inherited Attributes --- quest's user level of Groups/Classes, good job in learning about these, as they're a bit more advanced, than in just using the &quot;normal&quot; Attributes!) to be an &quot;indicator/flag&quot; to distinguish each Object from another Object (&quot;food&quot; vs &quot;monster&quot; vs &quot;item&quot; vs &quot;equipment&quot; vs &quot;npc&quot; vs &quot;environment&quot; vs &quot;room&quot; vs &quot;etc etc etc&quot;).<br/><br/>The other half you're missing is a more advanced concept, involving using List Attributes and the 'foreach' Script/Function, to iterate (cycle) through those Objects (or Text) added as items to the List Attribute, to be able to then do whatever action you wish upon whichever of them (via using the 'if' Script/Function).<br/><br/>here's some links on it:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/\">http://docs.textadventures.co.uk/quest/scripts/</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/\">http://docs.textadventures.co.uk/quest/functions/</a><!-- m --> (categorical order)<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/index_allfunctions.html\">http://docs.textadventures.co.uk/quest/ ... tions.html</a><!-- m --> (alphabetical order)<br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=5137\">viewtopic.php?f=18&amp;t=5137</a><!-- l --><br/><br/>there's also:<br/><br/>AllObjects(), Got(), Contains(), ListContains(), DictionaryContains() --- see the '(alphabetical order)' link<br/><br/>and there's also the 'displayverbs' and 'inventoryverbs' too, and the 'populate/format' ones too.<br/><br/>-------------------<br/><br/>a quick brief sample example in code (hopefully you can understand it), using a Command to demonstrate it quickly:<br/><br/><pre><code>&lt;game name=&quot;sample&quot;&gt;<br/>&lt;/game&gt;<br/><br/>&lt;object name=&quot;room&quot;&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;pc&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;apple&quot;&gt;<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;food&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;banana&quot;&gt;<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;food&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;orc&quot;&gt;<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;monster&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;tavernmaid&quot;&gt;<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room&lt;/attr&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;npc&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;command name=&quot;collect_food_command&quot;&gt;<br/>  &lt;pattern&gt;collect food&lt;/pattern&gt; // you'd type this in when playing the game&#58; collect food<br/>  &lt;script&gt;<br/>    foreach (object_variable, ScopeReachableNotHeld()) {<br/>      if (GetString (object_variable, &quot;type_of_object_string_attribute&quot;) = &quot;food&quot;) {<br/>        object_variable&#46;parent = player<br/>      }<br/>    }<br/>  &lt;/script&gt;<br/>&lt;/command&gt;</code></pre><br/><br/>only the 'apple' and 'banana' Objects will be put into your &quot;inventory&quot;, you won't put the 'orc', 'tavernmaid', and 'player' Objects into your inventory, lol.<br/><br/>(putting something into the &quot;inventory&quot; is actually jsut putting something inside of the Player Object, the so-called &quot;inventory&quot; is actually just the currently controlled Player Object itself and probably there's a built-in ObjectList Attribute too)<br/><br/>(I wonder what would happen if you try to put the 'player' Player Object inside of the 'player' Player Object, LOLOLOL --- I'm curious about what would happen!)",
      "PostDate": "2016-07-02T20:20:39+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "43875",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "It also depends on if those objects are going to remain in the same room.  You could create a scenery object called 'electronics' and run a look at script that describes ALL of the electronic devices in that room (or turns them on/off, take, etc).\n\nIf they are transferable objects, you could use commands (X electronics, turn on electronics, et) to carry out all sorts of stuff depending on if they are in the current player room.  \n\nThat's how I would handle it even if it might be more &quot;hacky&quot; than HKs method.",
      "EditableFormat": "bbcode",
      "HTML": "It also depends on if those objects are going to remain in the same room.  You could create a scenery object called 'electronics' and run a look at script that describes ALL of the electronic devices in that room (or turns them on/off, take, etc).<br/><br/>If they are transferable objects, you could use commands (X electronics, turn on electronics, et) to carry out all sorts of stuff depending on if they are in the current player room.  <br/><br/>That's how I would handle it even if it might be more &quot;hacky&quot; than HKs method.",
      "PostDate": "2016-07-03T01:30:50+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "c0729a1e-3055-4884-a04d-bdc5da59fabe",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "UserAvatar": null,
      "UserGravatar": "6b87c09044d98343eba2c7f21f8314bc",
      "EditableText": "@HegemonKhan\r\n\r\nGreat! Thanks! After examining the code I was able to figure out what I needed to do in the Quest user interface. The script you supplied was what I needed!\r\n\r\nI added the script, then figured out what I needed to do on my end to make it work. Once I got it working, I tried a few experiments. I changed that \"type_of_object_string\" to \"test\" and then \"collectable\" and made the other necessary corrections, and the script worked perfectly for those too. Then I changed the command so that \"gather food\" would work as well.\r\n\r\nFrom that point, I added a new command line with an altered version of the same script to make food simply become invisible (using the Quest interface, of course). Then I changed it again to set object flags, and then tested to see if the flags worked. They did.\r\n\r\nThe links you gave me are, for the most part, over my head. They aren't as detailed as the tutorial is. I had previously looked at most of those pages. Interestingly, that ScopeReachableNotHeld() thing caught my attention, and I wondered if that was what I needed, but I didn't know how to use it to even find out. \r\n\r\nSo anyway, thanks for your help. Your example worked perfectly. By the way, if you try to parent an object to itself, this is what the output is:\r\n\r\nError running script: Parent of element 'player' cannot be set to itself\r\n\r\n\r\n@XanMag\r\n\r\nLOL, that's probably what I would do myself. Add the scenery object and then tell it what to do for all the devices at once. In the game I'm working on, I'm toying with the idea of two levels of difficulty. The hard one will have dark rooms, the easy will have none. I'm thinking of making a scenery light source follow the player on the easy level instead of messing with making scripts for each of the otherwise dark rooms.",
      "EditableFormat": "markdown",
      "HTML": "<p>@HegemonKhan</p>\n<p>Great! Thanks! After examining the code I was able to figure out what I needed to do in the Quest user interface. The script you supplied was what I needed!</p>\n<p>I added the script, then figured out what I needed to do on my end to make it work. Once I got it working, I tried a few experiments. I changed that \"type_of_object_string\" to \"test\" and then \"collectable\" and made the other necessary corrections, and the script worked perfectly for those too. Then I changed the command so that \"gather food\" would work as well.</p>\n<p>From that point, I added a new command line with an altered version of the same script to make food simply become invisible (using the Quest interface, of course). Then I changed it again to set object flags, and then tested to see if the flags worked. They did.</p>\n<p>The links you gave me are, for the most part, over my head. They aren't as detailed as the tutorial is. I had previously looked at most of those pages. Interestingly, that ScopeReachableNotHeld() thing caught my attention, and I wondered if that was what I needed, but I didn't know how to use it to even find out.</p>\n<p>So anyway, thanks for your help. Your example worked perfectly. By the way, if you try to parent an object to itself, this is what the output is:</p>\n<p>Error running script: Parent of element 'player' cannot be set to itself</p>\n<p>@XanMag</p>\n<p>LOL, that's probably what I would do myself. Add the scenery object and then tell it what to do for all the devices at once. In the game I'm working on, I'm toying with the idea of two levels of difficulty. The hard one will have dark rooms, the easy will have none. I'm thinking of making a scenery light source follow the player on the easy level instead of messing with making scripts for each of the otherwise dark rooms.</p>\n\n",
      "PostDate": "2016-07-03T22:43:59.1015237Z",
      "LastEditDate": null
    },
    {
      "PostId": "baf10cf9-c2c0-4121-95b5-097314e57fc4",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "glad you were able to make sense and/or figure it out, from my code heavy and not well-explained post(s), laughs. Helping someone through the GUI~Editor vs just copy and pasting code, is a lot more work... which is why I don't do it too often, takes too much precious time (never enough time to do everything sighs) and I am lazy, laughs.\r\n\r\n-----------\r\n\r\nyou don't have to use a Command, you can put those scripts into various Verbs/Functions or where/what-ever else, and ya, you can change the 'name' of things, just make sure that it all matches up everywhere in your game's code/GUI~Editor where it's being used.\r\n\r\nyou can also expand upon the scripting too... putting in more conditionals ('if~else if~else' Scripts), for example using the Command again, instead of just checking if it's food, you can add additional 'else ifs' and do whatever you want (instead of making/having multiple, in this example case, Commands):\r\n\r\n```\r\n<command name=\"blah_command\">\r\n  <pattern>blah</pattern>\r\n  <script>\r\n    foreach (object_variable, ScopeReachableNotHeld()) {\r\n      if (HasString (object_variable, \"type_of_object_string_attribute\") = \"food\") {\r\n        object_variable.parent = player\r\n      } else if (HasString (object_variable, \"type_of_object_string_attribute\") = \"monster\") {\r\n        invoke (object_variable.fight_script)\r\n      }\r\n      // etc etc etc 'else ifs' as you want for your various types of Objects\r\n    }\r\n  </script>\r\n</command>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>glad you were able to make sense and/or figure it out, from my code heavy and not well-explained post(s), laughs. Helping someone through the GUI~Editor vs just copy and pasting code, is a lot more work... which is why I don't do it too often, takes too much precious time (never enough time to do everything sighs) and I am lazy, laughs.</p>\n<hr>\n<p>you don't have to use a Command, you can put those scripts into various Verbs/Functions or where/what-ever else, and ya, you can change the 'name' of things, just make sure that it all matches up everywhere in your game's code/GUI~Editor where it's being used.</p>\n<p>you can also expand upon the scripting too... putting in more conditionals ('if~else if~else' Scripts), for example using the Command again, instead of just checking if it's food, you can add additional 'else ifs' and do whatever you want (instead of making/having multiple, in this example case, Commands):</p>\n<pre><code>&lt;command name=\"blah_command\"&gt;\n  &lt;pattern&gt;blah&lt;/pattern&gt;\n  &lt;script&gt;\n    foreach (object_variable, ScopeReachableNotHeld()) {\n      if (HasString (object_variable, \"type_of_object_string_attribute\") = \"food\") {\n        object_variable.parent = player\n      } else if (HasString (object_variable, \"type_of_object_string_attribute\") = \"monster\") {\n        invoke (object_variable.fight_script)\n      }\n      // etc etc etc 'else ifs' as you want for your various types of Objects\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n\n",
      "PostDate": "2016-07-04T00:16:09.2495295Z",
      "LastEditDate": "2016-07-04T18:03:07.2414566Z"
    },
    {
      "PostId": "da9915e1-6ed0-4506-8295-24a54975666b",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "UserAvatar": null,
      "UserGravatar": "6b87c09044d98343eba2c7f21f8314bc",
      "EditableText": "I just used commands at the time for the sake of the simplicity of testing things. Yeah, I know that I can also place the script somewhere else, like when something is opened, looked at, taken, etc., or when I use a user-created verb on an object.\r\n\r\nIf also figured that about expanding the scripting too. Going back to the tutorial, I had thought about flagging the perishable items (or adding another type) and only taking the perishable food items when I run the command line in-game. But I'm taking this one step at a time. \r\n\r\nAgain, thanks for your help. I've got the script saved to my tutorial game for quick reference.",
      "EditableFormat": "markdown",
      "HTML": "<p>I just used commands at the time for the sake of the simplicity of testing things. Yeah, I know that I can also place the script somewhere else, like when something is opened, looked at, taken, etc., or when I use a user-created verb on an object.</p>\n<p>If also figured that about expanding the scripting too. Going back to the tutorial, I had thought about flagging the perishable items (or adding another type) and only taking the perishable food items when I run the command line in-game. But I'm taking this one step at a time.</p>\n<p>Again, thanks for your help. I've got the script saved to my tutorial game for quick reference.</p>\n\n",
      "PostDate": "2016-07-04T14:43:59.0657008Z",
      "LastEditDate": null
    },
    {
      "PostId": "679c6f0b-68ab-4fae-acab-81da76232959",
      "UserId": 1346,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I think using a command is probably the only way this will work. You would want to set it up with say this pattern:\r\n\r\n```get food;get all food;take food;take all;pick up food;pick up all food```\r\n\r\nThen go though the objects in the room, and check which are food. You could do that with an attribute or by setting them to be a type (using the DoesInherit function to check). Is that enough to get you going, or do you want more details?",
      "EditableFormat": "markdown",
      "HTML": "<p>I think using a command is probably the only way this will work. You would want to set it up with say this pattern:</p>\n<p><code>get food;get all food;take food;take all;pick up food;pick up all food</code></p>\n<p>Then go though the objects in the room, and check which are food. You could do that with an attribute or by setting them to be a type (using the DoesInherit function to check). Is that enough to get you going, or do you want more details?</p>\n\n",
      "PostDate": "2016-07-04T15:12:53.4003889Z",
      "LastEditDate": null
    },
    {
      "PostId": "5153ea88-ae87-43fa-b9c0-e1ff33f0c79e",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "UserAvatar": null,
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "> err.... I don't know the new tags for these posts now... how to do the code box/quote box/etc stuff??\r\n\r\nThe forums now use \"markdown\". You can find things like the code tag here: \r\n\r\nhttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>err.... I don't know the new tags for these posts now... how to do the code box/quote box/etc stuff??</p>\n</blockquote>\n<p>The forums now use \"markdown\". You can find things like the code tag here:</p>\n<p>https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</p>\n\n",
      "PostDate": "2016-07-04T15:22:59.77703Z",
      "LastEditDate": "2016-07-04T15:23:34.0938286Z"
    },
    {
      "PostId": "46e4a835-a184-446a-9d6e-8decfa4fc867",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Thanks Jay!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks Jay!</p>\n\n",
      "PostDate": "2016-07-04T17:55:06.3070611Z",
      "LastEditDate": null
    },
    {
      "PostId": "e1bcde1d-834f-41f3-9aac-496b06c4224b",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "UserAvatar": null,
      "UserGravatar": "6b87c09044d98343eba2c7f21f8314bc",
      "EditableText": "Thanks, Pixie, I think I've got what I need to know for now. I got exactly the help I needed already, and have adapted the above script to figure out how to do other things as well. I really asked the question out of curiosity, because I thought there had to be more that I could do with types/attributes than what was given in the tutorial. As it turns out, I learned even more than I imagined, and am playing around with the game's response to the <B>foreach  (object_variable, ScopeReachableNotHeld())</B> line of the script. It's a pretty powerful line. Some time later I'll probably try another scope in it's place.\r\n\r\nMy next step might be to learn more about lists, but I'll save that for later. In the meantime, I'll be experimenting with the game, consulting the help pages, and looking at the forum.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, Pixie, I think I've got what I need to know for now. I got exactly the help I needed already, and have adapted the above script to figure out how to do other things as well. I really asked the question out of curiosity, because I thought there had to be more that I could do with types/attributes than what was given in the tutorial. As it turns out, I learned even more than I imagined, and am playing around with the game's response to the <b>foreach  (object_variable, ScopeReachableNotHeld())</b> line of the script. It's a pretty powerful line. Some time later I'll probably try another scope in it's place.</p>\n<p>My next step might be to learn more about lists, but I'll save that for later. In the meantime, I'll be experimenting with the game, consulting the help pages, and looking at the forum.</p>\n\n",
      "PostDate": "2016-07-05T16:17:26.2712633Z",
      "LastEditDate": null
    },
    {
      "PostId": "9298ba93-8153-4bdb-bc1b-2add48a2697c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Lists and their usage is a bit more advanced stuff, so they can take some time to learn, but they're very useful/powerful. You don't have to use a Scope (a built-in specific itemed list creation function), you can create your own lists, and do lots of cool stuff with them, such as randomly selecting one of its items:\r\n\r\nthe 'split' Script/Function is an easy quick way to create a List Attribute if you need doing so through scripting, for example:\r\n\r\n>orc.item_drop_list = split (\"cash;club;potion\", \";\")\r\n\r\nbut I'll show the \"normal\" way in the code below:\r\n\r\n```\r\n<game name=\"sample\">\r\n  <attr name=\"start\" type=\"script\">\r\n    orc.item_drop_list = NewStringList()\r\n    list add (orc.item_drop_list, \"cash\")\r\n    list add (orc.item_drop_list, \"club\")\r\n    list add (orc.item_drop_list, \"potion\")\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"room\">\r\n</object>\r\n\r\n<object name=\"club\">\r\n  <attr name=\"parent\" type=\"object\">orc</attr>\r\n</object>\r\n\r\n<object name=\"potion\">\r\n  <attr name=\"parent\" type=\"object\">orc</attr>\r\n</object>\r\n\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"cash\" type=\"int\">0</attr>\r\n</object>\r\n\r\n<object name=\"orc\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"dead\" type=\"boolean\">false</attr>\r\n  <attr name=\"cash\" type=\"int\">50</attr>\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">fight</attr>\r\n  <attr name=\"fight\" type=\"script\">\r\n    if (orc.dead) {\r\n      msg (\"The orc is already dead and looted, silly\")\r\n    } else {\r\n      msg (\"You fight and kill the orc.\")\r\n      orc.dead = true\r\n      item_drop_function (this)\r\n    }\r\n  </attr>\r\n</object>\r\n\r\n<function name=\"item_drop_function\" parameters=\"character_parameter\">\r\n  selected_item_variable = StringListItem (character_parameter.item_drop_list, GetRandomInt (0, ListCount (character_parameter.item_drop_list) - 1))\r\n  if (selected_item_variable = \"cash\") {\r\n    player.cash = player.cash + character_parameter.cash\r\n  } else {\r\n    MoveObject (GetObject (selected_item_variable), player)\r\n  }\r\n</function>\r\n\r\n<verb>\r\n  <property>fight</property>\r\n  <pattern>fight</pattern>\r\n  <defaultexpression>You can't fight that!</attr>\r\n</verb>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Lists and their usage is a bit more advanced stuff, so they can take some time to learn, but they're very useful/powerful. You don't have to use a Scope (a built-in specific itemed list creation function), you can create your own lists, and do lots of cool stuff with them, such as randomly selecting one of its items:</p>\n<p>the 'split' Script/Function is an easy quick way to create a List Attribute if you need doing so through scripting, for example:</p>\n<blockquote>\n<p>orc.item_drop_list = split (\"cash;club;potion\", \";\")</p>\n</blockquote>\n<p>but I'll show the \"normal\" way in the code below:</p>\n<pre><code>&lt;game name=\"sample\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    orc.item_drop_list = NewStringList()\n    list add (orc.item_drop_list, \"cash\")\n    list add (orc.item_drop_list, \"club\")\n    list add (orc.item_drop_list, \"potion\")\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"room\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"club\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"potion\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"cash\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"dead\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"cash\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;fight&lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;\n    if (orc.dead) {\n      msg (\"The orc is already dead and looted, silly\")\n    } else {\n      msg (\"You fight and kill the orc.\")\n      orc.dead = true\n      item_drop_function (this)\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;function name=\"item_drop_function\" parameters=\"character_parameter\"&gt;\n  selected_item_variable = StringListItem (character_parameter.item_drop_list, GetRandomInt (0, ListCount (character_parameter.item_drop_list) - 1))\n  if (selected_item_variable = \"cash\") {\n    player.cash = player.cash + character_parameter.cash\n  } else {\n    MoveObject (GetObject (selected_item_variable), player)\n  }\n&lt;/function&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;fight&lt;/property&gt;\n  &lt;pattern&gt;fight&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't fight that!&lt;/attr&gt;\n&lt;/verb&gt;\n</code></pre>\n\n",
      "PostDate": "2016-07-05T17:45:08.7166053Z",
      "LastEditDate": "2016-07-05T18:04:04.1015412Z"
    },
    {
      "PostId": "8102dc3c-4d46-46fd-ad74-42573b1007f7",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "conceptual example of the 'foreach' Script/Function:\r\n\r\n~~~\r\nforeach (PLACEHOLDER_VARIABLE, OBJECT_NAME.LIST_ATTRIBUTE_NAME)\r\n\r\npretend that 'run_laps' is a Script Attribute on each of the team members, which will be run via the 'invoke' (or you can use the more powerful/useful 'do' instead if you need to do more advanced scripting) Script/Function, seen below\r\n\r\n----\r\n\r\ngame.team = split (\"john;joe;jim;jeff;james\", \";\")\r\n\r\nforeach (team_member, game.team) {\r\n  invoke (team_member.run_laps)\r\n}\r\n\r\n// conceptual effect/result of what the 'PLACEHOLDER_VARIABLE' does automatically (hidden / behind the scenes) in the 'foreach' Script/Function:\r\n\r\nteam_member = \"john\" -> invoke (john.run_laps)\r\nteam_member = \"joe\" -> invoke (joe.run_laps)\r\nteam_member = \"jim\" -> invoke (jim.run_laps)\r\nteam_member = \"jeff\" -> invoke (jeff.run_laps)\r\nteam_member = \"james\" -> invoke (james.run_laps)",
      "EditableFormat": "markdown",
      "HTML": "<p>conceptual example of the 'foreach' Script/Function:</p>\n<pre><code>foreach (PLACEHOLDER_VARIABLE, OBJECT_NAME.LIST_ATTRIBUTE_NAME)\n\npretend that 'run_laps' is a Script Attribute on each of the team members, which will be run via the 'invoke' (or you can use the more powerful/useful 'do' instead if you need to do more advanced scripting) Script/Function, seen below\n\n----\n\ngame.team = split (\"john;joe;jim;jeff;james\", \";\")\n\nforeach (team_member, game.team) {\n  invoke (team_member.run_laps)\n}\n\n// conceptual effect/result of what the 'PLACEHOLDER_VARIABLE' does automatically (hidden / behind the scenes) in the 'foreach' Script/Function:\n\nteam_member = \"john\" -&gt; invoke (john.run_laps)\nteam_member = \"joe\" -&gt; invoke (joe.run_laps)\nteam_member = \"jim\" -&gt; invoke (jim.run_laps)\nteam_member = \"jeff\" -&gt; invoke (jeff.run_laps)\nteam_member = \"james\" -&gt; invoke (james.run_laps)\n</code></pre>\n\n",
      "PostDate": "2016-07-05T18:15:29.4109539Z",
      "LastEditDate": "2016-07-05T18:18:57.9829775Z"
    },
    {
      "PostId": "d9611f27-76e7-41cb-8ce4-b097dc75c998",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "UserAvatar": null,
      "UserGravatar": "6b87c09044d98343eba2c7f21f8314bc",
      "EditableText": "Well, I'm not quite ready to try out lists, or at least I didn't think I was, but since you went through the trouble of giving that example of a code using lists, I took a close look at the post. Please tell me how well I interpreted what is going on:\r\n\r\n1.  In the startup script of the game, you created a list called item_drop_list, and attached it to a NPC orc as an attribute.\r\n2.  You designated cash, club, and potion as items on the list.\r\n3.  The orc has three objects by those same names in its \"inventory.\" The cash has a value of 50.\r\n4.  You've added a boolean attribute called \"dead\" with a value preset to false.\r\n5.  You've added an attribute called \"fight\" that runs a script.  \r\n6.  When then orc is killed in the game via the fight script, the orc calls a function, that you've named item_drop_function. \r\n7.  That function has a parameter called character_parameter.  \r\n8.  The function then randomly gives one of three items in the list as a reward to the player. In this case, it will be a club, potion, or the cash.\r\n\r\nAnd here are my questions: \r\n\r\n1.  Is the function set up so that the player can loot other objects, such as a dragon, thief, baddie, etc. when they are defeated and the function is called again? It looks to me like it is, but they would also need to have their own item_drop_list.\r\n2.  Does the line <b>item_drop_function (this)</B> actually tell the game to run the function and apply it specifically to the orc? \r\n3.  Is <b>character_parameter</B> a specific phrase that the game naturally looks for and understands, or is it a variable? I'm guessing that is something that needs to be specific.\r\n4.  In the three lines that added the items to orc.item_drop_list, would the same thing be accomplished be creating an orc, giving it a string attribute, and then manually adding those items, bypassing the need for a startup script?\r\n5. Is the script attribute the same thing as adding a verb to an object, and then applying a script? (<i>Nevermind on this one, I just opened up the old tutorial game, added a verb to an object that moved the player from the lounge to the kitchen, then checked the object attributes and did indeed find the verb listed as a script attribute.</i>)",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, I'm not quite ready to try out lists, or at least I didn't think I was, but since you went through the trouble of giving that example of a code using lists, I took a close look at the post. Please tell me how well I interpreted what is going on:</p>\n<ol>\n<li>In the startup script of the game, you created a list called item_drop_list, and attached it to a NPC orc as an attribute.</li>\n<li>You designated cash, club, and potion as items on the list.</li>\n<li>The orc has three objects by those same names in its \"inventory.\" The cash has a value of 50.</li>\n<li>You've added a boolean attribute called \"dead\" with a value preset to false.</li>\n<li>You've added an attribute called \"fight\" that runs a script.</li>\n<li>When then orc is killed in the game via the fight script, the orc calls a function, that you've named item_drop_function.</li>\n<li>That function has a parameter called character_parameter.</li>\n<li>The function then randomly gives one of three items in the list as a reward to the player. In this case, it will be a club, potion, or the cash.</li>\n</ol>\n<p>And here are my questions:</p>\n<ol>\n<li>Is the function set up so that the player can loot other objects, such as a dragon, thief, baddie, etc. when they are defeated and the function is called again? It looks to me like it is, but they would also need to have their own item_drop_list.</li>\n<li>Does the line <b>item_drop_function (this)</b> actually tell the game to run the function and apply it specifically to the orc?</li>\n<li>Is <b>character_parameter</b> a specific phrase that the game naturally looks for and understands, or is it a variable? I'm guessing that is something that needs to be specific.</li>\n<li>In the three lines that added the items to orc.item_drop_list, would the same thing be accomplished be creating an orc, giving it a string attribute, and then manually adding those items, bypassing the need for a startup script?</li>\n<li>Is the script attribute the same thing as adding a verb to an object, and then applying a script? (<i>Nevermind on this one, I just opened up the old tutorial game, added a verb to an object that moved the player from the lounge to the kitchen, then checked the object attributes and did indeed find the verb listed as a script attribute.</i>)</li>\n</ol>\n\n",
      "PostDate": "2016-07-07T20:53:28.1132257Z",
      "LastEditDate": null
    },
    {
      "PostId": "deef9e6b-30d1-464c-a2c6-d95f2fb87ebe",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "you didn't have to jump into Lists, I was just posting the stuff for when you do, laughs. Oh well... Lists are useful, if you can wrap your head around them / understanding them.\r\n\r\ngood luck on understanding this post... YUCK! (I did a really bad job at trying to explain and answer your questions... grr, sighs)\r\n\r\n-----------------------\r\n\r\nI did do a bit of a more complex example here... due to the handling of me using different data types, so if you can understand this example, you're much much farther along in understanding List usage, hehe.\r\n\r\nfor your #3-understanding (all others are an accurate understanding):\r\n\r\nthe 'orc' Object contains 2 Objects: 'club' Object and 'potion' Object\r\n\r\nthe 'orc' (and 'player') Object(s) also contains a 'cash' Integer Attribute, the 'player' Object's 'cash' Integer Attribute's Value starts at 0, and the 'orc' Object has its 'cash' Integer Attribute's Value at 50.\r\n\r\nbecause I decided to have a mix of Data Types (2 Objects and 1 Integer Attribute), I must use a String List Attribute as it holds strings/text as its items (an Object List Attribute must have all of its items as Objects - which the 'cash' Integer Attribute would cause an error, as it's not an Object)\r\n\r\nThus because I'm using a String List Attribute, its items are just strings/text, so if the 'potion' or the 'club' item is selected via the random selection code ( selected_item_variable = ...... ),  (see the scripting under the 'else' condition) I must convert the string/text of 'potion' selected choice into the 'potion' Object, which the 'GetObject (string/text: selected_item_variable)' does. The same is done with/for the 'club' string/text into the 'club' Object. And now, we can act upon those Objects, which in this example is to move them over to (into) the 'player' Object (aka, the \"inventory\"). However, if the 'cash' string/text item is selected (which is checked via the 'if' condition), it's handled differently, we just simply add the Value (50) of the 'orc' Object's 'cash' Integer Attribute to the 'player' Object's 'cash' Integer Attribute's Value (of 0).\r\n\r\n-----------------------\r\n\r\nthe 'orc' Object's 'fight' Script Attribute is the same as the GUI~Editor's: 'orc' Object -> 'Verb' Tab -> 'fight' Verb -> (set it up: add new script, etc etc etc)\r\n\r\n----------------------\r\n\r\nVARIABLES (3 Types - keeping this simple):\r\n1. Variables: example: cash = 100\r\n2. Attributes: example: player.cash = 100\r\n3. Arguments/Parameters: (see Functions/Commands)\r\n\r\n-------------------------\r\n\r\nnow, about the 'item_drop_function' Function:\r\n\r\nFunctions (and Commands) have 'argument/parameter' VARIABLES, these are inputs that are then able to be used by the Function's scripting.\r\n\r\nso, in the 'orc' Object's 'fight' Script Attribute (the 'orc' Object's 'fight' Verb), we call/activate/run the 'item_drop_function' and provide the special 'this' keyword/keycommand as its input/argument.\r\n\r\nThe special 'this' keyword/keycommand, GETS the Object that is containing its scripting (in this case, the 'this' scripting, is / is inside, the 'fight' Script Attribute), which in this case, the 'fight' Script Attribute is contained by/in the 'orc' Object. So, 'this' GETS the 'orc' Object:\r\n\r\nconceptual:\r\nitem_drop_function (argument/input)\r\nitem_drop_function (this)\r\nitem_drop_function (this ---> orc)\r\nitem_drop_function (orc)\r\n\r\nnow, I name/rename the Parameter VARIABLE that is holding the input/argument as 'character_parameter':\r\n\r\nconceptually:\r\ncharacter_parameter = orc\r\n\r\nwhich the scripting in the 'item_drop_function' can (and does) use that Parameter VARIABLE (character_parameter), so:\r\n\r\nconceptually:\r\n\r\nselected_item_variable = StringListItem (character_parameter.item_drop_list, GetRandomInt (0, ListCount (character_parameter.item_drop_list) - 1))\r\nselected_item_variable = StringListItem (orc.item_drop_list, GetRandomInt (0, ListCount (orc.item_drop_list) - 1))\r\nselected_item_variable = (one of these strings/text items: cash/club/potion)\r\n\r\nplayer.cash = player.cash + character_parameter.cash\r\nplayer.cash = player.cash + orc.cash\r\nplayer.cash = (0) + (50)\r\nplayer.cash = 50\r\n\r\n------------------\r\n\r\nyour questions:\r\n\r\n1. yes, all you got to do is to call the Function:\r\n\r\nif you're calling the Function from a Script Attribute of the Object (aka, in GUI~Editor: an Object's Verb):\r\n\r\n// you can always replace 'this' with the name of the Object, but by using 'this' (only when its scripting is contained by that Object you want to use) then you don't have to for each different Object you're using with this Function\r\n\r\nin code: item_drop_function (this)\r\n\r\nGUI~Editor: add new script -> output -> 'call function' Script -> Name: item_drop_function, Add Parameter: this)\r\n\r\nif you're calling the 'item_drop_function' Function from another Function:\r\n\r\nin code: item_drop_function (name_of_the_object_you_want_to_use)\r\n\r\nGUI~Editor: add new script -> output -> 'call function' Script -> Name: item_drop_function, Add Parameter: name_of_the_object_you_want_to_use, --- you may be using scripting to determine the Object for what Object name to use)\r\n\r\nif you're calling the 'item_drop_function' Function from a Command:\r\n\r\n<pattern>loot #object#</pattern>\r\n\r\nGUI~Editor: add new script -> output -> 'call function' Script -> Name: item_drop_function, Add Parameter: object, --- if using #object#, otherwise: objectXXX --- if using #objectXXX#)\r\n\r\nand yes, each Object would need its own 'item_drop' list, unless you want a universal drop list, and/or have your own scripting for determining what 'Object.List' to use (such as with diablo games using its 'ilvl/alvl' Attributes in relation to which treasure_class/drop list to use) if you're doing more complex stuff in your game.\r\n\r\n2. yes, that's how it's done directly in code, you literally write the name of the function and in the parenthesis, you either type in: 'this' (if its scripting is contained by the desired Object), or you specifically type in the name of the Object, or you're using addition scripting for determing the Object and a variable for holding the name of the scripting-gotten Object\r\n\r\n3. 'character_variable' is just my own personal-custom name/label for the Parameter VARIABLE, you can use whatever you want for the name/label of it, such as a simple 'x':\r\n\r\n```\r\nitem_drop_function (orc)\r\n~OR for this example~\r\nitem_drop_function (this)\r\n\r\n// parameter=\"x\" <=== orc\r\n// or\r\n// for this example: parameter=\"x\" <==== (this = orc)\r\n\r\n<function name=\"item_drop_function\" parameter=\"x\">\r\n  // x = orc\r\n  // just for quick example:\r\n  player.cash = player.cash + x.cash\r\n  // conceptually: player.cash = player.cash + orc.cash\r\n</function>\r\n```\r\n\r\n4. yes... BUT *NOT* adding a String Attribute. YOU ADD A *STRING LIST* ATTRIBUTE, and add in its item Values.\r\n\r\nthere's various ways:\r\n\r\ndirectly in code, as the 'creation' tag block (for initial game setting only):\r\n\r\n```\r\n<object name=\"orc\">\r\n  <attr name=\"item_drop_list\" type=\"simplestringlist\">cash;club;potion</attr>\r\n</object>\r\n\r\n// in full view of everything, after the start of the game, the 'orc' Object 'creation' tag block looks like this:\r\n\r\n<object name=\"orc\">\r\n  <attr name=\"cash\" type=\"int\">50</attr>\r\n  <attr name=\"dead\" type=\"boolean\">false</attr>\r\n  <attr name=\"item_drop_list\" type=\"simplestringlist\">cash;club;potion</attr>\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">fight</attr>\r\n  <attr name=\"fight\" type=\"script\">\r\n    // blah blah blah scripting, I'm lazy, lol\r\n  </attr>\r\n  <object name=\"club\">\r\n  </object>\r\n  <object name=\"potion\">\r\n  </object>\r\n</object>\r\n```\r\n\r\nthe above (well, just demonstrating for this: the 'item_drop_list' String List Attribute), is the same as if you did it manually in the GUI~Editor:\r\n\r\n'orc' Object -> 'Attributes' Tab -> Attributes -> Add -> (see below)\r\n\r\n(Object Name: orc)\r\nAttribute Name: item_drop_list\r\nAttribute Type: String List\r\nAttribute Value (add item or whatever/however it's done in the GUI~Edtor, lol): cash; club; potion\r\n\r\nand lastly, via scripting, which is what I originally used for my example (already seen, GUI~EDitor: 'game' Game Object -> 'Scripts' Tab -> 'start' Script -> set it up: add new script and etc etc tc).\r\n\r\n5. yes, a Script Attribute IS the GUI~Editor's \"Verb\", and vice versa. Well, there's a small caveat... if you're doing it in code, you must add in the 'verb' creation tag block and add in the item for the 'displayverbs/inventoryverbs', to make it be (has the functionality of) a Verb (the GUI~Editor does this for you and has the toggle options / options for you to use), otehrwise, it's still a Script Attribute and can be run/used/actvated, but it doesn't have the button and hyperlink functionality, as it's not fully set up as a Verb.",
      "EditableFormat": "markdown",
      "HTML": "<p>you didn't have to jump into Lists, I was just posting the stuff for when you do, laughs. Oh well... Lists are useful, if you can wrap your head around them / understanding them.</p>\n<p>good luck on understanding this post... YUCK! (I did a really bad job at trying to explain and answer your questions... grr, sighs)</p>\n<hr>\n<p>I did do a bit of a more complex example here... due to the handling of me using different data types, so if you can understand this example, you're much much farther along in understanding List usage, hehe.</p>\n<p>for your #3-understanding (all others are an accurate understanding):</p>\n<p>the 'orc' Object contains 2 Objects: 'club' Object and 'potion' Object</p>\n<p>the 'orc' (and 'player') Object(s) also contains a 'cash' Integer Attribute, the 'player' Object's 'cash' Integer Attribute's Value starts at 0, and the 'orc' Object has its 'cash' Integer Attribute's Value at 50.</p>\n<p>because I decided to have a mix of Data Types (2 Objects and 1 Integer Attribute), I must use a String List Attribute as it holds strings/text as its items (an Object List Attribute must have all of its items as Objects - which the 'cash' Integer Attribute would cause an error, as it's not an Object)</p>\n<p>Thus because I'm using a String List Attribute, its items are just strings/text, so if the 'potion' or the 'club' item is selected via the random selection code ( selected_item_variable = ...... ),  (see the scripting under the 'else' condition) I must convert the string/text of 'potion' selected choice into the 'potion' Object, which the 'GetObject (string/text: selected_item_variable)' does. The same is done with/for the 'club' string/text into the 'club' Object. And now, we can act upon those Objects, which in this example is to move them over to (into) the 'player' Object (aka, the \"inventory\"). However, if the 'cash' string/text item is selected (which is checked via the 'if' condition), it's handled differently, we just simply add the Value (50) of the 'orc' Object's 'cash' Integer Attribute to the 'player' Object's 'cash' Integer Attribute's Value (of 0).</p>\n<hr>\n<p>the 'orc' Object's 'fight' Script Attribute is the same as the GUI~Editor's: 'orc' Object -&gt; 'Verb' Tab -&gt; 'fight' Verb -&gt; (set it up: add new script, etc etc etc)</p>\n<hr>\n<p>VARIABLES (3 Types - keeping this simple):</p>\n<ol>\n<li>Variables: example: cash = 100</li>\n<li>Attributes: example: player.cash = 100</li>\n<li>Arguments/Parameters: (see Functions/Commands)</li>\n</ol>\n<hr>\n<p>now, about the 'item_drop_function' Function:</p>\n<p>Functions (and Commands) have 'argument/parameter' VARIABLES, these are inputs that are then able to be used by the Function's scripting.</p>\n<p>so, in the 'orc' Object's 'fight' Script Attribute (the 'orc' Object's 'fight' Verb), we call/activate/run the 'item_drop_function' and provide the special 'this' keyword/keycommand as its input/argument.</p>\n<p>The special 'this' keyword/keycommand, GETS the Object that is containing its scripting (in this case, the 'this' scripting, is / is inside, the 'fight' Script Attribute), which in this case, the 'fight' Script Attribute is contained by/in the 'orc' Object. So, 'this' GETS the 'orc' Object:</p>\n<p>conceptual:<br>\nitem_drop_function (argument/input)<br>\nitem_drop_function (this)<br>\nitem_drop_function (this ---&gt; orc)<br>\nitem_drop_function (orc)</p>\n<p>now, I name/rename the Parameter VARIABLE that is holding the input/argument as 'character_parameter':</p>\n<p>conceptually:<br>\ncharacter_parameter = orc</p>\n<p>which the scripting in the 'item_drop_function' can (and does) use that Parameter VARIABLE (character_parameter), so:</p>\n<p>conceptually:</p>\n<p>selected_item_variable = StringListItem (character_parameter.item_drop_list, GetRandomInt (0, ListCount (character_parameter.item_drop_list) - 1))<br>\nselected_item_variable = StringListItem (orc.item_drop_list, GetRandomInt (0, ListCount (orc.item_drop_list) - 1))<br>\nselected_item_variable = (one of these strings/text items: cash/club/potion)</p>\n<p>player.cash = player.cash + character_parameter.cash<br>\nplayer.cash = player.cash + orc.cash<br>\nplayer.cash = (0) + (50)<br>\nplayer.cash = 50</p>\n<hr>\n<p>your questions:</p>\n<ol>\n<li>yes, all you got to do is to call the Function:</li>\n</ol>\n<p>if you're calling the Function from a Script Attribute of the Object (aka, in GUI~Editor: an Object's Verb):</p>\n<p>// you can always replace 'this' with the name of the Object, but by using 'this' (only when its scripting is contained by that Object you want to use) then you don't have to for each different Object you're using with this Function</p>\n<p>in code: item_drop_function (this)</p>\n<p>GUI~Editor: add new script -&gt; output -&gt; 'call function' Script -&gt; Name: item_drop_function, Add Parameter: this)</p>\n<p>if you're calling the 'item_drop_function' Function from another Function:</p>\n<p>in code: item_drop_function (name_of_the_object_you_want_to_use)</p>\n<p>GUI~Editor: add new script -&gt; output -&gt; 'call function' Script -&gt; Name: item_drop_function, Add Parameter: name_of_the_object_you_want_to_use, --- you may be using scripting to determine the Object for what Object name to use)</p>\n<p>if you're calling the 'item_drop_function' Function from a Command:</p>\n<p></p>\n<p>GUI~Editor: add new script -&gt; output -&gt; 'call function' Script -&gt; Name: item_drop_function, Add Parameter: object, --- if using #object#, otherwise: objectXXX --- if using #objectXXX#)</p>\n<p>and yes, each Object would need its own 'item_drop' list, unless you want a universal drop list, and/or have your own scripting for determining what 'Object.List' to use (such as with diablo games using its 'ilvl/alvl' Attributes in relation to which treasure_class/drop list to use) if you're doing more complex stuff in your game.</p>\n<ol start=\"2\">\n<li>\n<p>yes, that's how it's done directly in code, you literally write the name of the function and in the parenthesis, you either type in: 'this' (if its scripting is contained by the desired Object), or you specifically type in the name of the Object, or you're using addition scripting for determing the Object and a variable for holding the name of the scripting-gotten Object</p>\n</li>\n<li>\n<p>'character_variable' is just my own personal-custom name/label for the Parameter VARIABLE, you can use whatever you want for the name/label of it, such as a simple 'x':</p>\n</li>\n</ol>\n<pre><code>item_drop_function (orc)\n~OR for this example~\nitem_drop_function (this)\n\n// parameter=\"x\" &lt;=== orc\n// or\n// for this example: parameter=\"x\" &lt;==== (this = orc)\n\n&lt;function name=\"item_drop_function\" parameter=\"x\"&gt;\n  // x = orc\n  // just for quick example:\n  player.cash = player.cash + x.cash\n  // conceptually: player.cash = player.cash + orc.cash\n&lt;/function&gt;\n</code></pre>\n<ol start=\"4\">\n<li>yes... BUT <em>NOT</em> adding a String Attribute. YOU ADD A <em>STRING LIST</em> ATTRIBUTE, and add in its item Values.</li>\n</ol>\n<p>there's various ways:</p>\n<p>directly in code, as the 'creation' tag block (for initial game setting only):</p>\n<pre><code>&lt;object name=\"orc\"&gt;\n  &lt;attr name=\"item_drop_list\" type=\"simplestringlist\"&gt;cash;club;potion&lt;/attr&gt;\n&lt;/object&gt;\n\n// in full view of everything, after the start of the game, the 'orc' Object 'creation' tag block looks like this:\n\n&lt;object name=\"orc\"&gt;\n  &lt;attr name=\"cash\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"dead\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"item_drop_list\" type=\"simplestringlist\"&gt;cash;club;potion&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;fight&lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;\n    // blah blah blah scripting, I'm lazy, lol\n  &lt;/attr&gt;\n  &lt;object name=\"club\"&gt;\n  &lt;/object&gt;\n  &lt;object name=\"potion\"&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n</code></pre>\n<p>the above (well, just demonstrating for this: the 'item_drop_list' String List Attribute), is the same as if you did it manually in the GUI~Editor:</p>\n<p>'orc' Object -&gt; 'Attributes' Tab -&gt; Attributes -&gt; Add -&gt; (see below)</p>\n<p>(Object Name: orc)<br>\nAttribute Name: item_drop_list<br>\nAttribute Type: String List<br>\nAttribute Value (add item or whatever/however it's done in the GUI~Edtor, lol): cash; club; potion</p>\n<p>and lastly, via scripting, which is what I originally used for my example (already seen, GUI~EDitor: 'game' Game Object -&gt; 'Scripts' Tab -&gt; 'start' Script -&gt; set it up: add new script and etc etc tc).</p>\n<ol start=\"5\">\n<li>yes, a Script Attribute IS the GUI~Editor's \"Verb\", and vice versa. Well, there's a small caveat... if you're doing it in code, you must add in the 'verb' creation tag block and add in the item for the 'displayverbs/inventoryverbs', to make it be (has the functionality of) a Verb (the GUI~Editor does this for you and has the toggle options / options for you to use), otehrwise, it's still a Script Attribute and can be run/used/actvated, but it doesn't have the button and hyperlink functionality, as it's not fully set up as a Verb.</li>\n</ol>\n\n",
      "PostDate": "2016-07-08T02:38:00.1496291Z",
      "LastEditDate": "2016-07-08T03:22:46.0906438Z"
    },
    {
      "PostId": "ed206041-d28e-4cd3-a3f4-b9262185bc93",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "just to add on, more about a Function and its Arguments/Parameters (these examples probably explains about Functions and their arguments/parameters much better):\r\n\r\n```\r\n<game name=\"xxx\">\r\n  <attr name=\"start\" type=\"script\">\r\n    answer = sum_of_five_values_function (1,2,3,4,5) // Arguments: 1,2,3,4,5 --- which match up with their Parameter slots/ordering (value_1,value_2,etc): '1' to 'value_1', '2' to 'value_2', etc etc etc\r\n    msg (\"The sum of 1+2+3+4+5 is: \" + answer)\r\n    // output: The sum of 1+2+3+4+5 is: 15\r\n  </attr>\r\n</game>\r\n\r\n<function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\"> // type=\"XXX\" is the return type\r\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\r\n  return (sum)\r\n</function>\r\n```\r\n\r\nand using different arguments:\r\n\r\n```\r\n<game name=\"xxx\">\r\n  <attr name=\"start\" type=\"script\">\r\n    answer = sum_of_five_values_function (23,41,17,89,66) // Arguments: 23,41,17,89,66 --- which match up with their Parameter slots/ordering (value_1,value_2,etc): '23' to 'value_1', '41' to 'value_2', etc etc etc\r\n    msg (\"The sum of 23+41+17+89+66 is: \" + answer)\r\n    // output: The sum of 23+41+17+89+66 is: 236\r\n  </attr>\r\n</game>\r\n\r\n<function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\"> // type=\"XXX\" is the return type\r\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\r\n  return (sum)\r\n</function>\r\n```\r\n\r\nusing Variables instead of constants for the arguments:\r\n\r\n```\r\n<game name=\"xxx\">\r\n  <attr name=\"start\" type=\"script\">\r\n    arg1 = 32\r\n    arg2 = 14\r\n    arg3 = 71\r\n    arg4 = 98\r\n    arg5 = 66\r\n    answer = sum_of_five_values_function (arg1,arg2,arg3,arg4,arg5) // Arguments: arg1,arg2,arg3,arg4,arg5 --- which match up with their Parameter slots/ordering (value_1,value_2,etc): 'arg1' to 'value_1', 'arg2' to 'value_2', etc etc etc\r\n    msg (\"The sum of 32+14+71+98+66 is: \" + answer)\r\n    // output: The sum of 32+14+71+98+66 is: 281\r\n  </attr>\r\n</game>\r\n\r\n<function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\"> // type=\"XXX\" is the return type\r\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\r\n  return (sum)\r\n</function>\r\n```\r\n\r\nusing Attributes for the arguments:\r\n\r\n```\r\n<game name=\"xxx\">\r\n  <attr name=\"start\" type=\"script\">\r\n    answer = sum_of_five_values_function (global_data_object.arg_1,global_data_object.arg_2,global_data_object.arg_3,global_data_object.arg_4,global_data_object.arg_5)\r\n    msg (\"The sum of 2+4+6+8+10 is: \" + answer)\r\n    // output: The sum of 2+4+6+8+10 is: 30\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"global_data_object\">\r\n  <attr name=\"arg_1\" type=\"int\">2</attr>\r\n  <attr name=\"arg_2\" type=\"int\">4</attr>\r\n  <attr name=\"arg_3\" type=\"int\">6</attr>\r\n  <attr name=\"arg_4\" type=\"int\">8</attr>\r\n  <attr name=\"arg_5\" type=\"int\">10</attr>\r\n</object>\r\n\r\n<function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\">\r\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\r\n  return (sum)\r\n</function>\r\n```\r\n\r\nusing Attributes for the arguments:\r\n\r\n(multiple uses/re-uses, one of the big purposes of Functions)\r\n\r\n```\r\n<game name=\"xxx\">\r\n  <attr name=\"turn\" type=\"int\">0</attr>\r\n  <statusattributes type=\"simplestringdictionary\">turn = Turn: !</statusattributes> // unfortunately, Dictionary Attributes still require this old syntax: <ATTRIBUTE_NAME type=\"xxx\">content</ATTRIBUTE_NAME>, sighs. You can't do: <attr name=\"ATTRIBUTE_NAME\" type=\"xxx\">content</attr>\r\n  <attr name=\"start\" type=\"script\">\r\n    answer = sum_of_five_values_function (global_data_object.arg_1,global_data_object.arg_2,global_data_object.arg_3,global_data_object.arg_4,global_data_object.arg_5)\r\n    msg (\"The sum = \" + answer)\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"global_data_object\">\r\n  <attr name=\"arg_1\" type=\"int\">1</attr>\r\n  <attr name=\"arg_2\" type=\"int\">3</attr>\r\n  <attr name=\"arg_3\" type=\"int\">6</attr>\r\n  <attr name=\"arg_4\" type=\"int\">9</attr>\r\n  <attr name=\"arg_5\" type=\"int\">12</attr>\r\n</object>\r\n\r\n<object name=\"room\">\r\n</object>\r\n\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"alias\" type=\"string\">HK</attr>\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n  <attr name=\"life\" type=\"string\">999/999</attr>\r\n  <statusattributes type=\"simplestringdictionary\">life = Life: !</statusattributes> // unfortunately, Dictionary Attributes still require this old syntax: <ATTRIBUTE_NAME type=\"xxx\">content</ATTRIBUTE_NAME>, sighs. You can't do: <attr name=\"ATTRIBUTE_NAME\" type=\"xxx\">content</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n</object>\r\n\r\n<object name=\"monster\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"alias\" type=\"string\">orc</attr>\r\n  <attr name=\"dead\" type=\"boolean\">false</attr>\r\n  <attr name=\"current_life\" type=\"int\">500</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">500</attr>\r\n  <attr name=\"life\" type=\"string\">500/500</attr>\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">look;fight</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <attr name=\"look\" type=\"script\">\r\n    msg (\"Life: \" + this.life)\r\n  </attr>\r\n  <attr name=\"fight\" type=\"script\"><![CDATA[ // this '<![CDATA[ content:scripting ]]>' tag is needed to tell quest that any of the '<' and '>' symbols as the inside content:scripting are to be recognized as 'greater than' and 'lesser than' operations/symbols, and NOT as code tag symbols. Otherwise, we'd be getting an ERROR. This 'CDATA' tag is ONLY needed for if/when you're typing in the code directly. If you're using the GUI~Editor, then you don't need to ever worry about (don't need to use) this 'CDATA' tag, as it handles it for you.\r\n    if (this.dead) {\r\n      msg (\"The \" + this.alias + \" is already dead, silly.\")\r\n    } else {\r\n      damage = sum_of_five_values_function (10,20,30,40,50)\r\n      this.current_life = this.current_life - damage\r\n      msg (game.pov.alias + \" attacked the \" + this.alias + \" for \" + damage + \" damage, leaving it with only \" + this.current_life + \" life left.\")\r\n      if (this.current_life <= 0) {\r\n        this.dead = true\r\n        msg (game.pov.alias + \" inflicted so much damage, he actually killed the \" + this.alias + \".\")\r\n      } else {\r\n        game.pov.current_life = game.pov.current_life - damage\r\n        msg (this.alias + \" attacks \" + game.pov.alias + \", doing \" + damage + \" damage to him, leaving \" + game.pov.alias + \" with only \" + game.pov.current_life + \" life left.\")\r\n        if (game.pov.current_life <= 0) {\r\n          msg (\"The \" + this.alias + \" has killed \" + game.pov.alias + \".\")\r\n          msg (\"GAME OVER\")\r\n          finish\r\n        }\r\n      }\r\n    }\r\n  ]]></attr>\r\n</object>\r\n\r\n<verb>\r\n  <property>fight</proeprty>\r\n  <pattern>fight</pattern>\r\n  <defaultexpression>You can't fight that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>look</proeprty>\r\n  <pattern>look</pattern>\r\n  <defaultexpression>You can't look at that!</defaultexpression>\r\n</verb>\r\n\r\n<turnscript name=\"global_turnscript\">\r\n  <enabled /> // this (to the left) is the syntax quest-understood shorthand of this Boolean Atribute (of ONLY) when its Value is 'true', as shown in its longhand/normal syntax form: <attr name=\"enabled\" type=\"boolean\">true</attr>\r\n  <script>\r\n    answer = sum_of_five_values_function (9,8,7,6,5)\r\n    msg (game.turn + \". The sum now = \" + answer)\r\n    game.turn = game.turn + 1\r\n  </script>\r\n</turnscript>\r\n\r\n<function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\">\r\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\r\n  return (sum)\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>just to add on, more about a Function and its Arguments/Parameters (these examples probably explains about Functions and their arguments/parameters much better):</p>\n<pre><code>&lt;game name=\"xxx\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    answer = sum_of_five_values_function (1,2,3,4,5) // Arguments: 1,2,3,4,5 --- which match up with their Parameter slots/ordering (value_1,value_2,etc): '1' to 'value_1', '2' to 'value_2', etc etc etc\n    msg (\"The sum of 1+2+3+4+5 is: \" + answer)\n    // output: The sum of 1+2+3+4+5 is: 15\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\"&gt; // type=\"XXX\" is the return type\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\n  return (sum)\n&lt;/function&gt;\n</code></pre>\n<p>and using different arguments:</p>\n<pre><code>&lt;game name=\"xxx\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    answer = sum_of_five_values_function (23,41,17,89,66) // Arguments: 23,41,17,89,66 --- which match up with their Parameter slots/ordering (value_1,value_2,etc): '23' to 'value_1', '41' to 'value_2', etc etc etc\n    msg (\"The sum of 23+41+17+89+66 is: \" + answer)\n    // output: The sum of 23+41+17+89+66 is: 236\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\"&gt; // type=\"XXX\" is the return type\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\n  return (sum)\n&lt;/function&gt;\n</code></pre>\n<p>using Variables instead of constants for the arguments:</p>\n<pre><code>&lt;game name=\"xxx\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    arg1 = 32\n    arg2 = 14\n    arg3 = 71\n    arg4 = 98\n    arg5 = 66\n    answer = sum_of_five_values_function (arg1,arg2,arg3,arg4,arg5) // Arguments: arg1,arg2,arg3,arg4,arg5 --- which match up with their Parameter slots/ordering (value_1,value_2,etc): 'arg1' to 'value_1', 'arg2' to 'value_2', etc etc etc\n    msg (\"The sum of 32+14+71+98+66 is: \" + answer)\n    // output: The sum of 32+14+71+98+66 is: 281\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\"&gt; // type=\"XXX\" is the return type\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\n  return (sum)\n&lt;/function&gt;\n</code></pre>\n<p>using Attributes for the arguments:</p>\n<pre><code>&lt;game name=\"xxx\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    answer = sum_of_five_values_function (global_data_object.arg_1,global_data_object.arg_2,global_data_object.arg_3,global_data_object.arg_4,global_data_object.arg_5)\n    msg (\"The sum of 2+4+6+8+10 is: \" + answer)\n    // output: The sum of 2+4+6+8+10 is: 30\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"global_data_object\"&gt;\n  &lt;attr name=\"arg_1\" type=\"int\"&gt;2&lt;/attr&gt;\n  &lt;attr name=\"arg_2\" type=\"int\"&gt;4&lt;/attr&gt;\n  &lt;attr name=\"arg_3\" type=\"int\"&gt;6&lt;/attr&gt;\n  &lt;attr name=\"arg_4\" type=\"int\"&gt;8&lt;/attr&gt;\n  &lt;attr name=\"arg_5\" type=\"int\"&gt;10&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\"&gt;\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\n  return (sum)\n&lt;/function&gt;\n</code></pre>\n<p>using Attributes for the arguments:</p>\n<p>(multiple uses/re-uses, one of the big purposes of Functions)</p>\n<pre><code>&lt;game name=\"xxx\"&gt;\n  &lt;attr name=\"turn\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;turn = Turn: !&lt;/statusattributes&gt; // unfortunately, Dictionary Attributes still require this old syntax: &lt;ATTRIBUTE_NAME type=\"xxx\"&gt;content&lt;/ATTRIBUTE_NAME&gt;, sighs. You can't do: &lt;attr name=\"ATTRIBUTE_NAME\" type=\"xxx\"&gt;content&lt;/attr&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    answer = sum_of_five_values_function (global_data_object.arg_1,global_data_object.arg_2,global_data_object.arg_3,global_data_object.arg_4,global_data_object.arg_5)\n    msg (\"The sum = \" + answer)\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"global_data_object\"&gt;\n  &lt;attr name=\"arg_1\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"arg_2\" type=\"int\"&gt;3&lt;/attr&gt;\n  &lt;attr name=\"arg_3\" type=\"int\"&gt;6&lt;/attr&gt;\n  &lt;attr name=\"arg_4\" type=\"int\"&gt;9&lt;/attr&gt;\n  &lt;attr name=\"arg_5\" type=\"int\"&gt;12&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;HK&lt;/attr&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;999/999&lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;life = Life: !&lt;/statusattributes&gt; // unfortunately, Dictionary Attributes still require this old syntax: &lt;ATTRIBUTE_NAME type=\"xxx\"&gt;content&lt;/ATTRIBUTE_NAME&gt;, sighs. You can't do: &lt;attr name=\"ATTRIBUTE_NAME\" type=\"xxx\"&gt;content&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    this.life = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    this.life = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"monster\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n  &lt;attr name=\"dead\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;500&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;500&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;500/500&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;look;fight&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    this.life = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    this.life = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"look\" type=\"script\"&gt;\n    msg (\"Life: \" + this.life)\n  &lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;&lt;![CDATA[ // this '&lt;![CDATA[ content:scripting ]]&gt;' tag is needed to tell quest that any of the '&lt;' and '&gt;' symbols as the inside content:scripting are to be recognized as 'greater than' and 'lesser than' operations/symbols, and NOT as code tag symbols. Otherwise, we'd be getting an ERROR. This 'CDATA' tag is ONLY needed for if/when you're typing in the code directly. If you're using the GUI~Editor, then you don't need to ever worry about (don't need to use) this 'CDATA' tag, as it handles it for you.\n    if (this.dead) {\n      msg (\"The \" + this.alias + \" is already dead, silly.\")\n    } else {\n      damage = sum_of_five_values_function (10,20,30,40,50)\n      this.current_life = this.current_life - damage\n      msg (game.pov.alias + \" attacked the \" + this.alias + \" for \" + damage + \" damage, leaving it with only \" + this.current_life + \" life left.\")\n      if (this.current_life &lt;= 0) {\n        this.dead = true\n        msg (game.pov.alias + \" inflicted so much damage, he actually killed the \" + this.alias + \".\")\n      } else {\n        game.pov.current_life = game.pov.current_life - damage\n        msg (this.alias + \" attacks \" + game.pov.alias + \", doing \" + damage + \" damage to him, leaving \" + game.pov.alias + \" with only \" + game.pov.current_life + \" life left.\")\n        if (game.pov.current_life &lt;= 0) {\n          msg (\"The \" + this.alias + \" has killed \" + game.pov.alias + \".\")\n          msg (\"GAME OVER\")\n          finish\n        }\n      }\n    }\n  ]]&gt;&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;fight&lt;/proeprty&gt;\n  &lt;pattern&gt;fight&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't fight that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;look&lt;/proeprty&gt;\n  &lt;pattern&gt;look&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't look at that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;turnscript name=\"global_turnscript\"&gt;\n  &lt;enabled /&gt; // this (to the left) is the syntax quest-understood shorthand of this Boolean Atribute (of ONLY) when its Value is 'true', as shown in its longhand/normal syntax form: &lt;attr name=\"enabled\" type=\"boolean\"&gt;true&lt;/attr&gt;\n  &lt;script&gt;\n    answer = sum_of_five_values_function (9,8,7,6,5)\n    msg (game.turn + \". The sum now = \" + answer)\n    game.turn = game.turn + 1\n  &lt;/script&gt;\n&lt;/turnscript&gt;\n\n&lt;function name=\"sum_of_five_values_function\" parameters=\"value_1,value_2,value_3,value_4,value_5\" type=\"int\"&gt;\n  sum = value_1 + value_2 + value_3 + value_4 + value_5\n  return (sum)\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2016-07-08T07:00:45.8087306Z",
      "LastEditDate": "2016-07-08T08:32:48.6290562Z"
    },
    {
      "PostId": "9d8c5612-434c-46ba-9333-387cfdb90d49",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "P.S.\r\n\r\nif you want, I got a (badly done / confusing, as I'm not good at explaining stuff well) guide on using Lists (and Dictionaries too and on Attirbutes in general as well):\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk\r\nhttp://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk (if you want to see more fancy/advanced usage, though my coding is old and poor quality as I was just learning this List+Dictionary stuff back then, lol)\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>if you want, I got a (badly done / confusing, as I'm not good at explaining stuff well) guide on using Lists (and Dictionaries too and on Attirbutes in general as well):</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk<br>\nhttp://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk (if you want to see more fancy/advanced usage, though my coding is old and poor quality as I was just learning this List+Dictionary stuff back then, lol)</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk</p>\n\n",
      "PostDate": "2016-07-08T09:18:17.80238Z",
      "LastEditDate": null
    },
    {
      "PostId": "279b18de-da0a-4a2e-af52-2b8c85d767ac",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "UserAvatar": null,
      "UserGravatar": "6b87c09044d98343eba2c7f21f8314bc",
      "EditableText": "Wow, that's a lot to read through, lol.\r\n\r\nIt's funny how I perceived the cash as an object. Facepalm on that one. I knew better than that. I was just using my imagination, looking at it from a player's point of view, seeing cash actually go from the orc to the player.\r\n\r\nAnd yeah, I meant string <i>list</i>, in that question.\r\n\r\nAnyway, I'll go back and process this at another time. I've spent so much time experimenting that I've neglected the game I want to finish, and I don't see myself using ANY of this stuff in it, lol. I want to go ahead and finish it.\r\n\r\n\r\n  ",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow, that's a lot to read through, lol.</p>\n<p>It's funny how I perceived the cash as an object. Facepalm on that one. I knew better than that. I was just using my imagination, looking at it from a player's point of view, seeing cash actually go from the orc to the player.</p>\n<p>And yeah, I meant string <i>list</i>, in that question.</p>\n<p>Anyway, I'll go back and process this at another time. I've spent so much time experimenting that I've neglected the game I want to finish, and I don't see myself using ANY of this stuff in it, lol. I want to go ahead and finish it.</p>\n\n",
      "PostDate": "2016-07-08T12:11:07.9282886Z",
      "LastEditDate": null
    }
  ]
}
