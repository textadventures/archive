{
  "Topic": {
    "TopicId": "ti4gcpbipe2ktnzeyap-mq",
    "ForumId": "10",
    "Title": "Script Dictionaries: Explain them like I'm Retarded [Solved]",
    "LastUpdated": "2019-03-04T21:53:38.630495Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "21cc9f4e-ab3b-4196-bc18-53f580f7de2a",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I can sort of understand String Dictionaries. I say Player.Status=\"Hurt\", and Player.StatusDict says \"Hurt\" corresponds to \"You are very hurt and need shelter.\"\r\n\r\nSo I say: \r\n```\r\n\"Print Player.StatusDict, Hurt\"\r\n```\r\nand I get\r\n```\r\n \"You are very hurt and need shelter.\"\r\n```\r\n\r\nBut I want to be able to say that for ANYONE. Companion1.Status=\"Hurt\" should say \"He is very hurt and needs shelter\".\r\n\r\nBut the problem here is, I have Companion1 able to be either Male _or_ Female. So I thought I'd use a Script Dictionary, and have the key \"Hurt\" go to the script:\r\n```\r\nmsg(Companion1.CustomCapitalizedGender+\" is very hurt and needs shelter.\")\r\n```\r\nWhich SHOULD then print He/She is very hurt, depending on what it is.\r\n\r\nBut nothing I do seems to work. Return doesn't work, print doesn't work, any combination I try results in a slew of creative error messages. I can't seem to figure out what 'Run an object's script attribute' and 'Run a script returned by an expression' _want_ from me, PARTICULARLY in their 'Using Parameter Dictionary' slot.\r\n\r\nHelp?",
      "EditableFormat": "markdown",
      "HTML": "<p>So I can sort of understand String Dictionaries. I say Player.Status=\"Hurt\", and Player.StatusDict says \"Hurt\" corresponds to \"You are very hurt and need shelter.\"</p>\n<p>So I say:</p>\n<pre><code>\"Print Player.StatusDict, Hurt\"\n</code></pre>\n<p>and I get</p>\n<pre><code> \"You are very hurt and need shelter.\"\n</code></pre>\n<p>But I want to be able to say that for ANYONE. Companion1.Status=\"Hurt\" should say \"He is very hurt and needs shelter\".</p>\n<p>But the problem here is, I have Companion1 able to be either Male <em>or</em> Female. So I thought I'd use a Script Dictionary, and have the key \"Hurt\" go to the script:</p>\n<pre><code>msg(Companion1.CustomCapitalizedGender+\" is very hurt and needs shelter.\")\n</code></pre>\n<p>Which SHOULD then print He/She is very hurt, depending on what it is.</p>\n<p>But nothing I do seems to work. Return doesn't work, print doesn't work, any combination I try results in a slew of creative error messages. I can't seem to figure out what 'Run an object's script attribute' and 'Run a script returned by an expression' <em>want</em> from me, PARTICULARLY in their 'Using Parameter Dictionary' slot.</p>\n<p>Help?</p>\n\n",
      "PostDate": "2019-03-04T21:53:38.630495Z",
      "LastEditDate": "2019-03-05T00:10:57.5767496Z",
      "link": null
    },
    {
      "PostId": "de55e0e3-5c58-4531-a167-cadb8dab546a",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You may be making it more complicated than it is. Why not just have a \"hurt_response\" script attribute for all your characters, and just run that:\r\n```\r\ndo(npc, \"hurt_response\")\r\n```\r\n\r\nTo run a script from a script dictionary:\r\n```\r\nscr = ScriptDictionaryItem(npc.script_dictionary, \"hurt\")\r\ninvoke(scr)\r\n```\r\n\r\nNote that `return` does not work in a script; scripts do not return a value.",
      "EditableFormat": "markdown",
      "HTML": "<p>You may be making it more complicated than it is. Why not just have a \"hurt_response\" script attribute for all your characters, and just run that:</p>\n<pre><code>do(npc, \"hurt_response\")\n</code></pre>\n<p>To run a script from a script dictionary:</p>\n<pre><code>scr = ScriptDictionaryItem(npc.script_dictionary, \"hurt\")\ninvoke(scr)\n</code></pre>\n<p>Note that <code>return</code> does not work in a script; scripts do not return a value.</p>\n\n",
      "PostDate": "2019-03-04T22:04:23.4618499Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ba6c1fab-ecc0-4844-8689-edfecda565d5",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If there was only \"Hurt\" I'd agree, but if I add others - \"Channeling Magic\", \"Sleeping\", \"On Fire\" etc - then I don't want to go through each and add a new response. I can just go to a Master Dictionary and add the key there.\r\n\r\nI'm also getting the error:\r\n```\r\nScriptDictionaryItem function expected dictionary parameter but was passed 'null'\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>If there was only \"Hurt\" I'd agree, but if I add others - \"Channeling Magic\", \"Sleeping\", \"On Fire\" etc - then I don't want to go through each and add a new response. I can just go to a Master Dictionary and add the key there.</p>\n<p>I'm also getting the error:</p>\n<pre><code>ScriptDictionaryItem function expected dictionary parameter but was passed 'null'\n</code></pre>\n\n",
      "PostDate": "2019-03-04T23:51:34.4054557Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "da3cf5a3-828b-4fa6-8f94-168c25983212",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nevermind, I had a typo in my dictionary name. Works now, thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>Nevermind, I had a typo in my dictionary name. Works now, thanks!</p>\n\n",
      "PostDate": "2019-03-05T00:09:55.0278862Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4b791e51-6d2d-486e-9dcc-68833353f674",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "a bit late, but here's how lists and dictionaries work:\r\n\r\nBoth Lists and Dictionaries, are basically input-output functionality\r\n\r\nfor both Lists and Dictionaries, in the GUI/Editor and/or directly in code:\r\n\r\nthe 'input' is also known as its 'key': input <---> key\r\nthe 'output' is also known as its 'value': output <---> value\r\n\r\nfor Lists, I think, quest is able to automatically handle/convert an Integer into a String, for its String Inputs (so, you can just input an integer number, example: 0, you don't have to have it as a string number, example: \"0\")\r\n\r\nString List:\r\nItem:\r\nString Input: \"INDEX_NUMBER\"\r\nString Output: \"WHATEVER\"\r\n\r\nObject List:\r\nItem:\r\nString Input: \"INDEX_NUMBER\"\r\nObject Output: WHATEVER_OBJECT_REFERENCE_POINTER\r\n\r\nString Dictionary:\r\nItem:\r\nString Input: \"WHATEVER\"\r\nString Output: \"WHATEVER\"\r\n\r\nObject Dictionary:\r\nItem:\r\nString Input: \"WHATEVER\"\r\nObject Output: WHATEVER_OBJECT_REFERENCE_POINTER\r\n\r\nScript Dictionary:\r\nItem:\r\nString Input: \"WHATEVER\"\r\nScript Output: [WHATEVER_SCRIPT/S]\r\n\r\nnotice that the only difference between Lists and Dictionaries (aside from Lists not being able to return Script/s), is that the index numbering is automatically/forcedly created for its String Inputs, whereas for Dictionaries, the String Inputs are custom, you can have them as whatever you want:\r\n\r\nLists start with '0' as its first item's index number, and NOT '1', so the last Item's index number is always: ListCount (LIST) - 1, for example, a List having 3 items, with its 3rd/last item's index number, thus being '2'\r\n\r\nList:\r\nItem1:\r\nString Input: \"0\"\r\nString/Object Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER\r\nitem2:\r\nString Input: \"1\"\r\nString/Object Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER\r\nitem3:\r\nString Input: \"2\"\r\nString/Object Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER\r\n\r\nDictionary:\r\nItem1:\r\nString Input: \"WHATEVER\"\r\nString/Object/Script Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER/WHATEVER_SCRIPT-S\r\nitem2:\r\nString Input: \"WHATEVER\"\r\nString/Object/Script Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER/WHATEVER_SCRIPT-S\r\nitem3:\r\nString Input: \"WHATEVER\"\r\nString/Object/Script Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER/WHATEVER_SCRIPT-S\r\n\r\n------------\r\n\r\nto then do the input-output functionality of Lists and Dictionaries:\r\n\r\n(you don't need to store the return value, the OUTPUT, into a VARIABLE, if you're using it directly within another Function/Script, but you got to do something with the returned value: storing it into a VARIABLE or using it directly within another Function/Script, else I hope quest does return/produce an error, as you don't want floating/in-accessable values/wasted-lost-memory)\r\n\r\nVARIABLE = ListItem (LIST, INPUT)\r\n// VARIABLE <=== [ OUTPUT <=== ListItem (LIST, INPUT) ]\r\n// VARIABLE = OUTPUT\r\n\r\nVARIABLE = StringListItem (STRINGLIST, INPUT)\r\n// VARIABLE <=== [ STRING_OUTPUT <=== StringListItem (STRINGLIST, INPUT) ]\r\n// VARIABLE = STRING_OUTPUT\r\n\r\nVARIABLE = ObjectListItem (OBJECTLIST, INPUT)\r\n// VARIABLE <=== [ OBJECT_REFERENCE_POINTER_OUTPUT <=== ObjectListItem (OBJECTLIST, INPUT) ]\r\n// VARIABLE = OBJECT_REFERENCE_POINTER_OUTPUT\r\n\r\nVARIABLE = DictionaryItem (DICTIONARY, INPUT)\r\n// VARIABLE <=== [ OUTPUT <=== DictionaryItem (DICTIONARY, INPUT) ]\r\n// VARIABLE = OUTPUT\r\n\r\nVARIABLE = StringDictionaryItem (STRINGDICTIONARY, INPUT)\r\n// VARIABLE <=== [ STRING_OUTPUT <=== StringDictionaryItem (STRINGDICTIONARY, INPUT) ]\r\n// VARIABLE = STRING_OUTPUT\r\n\r\nVARIABLE = ObjectDictionaryItem (OBJECTDICTIONARY, INPUT)\r\n// VARIABLE <=== [ OBJECT_REFERENCE_POINTER_OUTPUT <=== ObjectDictionaryItem (OBJECTDICTIONARY, INPUT) ]\r\n// VARIABLE = OBJECT_REFERENCE_POINTER_OUTPUT\r\n\r\nVARIABLE = ScriptDictionaryItem (SCRIPTDICTIONARY, INPUT)\r\n// VARIABLE <=== [ SCRIPT-S_OUTPUT <=== ScriptDictionaryItem (ScriptDICTIONARY, INPUT) ]\r\n// VARIABLE = SCRIPT-S_OUTPUT\r\n\r\nyou can then use 'invoke', to run/do the returned Script/s:\r\n\r\ninvoke (VARIABLE)\r\n// or:\r\ninvoke (VARIABLE, ANOTHER_DICTIONARY_IN_WHICH_ITS_INPUTS_ARE_USED_AS_PARAMETERS_AND_ITS_OUTPUTS_AS_ITS_ARGUMENTS_BOTH_FOR_WITHIN_THE_INVOKE'S_SCRIPTING)",
      "EditableFormat": "markdown",
      "HTML": "<p>a bit late, but here's how lists and dictionaries work:</p>\n<p>Both Lists and Dictionaries, are basically input-output functionality</p>\n<p>for both Lists and Dictionaries, in the GUI/Editor and/or directly in code:</p>\n<p>the 'input' is also known as its 'key': input &lt;---&gt; key<br>\nthe 'output' is also known as its 'value': output &lt;---&gt; value</p>\n<p>for Lists, I think, quest is able to automatically handle/convert an Integer into a String, for its String Inputs (so, you can just input an integer number, example: 0, you don't have to have it as a string number, example: \"0\")</p>\n<p>String List:<br>\nItem:<br>\nString Input: \"INDEX_NUMBER\"<br>\nString Output: \"WHATEVER\"</p>\n<p>Object List:<br>\nItem:<br>\nString Input: \"INDEX_NUMBER\"<br>\nObject Output: WHATEVER_OBJECT_REFERENCE_POINTER</p>\n<p>String Dictionary:<br>\nItem:<br>\nString Input: \"WHATEVER\"<br>\nString Output: \"WHATEVER\"</p>\n<p>Object Dictionary:<br>\nItem:<br>\nString Input: \"WHATEVER\"<br>\nObject Output: WHATEVER_OBJECT_REFERENCE_POINTER</p>\n<p>Script Dictionary:<br>\nItem:<br>\nString Input: \"WHATEVER\"<br>\nScript Output: [WHATEVER_SCRIPT/S]</p>\n<p>notice that the only difference between Lists and Dictionaries (aside from Lists not being able to return Script/s), is that the index numbering is automatically/forcedly created for its String Inputs, whereas for Dictionaries, the String Inputs are custom, you can have them as whatever you want:</p>\n<p>Lists start with '0' as its first item's index number, and NOT '1', so the last Item's index number is always: ListCount (LIST) - 1, for example, a List having 3 items, with its 3rd/last item's index number, thus being '2'</p>\n<p>List:<br>\nItem1:<br>\nString Input: \"0\"<br>\nString/Object Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER<br>\nitem2:<br>\nString Input: \"1\"<br>\nString/Object Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER<br>\nitem3:<br>\nString Input: \"2\"<br>\nString/Object Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER</p>\n<p>Dictionary:<br>\nItem1:<br>\nString Input: \"WHATEVER\"<br>\nString/Object/Script Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER/WHATEVER_SCRIPT-S<br>\nitem2:<br>\nString Input: \"WHATEVER\"<br>\nString/Object/Script Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER/WHATEVER_SCRIPT-S<br>\nitem3:<br>\nString Input: \"WHATEVER\"<br>\nString/Object/Script Output: \"WHATEVER_String\"/WHATEVER_OBJECT_REFERENCE_POINTER/WHATEVER_SCRIPT-S</p>\n<hr>\n<p>to then do the input-output functionality of Lists and Dictionaries:</p>\n<p>(you don't need to store the return value, the OUTPUT, into a VARIABLE, if you're using it directly within another Function/Script, but you got to do something with the returned value: storing it into a VARIABLE or using it directly within another Function/Script, else I hope quest does return/produce an error, as you don't want floating/in-accessable values/wasted-lost-memory)</p>\n<p>VARIABLE = ListItem (LIST, INPUT)<br>\n// VARIABLE &lt;=== [ OUTPUT &lt;=== ListItem (LIST, INPUT) ]<br>\n// VARIABLE = OUTPUT</p>\n<p>VARIABLE = StringListItem (STRINGLIST, INPUT)<br>\n// VARIABLE &lt;=== [ STRING_OUTPUT &lt;=== StringListItem (STRINGLIST, INPUT) ]<br>\n// VARIABLE = STRING_OUTPUT</p>\n<p>VARIABLE = ObjectListItem (OBJECTLIST, INPUT)<br>\n// VARIABLE &lt;=== [ OBJECT_REFERENCE_POINTER_OUTPUT &lt;=== ObjectListItem (OBJECTLIST, INPUT) ]<br>\n// VARIABLE = OBJECT_REFERENCE_POINTER_OUTPUT</p>\n<p>VARIABLE = DictionaryItem (DICTIONARY, INPUT)<br>\n// VARIABLE &lt;=== [ OUTPUT &lt;=== DictionaryItem (DICTIONARY, INPUT) ]<br>\n// VARIABLE = OUTPUT</p>\n<p>VARIABLE = StringDictionaryItem (STRINGDICTIONARY, INPUT)<br>\n// VARIABLE &lt;=== [ STRING_OUTPUT &lt;=== StringDictionaryItem (STRINGDICTIONARY, INPUT) ]<br>\n// VARIABLE = STRING_OUTPUT</p>\n<p>VARIABLE = ObjectDictionaryItem (OBJECTDICTIONARY, INPUT)<br>\n// VARIABLE &lt;=== [ OBJECT_REFERENCE_POINTER_OUTPUT &lt;=== ObjectDictionaryItem (OBJECTDICTIONARY, INPUT) ]<br>\n// VARIABLE = OBJECT_REFERENCE_POINTER_OUTPUT</p>\n<p>VARIABLE = ScriptDictionaryItem (SCRIPTDICTIONARY, INPUT)<br>\n// VARIABLE &lt;=== [ SCRIPT-S_OUTPUT &lt;=== ScriptDictionaryItem (ScriptDICTIONARY, INPUT) ]<br>\n// VARIABLE = SCRIPT-S_OUTPUT</p>\n<p>you can then use 'invoke', to run/do the returned Script/s:</p>\n<p>invoke (VARIABLE)<br>\n// or:<br>\ninvoke (VARIABLE, ANOTHER_DICTIONARY_IN_WHICH_ITS_INPUTS_ARE_USED_AS_PARAMETERS_AND_ITS_OUTPUTS_AS_ITS_ARGUMENTS_BOTH_FOR_WITHIN_THE_INVOKE'S_SCRIPTING)</p>\n\n",
      "PostDate": "2019-03-05T04:16:29.5640134Z",
      "LastEditDate": "2019-03-05T04:22:58.621542Z",
      "link": null
    },
    {
      "PostId": "0d527f2c-7eff-4d32-a7b1-a9cb74630e04",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> If there was only \"Hurt\" I'd agree, but if I add others - \"Channeling Magic\", \"Sleeping\", \"On Fire\" etc - then I don't want to go through each and add a new response. I can just go to a Master Dictionary and add the key there.\r\n\r\nIf you are using the desktop version, you could create a new type with all these defined. You could then create sub-types with alternative versions, so the fire imp's \"On Fire\" does something quite different to the the standard script. Want to add a new response? Just add it to the type, and every object that inherits from it gets it automatically.\r\nhttp://docs.textadventures.co.uk/quest/using_inherited_types.html\r\n\r\nJust a suggestion; script dictionaries may be better for what you are doing.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>If there was only \"Hurt\" I'd agree, but if I add others - \"Channeling Magic\", \"Sleeping\", \"On Fire\" etc - then I don't want to go through each and add a new response. I can just go to a Master Dictionary and add the key there.</p>\n</blockquote>\n<p>If you are using the desktop version, you could create a new type with all these defined. You could then create sub-types with alternative versions, so the fire imp's \"On Fire\" does something quite different to the the standard script. Want to add a new response? Just add it to the type, and every object that inherits from it gets it automatically.<br>\nhttp://docs.textadventures.co.uk/quest/using_inherited_types.html</p>\n<p>Just a suggestion; script dictionaries may be better for what you are doing.</p>\n\n",
      "PostDate": "2019-03-05T09:58:57.9721099Z",
      "LastEditDate": "2019-03-05T10:00:08.5850674Z",
      "link": null
    },
    {
      "PostId": "a176f668-3d4c-49eb-9689-8d5f501ffbc1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In this case, I'd suggest using a string dictionary. You could then do something like:\r\n```\r\nmsg(Eval(DictionaryItem(character.StatusDict, character.Status), QuickParams(\"this\", character))\r\n```\r\n\r\nThen the dictionary could contain a simple string like: `\"You are tired and need rest.\"`, or an expression such as: `CapFirst(WriteVerb(this, \"be\"))+\" is very hurt and needs shelter.\"`\r\n\r\nI've found that it's often better to have a stringdictionary passed through `eval` for things like that, because you really want an expression rather than a script.\r\n\r\nOr, for that example, you could use the text processor rather than eval. Make StatusDict a stringdictionary with values like: `{=CapFirst(WriteVerb(this, \"be\"))} is very hurt and needs shelter.`\r\nIn which case the code to display it would be something like:\r\n```\r\ngame.text_processor_this = Companion1\r\nmsg (DictionaryItem (Companion1.StatusDict, Companion1.Status))\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>In this case, I'd suggest using a string dictionary. You could then do something like:</p>\n<pre><code>msg(Eval(DictionaryItem(character.StatusDict, character.Status), QuickParams(\"this\", character))\n</code></pre>\n<p>Then the dictionary could contain a simple string like: <code>\"You are tired and need rest.\"</code>, or an expression such as: <code>CapFirst(WriteVerb(this, \"be\"))+\" is very hurt and needs shelter.\"</code></p>\n<p>I've found that it's often better to have a stringdictionary passed through <code>eval</code> for things like that, because you really want an expression rather than a script.</p>\n<p>Or, for that example, you could use the text processor rather than eval. Make StatusDict a stringdictionary with values like: <code>{=CapFirst(WriteVerb(this, \"be\"))} is very hurt and needs shelter.</code><br>\nIn which case the code to display it would be something like:</p>\n<pre><code>game.text_processor_this = Companion1\nmsg (DictionaryItem (Companion1.StatusDict, Companion1.Status))\n</code></pre>\n\n",
      "PostDate": "2019-03-05T15:19:37.8069612Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
