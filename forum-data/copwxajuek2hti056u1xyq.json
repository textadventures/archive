{
  "Topic": {
    "TopicId": "copwxajuek2hti056u1xyq",
    "ForumId": "10",
    "Title": "Unlocking / opening and closing/locking a container object with a separate door object",
    "LastUpdated": "2020-03-29T00:05:05.6717547Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f23f18de-a97f-4ba5-aa13-ce932be57ba7",
      "UserId": 106087,
      "Username": "Nathaniel.Spence",
      "AvatarUrl": "https://secure.gravatar.com/avatar/169dc71280239f2665ee699d08c643b6?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, I'm brand new to Quest - thought I'd try to learn how to use it now that I have time on my hands! I've made some progress creating a small adventure, but now I've hit a snag. No doubt the answer to this is blindingly obvious, but in the game:\r\n\r\nI have a locker (container) with a separate door. The door is a separate object as I need a different description when specifically the door is examined, and there is a coin in it (it's a changing room type door with a coin slot key release mechanism). My problem is that I can open/close/lock/unlock the locker fine, but I can't do the same with the door. What I need to happen is for 'open/close/lock/unlock door' to have the same effect as 'open/close/lock/unlock locker' as it is as natural to say 'open door' as 'open locker', but I can't figure out a simple way to do that; at the moment 'unlock door' gives 'you can't do that', whereas 'unlock locker' does what it is meant to.  I'm sure there is a straightforward way to accomplish this...but how?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, I'm brand new to Quest - thought I'd try to learn how to use it now that I have time on my hands! I've made some progress creating a small adventure, but now I've hit a snag. No doubt the answer to this is blindingly obvious, but in the game:</p>\n<p>I have a locker (container) with a separate door. The door is a separate object as I need a different description when specifically the door is examined, and there is a coin in it (it's a changing room type door with a coin slot key release mechanism). My problem is that I can open/close/lock/unlock the locker fine, but I can't do the same with the door. What I need to happen is for 'open/close/lock/unlock door' to have the same effect as 'open/close/lock/unlock locker' as it is as natural to say 'open door' as 'open locker', but I can't figure out a simple way to do that; at the moment 'unlock door' gives 'you can't do that', whereas 'unlock locker' does what it is meant to.  I'm sure there is a straightforward way to accomplish this...but how?</p>\n\n",
      "PostDate": "2020-03-29T00:05:05.6717547Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "04785bcb-6776-466d-b6fb-a9e2797149d4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is the door already a container?\r\n\r\nYou can set script attributes on a container (`openscript`, `closescript`, `onlocked` and `onunlocked`, I think) to run when the player opens or unlocks an object. I believe that the default lockable type uses the openscript and closescript to prevent the object being opened when locked.\r\n\r\nI'd make the door a container, but change the scripts so that they open the container instead.\r\n\r\nIf you're having trouble, I can take a proper look at this in the morning.",
      "EditableFormat": "markdown",
      "HTML": "<p>Is the door already a container?</p>\n<p>You can set script attributes on a container (<code>openscript</code>, <code>closescript</code>, <code>onlocked</code> and <code>onunlocked</code>, I think) to run when the player opens or unlocks an object. I believe that the default lockable type uses the openscript and closescript to prevent the object being opened when locked.</p>\n<p>I'd make the door a container, but change the scripts so that they open the container instead.</p>\n<p>If you're having trouble, I can take a proper look at this in the morning.</p>\n\n",
      "PostDate": "2020-03-29T00:14:38.4119157Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d26068e-41f8-41f0-b704-76ade9e8232c",
      "UserId": 106087,
      "Username": "Nathaniel.Spence",
      "AvatarUrl": "https://secure.gravatar.com/avatar/169dc71280239f2665ee699d08c643b6?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel - yes, the door is an object. How do I change those scripts? I've looked in all the places I can think of and trawled through the code view (which is pretty baffling), but I can't fathom it. I had an idea that I could use a script on the door object to point to the relevant scripts in the locker object using 'do', but couldn't get it to work! ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel - yes, the door is an object. How do I change those scripts? I've looked in all the places I can think of and trawled through the code view (which is pretty baffling), but I can't fathom it. I had an idea that I could use a script on the door object to point to the relevant scripts in the locker object using 'do', but couldn't get it to work!</p>\n\n",
      "PostDate": "2020-03-29T09:34:23.4301955Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "449caf6b-cc36-41aa-99a3-6e555227ef8c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**[disclaimer - writing code off the top of my head, I haven't tested this]**\r\n\r\nThe scripts are on the 'Container' tab I think.\r\nIf you make a container lockable, then it should automatically fill in openscript and closescript to make the lock work; you could then change the name of the object in those.\r\n\r\nIf you're on the desktop version of Quest, you could also add script attributes on the 'Attributes' tab.\r\n\r\nThe possible problem I can see is that you mention having a coin in the door; if this is an object that can be taken, then you would need to make the door \"open\" so that the object can be taken out of it; and the open/close commands only run the user script if the object isn't already open/closed.\r\n\r\n<h3>Method 1</h3>\r\nDiscounting the coin for now, I'd probably do something like this:\r\n\r\nOn the door:\r\n```\r\n<openscript type=\"script\">\r\n  do (locker, \"openscript\")\r\n</openscript>\r\n\r\n<closescript type=\"script\">\r\n  do (locker, \"closescript\")\r\n</closescript>\r\n\r\n<lock type=\"script\">\r\n  do (locker, \"lock\")\r\n</lock>\r\n\r\n<unlock type=\"script\">\r\n  do (locker, \"unlock\")\r\n</unlock>\r\n```\r\nAnd on the locker:\r\n```\r\n<changedisopen type=\"script\">\r\n  locker_door.isopen = this.isopen\r\n</changedisopen>\r\n```\r\n(assuming that `locker` and `locker_door` are the object names)\r\nThis means that the verbs `lock` and `unlock` will be run on the locker, whether the player types \"locker\" or \"door\".\r\nThe same can't be done for \"open\" and \"close\", because they're commands rather than verbs. The nearest we can get is using the script attributes `openscript` and `closescript` - but openscript will only be run *after* the core test to see whether the door is already open or closed. So we also put a `changedisopen` script on the locker itself, to ensure that the door's open/closed state is the same as the locker's.\r\n\r\nIf you can't take the coin out of the door, then this should work fine. You'd just make the door a transparent container in order to enable the coin to be seen.\r\n\r\n<h3>Method 2</h3>\r\nAn alternate way of doing this. Put a command in the room:\r\n<pre><code>&lt;command name=\"door_stuff\">\r\n  &lt;pattern type=\"string\">&lt;![CDATA[^(?&lt;object_command>open|close|lock|unlock) (?&lt;object>.+)$]]>&lt;/pattern>\r\n  &lt;changecommandscope type=\"script\">\r\n    if (variable = \"object_command\") {\r\n      while (ListCount (items) > 0) {\r\n        list remove (items, ListItem (items, 0))\r\n      }\r\n      list add (items, open)\r\n      list add (items, close)\r\n      list add (items, lock)\r\n      list add (items, unlock)\r\n    }\r\n  &lt;/changecommandscope>\r\n\r\n  &lt;script>\r\n    params = NewDictionary()\r\n    if (object = <b style=\"color: brown\">locker_door</b>) {\r\n     object = <b style=\"color: darkgreen\">locker</b>\r\n    }\r\n    do (object_command, \"script\", QuickParams (\"object\", object))\r\n  &lt;/script>\r\n&lt;/command></code></pre>\r\n\r\nThis overrides 4 commands at once, using `changecommandscope` so that the parameter `object_command` will match a command rather than an object, and then uses `do` to execute the underlying command.\r\n\r\nThis means that if the door is a container in its own right (so you can put a coin in it and take it out), it will work like any other container; it's only the four verbs listed that will be redirected. (If adding other commands to this function, note that it ignores the pattern of the real commands, and looks at the *name* of the commands. If a command's name and pattern aren't the same, you would need to put the words that you expect the player to type within the `<pattern>` line, the *name* of the command in the list within the `changecommandscope` block, and give the command an `alias` attribute to match what the player typed)",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>[disclaimer - writing code off the top of my head, I haven't tested this]</strong></p>\n<p>The scripts are on the 'Container' tab I think.<br>\nIf you make a container lockable, then it should automatically fill in openscript and closescript to make the lock work; you could then change the name of the object in those.</p>\n<p>If you're on the desktop version of Quest, you could also add script attributes on the 'Attributes' tab.</p>\n<p>The possible problem I can see is that you mention having a coin in the door; if this is an object that can be taken, then you would need to make the door \"open\" so that the object can be taken out of it; and the open/close commands only run the user script if the object isn't already open/closed.</p>\n<p></p><h3>Method 1</h3><br>\nDiscounting the coin for now, I'd probably do something like this:<p></p>\n<p>On the door:</p>\n<pre><code>&lt;openscript type=\"script\"&gt;\n  do (locker, \"openscript\")\n&lt;/openscript&gt;\n\n&lt;closescript type=\"script\"&gt;\n  do (locker, \"closescript\")\n&lt;/closescript&gt;\n\n&lt;lock type=\"script\"&gt;\n  do (locker, \"lock\")\n&lt;/lock&gt;\n\n&lt;unlock type=\"script\"&gt;\n  do (locker, \"unlock\")\n&lt;/unlock&gt;\n</code></pre>\n<p>And on the locker:</p>\n<pre><code>&lt;changedisopen type=\"script\"&gt;\n  locker_door.isopen = this.isopen\n&lt;/changedisopen&gt;\n</code></pre>\n<p>(assuming that <code>locker</code> and <code>locker_door</code> are the object names)<br>\nThis means that the verbs <code>lock</code> and <code>unlock</code> will be run on the locker, whether the player types \"locker\" or \"door\".<br>\nThe same can't be done for \"open\" and \"close\", because they're commands rather than verbs. The nearest we can get is using the script attributes <code>openscript</code> and <code>closescript</code> - but openscript will only be run <em>after</em> the core test to see whether the door is already open or closed. So we also put a <code>changedisopen</code> script on the locker itself, to ensure that the door's open/closed state is the same as the locker's.</p>\n<p>If you can't take the coin out of the door, then this should work fine. You'd just make the door a transparent container in order to enable the coin to be seen.</p>\n<p></p><h3>Method 2</h3><br>\nAn alternate way of doing this. Put a command in the room:<p></p>\n<pre><code>&lt;command name=\"door_stuff\"&gt;\n  &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(?&lt;object_command&gt;open|close|lock|unlock) (?&lt;object&gt;.+)$]]&gt;&lt;/pattern&gt;\n  &lt;changecommandscope type=\"script\"&gt;\n    if (variable = \"object_command\") {\n      while (ListCount (items) &gt; 0) {\n        list remove (items, ListItem (items, 0))\n      }\n      list add (items, open)\n      list add (items, close)\n      list add (items, lock)\n      list add (items, unlock)\n    }\n  &lt;/changecommandscope&gt;\n\n  &lt;script&gt;\n    params = NewDictionary()\n    if (object = <b style=\"color: brown\">locker_door</b>) {\n     object = <b style=\"color: darkgreen\">locker</b>\n    }\n    do (object_command, \"script\", QuickParams (\"object\", object))\n  &lt;/script&gt;\n&lt;/command&gt;</code></pre>\n<p>This overrides 4 commands at once, using <code>changecommandscope</code> so that the parameter <code>object_command</code> will match a command rather than an object, and then uses <code>do</code> to execute the underlying command.</p>\n<p>This means that if the door is a container in its own right (so you can put a coin in it and take it out), it will work like any other container; it's only the four verbs listed that will be redirected. (If adding other commands to this function, note that it ignores the pattern of the real commands, and looks at the <em>name</em> of the commands. If a command's name and pattern aren't the same, you would need to put the words that you expect the player to type within the <code>&lt;pattern&gt;</code> line, the <em>name</em> of the command in the list within the <code>changecommandscope</code> block, and give the command an <code>alias</code> attribute to match what the player typed)</p>\n\n",
      "PostDate": "2020-03-29T13:25:07.0376836Z",
      "LastEditDate": "2020-03-29T15:56:06.360518Z",
      "link": null
    },
    {
      "PostId": "ad1e173e-771e-4df4-9611-773845661d04",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(Just in case anybody's interested but confused by the comments about using method 2 with other commands, here's another example:\r\n\r\n<details>\r\n<summary>Another example</summary>\r\n\r\n```\r\n<command name=\"mesmerised\">\r\n  <pattern type=\"string\"><![CDATA[^(?<object_command>look|look at|x|examine|exam|ex|listen|listen to|taste) (?<object>.+)$]]></pattern>\r\n  <changecommandscope type=\"script\">\r\n    if (variable = \"object_command\") {\r\n      while (ListCount (items) > 0) {\r\n        list remove (items, ListItem (items, 0))\r\n      }\r\n      list add (items, lookat)\r\n      list add (items, listento)\r\n      list add (items, taste)\r\n    }\r\n  </changecommandscope>\r\n\r\n  <script>\r\n    params = NewDictionary()\r\n    if (spiral.switchedon and RandomChance (30)) {\r\n      msg (\"You try to \"+GetDisplayAlias (object_command) + \" the \" +GetDisplayName (object) + \", but you can't tear your attention away from the mesmerising spiral in the centre of the room.\")\r\n     object = spiral\r\n    }\r\n    do (object_command, \"script\", QuickParams (\"object\", object))\r\n  </script>\r\n</command>\r\n```\r\nAnd then in the start script (or somewhere before entering this room), you'd need to put:\r\n```\r\nlookat.alias = \"look at\"\r\nlookat.alt = Split (\"x;examine\")\r\nlistento.alias = \"listen to\"\r\n```\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>(Just in case anybody's interested but confused by the comments about using method 2 with other commands, here's another example:</p>\n<details>\n<summary>Another example</summary>\n<pre><code>&lt;command name=\"mesmerised\"&gt;\n  &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(?&lt;object_command&gt;look|look at|x|examine|exam|ex|listen|listen to|taste) (?&lt;object&gt;.+)$]]&gt;&lt;/pattern&gt;\n  &lt;changecommandscope type=\"script\"&gt;\n    if (variable = \"object_command\") {\n      while (ListCount (items) &gt; 0) {\n        list remove (items, ListItem (items, 0))\n      }\n      list add (items, lookat)\n      list add (items, listento)\n      list add (items, taste)\n    }\n  &lt;/changecommandscope&gt;\n\n  &lt;script&gt;\n    params = NewDictionary()\n    if (spiral.switchedon and RandomChance (30)) {\n      msg (\"You try to \"+GetDisplayAlias (object_command) + \" the \" +GetDisplayName (object) + \", but you can't tear your attention away from the mesmerising spiral in the centre of the room.\")\n     object = spiral\n    }\n    do (object_command, \"script\", QuickParams (\"object\", object))\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n<p>And then in the start script (or somewhere before entering this room), you'd need to put:</p>\n<pre><code>lookat.alias = \"look at\"\nlookat.alt = Split (\"x;examine\")\nlistento.alias = \"listen to\"\n</code></pre>\n</details>\n\n",
      "PostDate": "2020-03-29T16:13:43.8542155Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "508fc9d4-5423-470c-b89f-fcda3a83e899",
      "UserId": 106087,
      "Username": "Nathaniel.Spence",
      "AvatarUrl": "https://secure.gravatar.com/avatar/169dc71280239f2665ee699d08c643b6?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi\r\n \r\nMethod 1 works perfectly - thank you.\r\n\r\nI've managed the coin behaviour by running a script when the door is examined to move the coin to the locker. So, when the locker is examined after the door has been examined (revealing the coin slot mechanism), the coin is present in the locker and can be taken.\r\n\r\nA problem that I now have is that I don't want it to be possible to put anything in the door expect the coin. I can add a script to run when trying to add an object to the door, to say 'you can't do that' but I want to respond to the input 'put COIN in door' by moving the coin to the locker . What I can't figure out is how to reference the object that the player has entered...I need something like: Player inputs 'put X in door': if player says 'put COIN in door' then move coin to locker, else say 'you can't do that'.\r\n\r\nI've avoided method 2 because, frankly, I don't really understand enough about how it works yet. But perhaps it would be simpler to use that than try and do what I am trying to do?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi</p>\n<p>Method 1 works perfectly - thank you.</p>\n<p>I've managed the coin behaviour by running a script when the door is examined to move the coin to the locker. So, when the locker is examined after the door has been examined (revealing the coin slot mechanism), the coin is present in the locker and can be taken.</p>\n<p>A problem that I now have is that I don't want it to be possible to put anything in the door expect the coin. I can add a script to run when trying to add an object to the door, to say 'you can't do that' but I want to respond to the input 'put COIN in door' by moving the coin to the locker . What I can't figure out is how to reference the object that the player has entered...I need something like: Player inputs 'put X in door': if player says 'put COIN in door' then move coin to locker, else say 'you can't do that'.</p>\n<p>I've avoided method 2 because, frankly, I don't really understand enough about how it works yet. But perhaps it would be simpler to use that than try and do what I am trying to do?</p>\n\n",
      "PostDate": "2020-03-29T17:32:17.4218756Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dfc32d6e-faf1-4992-94b7-27ad6012d97f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In the script when trying to add an object, you can do something like:\r\n```\r\nif (object = coin) {\r\n  object.parent = locker\r\n}\r\nelse {\r\n  msg (\"You can't do that.\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>In the script when trying to add an object, you can do something like:</p>\n<pre><code>if (object = coin) {\n  object.parent = locker\n}\nelse {\n  msg (\"You can't do that.\")\n}\n</code></pre>\n\n",
      "PostDate": "2020-03-29T17:59:24.7417095Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a180766d-5137-4963-aac8-c706f468db10",
      "UserId": 106087,
      "Username": "Nathaniel.Spence",
      "AvatarUrl": "https://secure.gravatar.com/avatar/169dc71280239f2665ee699d08c643b6?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Brilliant! It works, thanks. I have learnt a lot, just from trying to figure out this little bit of the game.",
      "EditableFormat": "markdown",
      "HTML": "<p>Brilliant! It works, thanks. I have learnt a lot, just from trying to figure out this little bit of the game.</p>\n\n",
      "PostDate": "2020-03-29T20:08:56.9870275Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
