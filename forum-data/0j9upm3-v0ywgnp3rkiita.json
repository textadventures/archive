{
  "Topic": {
    "TopicId": "0j9upm3-v0ywgnp3rkiita",
    "ForumId": "10",
    "Title": "Trying to clone object to the room player is at with expression (SOLVED)",
    "LastUpdated": "2019-06-06T00:04:37.9241658Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "299b76d6-b646-4d39-a242-c316ec1df224",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I tried the following expressions: player.room  this.room but nothing works ahah iM a bit lost so i made a spellbook that contains a scroll of light and creates an orb of light, cloning it from my treasures hidden room ((The orb)) I want that orb to show up in same room of the caster player but nothing ;( help please",
      "EditableFormat": "markdown",
      "HTML": "<p>I tried the following expressions: player.room  this.room but nothing works ahah iM a bit lost so i made a spellbook that contains a scroll of light and creates an orb of light, cloning it from my treasures hidden room ((The orb)) I want that orb to show up in same room of the caster player but nothing ;( help please</p>\n\n",
      "PostDate": "2019-06-06T00:04:37.9241658Z",
      "LastEditDate": "2019-06-06T00:15:08.2260404Z",
      "link": null
    },
    {
      "PostId": "c1588898-8c4a-4db8-b556-d1727feef737",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "player.parent maybe?????",
      "EditableFormat": "markdown",
      "HTML": "<p>player.parent maybe?????</p>\n\n",
      "PostDate": "2019-06-06T00:09:52.1938412Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c1891cb0-ea13-4a87-af91-7d7413a799fc",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There's a special block called Clone Object and Move. It Clones the Object and moves the object to Room. In code view:\r\n```\r\nCloneObjectAndMove (ObjectName, TargetRoomName)\r\n```\r\nTo go to the player's room it's Player.parent.\r\n\r\nIf you want to keep track of the object later, you can even assign it to a variable!\r\n```\r\nThisVariableTracksTheCloneItself = CloneObjectAndMove (ObjectName, TargetRoomName)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>There's a special block called Clone Object and Move. It Clones the Object and moves the object to Room. In code view:</p>\n<pre><code>CloneObjectAndMove (ObjectName, TargetRoomName)\n</code></pre>\n<p>To go to the player's room it's Player.parent.</p>\n<p>If you want to keep track of the object later, you can even assign it to a variable!</p>\n<pre><code>ThisVariableTracksTheCloneItself = CloneObjectAndMove (ObjectName, TargetRoomName)\n</code></pre>\n\n",
      "PostDate": "2019-06-06T00:12:24.6919218Z",
      "LastEditDate": "2019-06-06T00:13:07.8271606Z",
      "link": null
    },
    {
      "PostId": "5eeb51e9-64b0-4668-81c6-6ff15d1ed400",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you so much again ;) and i can't believe i got it right for player.parent it means I can actually learn ahah!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you so much again ;) and i can't believe i got it right for player.parent it means I can actually learn ahah!</p>\n\n",
      "PostDate": "2019-06-06T00:14:32.6697631Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6318f6f6-3050-4174-870d-c2c36a7777c0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n-------------\r\n\r\nthe built-in 'parent' Object (reference/pointer) Attribute is what actually controls/determine containment (\"folder\") heirarchy\r\n\r\n(when you see 'parent', think 'location', as this helps with understanding its usage)\r\n\r\nplayer.parent = room\r\n// conceptually: player's location = room\r\n\r\nplayer.parent = room // you're set/moved into the 'room' Room Object\r\nplayer.parent = room99 // you're set/moved into the 'room99' Room Object\r\nkatana.parent = player // the 'katana' Object is set/moved into the default 'player' Player Object (aka, \"the inventory\")\r\n\r\nalso, the 'parent' Object (reference/pointer) Attribute, allows for some really cool and powerful applications, for a quick example:\r\n\r\na \"follower\" code (using the built-in 'parent' Object reference pointer Attribute, and a/my custom 'party_member' Object reference pointer Attribute, within the special 'changedNAME_OF_ATTRIBUTE' Script Attribute):\r\n\r\n(the reason I put in my 'party_member' Object reference/pointer Attribute, is to show you that you can use your own-custom Object reference pointer Attributes, which for my example, allows you to set/change its value from 'npc' to 'npc2', which would then cause the 'npc2' to follow the 'player', instead of 'npc' following the 'player'\r\n\r\n```\r\n<object name=\"room\">\r\n\r\n  <inherit name=\"editor_room\" />\r\n\r\n</object>\r\n\r\n<object name=\"room2\">\r\n\r\n  <inherit name=\"editor_room\" />\r\n\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"party_member\" type=\"object\">npc</attr>\r\n\r\n  <attr name=\"changedparent\" type=\"script\">\r\n\r\n    // player.party_member = npc\r\n    // if (not npc.parent = player.parent) {\r\n    // if (not npc's location = player's location) {\r\n\r\n    if (not player.party_member.parent = player.parent) {\r\n      player.party_member.parent = player.parent\r\n\r\n      // player.party_member = npc\r\n      // npc.parent = player.parent\r\n      // npc's location = player's location\r\n      //\r\n      // let's pretend we moved the player to 'room2':\r\n      // player.parent = room2\r\n      //\r\n      // npc.parent = room\r\n      // \r\n      // npc's location (room) is NOT equal to player's location (room2)\r\n      // so, we set npc's location to being the same as player's location:\r\n      //\r\n      // player.party_member.parent = player.parent\r\n      //\r\n      // player.party_member = npc\r\n      // npc.parent = player.parent\r\n      // npc's location = player's location (room2)\r\n      // player.party_member.parent = player.parent\r\n      // player.party_member.parent = room2\r\n      //\r\n      // npc.parent = room2\r\n      // player.parent = room2\r\n\r\n    }\r\n\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"npc\">\r\n\r\n  <inherit name=\"editor_objet\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n</object>\r\n\r\n<object name=\"npc2\">\r\n\r\n  <inherit name=\"editor_objet\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>the built-in 'parent' Object (reference/pointer) Attribute is what actually controls/determine containment (\"folder\") heirarchy</p>\n<p>(when you see 'parent', think 'location', as this helps with understanding its usage)</p>\n<p>player.parent = room<br>\n// conceptually: player's location = room</p>\n<p>player.parent = room // you're set/moved into the 'room' Room Object<br>\nplayer.parent = room99 // you're set/moved into the 'room99' Room Object<br>\nkatana.parent = player // the 'katana' Object is set/moved into the default 'player' Player Object (aka, \"the inventory\")</p>\n<p>also, the 'parent' Object (reference/pointer) Attribute, allows for some really cool and powerful applications, for a quick example:</p>\n<p>a \"follower\" code (using the built-in 'parent' Object reference pointer Attribute, and a/my custom 'party_member' Object reference pointer Attribute, within the special 'changedNAME_OF_ATTRIBUTE' Script Attribute):</p>\n<p>(the reason I put in my 'party_member' Object reference/pointer Attribute, is to show you that you can use your own-custom Object reference pointer Attributes, which for my example, allows you to set/change its value from 'npc' to 'npc2', which would then cause the 'npc2' to follow the 'player', instead of 'npc' following the 'player'</p>\n<pre><code>&lt;object name=\"room\"&gt;\n\n  &lt;inherit name=\"editor_room\" /&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"room2\"&gt;\n\n  &lt;inherit name=\"editor_room\" /&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"party_member\" type=\"object\"&gt;npc&lt;/attr&gt;\n\n  &lt;attr name=\"changedparent\" type=\"script\"&gt;\n\n    // player.party_member = npc\n    // if (not npc.parent = player.parent) {\n    // if (not npc's location = player's location) {\n\n    if (not player.party_member.parent = player.parent) {\n      player.party_member.parent = player.parent\n\n      // player.party_member = npc\n      // npc.parent = player.parent\n      // npc's location = player's location\n      //\n      // let's pretend we moved the player to 'room2':\n      // player.parent = room2\n      //\n      // npc.parent = room\n      // \n      // npc's location (room) is NOT equal to player's location (room2)\n      // so, we set npc's location to being the same as player's location:\n      //\n      // player.party_member.parent = player.parent\n      //\n      // player.party_member = npc\n      // npc.parent = player.parent\n      // npc's location = player's location (room2)\n      // player.party_member.parent = player.parent\n      // player.party_member.parent = room2\n      //\n      // npc.parent = room2\n      // player.parent = room2\n\n    }\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"npc\"&gt;\n\n  &lt;inherit name=\"editor_objet\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"npc2\"&gt;\n\n  &lt;inherit name=\"editor_objet\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2019-06-06T04:57:57.1602203Z",
      "LastEditDate": "2019-06-06T05:19:16.671106Z",
      "link": null
    },
    {
      "PostId": "7ab488c2-d857-44de-b462-a7d73b30dddd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There's even a shorthand function, in case `CloneObjectAndMove(some_object, game.pov.parent)` is too much typing for you. You can do `CloneObjectAndMoveHere (some_object)` instead, moving the clone to wherever the player is.\r\n\r\n<hr />\r\n\r\nAlso: When you use `player`, it means \"the object whose name is *player*\". When you use `game.pov` it means \"the object the player is currently controlling\". A lot of the time, they'll probably be the same. But using `game.pov` is a good habit to get into, because it means you're not going to slip and use the wrong one if you ever make a game with multiple playable characters.",
      "EditableFormat": "markdown",
      "HTML": "<p>There's even a shorthand function, in case <code>CloneObjectAndMove(some_object, game.pov.parent)</code> is too much typing for you. You can do <code>CloneObjectAndMoveHere (some_object)</code> instead, moving the clone to wherever the player is.</p>\n<hr>\n<p>Also: When you use <code>player</code>, it means \"the object whose name is <em>player</em>\". When you use <code>game.pov</code> it means \"the object the player is currently controlling\". A lot of the time, they'll probably be the same. But using <code>game.pov</code> is a good habit to get into, because it means you're not going to slip and use the wrong one if you ever make a game with multiple playable characters.</p>\n\n",
      "PostDate": "2019-06-06T09:46:25.6366015Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9a8844c5-8504-4dc7-88cf-149e4126a82c",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Makes sense thanks mrangel ;) and hegemonkhan!",
      "EditableFormat": "markdown",
      "HTML": "<p>Makes sense thanks mrangel ;) and hegemonkhan!</p>\n\n",
      "PostDate": "2019-06-06T10:13:34.3077102Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
