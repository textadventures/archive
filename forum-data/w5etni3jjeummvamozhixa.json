{
  "Topic": {
    "TopicId": "w5etni3jjeummvamozhixa",
    "ForumId": "10",
    "Title": "Spellcasting.",
    "LastUpdated": "2017-05-18T20:20:08.4333298Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0282e6e6-c727-4e1e-b4d7-f181633308f8",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi,\r\n\r\nI'm trying to create a spellcasting system, and it is not going well at all. I have found that the only way I can \"cast\" a spell, is if I had an attribute to an object called spell, and have it a Boolean as true for the attribute added. Then I create a verb cast for that object and get a prompt, and IF it is a specific object.attribute, then the spell gets cast. Or stated in another way:\r\n\r\ncast spell ... get prompt and type in ... spell.healing ... if (expression) = spell.healing ... spell is then cast.\r\n\r\nThis gets cumbersome VERY quickly as:\r\n1. You need an attribute for every single spell in the game.\r\n2. You need an if statement for every single spell in the game.\r\n3. You cast the spell by typing into the prompt: spell.attribute, which would look weird to a user.\r\n\r\nSo, I'd prefer to use a command to perform spellcasting over using a verb on an object. The issue though is that, the command only allows for #object#, #text# or #exit#. \r\n\r\nIf I set it to \"object\", then I need to \"be able to see it\", and thus either on the ground or in your inventory, which will clutter up your inventory quickly or clutter up ground objects quickly. This also means that every spell needs to be a separate object.\r\n\r\nIf I set it to \"text\", then the word \"healing\" gets put into #text#, but then I can't use it. I've tried using text or #text# in a switch statement, with healing as a key, but this either spews an error or nothing happens. So, I'd prefer it if the user could use a command of \"cast #text#\", to perform spellcasting, but I don't know how to use the information stored in #text# to cause a spell to be cast.\r\n\r\nHow can I use #text#, once I put something into #text#?\r\n\r\nOr is there an alternative way that could be suggested on how to do spellcasting? If I could have a dropdown menu, like Inventory on the interface, then that would be an ideal place to store spells, but I don't know how to add interface elements.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi,</p>\n<p>I'm trying to create a spellcasting system, and it is not going well at all. I have found that the only way I can \"cast\" a spell, is if I had an attribute to an object called spell, and have it a Boolean as true for the attribute added. Then I create a verb cast for that object and get a prompt, and IF it is a specific object.attribute, then the spell gets cast. Or stated in another way:</p>\n<p>cast spell ... get prompt and type in ... spell.healing ... if (expression) = spell.healing ... spell is then cast.</p>\n<p>This gets cumbersome VERY quickly as:</p>\n<ol>\n<li>You need an attribute for every single spell in the game.</li>\n<li>You need an if statement for every single spell in the game.</li>\n<li>You cast the spell by typing into the prompt: spell.attribute, which would look weird to a user.</li>\n</ol>\n<p>So, I'd prefer to use a command to perform spellcasting over using a verb on an object. The issue though is that, the command only allows for #object#, #text# or #exit#.</p>\n<p>If I set it to \"object\", then I need to \"be able to see it\", and thus either on the ground or in your inventory, which will clutter up your inventory quickly or clutter up ground objects quickly. This also means that every spell needs to be a separate object.</p>\n<p>If I set it to \"text\", then the word \"healing\" gets put into #text#, but then I can't use it. I've tried using text or #text# in a switch statement, with healing as a key, but this either spews an error or nothing happens. So, I'd prefer it if the user could use a command of \"cast #text#\", to perform spellcasting, but I don't know how to use the information stored in #text# to cause a spell to be cast.</p>\n<p>How can I use #text#, once I put something into #text#?</p>\n<p>Or is there an alternative way that could be suggested on how to do spellcasting? If I could have a dropdown menu, like Inventory on the interface, then that would be an ideal place to store spells, but I don't know how to add interface elements.</p>\n\n",
      "PostDate": "2017-05-18T20:20:08.4333298Z",
      "LastEditDate": null
    },
    {
      "PostId": "75aeed46-c53d-43b6-804e-03091059ef45",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you are using the desktop version, I suggest using a library. This has a tutorial that will take you through how to use it.\r\n\r\nhttps://github.com/ThePix/quest/wiki/CombatLib\r\n\r\nSecond inventory pane for spells here:\r\nhttps://github.com/ThePix/quest/wiki/Second-Inventory-Library",
      "EditableFormat": "markdown",
      "HTML": "<p>If you are using the desktop version, I suggest using a library. This has a tutorial that will take you through how to use it.</p>\n<p>https://github.com/ThePix/quest/wiki/CombatLib</p>\n<p>Second inventory pane for spells here:<br>\nhttps://github.com/ThePix/quest/wiki/Second-Inventory-Library</p>\n\n",
      "PostDate": "2017-05-18T21:45:30.7770161Z",
      "LastEditDate": null
    },
    {
      "PostId": "ad7d502f-a0b1-4938-b577-7d35f67dd48d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Pixie's Combat Library has his magic/spell library stuff inside of it (long ago it was a separate library/guide in the doc site).\r\n\r\nthis kind of stuff is really advanced to try to do on your own... so use Pixie's library.\r\n\r\nthe ingenious part of Pixie's magic/spell library is the use of Dictionary Attributes for the handling of: 'weakness (opposing elementals: x2 or x1.5 damage)', the same elementals: 'strength-resistance (x0.5 or x0.33 or x.67 damage)/absorption (heals instead of damages)/reflection (damage is done upon the caster, usually reduced damage, such as at x0.5, instead of the target)' , and non-same non-opposite elementals (normal damage: x1.0 and normal effect: upon target), as/of the types of spell effects/damages.\r\n\r\nwell, all of Pixie's spell/magic library is ingenious, in how he handles all the types of spells/magic... I still need to study this stuff more/better... but I was just amazed at the how Dictionaries can be used for handling the different types of spells effects/damages.\r\n\r\nit took me a long time to understand this stuff, so if you're interested in it too, and want to understand it, I (or Pixie of course) can help you with it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Pixie's Combat Library has his magic/spell library stuff inside of it (long ago it was a separate library/guide in the doc site).</p>\n<p>this kind of stuff is really advanced to try to do on your own... so use Pixie's library.</p>\n<p>the ingenious part of Pixie's magic/spell library is the use of Dictionary Attributes for the handling of: 'weakness (opposing elementals: x2 or x1.5 damage)', the same elementals: 'strength-resistance (x0.5 or x0.33 or x.67 damage)/absorption (heals instead of damages)/reflection (damage is done upon the caster, usually reduced damage, such as at x0.5, instead of the target)' , and non-same non-opposite elementals (normal damage: x1.0 and normal effect: upon target), as/of the types of spell effects/damages.</p>\n<p>well, all of Pixie's spell/magic library is ingenious, in how he handles all the types of spells/magic... I still need to study this stuff more/better... but I was just amazed at the how Dictionaries can be used for handling the different types of spells effects/damages.</p>\n<p>it took me a long time to understand this stuff, so if you're interested in it too, and want to understand it, I (or Pixie of course) can help you with it.</p>\n\n",
      "PostDate": "2017-05-18T22:07:28.577805Z",
      "LastEditDate": null
    },
    {
      "PostId": "994592e1-0cd3-41db-bc10-c4f7b1dbe39c",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I tried adding a library with my previous project. It borked it, and had to start from scratch, so I'll pass on the library. \r\n\r\nI also, already have my own system for equipping objects, doing attack systems, and have a specific style of gameplay in mind, that wouldn't work with most of the features of the CombatLib (I read through most of it to see what it has to offer, and my current solutions solve my own gameplay situation much more elegantly), and so, it looks like I'll have to figure out a different way to solve spellcasting.\r\n\r\nThanks for taking the time to reply, though. Appreciate it.",
      "EditableFormat": "markdown",
      "HTML": "<p>I tried adding a library with my previous project. It borked it, and had to start from scratch, so I'll pass on the library.</p>\n<p>I also, already have my own system for equipping objects, doing attack systems, and have a specific style of gameplay in mind, that wouldn't work with most of the features of the CombatLib (I read through most of it to see what it has to offer, and my current solutions solve my own gameplay situation much more elegantly), and so, it looks like I'll have to figure out a different way to solve spellcasting.</p>\n<p>Thanks for taking the time to reply, though. Appreciate it.</p>\n\n",
      "PostDate": "2017-05-19T09:06:11.5534203Z",
      "LastEditDate": null
    },
    {
      "PostId": "78cc2800-b521-41eb-879c-fe48e8ad5392",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "tell us your design and specific needs with spells/magic and we can help you with them.\r\n\r\n------\r\n\r\nsome ideas below... I've not done any spell work yet... so not even close to the best designs, but hopefully it'll give you some ideas on how you can do some things.\r\n\r\nPixie can provide much better designs for you\r\n\r\n-------\r\n\r\nyou can use 'Object Types' and have the casting Script Attribute's name be the same for all spells, thus letting you cast any spell, for example:\r\n\r\n```\r\n<object name=\"fireball\">\r\n  <inherit name=\"spell_type\" />\r\n  <inherit name=\"fire_type\" />\r\n  <inherit name=\"damage_type\" />\r\n  <attr name=\"damage\" type=\"int\">50</attr>\r\n</object>\r\n\r\n<object name=\"healing\">\r\n  <inherit name=\"spell_type\" />\r\n  <inherit name=\"holy_type\" />\r\n  <inherit name=\"healing_type\" />\r\n  <attr name=\"damage\" type=\"int\">25</attr>\r\n</object>\r\n\r\n<type name=\"damage_type\">\r\n  <attr name=\"damage\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"healing_type\">\r\n  <attr name=\"damage\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"fire_type\">\r\n  <attr name=\"elemental_string_attribute\" type=\"string\">fire</attr>\r\n</type>\r\n\r\n<type name=\"holy_type\">\r\n  <attr name=\"elemental_string_attribute\" type=\"string\">holy</attr>\r\n</type>\r\n\r\n<type name=\"monster_type\">\r\n</type>\r\n\r\n<type name=\"undead_type\">\r\n</type>\r\n\r\n<type name=\"spell_type\">\r\n  <attr name=\"cast\" type=\"script\">\r\n    if (DoesInherit (this, \"spell_type\") and DoesInherit (this, \"damage_type\") {\r\n      foreach (object_variable, GetDirectChildren (player.parent)) {\r\n        if (DoesInherit (object_variable, \"monster_type\")) {\r\n          if (object_variable.elemental_string_attribute = this.elemental_string_attribute) {\r\n            msg (object_variable.alias + \" is immune to \" + this.elemental_string_attribute + \", no damage done to it.\")\r\n          } else if (object_variable.elemental_string_attribute = StringDictionaryItem (game.opposing_elementals_stringdictionary_attribute, this.elemental_string_attribute) {\r\n            object_variable.current_life_intger_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute * 2\r\n            msg (object_variable.alias + \" is weak to \" + this.elemental_string_attribute + \", you do double damage to it\")\r\n          } else {\r\n            object_variable.current_life_intger_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute\r\n            msg (\"You do normal damage to \" + object_variable.alias)\r\n          }\r\n        } \r\n      }\r\n    } else if (DoesInherit (this, \"spell_type\") and DoesInherit (this, \"healing_type\")) {\r\n      ask (\"Self (yes/true) or Enemies (no/false)?\") {\r\n        if (result) {\r\n          player.current_life_integer_attribute = player.current_life_integer_attribute + this.damage_integer_attribute\r\n          msg (\"you heal yourself\")\r\n        } else {\r\n          foreach (object_variable, GetDirectChildren (player.parent)) {\r\n            if (DoesInherit (object_variable, \"monster_type\") and DoesInherit (this, \"undead_type\")) {\r\n              object_variable.current_life_integer_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute * 3\r\n              msg (this.alias + \" does 3 times damage to the undead \" + object_variable.alias)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  </attr>\r\n</type>\r\n```\r\n\r\nabout using Commands:\r\n\r\nthere's a bit more code work involved with using #object#, so you can use the #text# instead and use the 'GetObject (text)' Function with it.... actually, it still has the problem with if you do't know the Object's name (only know its alias for example, as the object's name is hidden from the person playing the game)... see Pertex' fix at bottom. If I remember right, using #object# will handle this for you automatically (if it can't find an Object's name of the input, it'll see if it can find an Object's alias of the input), but using #object# has the problem of the if out of scope (which using #text# and GetObject(text) doesn't)... both #text# and #object# have their pros and cons, lol.\r\n\r\n```\r\n<command name=\"cast_command\">\r\n  <pattern>cast #text_parameter#</pattern>\r\n  <script>\r\n    object_variable = GetObject (text_parameter)\r\n    if (DoesInherit (object_variable, \"spell_type\")) {\r\n      do (object_variable, \"cast\")\r\n    }\r\n  </script>\r\n</command>\r\n```\r\n\r\n-----------\r\n\r\nPertex also provided this for handling non-accessable-Objects-for-a-Command:\r\n\r\n(from my combat code, when I was trying to learn combat coding for the first time, using Pertex' Combat library as a guiding structure for my combat code)\r\n\r\n```\r\nenemy_variable = GetObject (text)\r\nif (enemy_variable = null) {\r\n  foreach (object_variable, AllObjects ()) {\r\n    if (object_variable.alias = text) {\r\n      enemy_variable = object_variable\r\n    }\r\n  }\r\n}\r\nif (enemy_variable = null) {\r\n  msg (\"There is no \" + text + \" here.\")\r\n}\r\n```\r\n\r\n---------\r\n\r\nask if you need help with anything or got any questions",
      "EditableFormat": "markdown",
      "HTML": "<p>tell us your design and specific needs with spells/magic and we can help you with them.</p>\n<hr>\n<p>some ideas below... I've not done any spell work yet... so not even close to the best designs, but hopefully it'll give you some ideas on how you can do some things.</p>\n<p>Pixie can provide much better designs for you</p>\n<hr>\n<p>you can use 'Object Types' and have the casting Script Attribute's name be the same for all spells, thus letting you cast any spell, for example:</p>\n<pre><code>&lt;object name=\"fireball\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n  &lt;inherit name=\"fire_type\" /&gt;\n  &lt;inherit name=\"damage_type\" /&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;50&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"healing\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n  &lt;inherit name=\"holy_type\" /&gt;\n  &lt;inherit name=\"healing_type\" /&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;25&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=\"damage_type\"&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"healing_type\"&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"fire_type\"&gt;\n  &lt;attr name=\"elemental_string_attribute\" type=\"string\"&gt;fire&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"holy_type\"&gt;\n  &lt;attr name=\"elemental_string_attribute\" type=\"string\"&gt;holy&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"monster_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"undead_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"spell_type\"&gt;\n  &lt;attr name=\"cast\" type=\"script\"&gt;\n    if (DoesInherit (this, \"spell_type\") and DoesInherit (this, \"damage_type\") {\n      foreach (object_variable, GetDirectChildren (player.parent)) {\n        if (DoesInherit (object_variable, \"monster_type\")) {\n          if (object_variable.elemental_string_attribute = this.elemental_string_attribute) {\n            msg (object_variable.alias + \" is immune to \" + this.elemental_string_attribute + \", no damage done to it.\")\n          } else if (object_variable.elemental_string_attribute = StringDictionaryItem (game.opposing_elementals_stringdictionary_attribute, this.elemental_string_attribute) {\n            object_variable.current_life_intger_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute * 2\n            msg (object_variable.alias + \" is weak to \" + this.elemental_string_attribute + \", you do double damage to it\")\n          } else {\n            object_variable.current_life_intger_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute\n            msg (\"You do normal damage to \" + object_variable.alias)\n          }\n        } \n      }\n    } else if (DoesInherit (this, \"spell_type\") and DoesInherit (this, \"healing_type\")) {\n      ask (\"Self (yes/true) or Enemies (no/false)?\") {\n        if (result) {\n          player.current_life_integer_attribute = player.current_life_integer_attribute + this.damage_integer_attribute\n          msg (\"you heal yourself\")\n        } else {\n          foreach (object_variable, GetDirectChildren (player.parent)) {\n            if (DoesInherit (object_variable, \"monster_type\") and DoesInherit (this, \"undead_type\")) {\n              object_variable.current_life_integer_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute * 3\n              msg (this.alias + \" does 3 times damage to the undead \" + object_variable.alias)\n            }\n          }\n        }\n      }\n    }\n  &lt;/attr&gt;\n&lt;/type&gt;\n</code></pre>\n<p>about using Commands:</p>\n<p>there's a bit more code work involved with using #object#, so you can use the #text# instead and use the 'GetObject (text)' Function with it.... actually, it still has the problem with if you do't know the Object's name (only know its alias for example, as the object's name is hidden from the person playing the game)... see Pertex' fix at bottom. If I remember right, using #object# will handle this for you automatically (if it can't find an Object's name of the input, it'll see if it can find an Object's alias of the input), but using #object# has the problem of the if out of scope (which using #text# and GetObject(text) doesn't)... both #text# and #object# have their pros and cons, lol.</p>\n<pre><code>&lt;command name=\"cast_command\"&gt;\n  &lt;pattern&gt;cast #text_parameter#&lt;/pattern&gt;\n  &lt;script&gt;\n    object_variable = GetObject (text_parameter)\n    if (DoesInherit (object_variable, \"spell_type\")) {\n      do (object_variable, \"cast\")\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n<hr>\n<p>Pertex also provided this for handling non-accessable-Objects-for-a-Command:</p>\n<p>(from my combat code, when I was trying to learn combat coding for the first time, using Pertex' Combat library as a guiding structure for my combat code)</p>\n<pre><code>enemy_variable = GetObject (text)\nif (enemy_variable = null) {\n  foreach (object_variable, AllObjects ()) {\n    if (object_variable.alias = text) {\n      enemy_variable = object_variable\n    }\n  }\n}\nif (enemy_variable = null) {\n  msg (\"There is no \" + text + \" here.\")\n}\n</code></pre>\n<hr>\n<p>ask if you need help with anything or got any questions</p>\n\n",
      "PostDate": "2017-05-19T11:54:18.7489789Z",
      "LastEditDate": "2017-05-19T13:08:40.6808602Z"
    },
    {
      "PostId": "65ac757e-7a0a-42ac-88cc-9689dcc81a95",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I plan on having global commands for my spells/attack-types for my combat system.  Not sure if this is more helpful or not.\r\n\r\nI simply created a say [spell name]/cast [spell name] global command for my games.  If the player has learned the spell, the spell will be cast on the monster in the room.  If they have not learned that spell, it will result in an \"error\" message.\r\n\r\nMuch simpler than some alternatives.  Just depends on your system, I guess.  ",
      "EditableFormat": "markdown",
      "HTML": "<p>I plan on having global commands for my spells/attack-types for my combat system.  Not sure if this is more helpful or not.</p>\n<p>I simply created a say [spell name]/cast [spell name] global command for my games.  If the player has learned the spell, the spell will be cast on the monster in the room.  If they have not learned that spell, it will result in an \"error\" message.</p>\n<p>Much simpler than some alternatives.  Just depends on your system, I guess.</p>\n\n",
      "PostDate": "2017-05-20T03:42:50.91204Z",
      "LastEditDate": null
    },
    {
      "PostId": "1572053b-3478-493c-9140-e967f4b918b8",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My $.02...\r\nlordpalandus is looking to make a club to hit the orc...\r\nYou guys are trying to give him a 25KT tac nuke...\r\n\r\nYou are providing too much help and are causing answer overload.\r\nI have programmed in Basic for 35 or so years and about 30 days worth of OOP and Quest...\r\n90% of your answers are over my head!!!\r\nBreak down your answer to a level a noob can understand.\r\nYou are trying to be being helpful, which is good, but break down your answers to what you needed when you were trying to learn this.\r\nI can see where you are following OOP logic, making everything objects, and making functions to do anything providing you give the right parameters.\r\nWhen I program, I don't focus on function and subroutines at first, until I start to repeat the same code more than 3 or 4 times, then I will recode to use a function to do the work. True, maybe a little extra work, but that is the best way to learn, by reworking and recoding a project. (not recommended when you are paid to program or you are making a game the size of War and Peace!) Hopefully, buy that time you can think in OOP and 4 to 5 functions ahead.\r\n\r\nIn time, I'm sure everyone can get to your levels on knowledge, but until then, simplify your answers... please!!!\r\nRant: yes...\r\nFlame: No!!! Defiantly not!\r\nJust a plea to answer with simpler answers...\r\n\r\n \r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>My $.02...<br>\nlordpalandus is looking to make a club to hit the orc...<br>\nYou guys are trying to give him a 25KT tac nuke...</p>\n<p>You are providing too much help and are causing answer overload.<br>\nI have programmed in Basic for 35 or so years and about 30 days worth of OOP and Quest...<br>\n90% of your answers are over my head!!!<br>\nBreak down your answer to a level a noob can understand.<br>\nYou are trying to be being helpful, which is good, but break down your answers to what you needed when you were trying to learn this.<br>\nI can see where you are following OOP logic, making everything objects, and making functions to do anything providing you give the right parameters.<br>\nWhen I program, I don't focus on function and subroutines at first, until I start to repeat the same code more than 3 or 4 times, then I will recode to use a function to do the work. True, maybe a little extra work, but that is the best way to learn, by reworking and recoding a project. (not recommended when you are paid to program or you are making a game the size of War and Peace!) Hopefully, buy that time you can think in OOP and 4 to 5 functions ahead.</p>\n<p>In time, I'm sure everyone can get to your levels on knowledge, but until then, simplify your answers... please!!!<br>\nRant: yes...<br>\nFlame: No!!! Defiantly not!<br>\nJust a plea to answer with simpler answers...</p>\n\n",
      "PostDate": "2017-05-20T05:14:18.990927Z",
      "LastEditDate": null
    },
    {
      "PostId": "209dbb59-3d6d-4e8b-965b-bf02f896592a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "from my reading, it doesn't sound like he/she is asking for a club, as that is what he/she was doing, and it's too cumbersome... he/she wants a more global/OOP/OOD design, so he/she isn't doing so much manual work for every Object/spell/effect/etc individually himself/herself:\r\n\r\n\"\r\n(from Lord Palandus' OP)\r\n\r\nI'm trying to create a spellcasting system, and it is not going well at all. I have found that the only way I can \"cast\" a spell, is if I had an attribute to an object called spell, and have it a Boolean as true for the attribute added. Then I create a verb cast for that object and get a prompt, and IF it is a specific object.attribute, then the spell gets cast. Or stated in another way:\r\n\r\ncast spell ... get prompt and type in ... spell.healing ... if (expression) = spell.healing ... spell is then cast.\r\n\r\nThis gets cumbersome VERY quickly as:\r\n\r\nYou need an attribute for every single spell in the game.\r\nYou need an if statement for every single spell in the game.\r\nYou cast the spell by typing into the prompt: spell.attribute, which would look weird to a user.\r\nSo, I'd prefer to use a command to perform spellcasting over using a verb on an object. The issue though is that, the command only allows for #object#, #text# or #exit#.\r\n\"\r\n\r\n-----------\r\n\r\nhere Lord Palandus is asking about how to work with Commands:\r\n\r\n\"\r\nSo, I'd prefer to use a command to perform spellcasting over using a verb on an object. The issue though is that, the command only allows for #object#, #text# or #exit#.\r\n\"\r\n\r\nwhich I try help with this (from my previous post):\r\n\r\n\"\r\nabout using Commands:\r\n\r\nthere's a bit more code work involved with using #object#, so you can use the #text# instead and use the 'GetObject (text)' Function with it.... actually, it still has the problem with if you do't know the Object's name (only know its alias for example, as the object's name is hidden from the person playing the game)... see Pertex' fix at bottom. If I remember right, using #object# will handle this for you automatically (if it can't find an Object's name of the input, it'll see if it can find an Object's alias of the input), but using #object# has the problem of the if out of scope (which using #text# and GetObject(text) doesn't)... both #text# and #object# have their pros and cons, lol.\r\n\r\n```\r\n<command name=\"cast_command\">\r\n  <pattern>cast #text_parameter#</pattern>\r\n  <script>\r\n    object_variable = GetObject (text_parameter)\r\n    if (DoesInherit (object_variable, \"spell_type\")) {\r\n      do (object_variable, \"cast\")\r\n    }\r\n  </script>\r\n</command>\r\n```\r\n\r\nPertex also provided this for handling non-accessable-Objects-for-a-Command:\r\n\r\n(from my combat code, when I was trying to learn combat coding for the first time, using Pertex' Combat library as a guiding structure for my combat code)\r\n\r\n```\r\nenemy_variable = GetObject (text)\r\nif (enemy_variable = null) {\r\n  foreach (object_variable, AllObjects ()) {\r\n    if (object_variable.alias = text) {\r\n      enemy_variable = object_variable\r\n    }\r\n  }\r\n}\r\nif (enemy_variable = null) {\r\n  msg (\"There is no \" + text + \" here.\")\r\n}\r\n```\r\n\"\r\n\r\n-----------\r\n\r\nand he's/she's (Lord Palandus is) asking for a way to not do so much manual work on every individual thing here:\r\n\r\n\"\r\nI'm trying to create a spellcasting system, and it is not going well at all. I have found that the only way I can \"cast\" a spell, is if I had an attribute to an object called spell, and have it a Boolean as true for the attribute added. Then I create a verb cast for that object and get a prompt, and IF it is a specific object.attribute, then the spell gets cast. Or stated in another way:\r\n\r\ncast spell ... get prompt and type in ... spell.healing ... if (expression) = spell.healing ... spell is then cast.\r\n\r\nThis gets cumbersome VERY quickly as:\r\n\r\nYou need an attribute for every single spell in the game.\r\nYou need an if statement for every single spell in the game.\r\nYou cast the spell by typing into the prompt: spell.attribute, which would look weird to a user.\r\n\"\r\n\r\nwhich I try to help with giving one method of reducing the manual work of a spell system:\r\n\r\n(from my previous post)\r\n\r\n(this is very poor code, Pixie and his library is much better, but this gives some idea/look into this stuff, which Pixie does much better with in his code/library)\r\n\r\n\"\r\nyou can use 'Object Types' and have the casting Script Attribute's name be the same for all spells, thus letting you cast any spell, for example:\r\n\r\n```\r\n<object name=\"fireball\">\r\n  <inherit name=\"spell_type\" />\r\n  <inherit name=\"fire_type\" />\r\n  <inherit name=\"damage_type\" />\r\n  <attr name=\"damage\" type=\"int\">50</attr>\r\n</object>\r\n\r\n<object name=\"healing\">\r\n  <inherit name=\"spell_type\" />\r\n  <inherit name=\"holy_type\" />\r\n  <inherit name=\"healing_type\" />\r\n  <attr name=\"damage\" type=\"int\">25</attr>\r\n</object>\r\n\r\n<type name=\"damage_type\">\r\n  <attr name=\"damage\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"healing_type\">\r\n  <attr name=\"damage\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"fire_type\">\r\n  <attr name=\"elemental_string_attribute\" type=\"string\">fire</attr>\r\n</type>\r\n\r\n<type name=\"holy_type\">\r\n  <attr name=\"elemental_string_attribute\" type=\"string\">holy</attr>\r\n</type>\r\n\r\n<type name=\"monster_type\">\r\n</type>\r\n\r\n<type name=\"undead_type\">\r\n</type>\r\n\r\n<type name=\"spell_type\">\r\n  <attr name=\"cast\" type=\"script\">\r\n    if (DoesInherit (this, \"spell_type\") and DoesInherit (this, \"damage_type\") {\r\n      foreach (object_variable, GetDirectChildren (player.parent)) {\r\n        if (DoesInherit (object_variable, \"monster_type\")) {\r\n          if (object_variable.elemental_string_attribute = this.elemental_string_attribute) {\r\n            msg (object_variable.alias + \" is immune to \" + this.elemental_string_attribute + \", no damage done to it.\")\r\n          } else if (object_variable.elemental_string_attribute = StringDictionaryItem (game.opposing_elementals_stringdictionary_attribute, this.elemental_string_attribute) {\r\n            object_variable.current_life_intger_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute * 2\r\n            msg (object_variable.alias + \" is weak to \" + this.elemental_string_attribute + \", you do double damage to it\")\r\n          } else {\r\n            object_variable.current_life_intger_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute\r\n            msg (\"You do normal damage to \" + object_variable.alias)\r\n          }\r\n        } \r\n      }\r\n    } else if (DoesInherit (this, \"spell_type\") and DoesInherit (this, \"healing_type\")) {\r\n      ask (\"Self (yes/true) or Enemies (no/false)?\") {\r\n        if (result) {\r\n          player.current_life_integer_attribute = player.current_life_integer_attribute + this.damage_integer_attribute\r\n          msg (\"you heal yourself\")\r\n        } else {\r\n          foreach (object_variable, GetDirectChildren (player.parent)) {\r\n            if (DoesInherit (object_variable, \"monster_type\") and DoesInherit (this, \"undead_type\")) {\r\n              object_variable.current_life_integer_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute * 3\r\n              msg (this.alias + \" does 3 times damage to the undead \" + object_variable.alias)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  </attr>\r\n</type>\r\n```\r\n\"\r\n\r\n--------\r\n\r\nbut I tend to over-think stuff, so maybe he/she didn't want this stuff, but I've shown why I understood the reading of his/her post to be asking of this stuff, but I could be totally wrong about what he/she was asking for too, sighs.",
      "EditableFormat": "markdown",
      "HTML": "<p>from my reading, it doesn't sound like he/she is asking for a club, as that is what he/she was doing, and it's too cumbersome... he/she wants a more global/OOP/OOD design, so he/she isn't doing so much manual work for every Object/spell/effect/etc individually himself/herself:</p>\n<p>\"<br>\n(from Lord Palandus' OP)</p>\n<p>I'm trying to create a spellcasting system, and it is not going well at all. I have found that the only way I can \"cast\" a spell, is if I had an attribute to an object called spell, and have it a Boolean as true for the attribute added. Then I create a verb cast for that object and get a prompt, and IF it is a specific object.attribute, then the spell gets cast. Or stated in another way:</p>\n<p>cast spell ... get prompt and type in ... spell.healing ... if (expression) = spell.healing ... spell is then cast.</p>\n<p>This gets cumbersome VERY quickly as:</p>\n<p>You need an attribute for every single spell in the game.<br>\nYou need an if statement for every single spell in the game.<br>\nYou cast the spell by typing into the prompt: spell.attribute, which would look weird to a user.<br>\nSo, I'd prefer to use a command to perform spellcasting over using a verb on an object. The issue though is that, the command only allows for #object#, #text# or #exit#.<br>\n\"</p>\n<hr>\n<p>here Lord Palandus is asking about how to work with Commands:</p>\n<p>\"<br>\nSo, I'd prefer to use a command to perform spellcasting over using a verb on an object. The issue though is that, the command only allows for #object#, #text# or #exit#.<br>\n\"</p>\n<p>which I try help with this (from my previous post):</p>\n<p>\"<br>\nabout using Commands:</p>\n<p>there's a bit more code work involved with using #object#, so you can use the #text# instead and use the 'GetObject (text)' Function with it.... actually, it still has the problem with if you do't know the Object's name (only know its alias for example, as the object's name is hidden from the person playing the game)... see Pertex' fix at bottom. If I remember right, using #object# will handle this for you automatically (if it can't find an Object's name of the input, it'll see if it can find an Object's alias of the input), but using #object# has the problem of the if out of scope (which using #text# and GetObject(text) doesn't)... both #text# and #object# have their pros and cons, lol.</p>\n<pre><code>&lt;command name=\"cast_command\"&gt;\n  &lt;pattern&gt;cast #text_parameter#&lt;/pattern&gt;\n  &lt;script&gt;\n    object_variable = GetObject (text_parameter)\n    if (DoesInherit (object_variable, \"spell_type\")) {\n      do (object_variable, \"cast\")\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n<p>Pertex also provided this for handling non-accessable-Objects-for-a-Command:</p>\n<p>(from my combat code, when I was trying to learn combat coding for the first time, using Pertex' Combat library as a guiding structure for my combat code)</p>\n<pre><code>enemy_variable = GetObject (text)\nif (enemy_variable = null) {\n  foreach (object_variable, AllObjects ()) {\n    if (object_variable.alias = text) {\n      enemy_variable = object_variable\n    }\n  }\n}\nif (enemy_variable = null) {\n  msg (\"There is no \" + text + \" here.\")\n}\n</code></pre>\n<p>\"</p>\n<hr>\n<p>and he's/she's (Lord Palandus is) asking for a way to not do so much manual work on every individual thing here:</p>\n<p>\"<br>\nI'm trying to create a spellcasting system, and it is not going well at all. I have found that the only way I can \"cast\" a spell, is if I had an attribute to an object called spell, and have it a Boolean as true for the attribute added. Then I create a verb cast for that object and get a prompt, and IF it is a specific object.attribute, then the spell gets cast. Or stated in another way:</p>\n<p>cast spell ... get prompt and type in ... spell.healing ... if (expression) = spell.healing ... spell is then cast.</p>\n<p>This gets cumbersome VERY quickly as:</p>\n<p>You need an attribute for every single spell in the game.<br>\nYou need an if statement for every single spell in the game.<br>\nYou cast the spell by typing into the prompt: spell.attribute, which would look weird to a user.<br>\n\"</p>\n<p>which I try to help with giving one method of reducing the manual work of a spell system:</p>\n<p>(from my previous post)</p>\n<p>(this is very poor code, Pixie and his library is much better, but this gives some idea/look into this stuff, which Pixie does much better with in his code/library)</p>\n<p>\"<br>\nyou can use 'Object Types' and have the casting Script Attribute's name be the same for all spells, thus letting you cast any spell, for example:</p>\n<pre><code>&lt;object name=\"fireball\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n  &lt;inherit name=\"fire_type\" /&gt;\n  &lt;inherit name=\"damage_type\" /&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;50&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"healing\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n  &lt;inherit name=\"holy_type\" /&gt;\n  &lt;inherit name=\"healing_type\" /&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;25&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=\"damage_type\"&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"healing_type\"&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"fire_type\"&gt;\n  &lt;attr name=\"elemental_string_attribute\" type=\"string\"&gt;fire&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"holy_type\"&gt;\n  &lt;attr name=\"elemental_string_attribute\" type=\"string\"&gt;holy&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"monster_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"undead_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"spell_type\"&gt;\n  &lt;attr name=\"cast\" type=\"script\"&gt;\n    if (DoesInherit (this, \"spell_type\") and DoesInherit (this, \"damage_type\") {\n      foreach (object_variable, GetDirectChildren (player.parent)) {\n        if (DoesInherit (object_variable, \"monster_type\")) {\n          if (object_variable.elemental_string_attribute = this.elemental_string_attribute) {\n            msg (object_variable.alias + \" is immune to \" + this.elemental_string_attribute + \", no damage done to it.\")\n          } else if (object_variable.elemental_string_attribute = StringDictionaryItem (game.opposing_elementals_stringdictionary_attribute, this.elemental_string_attribute) {\n            object_variable.current_life_intger_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute * 2\n            msg (object_variable.alias + \" is weak to \" + this.elemental_string_attribute + \", you do double damage to it\")\n          } else {\n            object_variable.current_life_intger_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute\n            msg (\"You do normal damage to \" + object_variable.alias)\n          }\n        } \n      }\n    } else if (DoesInherit (this, \"spell_type\") and DoesInherit (this, \"healing_type\")) {\n      ask (\"Self (yes/true) or Enemies (no/false)?\") {\n        if (result) {\n          player.current_life_integer_attribute = player.current_life_integer_attribute + this.damage_integer_attribute\n          msg (\"you heal yourself\")\n        } else {\n          foreach (object_variable, GetDirectChildren (player.parent)) {\n            if (DoesInherit (object_variable, \"monster_type\") and DoesInherit (this, \"undead_type\")) {\n              object_variable.current_life_integer_attribute = object_variable.current_life_integer_attribute - this.damage_integer_attribute * 3\n              msg (this.alias + \" does 3 times damage to the undead \" + object_variable.alias)\n            }\n          }\n        }\n      }\n    }\n  &lt;/attr&gt;\n&lt;/type&gt;\n</code></pre>\n<p>\"</p>\n<hr>\n<p>but I tend to over-think stuff, so maybe he/she didn't want this stuff, but I've shown why I understood the reading of his/her post to be asking of this stuff, but I could be totally wrong about what he/she was asking for too, sighs.</p>\n\n",
      "PostDate": "2017-05-20T08:05:21.1924806Z",
      "LastEditDate": null
    },
    {
      "PostId": "1f74e254-b87f-4820-99bf-c7404f61081f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "using OOP/OOD stuff like Commands, Functions, Object Types, scripting (having quest generate stuff for you: when the game play begins: via having it in the 'start' Script of the 'game' Game Settings Object or for Game Book on your first page, instead of you coding in everything individuallly yourself in the GUI/Editor or in-code), and Lists/Dictionaries/iteration/recursion/looping/etc, is very advanced and not easy stuff, far more advanced then what the basic GUI/Editor functionality you learn through the tutorial.\r\n\r\nnot easy for someone just starting out with quest and especially for someone new to coding/programming. This is really a lot of advanced stuff and requires a ton of logic and organizational-foresight to have everything working correctly together for OOD/OOP (which I highly struggle at myself - I failed the Data Structures / OOP / OOD programming class: abstract chained links, dictionaries, maps, etc etc etc. my brain just wasn't able to jump from proceedural stuff into this OOP level of design and synchronization of everything together: abstract encapsulation, sighs)\r\n\r\n-------------\r\n\r\nif we could see Lord Palandus' code, we can help him/her more specifically/simplistically/targetted/concisely, but right now, we just got a vague idea from his/her post's content/description, so our responses/posts are also quite thus generalized and not specific/simplistic/targeted/concise for what he/she wants and/or how to help him/her with learning whatever the new stuff is that he/she needs for what he/she wants to do, to improve his/her coding design.",
      "EditableFormat": "markdown",
      "HTML": "<p>using OOP/OOD stuff like Commands, Functions, Object Types, scripting (having quest generate stuff for you: when the game play begins: via having it in the 'start' Script of the 'game' Game Settings Object or for Game Book on your first page, instead of you coding in everything individuallly yourself in the GUI/Editor or in-code), and Lists/Dictionaries/iteration/recursion/looping/etc, is very advanced and not easy stuff, far more advanced then what the basic GUI/Editor functionality you learn through the tutorial.</p>\n<p>not easy for someone just starting out with quest and especially for someone new to coding/programming. This is really a lot of advanced stuff and requires a ton of logic and organizational-foresight to have everything working correctly together for OOD/OOP (which I highly struggle at myself - I failed the Data Structures / OOP / OOD programming class: abstract chained links, dictionaries, maps, etc etc etc. my brain just wasn't able to jump from proceedural stuff into this OOP level of design and synchronization of everything together: abstract encapsulation, sighs)</p>\n<hr>\n<p>if we could see Lord Palandus' code, we can help him/her more specifically/simplistically/targetted/concisely, but right now, we just got a vague idea from his/her post's content/description, so our responses/posts are also quite thus generalized and not specific/simplistic/targeted/concise for what he/she wants and/or how to help him/her with learning whatever the new stuff is that he/she needs for what he/she wants to do, to improve his/her coding design.</p>\n\n",
      "PostDate": "2017-05-20T08:34:19.6217606Z",
      "LastEditDate": null
    },
    {
      "PostId": "44b5fc14-0f6a-4a1d-8b59-81369f1da9bf",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "it's interesting how younger people are introduced to the new high level languages, and struggle with learning the earlier high level languages and/or low-level languages, and how older people were introduced to the earlier high level languages and/or low-level languages, but struggle with learning the new high level languages. It's like younger people struggle in learning what old people know, and old people struggle in learning what new people know. I'm not exactly too young myself... I'm jsut now trying to learn computers, and am trying to learn programming... but I am a complete dinosaur with these mobile devices and their apps... I just have a cell phone for emergences, but I otherwise never use it, and I definately don't have nor use any of these mobile devices: ipods, ipads, tablets, etc etc etc... At some point, I need to learn mobile devices, but right now, I'm just trying to learn the computer itself, programming, networking, IT / OS / computer system, security, and etc... sighs. Unfortunately, I never really knew much about computers when I was younger, never tried to learn them, only wrote school papers on them and played games and only used internet casually, sighs... lots of catching up to do... sighs.",
      "EditableFormat": "markdown",
      "HTML": "<p>it's interesting how younger people are introduced to the new high level languages, and struggle with learning the earlier high level languages and/or low-level languages, and how older people were introduced to the earlier high level languages and/or low-level languages, but struggle with learning the new high level languages. It's like younger people struggle in learning what old people know, and old people struggle in learning what new people know. I'm not exactly too young myself... I'm jsut now trying to learn computers, and am trying to learn programming... but I am a complete dinosaur with these mobile devices and their apps... I just have a cell phone for emergences, but I otherwise never use it, and I definately don't have nor use any of these mobile devices: ipods, ipads, tablets, etc etc etc... At some point, I need to learn mobile devices, but right now, I'm just trying to learn the computer itself, programming, networking, IT / OS / computer system, security, and etc... sighs. Unfortunately, I never really knew much about computers when I was younger, never tried to learn them, only wrote school papers on them and played games and only used internet casually, sighs... lots of catching up to do... sighs.</p>\n\n",
      "PostDate": "2017-05-20T08:50:55.575555Z",
      "LastEditDate": "2017-05-20T08:52:22.8040178Z"
    },
    {
      "PostId": "52ce8725-89a6-4f55-b05f-c312009106f2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "anyways, back on subject...\r\n\r\nwe'd be happy to explain and help with understanding and work with you in using these things if you don't know how to use them:\r\n\r\nObject Types (quest's user-level groups/classes/'templates --- not to be confused with quest's Template Element'), Commands (pattern:Arguments/Parameters and etc), Functions (Arguments/Parameters and/or directly returned value outputs) / Delegates (Script Attributes with having the same Arguments/Parameters and/or return value outputs as Functions), List/Dictionary Attributes and their usage of iteration(foreach/for/while)/recursion/looping/etc, and etc advanced concepts/features of quest.\r\n\r\n-----\r\n\r\nwe need to take one thing at a time, of course, but we can go into the specifics on all of these things, teaching you how to use them.",
      "EditableFormat": "markdown",
      "HTML": "<p>anyways, back on subject...</p>\n<p>we'd be happy to explain and help with understanding and work with you in using these things if you don't know how to use them:</p>\n<p>Object Types (quest's user-level groups/classes/'templates --- not to be confused with quest's Template Element'), Commands (pattern:Arguments/Parameters and etc), Functions (Arguments/Parameters and/or directly returned value outputs) / Delegates (Script Attributes with having the same Arguments/Parameters and/or return value outputs as Functions), List/Dictionary Attributes and their usage of iteration(foreach/for/while)/recursion/looping/etc, and etc advanced concepts/features of quest.</p>\n<hr>\n<p>we need to take one thing at a time, of course, but we can go into the specifics on all of these things, teaching you how to use them.</p>\n\n",
      "PostDate": "2017-05-20T09:07:44.2063339Z",
      "LastEditDate": null
    },
    {
      "PostId": "3d0660b6-dd2f-4ecf-b3fb-c2fd2b657729",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here is what I think the OP wants...\r\nThe troll hits you for 12 points, you have 5 HP remaining.\r\n/> cast heal\r\nYou heal for 8 points. you are now at 13 HP.\r\nThe troll swings, but misses.\r\n/> cast fireball\r\nYou fry the troll for 22 points. \r\nThe troll fall over into a burning pile.\r\nYou get 53 XP from the battle.\r\n\r\nOK, Question...\r\nHow does Quest read the command bar?\r\nWhen I type in \"cast heal\", what/ where is that processed?\r\nCould a \"switch\" be used to read the command bar to determine what was typed?\r\nI know Quest handles most of the parsing itself, (I bet this would be a command)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Here is what I think the OP wants...<br>\nThe troll hits you for 12 points, you have 5 HP remaining.<br>\n/&gt; cast heal<br>\nYou heal for 8 points. you are now at 13 HP.<br>\nThe troll swings, but misses.<br>\n/&gt; cast fireball<br>\nYou fry the troll for 22 points.<br>\nThe troll fall over into a burning pile.<br>\nYou get 53 XP from the battle.</p>\n<p>OK, Question...<br>\nHow does Quest read the command bar?<br>\nWhen I type in \"cast heal\", what/ where is that processed?<br>\nCould a \"switch\" be used to read the command bar to determine what was typed?<br>\nI know Quest handles most of the parsing itself, (I bet this would be a command)</p>\n\n",
      "PostDate": "2017-05-20T20:53:29.9797611Z",
      "LastEditDate": null
    },
    {
      "PostId": "2de818f0-cc13-486c-872d-6364b07a6d8c",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This may be the answer...\r\nhttp://docs.textadventures.co.uk/quest/commands_with_unusual.html\r\nor this\r\nhttp://docs.textadventures.co.uk/quest/using_verbs.html\r\n(But I am at a loss with them!!! :(  )\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>This may be the answer...<br>\nhttp://docs.textadventures.co.uk/quest/commands_with_unusual.html<br>\nor this<br>\nhttp://docs.textadventures.co.uk/quest/using_verbs.html<br>\n(But I am at a loss with them!!! :(  )</p>\n\n",
      "PostDate": "2017-05-21T03:33:26.80294Z",
      "LastEditDate": "2017-05-21T04:03:04.6013476Z"
    },
    {
      "PostId": "3ede99a2-b4a3-472b-aaaf-f7b8bb95db95",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's two ways to get typed-in input:\r\n\r\n1. the 'get input' Script/Function: http://docs.textadventures.co.uk/quest/scripts/get_input.html\r\n2. the 'Command' Element: http://docs.textadventures.co.uk/quest/elements/command.html\r\n\r\n-----\r\n\r\nthe 'Command' element:\r\n\r\n```\r\n<command name=\"heal_command\">\r\n\r\n  <pattern>heal #object_parameter_1#</pattern> // this is what you type in (into the command/text box during game play), to activate this command, the first word(s) acts as like the 'activator' determining which Command is to be used/activated, so make sure its clearly unique so you don't get into parser issues... and the #object/objectXXX/text/textXXX# are Parameters that store your typed-in input (used as Arguments), to be used in the Command's scripting, just like a Function's Parameter uses Arguments/inputs in the Function's 'call (usage)', using them in the Function's scripting. The parser requires that your '#XXX#' starts with 'object' or 'text', so you can use: #object# or #text# or #object_parameter_1# or #object1# or #text_parameter_1# or #text1# (I like being descriptive, so I'd personally use this name for it: #text_parameter_1#, #text_parameter_2#, #object_parameter_1#, #object_parameter_2#. You can have as many Parameters as you want, using whatever patterns you want: mix #object1# and #object2# and #object3#, or: mix #object1#, #object2#, and #object3#, etc etc etc. You can use #object# and #text# together too, they don't all have to be #object# or #text#. Finally, when you use the Parameter in the Command's scripting, you remove the # symbols from it: as a Parameter in the pattern: #text#, but as scripting: msg (text). The # symbols are used by the pattern's parsing to tell it that these typed-in inputs are to be used as (stored into the) Parameters.\r\n\r\n  <script>\r\n    object_parameter_1.current_life_integer_attribute = object_parameter_1.current_life_integer_attribute + 100\r\n    msg (\"You healed \" + object_parameter_1.name + \" for +100 life\")\r\n  </script>\r\n\r\n</command>\r\n```\r\n\r\n-----------\r\n\r\nI used simplistic scripting for the Command above, but everything you can do in normal scripting (Verbs/Functions), you can do with a Comamnd's scripting, so you can certainly use the 'switch' block, for example (a bit more complex scripting Command):\r\n\r\n```\r\n<command name=\"cast_command\">\r\n  <pattern> cast #object_parameter_1# on #object_parameter_2#</pattern>\r\n  <script>\r\n    if (DoesInherit (object_parameter_1, \"damage_spell_type\") and object_parameter_1.parent = player and object_parameter_2.parent = player.parent and DoesInherit (object_parameter_2, \"monster_type\") and not object_parameter_2.condition_string_attribute = \"dead\") {\r\n      switch (object_parameter_1.name) {\r\n        case (\"fireball\") {\r\n          object_parameter_2.current_life_integer_attribute = object_parameter_2.current_life_integer_attribute - 50\r\n        }\r\n        case (\"armaggeddon\") {\r\n          object_parameter_2.current_life_integer_attribute = object_parameter_2.current_life_integer_attribute - 999\r\n        }\r\n      }\r\n    }\r\n  </script>\r\n</command>\r\n\r\n<object name=\"room\">\r\n</object>\r\n\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"fireball\">\r\n  <inherit name=\"damage_spell_type\" />\r\n  <attr name=\"parent\" type=\"object\">player</attr>\r\n</object>\r\n\r\n<object name=\"armaggeddon\">\r\n  <inherit name=\"damage_spell_type\" />\r\n  <attr name=\"parent\" type=\"object\">player</attr>\r\n</object>\r\n\r\n<object name=\"orc\">\r\n  <inherit name=\"monster_type\" />\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"condition_string_attribute\" type=\"string\">normal</attr>\r\n</object>\r\n\r\n<type name=\"damage_spell_type\">\r\n</type>\r\n\r\n<type name=\"monster_type\">\r\n</type>\r\n```\r\n\r\n-------\r\n\r\nask if you need any questions... how the Parameters work is quite confusing... and I probably didn't make it any clearer trying to explain it, lol. So feel free to ask about anything... and I'll try to do a better job this next time around, lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>there's two ways to get typed-in input:</p>\n<ol>\n<li>the 'get input' Script/Function: http://docs.textadventures.co.uk/quest/scripts/get_input.html</li>\n<li>the 'Command' Element: http://docs.textadventures.co.uk/quest/elements/command.html</li>\n</ol>\n<hr>\n<p>the 'Command' element:</p>\n<pre><code>&lt;command name=\"heal_command\"&gt;\n\n  &lt;pattern&gt;heal #object_parameter_1#&lt;/pattern&gt; // this is what you type in (into the command/text box during game play), to activate this command, the first word(s) acts as like the 'activator' determining which Command is to be used/activated, so make sure its clearly unique so you don't get into parser issues... and the #object/objectXXX/text/textXXX# are Parameters that store your typed-in input (used as Arguments), to be used in the Command's scripting, just like a Function's Parameter uses Arguments/inputs in the Function's 'call (usage)', using them in the Function's scripting. The parser requires that your '#XXX#' starts with 'object' or 'text', so you can use: #object# or #text# or #object_parameter_1# or #object1# or #text_parameter_1# or #text1# (I like being descriptive, so I'd personally use this name for it: #text_parameter_1#, #text_parameter_2#, #object_parameter_1#, #object_parameter_2#. You can have as many Parameters as you want, using whatever patterns you want: mix #object1# and #object2# and #object3#, or: mix #object1#, #object2#, and #object3#, etc etc etc. You can use #object# and #text# together too, they don't all have to be #object# or #text#. Finally, when you use the Parameter in the Command's scripting, you remove the # symbols from it: as a Parameter in the pattern: #text#, but as scripting: msg (text). The # symbols are used by the pattern's parsing to tell it that these typed-in inputs are to be used as (stored into the) Parameters.\n\n  &lt;script&gt;\n    object_parameter_1.current_life_integer_attribute = object_parameter_1.current_life_integer_attribute + 100\n    msg (\"You healed \" + object_parameter_1.name + \" for +100 life\")\n  &lt;/script&gt;\n\n&lt;/command&gt;\n</code></pre>\n<hr>\n<p>I used simplistic scripting for the Command above, but everything you can do in normal scripting (Verbs/Functions), you can do with a Comamnd's scripting, so you can certainly use the 'switch' block, for example (a bit more complex scripting Command):</p>\n<pre><code>&lt;command name=\"cast_command\"&gt;\n  &lt;pattern&gt; cast #object_parameter_1# on #object_parameter_2#&lt;/pattern&gt;\n  &lt;script&gt;\n    if (DoesInherit (object_parameter_1, \"damage_spell_type\") and object_parameter_1.parent = player and object_parameter_2.parent = player.parent and DoesInherit (object_parameter_2, \"monster_type\") and not object_parameter_2.condition_string_attribute = \"dead\") {\n      switch (object_parameter_1.name) {\n        case (\"fireball\") {\n          object_parameter_2.current_life_integer_attribute = object_parameter_2.current_life_integer_attribute - 50\n        }\n        case (\"armaggeddon\") {\n          object_parameter_2.current_life_integer_attribute = object_parameter_2.current_life_integer_attribute - 999\n        }\n      }\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;object name=\"room\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"fireball\"&gt;\n  &lt;inherit name=\"damage_spell_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"armaggeddon\"&gt;\n  &lt;inherit name=\"damage_spell_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"condition_string_attribute\" type=\"string\"&gt;normal&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=\"damage_spell_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"monster_type\"&gt;\n&lt;/type&gt;\n</code></pre>\n<hr>\n<p>ask if you need any questions... how the Parameters work is quite confusing... and I probably didn't make it any clearer trying to explain it, lol. So feel free to ask about anything... and I'll try to do a better job this next time around, lol.</p>\n\n",
      "PostDate": "2017-05-21T05:39:04.3264405Z",
      "LastEditDate": "2017-05-21T05:45:23.7691625Z"
    },
    {
      "PostId": "fde36720-b452-44e9-a84b-96656542df8e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Commands as direct children of the 'asl' tag block (aka they're NOT inside of a Room Object) are global, you can activate them anywhere in your game.\r\n\r\nCommands that are inside of a Room Object, can only be activated when you're in that Room Object: they're local to that Room Object.\r\n\r\n---------\r\n\r\nVerbs are actually Commands, but further specified/limited/specialized in scope to just be local to the Object you add/attach them into/to. Verbs work as they do, as they're also just Script Attributes (have Script Attribute properties) with extra coding for giving them their Verb functionality (being able to see them as buttons/hyperlinks via adding them to the 'displayverbs' and/or 'inventoryverbs' Stringlist Attributes) as opposed to just normal Script Attributes, and as stated, they're also just specialized Commands, so they're also connected to Commands, though I'm not quite sure on how to get some action to work as both a Verb and as a Command, but it can be done. I'm still confused by it myself.",
      "EditableFormat": "markdown",
      "HTML": "<p>Commands as direct children of the 'asl' tag block (aka they're NOT inside of a Room Object) are global, you can activate them anywhere in your game.</p>\n<p>Commands that are inside of a Room Object, can only be activated when you're in that Room Object: they're local to that Room Object.</p>\n<hr>\n<p>Verbs are actually Commands, but further specified/limited/specialized in scope to just be local to the Object you add/attach them into/to. Verbs work as they do, as they're also just Script Attributes (have Script Attribute properties) with extra coding for giving them their Verb functionality (being able to see them as buttons/hyperlinks via adding them to the 'displayverbs' and/or 'inventoryverbs' Stringlist Attributes) as opposed to just normal Script Attributes, and as stated, they're also just specialized Commands, so they're also connected to Commands, though I'm not quite sure on how to get some action to work as both a Verb and as a Command, but it can be done. I'm still confused by it myself.</p>\n\n",
      "PostDate": "2017-05-21T05:55:15.7200369Z",
      "LastEditDate": null
    },
    {
      "PostId": "2a69b12a-2fd0-4a36-ad41-750a69803e69",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's some links on Commands:\r\n\r\nhttp://docs.textadventures.co.uk/quest/tutorial/custom_commands.html\r\n\r\nhttp://docs.textadventures.co.uk/quest/tutorial/custom_commands.html\r\nhttp://docs.textadventures.co.uk/quest///commands_with_unusual.html\r\nhttp://docs.textadventures.co.uk/quest/complex_commands.html\r\nhttp://docs.textadventures.co.uk/quest/elements/command.html\r\nhttp://textadventures.co.uk/forum/quest/topic/ij9pztcxquaeiozydrxi_a/allow-a-command-to-require-object1-for-an-action-on-object2\r\nhttp://docs.textadventures.co.uk/quest/tutorial/anatomy_of_a_quest_game.html (tiny part on Commands: see 'Verbs and Commands' small section)\r\nhttp://textadventures.co.uk/forum/quest/topic/yplgutcqlk_vdtn3tc4ksg/command-patterns\r\nhttp://textadventures.co.uk/forum/quest/topic/yfg1yancq0meniur8hqoba/adding-other-verbs-to-default-commands\r\nhttp://textadventures.co.uk/forum/quest/topic/2669/verb-vs-command (see Alex' post, he explains Commands well)\r\nhttp://textadventures.co.uk/forum/quest/topic/1570/what-is-the-difference-between-verbs-and-commands (another of Alex' posts on Commands)",
      "EditableFormat": "markdown",
      "HTML": "<p>here's some links on Commands:</p>\n<p>http://docs.textadventures.co.uk/quest/tutorial/custom_commands.html</p>\n<p>http://docs.textadventures.co.uk/quest/tutorial/custom_commands.html<br>\nhttp://docs.textadventures.co.uk/quest///commands_with_unusual.html<br>\nhttp://docs.textadventures.co.uk/quest/complex_commands.html<br>\nhttp://docs.textadventures.co.uk/quest/elements/command.html<br>\nhttp://textadventures.co.uk/forum/quest/topic/ij9pztcxquaeiozydrxi_a/allow-a-command-to-require-object1-for-an-action-on-object2<br>\nhttp://docs.textadventures.co.uk/quest/tutorial/anatomy_of_a_quest_game.html (tiny part on Commands: see 'Verbs and Commands' small section)<br>\nhttp://textadventures.co.uk/forum/quest/topic/yplgutcqlk_vdtn3tc4ksg/command-patterns<br>\nhttp://textadventures.co.uk/forum/quest/topic/yfg1yancq0meniur8hqoba/adding-other-verbs-to-default-commands<br>\nhttp://textadventures.co.uk/forum/quest/topic/2669/verb-vs-command (see Alex' post, he explains Commands well)<br>\nhttp://textadventures.co.uk/forum/quest/topic/1570/what-is-the-difference-between-verbs-and-commands (another of Alex' posts on Commands)</p>\n\n",
      "PostDate": "2017-05-21T06:15:17.0052712Z",
      "LastEditDate": null
    },
    {
      "PostId": "ea30399b-7c32-48b9-9965-3835fbf66b9d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There are (at least) three ways to approach this for the command pattern:\r\n\r\n> cast healing\r\n\r\n> cast #object#\r\n\r\n> cast #text#\r\n\r\nThe first is the simplest, but you will need to do one command for each spell in the game (which may not be a big deal). The problem with the with the second is the spells need to be objects in the player inventory, so will add to the inventory list (and verbs are a shortcut to this, so this applies to them too). The problem with the third is you then have to match the text to spells yourself (which the \"[Commands with Unusual Scope](http://docs.textadventures.co.uk/quest/commands_with_unusual.html)\" page DarkLizerd linked to takes you through). I personally would (and did) do the last.",
      "EditableFormat": "markdown",
      "HTML": "<p>There are (at least) three ways to approach this for the command pattern:</p>\n<blockquote>\n<p>cast healing</p>\n</blockquote>\n<blockquote>\n<p>cast #object#</p>\n</blockquote>\n<blockquote>\n<p>cast #text#</p>\n</blockquote>\n<p>The first is the simplest, but you will need to do one command for each spell in the game (which may not be a big deal). The problem with the with the second is the spells need to be objects in the player inventory, so will add to the inventory list (and verbs are a shortcut to this, so this applies to them too). The problem with the third is you then have to match the text to spells yourself (which the \"<a href=\"http://docs.textadventures.co.uk/quest/commands_with_unusual.html\">Commands with Unusual Scope</a>\" page DarkLizerd linked to takes you through). I personally would (and did) do the last.</p>\n\n",
      "PostDate": "2017-05-21T07:21:08.0438508Z",
      "LastEditDate": "2017-05-21T07:21:53.2355047Z"
    },
    {
      "PostId": "a4e94468-550d-4686-a0f5-e3cda46771e0",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, again thanks for all the replies, but all of your responses, again, require me to do coding in JavaScript, which I do not understand. I barely understand C++; I can read it, but I can't code it. All of the links, requires one to do coding. None of the links explains how to do these things, IN ENGINE GUI EDITOR, over doing it manually with code.\r\n\r\nI've decided on an inelegant, but workable solution with what I can do with the in engine GUI editor. Any self-cast spells, cast on the player only, will be made as \"verbs\" for the player object; ie \"cast healing on player\". All combative spells will be done in the form of commands, such as cast firebolt at #object#. A very cumbersome, an inelegant method, but it works, as I've tested it. Will involve a lot of work on my end, but it works, and I can do it in the GUI editor WITHOUT having to resort to doing JavaScript coding.\r\n\r\nIf someone can offer me a solution that can be done exclusively in the in engine GUI editor and doesn't require coding in JavaScript, and only using existing functions or variables in engine, then I'd be happy to hear it and look at changing my system around. But, as most of the more advanced stuff for Quest requires doing things in JavaScript, I doubt very much that you guys will be able to find anything. So... yah, inelegant, cumbersome system for spellcasting it is!\r\n\r\nEDIT: \r\n\r\nOn the other hand, the way I intended to use spellcasting in my game, it might be best if I did anyway create a separate command for each spell. So, even if I did have the option to do it some other way, this might be the best possible solution anyway.\r\n\r\nWhat I mean is that in my game, there is three different playstyles, combat/stealth/magic, and each gives specific loot depending on how the target foe is bypassed; combat kills the target, stealth pickpockets them and leaves the room, and magic damages the target and then casts a spell that disables them (ie paralysis, sleep, polymorph, etc) instead of outright killing them. And as each disabling spell has different conditional effects that require to be satisfied in order to occur, its probably for the best that each spell is a separate command.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, again thanks for all the replies, but all of your responses, again, require me to do coding in JavaScript, which I do not understand. I barely understand C++; I can read it, but I can't code it. All of the links, requires one to do coding. None of the links explains how to do these things, IN ENGINE GUI EDITOR, over doing it manually with code.</p>\n<p>I've decided on an inelegant, but workable solution with what I can do with the in engine GUI editor. Any self-cast spells, cast on the player only, will be made as \"verbs\" for the player object; ie \"cast healing on player\". All combative spells will be done in the form of commands, such as cast firebolt at #object#. A very cumbersome, an inelegant method, but it works, as I've tested it. Will involve a lot of work on my end, but it works, and I can do it in the GUI editor WITHOUT having to resort to doing JavaScript coding.</p>\n<p>If someone can offer me a solution that can be done exclusively in the in engine GUI editor and doesn't require coding in JavaScript, and only using existing functions or variables in engine, then I'd be happy to hear it and look at changing my system around. But, as most of the more advanced stuff for Quest requires doing things in JavaScript, I doubt very much that you guys will be able to find anything. So... yah, inelegant, cumbersome system for spellcasting it is!</p>\n<p>EDIT:</p>\n<p>On the other hand, the way I intended to use spellcasting in my game, it might be best if I did anyway create a separate command for each spell. So, even if I did have the option to do it some other way, this might be the best possible solution anyway.</p>\n<p>What I mean is that in my game, there is three different playstyles, combat/stealth/magic, and each gives specific loot depending on how the target foe is bypassed; combat kills the target, stealth pickpockets them and leaves the room, and magic damages the target and then casts a spell that disables them (ie paralysis, sleep, polymorph, etc) instead of outright killing them. And as each disabling spell has different conditional effects that require to be satisfied in order to occur, its probably for the best that each spell is a separate command.</p>\n\n",
      "PostDate": "2017-05-21T17:48:07.1740268Z",
      "LastEditDate": "2017-05-21T17:57:56.1767693Z"
    },
    {
      "PostId": "c8010a35-12a7-4b82-99c3-4f03f004f4bd",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would just treat the spell as a regular attack function.\r\n\r\nThe only way I know to do it is to use separate commands and functions. (Or just one really big function, I guess.)\r\n\r\nI took a look at The Pixie's spell library. Most of it is just text and attributes.\r\n\r\nFor instance, here is a \"small\" sampling of that Zombie code (small compared to the rest that is). I deleted the turn script, (turned it into a function) but you can still find Pixie's original \"game code\" which does have a turn script.\r\nLink to the game (mine): http://textadventures.co.uk/games/view/kmwqh7zyrkcrseuqrzuigg/zombie-2\r\n(I use the web version)\r\n\r\nattack command\r\nattack #object#\r\nif (not HasBoolean(object, \"dead\")) {\r\n  msg (\"That's not something you can attack.\")\r\n}\r\nelse if (object.dead) {\r\n  msg (\"That one is already dead.\")\r\n}\r\nelse {\r\n  if (player.equipped = null) {\r\n    DoAttack (player, player, object)\r\n    attackturnscript\r\n  }\r\n  else {\r\n    DoAttack (player, player.equipped, object, false)\r\n    attackturnscript\r\n  }\r\n}\r\nDoAttack\r\n(parameters: attacker; weapon; target; firearm)\r\nif (firearm) {\r\n  damageatt = \"firearmdamage\"\r\n  attackatt = \"firearmattack\"\r\n  weapon.ammo = weapon.ammo - 1\r\n}\r\nelse {\r\n  damageatt = \"damage\"\r\n  attackatt = \"attack\"\r\n}\r\nroll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\r\nif (HasInt(weapon, damageatt)) {\r\n  damage = GetInt(weapon, damageatt)\r\n}\r\nelse {\r\n  damage = DiceRoll(GetString(weapon, damageatt))\r\n}\r\ndamage = damage * (100 - target.armour) / 100\r\nif (damage < 1) {\r\n  damage = 1\r\n}\r\nif (roll > 15) {\r\n  damage = damage * 3\r\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and get a critical (\" + damage + \" hits)!\")\r\n  target.hitpoints = target.hitpoints - damage\r\n}\r\nelse if (roll > 4) {\r\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and hit (\" + damage + \" hits).\")\r\n  target.hitpoints = target.hitpoints - damage\r\n}\r\nelse {\r\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and miss...\")\r\n}\r\nattackturnscript (I turned it into a function)\r\nif (not game.notarealturn) {\r\n  list = NewObjectList()\r\n  foreach (obj, GetDirectChildren(player.parent)) {\r\n    if (HasBoolean(obj, \"dead\")) {\r\n      if (not obj.dead) {\r\n        DoAttack (obj, obj, player, false)\r\n        list add (list, obj)\r\n      }\r\n    }\r\n  }\r\n  foreach (obj, ListExclude(player.attackers, list)) {\r\n    if (not obj.dead and RandomChance(80)) {\r\n      obj.parent = player.parent\r\n      msg (CapFirst(obj.alias) + \" shambles into the area.\")\r\n      list add (list, obj)\r\n    }\r\n  }\r\n  player.attackers = list\r\n}\r\ngame.notarealturn = false",
      "EditableFormat": "markdown",
      "HTML": "<p>I would just treat the spell as a regular attack function.</p>\n<p>The only way I know to do it is to use separate commands and functions. (Or just one really big function, I guess.)</p>\n<p>I took a look at The Pixie's spell library. Most of it is just text and attributes.</p>\n<p>For instance, here is a \"small\" sampling of that Zombie code (small compared to the rest that is). I deleted the turn script, (turned it into a function) but you can still find Pixie's original \"game code\" which does have a turn script.<br>\nLink to the game (mine): http://textadventures.co.uk/games/view/kmwqh7zyrkcrseuqrzuigg/zombie-2<br>\n(I use the web version)</p>\n<p>attack command<br>\nattack #object#<br>\nif (not HasBoolean(object, \"dead\")) {<br>\nmsg (\"That's not something you can attack.\")<br>\n}<br>\nelse if (object.dead) {<br>\nmsg (\"That one is already dead.\")<br>\n}<br>\nelse {<br>\nif (player.equipped = null) {<br>\nDoAttack (player, player, object)<br>\nattackturnscript<br>\n}<br>\nelse {<br>\nDoAttack (player, player.equipped, object, false)<br>\nattackturnscript<br>\n}<br>\n}<br>\nDoAttack<br>\n(parameters: attacker; weapon; target; firearm)<br>\nif (firearm) {<br>\ndamageatt = \"firearmdamage\"<br>\nattackatt = \"firearmattack\"<br>\nweapon.ammo = weapon.ammo - 1<br>\n}<br>\nelse {<br>\ndamageatt = \"damage\"<br>\nattackatt = \"attack\"<br>\n}<br>\nroll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence<br>\nif (HasInt(weapon, damageatt)) {<br>\ndamage = GetInt(weapon, damageatt)<br>\n}<br>\nelse {<br>\ndamage = DiceRoll(GetString(weapon, damageatt))<br>\n}<br>\ndamage = damage * (100 - target.armour) / 100<br>\nif (damage &lt; 1) {<br>\ndamage = 1<br>\n}<br>\nif (roll &gt; 15) {<br>\ndamage = damage * 3<br>\nmsg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and get a critical (\" + damage + \" hits)!\")<br>\ntarget.hitpoints = target.hitpoints - damage<br>\n}<br>\nelse if (roll &gt; 4) {<br>\nmsg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and hit (\" + damage + \" hits).\")<br>\ntarget.hitpoints = target.hitpoints - damage<br>\n}<br>\nelse {<br>\nmsg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and miss...\")<br>\n}<br>\nattackturnscript (I turned it into a function)<br>\nif (not game.notarealturn) {<br>\nlist = NewObjectList()<br>\nforeach (obj, GetDirectChildren(player.parent)) {<br>\nif (HasBoolean(obj, \"dead\")) {<br>\nif (not obj.dead) {<br>\nDoAttack (obj, obj, player, false)<br>\nlist add (list, obj)<br>\n}<br>\n}<br>\n}<br>\nforeach (obj, ListExclude(player.attackers, list)) {<br>\nif (not obj.dead and RandomChance(80)) {<br>\nobj.parent = player.parent<br>\nmsg (CapFirst(obj.alias) + \" shambles into the area.\")<br>\nlist add (list, obj)<br>\n}<br>\n}<br>\nplayer.attackers = list<br>\n}<br>\ngame.notarealturn = false</p>\n\n",
      "PostDate": "2017-05-22T00:10:55.3195978Z",
      "LastEditDate": "2017-05-22T00:13:34.8021755Z"
    }
  ]
}
