{
  "Topic": {
    "TopicId": "6333",
    "ForumId": "18",
    "Title": "How to use Libraries",
    "LastUpdated": "2016-05-17T12:24:06+01:00",
    "ReplyCount": 3
  },
  "Posts": [
    {
      "PostId": "42816",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[b:9qnlk29s][i:9qnlk29s]Libraries[/i:9qnlk29s][/b:9qnlk29s]\n\nIn a Quest game, libraries are used to add things to your game. By default, your game already has two libraries, Core.aslx and English.aslx (if you are using another language, you will also have one for that language). \n\nTo see what these libraries add to your game, go to the bottom left of the Quest GUI, click on [i:9qnlk29s]Filter[/i:9qnlk29s], and select [i:9qnlk29s]Show Library Elements[/i:9qnlk29s]. You will see a shed load of stuff appears in the hierarchy on the left. Everything in grey has come from a library, and if you click on it, Quest will tell you what library in a yellow banner across the top. Core.aslx adds most of the functions, all the types, commands and verbs, while English.aslx adds the templates (some of the more fundamental functions and all script commands are built-in).\n\n\n[b:9qnlk29s][i:9qnlk29s]How to Add a Library to Your Game[/i:9qnlk29s][/b:9qnlk29s]\n\nThere are several libraries available that you might want to add to your game. They are a quick way to add extra features without you doing too much work. Libraries for handling clothing, conversation and combat are good examples, but other exist not starting with the letter 'C'.\n\nTo add a library, go the bottom of the left pane in the GUI, and expand [i:9qnlk29s]Advanced[/i:9qnlk29s], then click on [i:9qnlk29s]Included Libraries[/i:9qnlk29s]. Click [i:9qnlk29s]Add[/i:9qnlk29s], and navigate to the library. Quest will copy the file to your game folder, and add a line of code to your game so the library is part of it. If the library includes enhancements to the GUI (and the three mentioned all do), save your game, close it, and re-open it, so the GUI gets updated, and the new tabs will appear.\n\nBy the way, if you are adding my Combat library, it is contained in several files; you will need to ensure they are [i:9qnlk29s]all [/i:9qnlk29s]in your game directory; Quest will not do that for you.\n\n\n[b:9qnlk29s][i:9qnlk29s]Publishing Your Game[/i:9qnlk29s][/b:9qnlk29s]\n\nWhen you use the publish tool before uploading your game, Quest creates a .quest file. This file includes everything from all the libraries you use, including Core.aslx (this means if Core.aslx is updated, it will not break your game because it will still be using the same version).\n\n\n[b:9qnlk29s][i:9qnlk29s]Conflicts and The Order of Libraries[/i:9qnlk29s][/b:9qnlk29s]\n\nIn general, if there are several things with the same name in your game, later ones will overwrite form ones. This is good as it allows you to change the fundamentals of Quest. For example, the [i:9qnlk29s]ShowRoomDescription [/i:9qnlk29s]function is used by Quest to display the description for the current room. You might want to do that differently. Just create a new function with the same name.\n\nThe upshot of this is that your libraries should be after the standard libraries. Except...\n\nTemplates (but not dynamic templates) are different. They need to go [i:9qnlk29s]before [/i:9qnlk29s]everything else, because the change happens as the game loads and needs to affect the other libraries. Therefore English.aslx goes first, then any of your libraries that change templates, then Core.aslx, and then your custom libraries.\n\nYou need to go into code to change the order, but it is pretty easy. Each is on a line on its own, and they are all at the top of the file. Here is an example:\n[code:9qnlk29s]&lt;!--Saved by Quest 5&#46;6&#46;5783&#46;24153--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Shipwise&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;UtilLib&#46;aslx&quot; /&gt;[/code:9qnlk29s]\nThe Shipwise.aslx changes the compass directions to port and starboard, and it does that by changing templates, so has to be before Core.aslx. On the other hand, UtilLib.aslx has a load of utiliy functions, some changing the standard ones, so that has to go after.\n  \nAs an aside, built-in functions and script commands cannot be overwritten; if you create a function called, for example, msg, it will be ignored. Also, note that for once filenames are not case-sensitive (everything else in Quest is).\n\n\n[b:9qnlk29s][i:9qnlk29s]How to Create Your Own Library[/i:9qnlk29s][/b:9qnlk29s]\n\nSo you want to create your own library...\n\nIt is pretty easy. Library files are just text files, so you need a text editor; I recommend Notepad++. Quest itself cannot handle them unfortunately. Like Quest itself, library files must be in XML, and [url=http&#58;//www&#46;xmlfiles&#46;com/xml/xml_syntax&#46;asp:9qnlk29s]a simple understanding of XML[/url:9qnlk29s] is useful.\n\nThe first line of the file, then, should be this:\n[code:9qnlk29s]&lt;library&gt;[/code:9qnlk29s]\nAnd the last line should be this:\n[code:9qnlk29s]&lt;/library&gt;[/code:9qnlk29s]\nEverything inbetween will be XML elements, as in the main game.\n\nThe easiest way to create those XML elements is to create them in Quest, and then cut-and-paste into your library. For example, for a new function, create the function in Quest, check it works okay, then go into the code view, cut the relevant code, paste into you library. Test again.\n\nThe only tricky bit is ensuring you get the whole XML element, but remember for a function it starts:\n[code:9qnlk29s]&lt;function&#46;&#46;&#46;[/code:9qnlk29s]\nAnd ends\n[code:9qnlk29s]&lt;/function&gt;[/code:9qnlk29s]\nAnd make sure you get whole lines.\n\nPersonally, I like to move all turn functions, verbs, commands and types into libraries, and leave objects (rooms and items) in the main game. An important point here is that you do [i:9qnlk29s]not [/i:9qnlk29s]need to plan to use libraries from the start. In fact, there is not much point until you have a fair number of functions in your game.\n\nNOTE: The point of creatingyour own libraries is you can quickly get to the code if you need to tweak something. If you prefer to use the GUI to create scripts, do not bother with your own libraries.\n\n\n[b:9qnlk29s][i:9qnlk29s]Tips for Large Games[/i:9qnlk29s][/b:9qnlk29s]\n\nIf your game is big, you might find it convenient to break it up across several libraries, so it is easier to find things. Arrange the contents of libraries systematically. For example, put commands in one library, functions in another. Notepad++ allows you to search all files in a folder, which is a big help.\n\nOnly put objects in libraries if you are sure they will not change. It is far easier to edit objects in the GUI, so generally not worth putting them in libraries.\n\nGive libraries a .xml extension. You can then tell Windows to use Notepad++ (or whatever; I have no shares in Notepad++, honest) with that file type, whilst .aslx files are opened by Quest. Obviously you need to change the code in the game to load that file, not the old file name.\n\nUse comments. In libraries you can use XML comments, which look like this (if you do this in the main game, Quest will delete them!). Make it clear enough that someone else will understand what it does - that way you will when you look at it again in three months.\n[code:9qnlk29s]  &lt;!--\n  Returns the given object list as a string in the form a one, a two, a three&#46;\n  --&gt;[/code:9qnlk29s]\nIf you have multiple libraries, organise them so those higher in the list do not require any lower in the list (i.e., do not use types or use functions in them). Quest does not care; as long as the function is there somewhere, it will be happy. However, occasionally you will screw up, and your game will not load, and you will have no idea where the error is. Create a new test game in the same folder, and add your libraries one by one, in order. When you add one and it refuses to load, the error is in that library. This will only work, however, if libraries higher do not use verbs, types, dynamic templates or functions lower in the list.\n\nWith that in mind, as a general rule, put verbs and dynamic templates at the top (but below the default libraries), followed by general functions, then types, followed by the specific function, then commands. Or put the general functions at the top, under the defaults, followed by each library dedicated to a specific part of your game, if you prefer to break it up that way. But think about it; I cannot predict what your game is, so you need to work out the details yourself.",
      "EditableFormat": "bbcode",
      "HTML": "<span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Libraries</span></span><br/><br/>In a Quest game, libraries are used to add things to your game. By default, your game already has two libraries, Core.aslx and English.aslx (if you are using another language, you will also have one for that language). <br/><br/>To see what these libraries add to your game, go to the bottom left of the Quest GUI, click on <span style=\"font-style:italic;\">Filter</span>, and select <span style=\"font-style:italic;\">Show Library Elements</span>. You will see a shed load of stuff appears in the hierarchy on the left. Everything in grey has come from a library, and if you click on it, Quest will tell you what library in a yellow banner across the top. Core.aslx adds most of the functions, all the types, commands and verbs, while English.aslx adds the templates (some of the more fundamental functions and all script commands are built-in).<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">How to Add a Library to Your Game</span></span><br/><br/>There are several libraries available that you might want to add to your game. They are a quick way to add extra features without you doing too much work. Libraries for handling clothing, conversation and combat are good examples, but other exist not starting with the letter 'C'.<br/><br/>To add a library, go the bottom of the left pane in the GUI, and expand <span style=\"font-style:italic;\">Advanced</span>, then click on <span style=\"font-style:italic;\">Included Libraries</span>. Click <span style=\"font-style:italic;\">Add</span>, and navigate to the library. Quest will copy the file to your game folder, and add a line of code to your game so the library is part of it. If the library includes enhancements to the GUI (and the three mentioned all do), save your game, close it, and re-open it, so the GUI gets updated, and the new tabs will appear.<br/><br/>By the way, if you are adding my Combat library, it is contained in several files; you will need to ensure they are <span style=\"font-style:italic;\">all </span>in your game directory; Quest will not do that for you.<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Publishing Your Game</span></span><br/><br/>When you use the publish tool before uploading your game, Quest creates a .quest file. This file includes everything from all the libraries you use, including Core.aslx (this means if Core.aslx is updated, it will not break your game because it will still be using the same version).<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Conflicts and The Order of Libraries</span></span><br/><br/>In general, if there are several things with the same name in your game, later ones will overwrite form ones. This is good as it allows you to change the fundamentals of Quest. For example, the <span style=\"font-style:italic;\">ShowRoomDescription </span>function is used by Quest to display the description for the current room. You might want to do that differently. Just create a new function with the same name.<br/><br/>The upshot of this is that your libraries should be after the standard libraries. Except...<br/><br/>Templates (but not dynamic templates) are different. They need to go <span style=\"font-style:italic;\">before </span>everything else, because the change happens as the game loads and needs to affect the other libraries. Therefore English.aslx goes first, then any of your libraries that change templates, then Core.aslx, and then your custom libraries.<br/><br/>You need to go into code to change the order, but it is pretty easy. Each is on a line on its own, and they are all at the top of the file. Here is an example:<br/><pre><code>&lt;!--Saved by Quest 5&#46;6&#46;5783&#46;24153--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Shipwise&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;UtilLib&#46;aslx&quot; /&gt;</code></pre><br/>The Shipwise.aslx changes the compass directions to port and starboard, and it does that by changing templates, so has to be before Core.aslx. On the other hand, UtilLib.aslx has a load of utiliy functions, some changing the standard ones, so that has to go after.<br/>  <br/>As an aside, built-in functions and script commands cannot be overwritten; if you create a function called, for example, msg, it will be ignored. Also, note that for once filenames are not case-sensitive (everything else in Quest is).<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">How to Create Your Own Library</span></span><br/><br/>So you want to create your own library...<br/><br/>It is pretty easy. Library files are just text files, so you need a text editor; I recommend Notepad++. Quest itself cannot handle them unfortunately. Like Quest itself, library files must be in XML, and <a href=\"http&#58;//www&#46;xmlfiles&#46;com/xml/xml_syntax&#46;asp\" rel=\"nofollow\">a simple understanding of XML</a> is useful.<br/><br/>The first line of the file, then, should be this:<br/><pre><code>&lt;library&gt;</code></pre><br/>And the last line should be this:<br/><pre><code>&lt;/library&gt;</code></pre><br/>Everything inbetween will be XML elements, as in the main game.<br/><br/>The easiest way to create those XML elements is to create them in Quest, and then cut-and-paste into your library. For example, for a new function, create the function in Quest, check it works okay, then go into the code view, cut the relevant code, paste into you library. Test again.<br/><br/>The only tricky bit is ensuring you get the whole XML element, but remember for a function it starts:<br/><pre><code>&lt;function&#46;&#46;&#46;</code></pre><br/>And ends<br/><pre><code>&lt;/function&gt;</code></pre><br/>And make sure you get whole lines.<br/><br/>Personally, I like to move all turn functions, verbs, commands and types into libraries, and leave objects (rooms and items) in the main game. An important point here is that you do <span style=\"font-style:italic;\">not </span>need to plan to use libraries from the start. In fact, there is not much point until you have a fair number of functions in your game.<br/><br/>NOTE: The point of creatingyour own libraries is you can quickly get to the code if you need to tweak something. If you prefer to use the GUI to create scripts, do not bother with your own libraries.<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Tips for Large Games</span></span><br/><br/>If your game is big, you might find it convenient to break it up across several libraries, so it is easier to find things. Arrange the contents of libraries systematically. For example, put commands in one library, functions in another. Notepad++ allows you to search all files in a folder, which is a big help.<br/><br/>Only put objects in libraries if you are sure they will not change. It is far easier to edit objects in the GUI, so generally not worth putting them in libraries.<br/><br/>Give libraries a .xml extension. You can then tell Windows to use Notepad++ (or whatever; I have no shares in Notepad++, honest) with that file type, whilst .aslx files are opened by Quest. Obviously you need to change the code in the game to load that file, not the old file name.<br/><br/>Use comments. In libraries you can use XML comments, which look like this (if you do this in the main game, Quest will delete them!). Make it clear enough that someone else will understand what it does - that way you will when you look at it again in three months.<br/><pre><code>  &lt;!--<br/>  Returns the given object list as a string in the form a one, a two, a three&#46;<br/>  --&gt;</code></pre><br/>If you have multiple libraries, organise them so those higher in the list do not require any lower in the list (i.e., do not use types or use functions in them). Quest does not care; as long as the function is there somewhere, it will be happy. However, occasionally you will screw up, and your game will not load, and you will have no idea where the error is. Create a new test game in the same folder, and add your libraries one by one, in order. When you add one and it refuses to load, the error is in that library. This will only work, however, if libraries higher do not use verbs, types, dynamic templates or functions lower in the list.<br/><br/>With that in mind, as a general rule, put verbs and dynamic templates at the top (but below the default libraries), followed by general functions, then types, followed by the specific function, then commands. Or put the general functions at the top, under the defaults, followed by each library dedicated to a specific part of your game, if you prefer to break it up that way. But think about it; I cannot predict what your game is, so you need to work out the details yourself.",
      "PostDate": "2016-05-14T17:37:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42822",
      "UserId": 0,
      "Username": "Apsalar54",
      "UserAvatar": null,
      "UserGravatar": "f9099d49140dd5c3e14c3c033ec771e8",
      "EditableText": "<!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --> Somehow I missed this post last night while I spent three hours digging through all the libraries in notepad before I found the ordering conflict that was breaking my game. Thank you for all this info.  Luckily I'm a fair hand with XML so I had some idea what to look for.  But this really helps me conceptualize more clearly how the libraries work with each other.",
      "EditableFormat": "bbcode",
      "HTML": "<!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --> Somehow I missed this post last night while I spent three hours digging through all the libraries in notepad before I found the ordering conflict that was breaking my game. Thank you for all this info.  Luckily I'm a fair hand with XML so I had some idea what to look for.  But this really helps me conceptualize more clearly how the libraries work with each other.",
      "PostDate": "2016-05-14T19:16:57+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42833",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "if worse comes to worse, just copy and paste all of your libraries' contents/code into your game file, laughs. No conflicts (for the most part) then, hehe.\n\nAs I've had (and still have) trouble with file linking with some of the coding/programming languages and/or the (grr, I'm getting old, I can't remember the name of it - compiler software, the term for it, argh), understanding how to set it up in ... such as VS, I often do this, lol.\n\nHK edit:\n\nquick google search got the answer: using 'sdk' as the search (I knew of SDK, but couldn't remember 'IDE', argh)\n\nI couldn't think of 'IDE', lol.",
      "EditableFormat": "bbcode",
      "HTML": "if worse comes to worse, just copy and paste all of your libraries' contents/code into your game file, laughs. No conflicts (for the most part) then, hehe.<br/><br/>As I've had (and still have) trouble with file linking with some of the coding/programming languages and/or the (grr, I'm getting old, I can't remember the name of it - compiler software, the term for it, argh), understanding how to set it up in ... such as VS, I often do this, lol.<br/><br/>HK edit:<br/><br/>quick google search got the answer: using 'sdk' as the search (I knew of SDK, but couldn't remember 'IDE', argh)<br/><br/>I couldn't think of 'IDE', lol.",
      "PostDate": "2016-05-15T03:31:54+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42884",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "One note about objects in libraries, which hit me and at least one other person I know of (I'm assuming this behavior hasn't been changed): if you assign an object in a library a &quot;parent&quot; attribute pointing to another object residing in the main game file (e.g. you want to break your hierarchy out but still have the parentage static), then when you save your game, Quest will pull all the objects with main-game parent references into the main game file - with the result being that you will have duplicate definitions for the objects, and the game won't load. (You can override functions with later library files, but redefining an object is an error.)\n\nIt is a bit of an edge case, and definitely a case of &quot;knowing too much for your own good&quot; if you work out how to do it. So just don't do it. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "One note about objects in libraries, which hit me and at least one other person I know of (I'm assuming this behavior hasn't been changed): if you assign an object in a library a &quot;parent&quot; attribute pointing to another object residing in the main game file (e.g. you want to break your hierarchy out but still have the parentage static), then when you save your game, Quest will pull all the objects with main-game parent references into the main game file - with the result being that you will have duplicate definitions for the objects, and the game won't load. (You can override functions with later library files, but redefining an object is an error.)<br/><br/>It is a bit of an edge case, and definitely a case of &quot;knowing too much for your own good&quot; if you work out how to do it. So just don't do it. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2016-05-17T12:24:06+01:00",
      "LastEditDate": null
    }
  ]
}
