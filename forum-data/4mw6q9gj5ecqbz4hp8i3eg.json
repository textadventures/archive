{
  "Topic": {
    "TopicId": "4mw6q9gj5ecqbz4hp8i3eg",
    "ForumId": "10",
    "Title": "Question script help ",
    "LastUpdated": "2019-02-26T14:11:53.2971014Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7d9ecdbb-ea3b-4e60-977c-8676a160207c",
      "UserId": 301405,
      "Username": "CheshireTiger",
      "AvatarUrl": "https://i.imgur.com/dGwXAqub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have an amp ask the player a yes/no question and written out responses but its giving me the same error when I test it\r\n\r\nHere's what I have:\r\n\r\nNpc dialoge\r\n- ask question\r\n- after choosing run script\r\n -- If expression result = No \r\n -- response from npc as msg\r\n-- else if expression result = Yes\r\n-- response from npc as msg\r\n\r\nOnline quest - what do I do to clear this up? Did I type in the expressions wrong?\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I have an amp ask the player a yes/no question and written out responses but its giving me the same error when I test it</p>\n<p>Here's what I have:</p>\n<p>Npc dialoge</p>\n<ul>\n<li>ask question</li>\n<li>after choosing run script<br>\n-- If expression result = No<br>\n-- response from npc as msg<br>\n-- else if expression result = Yes<br>\n-- response from npc as msg</li>\n</ul>\n<p>Online quest - what do I do to clear this up? Did I type in the expressions wrong?</p>\n\n",
      "PostDate": "2019-02-26T14:11:53.2971014Z",
      "LastEditDate": "2019-02-26T14:12:37.9160225Z",
      "link": null
    },
    {
      "PostId": "d75d3d69-84cf-457e-a412-daa882ff812b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you're using the \"ask\" or \"Ask\" function,. then the expression for the if statement should just be `result`, and the expression for the else if should be `not result` (or just use \"else\" rather than \"else if\"). In this case, you're testing if the result from the question is true or not true.\r\n\r\nIf you're using the \"show menu\" or \"ShowMenu\" function with the options \"Yes\" and \"No\", the expression for the if statement should be `result = \"Yes\"` and the expression for the else if statement should be `result = \"No\"`. In this case you're comparing the result of the question to the string `\"Yes\"` or the string `\"No\"`. The quotes are necessary to tell Quest that Yes is a string of text, not the name of an object.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you're using the \"ask\" or \"Ask\" function,. then the expression for the if statement should just be <code>result</code>, and the expression for the else if should be <code>not result</code> (or just use \"else\" rather than \"else if\"). In this case, you're testing if the result from the question is true or not true.</p>\n<p>If you're using the \"show menu\" or \"ShowMenu\" function with the options \"Yes\" and \"No\", the expression for the if statement should be <code>result = \"Yes\"</code> and the expression for the else if statement should be <code>result = \"No\"</code>. In this case you're comparing the result of the question to the string <code>\"Yes\"</code> or the string <code>\"No\"</code>. The quotes are necessary to tell Quest that Yes is a string of text, not the name of an object.</p>\n\n",
      "PostDate": "2019-02-26T16:17:53.80325Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0c109737-825f-4c41-9758-9a0d2cda25b1",
      "UserId": 301405,
      "Username": "CheshireTiger",
      "AvatarUrl": "https://i.imgur.com/dGwXAqub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok. Only name result if using menu script...thanks",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok. Only name result if using menu script...thanks</p>\n\n",
      "PostDate": "2019-02-27T01:56:43.949202Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "411f53ea-360a-49f4-9aac-7543cca016a7",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think quest automatically converts your 'ask/Ask' menu Function's selection of 'yes/no' into 'true/false':\r\n\r\nyes -> true -> result = true\r\n// or:\r\nno -> false -> result = false\r\n\r\nso, it should be:\r\n\r\n```\r\nif you select 'yes' for the menu selection:\r\n\r\nyes -> true\r\nresult = true\r\n\r\nif you select 'no' for the menu selection:\r\n\r\nno -> false\r\nresult = false\r\n\r\nand then conceptually, its:\r\n\r\n[result = either true or false, based upon what you selected]\r\n\r\nif (result = true) {\r\n  // blah scripting\r\n} else if (result = false) {\r\n  // blah scripting\r\n}\r\n\r\nand how it conceptually works:\r\n\r\nif ( [result = true] = true ) { // if ( [true] = true )\r\n  // blah scripting\r\n} else if ( [result = false] = false ) { // if ( [false] = false )\r\n  // blah scripting\r\n}\r\n\r\nbut, the scripting is optimized into this shortened form (quest understands it as the same as the above):\r\n\r\nif (result) {\r\n  // blah scripting\r\n} else {\r\n  // blah scripting\r\n}\r\n\r\nand in the GUI/Editor, it'd look like this:\r\n\r\nif [EXPRESSION] result\r\n-> then -> add new script -> blah script\r\nelse\r\n-> then -> add new script -> blah script\r\n```\r\n\r\n----------\r\n\r\nif you're using 'show menu / ShowMenu', it'd be:\r\n\r\n```\r\nshow menu (\"YOUR_DISPLAYED_MENU_QUESTION_PROMPT\", Split (\"yes;no\", \";\"), false) {\r\n  //\r\n  // quest automatically will set:\r\n  //\r\n  // result = \"yes\"\r\n  // or:\r\n  // result = \"no\"\r\n  //\r\n  if (result = \"yes\") {\r\n    // blah script\r\n  else if (result = \"no\") {\r\n    // blah script\r\n  }\r\n}\r\n```\r\n\r\nsince we're using 'yes/no' as our menu selection choices/options/items/values, this 'show menu / ShowMenu' example, is basically what the built-in 'ask/Ask' Function is doing above\r\n\r\nhowever, we can of course use different menu selection choices/options/items/values, for example:\r\n\r\n```\r\nshow menu (\"Sex?\", Split (\"male;female;hermaphrodite;asexual\", \";\"), false) {\r\n  //\r\n  // quest automatically will set:\r\n  //\r\n  // result = \"male\"\r\n  // or:\r\n  // result = \"female\"\r\n  // or:\r\n  // result = \"hermaphrodite\"\r\n  // or:\r\n  // result = \"asexual\"\r\n  //\r\n  if (result = \"male\") {\r\n    player.sex = \"male\"\r\n  else if (result = \"female\") {\r\n    player.sex = \"female\"\r\n  } else if (result = \"hermaphrodite\") {\r\n    player.sex = \"hermaphrodite\"\r\n  } else if (result = \"asexual\") {\r\n    player.sex = \"asexual\"\r\n  }\r\n}\r\n```\r\n\r\n-------------\r\n\r\nData Types: VARIABLE TYPES (Variable Types / Attribute Types / Parameter Types) and their Value Types:\r\n\r\n-------------\r\n\r\nStrings (\"text\"): a collection of alphabetic characters, numeric (number) characters, and/or the other symbols/characters\r\n\r\nanything within the double quotes, is a String Value, some examples:\r\n\r\n\"a\"\r\n\r\n\"abc\"\r\n\r\n\"1\" // this is NOT an amount (integer: a non-decimal number or double: a decimal number, and also known as floating-points / \r\nfractional numbers / decimal numbers --- but quest uses the term, 'double', for it) value, you can NOT do arithmetic with it, as it's a String Value\r\n\r\n\"123\" // same as above\r\n\r\n\"abc123\"\r\n\r\n\"abc_123\"\r\n\r\n\"abc 123\" // \"abc[SPACE]123\"\r\n\r\n\" \" // \"[SPACE]\" --- yes, a 'SPACE' is a character/symbol too\r\n\r\n\"Welcome to my game, I hope you enjoy it!\"\r\n\r\n\"true\" // this is NOT a boolean value, as it's within the double quotes, making it a String Value\r\n\r\n\"false\" // this is NOT a boolean value, as it's within the double quotes, making it a String Value\r\n\r\nString Variable example:\r\n\r\nalias = \"HK\"\r\n\r\nString Attribute example:\r\n\r\nplayer.alias = \"HK\"\r\n// 'player' must be an actual existing Object of course\r\n\r\n-------\r\n\r\nBooleans:\r\n\r\nare the special/reserved values of 'true/false'\r\n\r\nnotice that 'true/false' do NOT have the double quotes, as if they did, they'd be String Values, and NOT Boolean Values\r\n\r\nBoolean Variable:\r\n\r\ndead = true // conceptually whatever (or the current state) is 'dead'\r\n// or:\r\ndead = false // conceptually whatever (or the current state) is 'alive'\r\n\r\nalive = true // conceptually whatever (or the current state) is 'alive'\r\n// or:\r\nalive = false // conceptually whatever (or the current state) is 'dead'\r\n\r\nBoolean Attribute:\r\n\r\n// 'orc' must be an actual existing Object, of course\r\n\r\norc.dead = true // conceptually the 'orc' (or its current state) is 'dead'\r\n// or:\r\norc.dead = false // conceptually the 'orc' (or its current state) is 'alive'\r\n\r\norc.alive = true // conceptually the 'orc' (or its current state) is 'alive'\r\n// or:\r\norc.alive = false // conceptually the 'orc' (or its current state) is 'dead'\r\n\r\nunderneath, Boolean Values are converted into binary:\r\n\r\ntrue -> 1\r\nfalse -> 0\r\n\r\nbut the concept remains the same: dualism (opposites): 2 states:\r\n\r\ntrue = 1 = \"yes\" = \"on\" = \"+ (positive, like with electrical charges)\"\r\nvs\r\nfalse = 0 = \"no\" = \"off\" = \"- (negative, like with electrical charges)\"\r\n\r\npositive vs negative\r\nup vs down\r\nin vs out\r\nleft vs right\r\nforward vs backward\r\nhot vs cold\r\nsmart vs stupid\r\ntall vs short\r\nmale vs female\r\nfat vs skinny\r\ngood vs evil\r\netc etc etc\r\n\r\nin networking (and low programming languages and at the hardware level itself as electrical currents), binary is used as 'flags' (which is why Booleans/binary and 'flags' are often used interchangably --- though I don't personally like using 'flags' in this manner):\r\n\r\nsomething is \"flagged on\" or something is \"flagged  off\", or think of 'flagging' as like a light switch, that is flipped on or flipped off\r\n\r\nBoolean is merely the human friendly usage of 'true/false' terms/words, instead of the non-programmer non-friendly usage of binary's digits of '1/0'\r\n\r\n-----------\r\n\r\nAmounts:\r\n\r\nable to do arithmetic (additional, subtraction, multiplication, division, and modulus) upon them\r\n\r\nanything that is a number amount and NOT within double quotes, is either:\r\n\r\nIntegers (non-decimal numbers):\r\n\r\n-999\r\n0\r\n999\r\n\r\nstrength = 100\r\n\r\nplayer.strength = 100\r\n\r\nDoubles (Floats / Floating Points) (decimal numbers):\r\n\r\n-999.12345678, 0.0, 999.123\r\n\r\ndamage = 56.3\r\n\r\nplayer.damage = 56.3\r\n\r\n------------------\r\n\r\nObjects (references/pointers):\r\n\r\nanything NOT within double quotes, anything that is NOT an amount (a number), and anything NOT as a reserved/special word/term, is an Object (reference/pointer), some examples:\r\n\r\n(all of these have to be actual existing/created Objects, of course)\r\n\r\ngame\r\nplayer\r\nroom\r\norc\r\ndragon\r\nsword\r\n\r\n--------\r\n\r\nso, that's what gets many people confused with scripting, especially conditional expressions:\r\n\r\nthere's a big difference between:\r\n\r\n```\r\nif (result = \"sword\") { /* scripting */ }\r\n// and:\r\nif (result = sword) { /* scripting */ }\r\n\r\n---------------\r\n\r\nswitch (result) {\r\n  case (\"sword\") {\r\n    // scripting\r\n  }\r\n}\r\n\r\n// and:\r\n\r\nswitch (result) {\r\n  case (sword) {\r\n    // scripting\r\n  }\r\n}\r\n\r\n---------\r\n\r\nusing a String List or String Dictionary\r\nvs\r\nusing an Object List or Object Dictionary\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I think quest automatically converts your 'ask/Ask' menu Function's selection of 'yes/no' into 'true/false':</p>\n<p>yes -&gt; true -&gt; result = true<br>\n// or:<br>\nno -&gt; false -&gt; result = false</p>\n<p>so, it should be:</p>\n<pre><code>if you select 'yes' for the menu selection:\n\nyes -&gt; true\nresult = true\n\nif you select 'no' for the menu selection:\n\nno -&gt; false\nresult = false\n\nand then conceptually, its:\n\n[result = either true or false, based upon what you selected]\n\nif (result = true) {\n  // blah scripting\n} else if (result = false) {\n  // blah scripting\n}\n\nand how it conceptually works:\n\nif ( [result = true] = true ) { // if ( [true] = true )\n  // blah scripting\n} else if ( [result = false] = false ) { // if ( [false] = false )\n  // blah scripting\n}\n\nbut, the scripting is optimized into this shortened form (quest understands it as the same as the above):\n\nif (result) {\n  // blah scripting\n} else {\n  // blah scripting\n}\n\nand in the GUI/Editor, it'd look like this:\n\nif [EXPRESSION] result\n-&gt; then -&gt; add new script -&gt; blah script\nelse\n-&gt; then -&gt; add new script -&gt; blah script\n</code></pre>\n<hr>\n<p>if you're using 'show menu / ShowMenu', it'd be:</p>\n<pre><code>show menu (\"YOUR_DISPLAYED_MENU_QUESTION_PROMPT\", Split (\"yes;no\", \";\"), false) {\n  //\n  // quest automatically will set:\n  //\n  // result = \"yes\"\n  // or:\n  // result = \"no\"\n  //\n  if (result = \"yes\") {\n    // blah script\n  else if (result = \"no\") {\n    // blah script\n  }\n}\n</code></pre>\n<p>since we're using 'yes/no' as our menu selection choices/options/items/values, this 'show menu / ShowMenu' example, is basically what the built-in 'ask/Ask' Function is doing above</p>\n<p>however, we can of course use different menu selection choices/options/items/values, for example:</p>\n<pre><code>show menu (\"Sex?\", Split (\"male;female;hermaphrodite;asexual\", \";\"), false) {\n  //\n  // quest automatically will set:\n  //\n  // result = \"male\"\n  // or:\n  // result = \"female\"\n  // or:\n  // result = \"hermaphrodite\"\n  // or:\n  // result = \"asexual\"\n  //\n  if (result = \"male\") {\n    player.sex = \"male\"\n  else if (result = \"female\") {\n    player.sex = \"female\"\n  } else if (result = \"hermaphrodite\") {\n    player.sex = \"hermaphrodite\"\n  } else if (result = \"asexual\") {\n    player.sex = \"asexual\"\n  }\n}\n</code></pre>\n<hr>\n<p>Data Types: VARIABLE TYPES (Variable Types / Attribute Types / Parameter Types) and their Value Types:</p>\n<hr>\n<p>Strings (\"text\"): a collection of alphabetic characters, numeric (number) characters, and/or the other symbols/characters</p>\n<p>anything within the double quotes, is a String Value, some examples:</p>\n<p>\"a\"</p>\n<p>\"abc\"</p>\n<p>\"1\" // this is NOT an amount (integer: a non-decimal number or double: a decimal number, and also known as floating-points /<br>\nfractional numbers / decimal numbers --- but quest uses the term, 'double', for it) value, you can NOT do arithmetic with it, as it's a String Value</p>\n<p>\"123\" // same as above</p>\n<p>\"abc123\"</p>\n<p>\"abc_123\"</p>\n<p>\"abc 123\" // \"abc[SPACE]123\"</p>\n<p>\" \" // \"[SPACE]\" --- yes, a 'SPACE' is a character/symbol too</p>\n<p>\"Welcome to my game, I hope you enjoy it!\"</p>\n<p>\"true\" // this is NOT a boolean value, as it's within the double quotes, making it a String Value</p>\n<p>\"false\" // this is NOT a boolean value, as it's within the double quotes, making it a String Value</p>\n<p>String Variable example:</p>\n<p>alias = \"HK\"</p>\n<p>String Attribute example:</p>\n<p>player.alias = \"HK\"<br>\n// 'player' must be an actual existing Object of course</p>\n<hr>\n<p>Booleans:</p>\n<p>are the special/reserved values of 'true/false'</p>\n<p>notice that 'true/false' do NOT have the double quotes, as if they did, they'd be String Values, and NOT Boolean Values</p>\n<p>Boolean Variable:</p>\n<p>dead = true // conceptually whatever (or the current state) is 'dead'<br>\n// or:<br>\ndead = false // conceptually whatever (or the current state) is 'alive'</p>\n<p>alive = true // conceptually whatever (or the current state) is 'alive'<br>\n// or:<br>\nalive = false // conceptually whatever (or the current state) is 'dead'</p>\n<p>Boolean Attribute:</p>\n<p>// 'orc' must be an actual existing Object, of course</p>\n<p>orc.dead = true // conceptually the 'orc' (or its current state) is 'dead'<br>\n// or:<br>\norc.dead = false // conceptually the 'orc' (or its current state) is 'alive'</p>\n<p>orc.alive = true // conceptually the 'orc' (or its current state) is 'alive'<br>\n// or:<br>\norc.alive = false // conceptually the 'orc' (or its current state) is 'dead'</p>\n<p>underneath, Boolean Values are converted into binary:</p>\n<p>true -&gt; 1<br>\nfalse -&gt; 0</p>\n<p>but the concept remains the same: dualism (opposites): 2 states:</p>\n<p>true = 1 = \"yes\" = \"on\" = \"+ (positive, like with electrical charges)\"<br>\nvs<br>\nfalse = 0 = \"no\" = \"off\" = \"- (negative, like with electrical charges)\"</p>\n<p>positive vs negative<br>\nup vs down<br>\nin vs out<br>\nleft vs right<br>\nforward vs backward<br>\nhot vs cold<br>\nsmart vs stupid<br>\ntall vs short<br>\nmale vs female<br>\nfat vs skinny<br>\ngood vs evil<br>\netc etc etc</p>\n<p>in networking (and low programming languages and at the hardware level itself as electrical currents), binary is used as 'flags' (which is why Booleans/binary and 'flags' are often used interchangably --- though I don't personally like using 'flags' in this manner):</p>\n<p>something is \"flagged on\" or something is \"flagged  off\", or think of 'flagging' as like a light switch, that is flipped on or flipped off</p>\n<p>Boolean is merely the human friendly usage of 'true/false' terms/words, instead of the non-programmer non-friendly usage of binary's digits of '1/0'</p>\n<hr>\n<p>Amounts:</p>\n<p>able to do arithmetic (additional, subtraction, multiplication, division, and modulus) upon them</p>\n<p>anything that is a number amount and NOT within double quotes, is either:</p>\n<p>Integers (non-decimal numbers):</p>\n<p>-999<br>\n0<br>\n999</p>\n<p>strength = 100</p>\n<p>player.strength = 100</p>\n<p>Doubles (Floats / Floating Points) (decimal numbers):</p>\n<p>-999.12345678, 0.0, 999.123</p>\n<p>damage = 56.3</p>\n<p>player.damage = 56.3</p>\n<hr>\n<p>Objects (references/pointers):</p>\n<p>anything NOT within double quotes, anything that is NOT an amount (a number), and anything NOT as a reserved/special word/term, is an Object (reference/pointer), some examples:</p>\n<p>(all of these have to be actual existing/created Objects, of course)</p>\n<p>game<br>\nplayer<br>\nroom<br>\norc<br>\ndragon<br>\nsword</p>\n<hr>\n<p>so, that's what gets many people confused with scripting, especially conditional expressions:</p>\n<p>there's a big difference between:</p>\n<pre><code>if (result = \"sword\") { /* scripting */ }\n// and:\nif (result = sword) { /* scripting */ }\n\n---------------\n\nswitch (result) {\n  case (\"sword\") {\n    // scripting\n  }\n}\n\n// and:\n\nswitch (result) {\n  case (sword) {\n    // scripting\n  }\n}\n\n---------\n\nusing a String List or String Dictionary\nvs\nusing an Object List or Object Dictionary\n</code></pre>\n\n",
      "PostDate": "2019-02-27T02:16:21.5741664Z",
      "LastEditDate": "2019-02-27T03:49:29.0880918Z",
      "link": null
    }
  ]
}
