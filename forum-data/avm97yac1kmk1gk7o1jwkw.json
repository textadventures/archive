{
  "Topic": {
    "TopicId": "avm97yac1kmk1gk7o1jwkw",
    "ForumId": "24",
    "Title": "Making a battle phase?",
    "LastUpdated": "2022-01-29T03:24:08.1233358Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e7dd3c4e-c7e0-469f-8813-55fe9b380374",
      "UserId": 423238,
      "Username": "HCK Productions",
      "AvatarUrl": "https://i.imgur.com/2d6PlQUb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "trying to get a small battle system going though seems we ran into a problem?\r\n\r\nkeep getting:   *'SyntaxError: Unexpected identifier'*\r\n\r\n\r\nCurrently its under test and everything is not set in stone so some things might be missing but here's what code we got so far...\r\n\r\n```\r\n[[Battle test]]:\r\n\r\n@set testplayer_HP 100\r\n@set testhostile_HP 0\r\n@set testarmour_player 10\r\n@set testarmour_hostile 0\r\n@set testplayer_attack 5\r\n@set testhostile_attack 0\r\n@set testhostile_sheild 0\r\n\r\nBattle test:\r\n\r\n{label:0=[No Armour](battle 1) [Light](battle 2) [Heavy](battle 3).}\r\n\r\n[battle 1]: \r\n\r\n@replace 0= battle 1\r\n@inc testhostile_hp 10\r\n@inc testhostile_attack 2\r\n\r\nfound unarmours hostile\r\n\r\n[[battle phase test]] \r\n\r\n[battle 2]: \r\n\r\n@replace 0= battle 2\r\n\r\nfound light armour hostile\r\n\r\n[[battle phase test]] \r\n\r\n[battle 3]: \r\n\r\n@replace 0= battle 3\r\n\r\nfound heavy armour hostile\r\n\r\n[[battle phase test]] \r\n\r\n[[battle phase test]]:\r\n\r\nHealth: {testplayer_HP}HP\r\nArmour rating: {testarmour_player}\r\nAttack: {testplayer_attack}\r\n\r\n[attack physical](test physical) [attack energy](test energy) [attack explosive](test explosive) \r\n\r\n\r\n[test physical]: \r\n\r\ndoes more damage to unarmoured\r\n\r\n    {if testhostile_sheild > 0:the attacks did minimal damage.{testhostile_sheild - (testplayer_attack * 0.2)}{testhostile_HP - (testplayer_attack * 0.2)}}\r\n    {else: {if testarmour_hostile > 0:the attack did some damage.}{testarmour_hostile - (testplayer_attack * 0.2)}{testhostile_HP - (testplayer_attack * 0.2)}}\r\n    {else: {if testhostile_HP > 0:the attack does decent damage.}{testhostile_HP - testplayer_attack}}\r\n    {else: unknown error}\r\n    \r\nHostile stats...\r\nHealth: {testhostile_HP}\r\nArmour: {testarmour_hostile}\r\nsheild: {testhostile_sheild}\r\n\r\n\r\n[test energy]: \r\n\r\ndoes more damage to sheilds\r\n\r\n    {if testhostile_sheild > 0:the attacks did minimal damage.{testhostile_sheild - testplayer_attack}{testhostile_HP - (testplayer_attack * 0.2)}}\r\n    {else: {if testarmour_hostile > 0:the attack did some damage.}{testarmour_hostile - (testplayer_attack * 0.2)}{testhostile_HP - (testplayer_attack * 0.2)}}\r\n    {else: {if testhostile_HP > 0:the attack does decent damage.}{testhostile_HP - (testplayer_attack * 0.4)}}\r\n    {else: unknown error}\r\n    \r\nHostile stats...\r\nHealth: {testhostile_HP}\r\nArmour: {testarmour_hostile}\r\nsheild: {testhostile_sheild}\r\n\r\n\r\n[test explosive]: \r\n\r\ndoes more damage to armour\r\n\r\n    {if testhostile_sheild > 0:the attack did some damage.{testhostile_sheild - (testplayer_attack * 0.2)}{testhostile_HP - (testplayer_attack * 0.4)}}\r\n    {else: {if testarmour_hostile > 0:the attack does decent damage.}{testarmour_hostile - testplayer_attack}{testhostile_HP - (testplayer_attack * 0.4)}}\r\n    {else: {if testhostile_HP > 0:the attacks did minimal damage.}{testhostile_HP - (testplayer_attack * 0.4)}}\r\n    {else: unknown error}\r\n    \r\nHostile stats...\r\nHealth: {testhostile_HP}\r\nArmour: {testarmour_hostile}\r\nsheild: {testhostile_sheild}\r\n\r\n    {if testhostile_HP =< 0: [[Victory]](testvictory)}\r\n    {else: battle goes on [[end turn]](battle hostile test)} \r\n    \r\n\r\n\r\n\r\n[[battle hostile test]]: \r\n\r\n\r\n    {if testarmour_player > 0:the attack does some damage.{testarmour_player - testhostile_attack}{testplayer_HP - (testhostile_attack * 0.5)}}\r\n    {else: {if testplayer_HP > 0:the attacks does decent damage.{testplayer_HP - testhostile_attack}}\r\n    {else:unknown error}\r\n\r\nCurrent status:\r\nHealth: {testplayer_HP}HP\r\nArmour rating: {testarmour_player}\r\n\r\n    {if testplayer_HP =< 0: [[Victory]](testvictory)}\r\n    {else: battle goes on [[end turn]](battle hostile test)}\r\n\r\n\r\n[[Defeat]]:\r\n\r\nhow?\r\n\r\n[[testvictory]]:\r\n\r\nwell done\r\n```\r\nIdea is to have the player loop in the battle until someone reaches 0hp, then the game sends them back to where they were with a kind of checkpoint system or tell them that they died...\r\n\r\nkeep getting errors when using the ```{if}``` and ```{else}``` so we missing something?",
      "EditableFormat": "markdown",
      "HTML": "<p>trying to get a small battle system going though seems we ran into a problem?</p>\n<p>keep getting:   <em>'SyntaxError: Unexpected identifier'</em></p>\n<p>Currently its under test and everything is not set in stone so some things might be missing but here's what code we got so far...</p>\n<pre><code>[[Battle test]]:\n\n@set testplayer_HP 100\n@set testhostile_HP 0\n@set testarmour_player 10\n@set testarmour_hostile 0\n@set testplayer_attack 5\n@set testhostile_attack 0\n@set testhostile_sheild 0\n\nBattle test:\n\n{label:0=[No Armour](battle 1) [Light](battle 2) [Heavy](battle 3).}\n\n[battle 1]: \n\n@replace 0= battle 1\n@inc testhostile_hp 10\n@inc testhostile_attack 2\n\nfound unarmours hostile\n\n[[battle phase test]] \n\n[battle 2]: \n\n@replace 0= battle 2\n\nfound light armour hostile\n\n[[battle phase test]] \n\n[battle 3]: \n\n@replace 0= battle 3\n\nfound heavy armour hostile\n\n[[battle phase test]] \n\n[[battle phase test]]:\n\nHealth: {testplayer_HP}HP\nArmour rating: {testarmour_player}\nAttack: {testplayer_attack}\n\n[attack physical](test physical) [attack energy](test energy) [attack explosive](test explosive) \n\n\n[test physical]: \n\ndoes more damage to unarmoured\n\n    {if testhostile_sheild &gt; 0:the attacks did minimal damage.{testhostile_sheild - (testplayer_attack * 0.2)}{testhostile_HP - (testplayer_attack * 0.2)}}\n    {else: {if testarmour_hostile &gt; 0:the attack did some damage.}{testarmour_hostile - (testplayer_attack * 0.2)}{testhostile_HP - (testplayer_attack * 0.2)}}\n    {else: {if testhostile_HP &gt; 0:the attack does decent damage.}{testhostile_HP - testplayer_attack}}\n    {else: unknown error}\n    \nHostile stats...\nHealth: {testhostile_HP}\nArmour: {testarmour_hostile}\nsheild: {testhostile_sheild}\n\n\n[test energy]: \n\ndoes more damage to sheilds\n\n    {if testhostile_sheild &gt; 0:the attacks did minimal damage.{testhostile_sheild - testplayer_attack}{testhostile_HP - (testplayer_attack * 0.2)}}\n    {else: {if testarmour_hostile &gt; 0:the attack did some damage.}{testarmour_hostile - (testplayer_attack * 0.2)}{testhostile_HP - (testplayer_attack * 0.2)}}\n    {else: {if testhostile_HP &gt; 0:the attack does decent damage.}{testhostile_HP - (testplayer_attack * 0.4)}}\n    {else: unknown error}\n    \nHostile stats...\nHealth: {testhostile_HP}\nArmour: {testarmour_hostile}\nsheild: {testhostile_sheild}\n\n\n[test explosive]: \n\ndoes more damage to armour\n\n    {if testhostile_sheild &gt; 0:the attack did some damage.{testhostile_sheild - (testplayer_attack * 0.2)}{testhostile_HP - (testplayer_attack * 0.4)}}\n    {else: {if testarmour_hostile &gt; 0:the attack does decent damage.}{testarmour_hostile - testplayer_attack}{testhostile_HP - (testplayer_attack * 0.4)}}\n    {else: {if testhostile_HP &gt; 0:the attacks did minimal damage.}{testhostile_HP - (testplayer_attack * 0.4)}}\n    {else: unknown error}\n    \nHostile stats...\nHealth: {testhostile_HP}\nArmour: {testarmour_hostile}\nsheild: {testhostile_sheild}\n\n    {if testhostile_HP =&lt; 0: [[Victory]](testvictory)}\n    {else: battle goes on [[end turn]](battle hostile test)} \n    \n\n\n\n[[battle hostile test]]: \n\n\n    {if testarmour_player &gt; 0:the attack does some damage.{testarmour_player - testhostile_attack}{testplayer_HP - (testhostile_attack * 0.5)}}\n    {else: {if testplayer_HP &gt; 0:the attacks does decent damage.{testplayer_HP - testhostile_attack}}\n    {else:unknown error}\n\nCurrent status:\nHealth: {testplayer_HP}HP\nArmour rating: {testarmour_player}\n\n    {if testplayer_HP =&lt; 0: [[Victory]](testvictory)}\n    {else: battle goes on [[end turn]](battle hostile test)}\n\n\n[[Defeat]]:\n\nhow?\n\n[[testvictory]]:\n\nwell done\n</code></pre>\n<p>Idea is to have the player loop in the battle until someone reaches 0hp, then the game sends them back to where they were with a kind of checkpoint system or tell them that they died...</p>\n<p>keep getting errors when using the <code>{if}</code> and <code>{else}</code> so we missing something?</p>\n\n",
      "PostDate": "2022-01-29T03:24:08.1233358Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "21a9429c-3c7c-4084-91b9-83744313b0f5",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If: There is a long-standing glitch, that I haven't isolated.\r\nOne workaround is to play with spacing around the colon. If you can use >= and <= instead of just > and <, do so. Another is to force Squiffy to read glitchy numbers as numbers:\r\n@dec testplayer_HP 1\r\n@inc testplayer_HP 1\r\n\r\nelse: This is not js elseif! It only looks for the last if statement regardless of nesting. It is not useful for clever logic.\r\n\r\nI'm not competent in JavaScript, but I use copypasta when Squiffy glitches.",
      "EditableFormat": "markdown",
      "HTML": "<p>If: There is a long-standing glitch, that I haven't isolated.<br>\nOne workaround is to play with spacing around the colon. If you can use &gt;= and &lt;= instead of just &gt; and &lt;, do so. Another is to force Squiffy to read glitchy numbers as numbers:<br>\n@dec testplayer_HP 1<br>\n@inc testplayer_HP 1</p>\n<p>else: This is not js elseif! It only looks for the last if statement regardless of nesting. It is not useful for clever logic.</p>\n<p>I'm not competent in JavaScript, but I use copypasta when Squiffy glitches.</p>\n\n",
      "PostDate": "2022-01-29T06:49:44.2787888Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dd30bb64-d9dd-4822-992a-0c22ca4818b3",
      "UserId": 423238,
      "Username": "HCK Productions",
      "AvatarUrl": "https://i.imgur.com/2d6PlQUb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "so what can we use instead of the ```else:```if it doesn't work?\r\n\r\nseems no matter what, it comes up with an error, even taking away the ```else:``` so either it hates trying to figure out calculations like  ```(price * amount)``` (aka: price x amount)  or it hates everything under 0 like, 0.1, 0.2 etc.\r\n\r\nEdit: found a solution... sort of,\r\n\r\nseems the software hates anything with finding something from the 'player' in the viable, know this because we did a line each and after inputting last few lines with 'player' in the varible, it comes up with the 'SyntaxError: Unexpected identifier' Error...\r\n\r\nNo idea why this does this but seem to be the reason for this whole thing not to work... any able to see reason why it doesn't work?",
      "EditableFormat": "markdown",
      "HTML": "<p>so what can we use instead of the <code>else:</code>if it doesn't work?</p>\n<p>seems no matter what, it comes up with an error, even taking away the <code>else:</code> so either it hates trying to figure out calculations like  <code>(price * amount)</code> (aka: price x amount)  or it hates everything under 0 like, 0.1, 0.2 etc.</p>\n<p>Edit: found a solution... sort of,</p>\n<p>seems the software hates anything with finding something from the 'player' in the viable, know this because we did a line each and after inputting last few lines with 'player' in the varible, it comes up with the 'SyntaxError: Unexpected identifier' Error...</p>\n<p>No idea why this does this but seem to be the reason for this whole thing not to work... any able to see reason why it doesn't work?</p>\n\n",
      "PostDate": "2022-01-29T16:07:20.4895016Z",
      "LastEditDate": "2022-01-29T19:39:05.2828735Z",
      "link": null
    },
    {
      "PostId": "a797a286-0fe0-4a5d-88f3-444f1fdb6fb4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A Squiffy section or passage is divided into three parts, which use different types of code.\r\n\r\nThe first part is Javascript, which is a full scripting language. The javascript part goes from the start of the section (or passage) to the first line that doesn't start with four spaces.\r\n\r\nSo this piece is your problem:\r\n```\r\n[[battle hostile test]]: \r\n\r\n\r\n    {if testarmour_player > 0:the attack does some damage.{testarmour_player - testhostile_attack}{testplayer_HP - (testhostile_attack * 0.5)}}\r\n    {else: {if testplayer_HP > 0:the attacks does decent damage.{testplayer_HP - testhostile_attack}}\r\n    {else:unknown error}\r\n```\r\n\r\nThose lines start with 4 spaces, and are not javascript.\r\nIf you want them to be parsed through Squiffy's text processor, you need to either remove the spaces or put something else before them.\r\n\r\nAlso, I'm a little puzzled by the code there. I can't find anything in the Squiffy source that lets it do maths like that. If I'm understanding what you're trying to do correctly, you might need to make it something like:\r\n\r\n```\r\n[[battle hostile test]]: \r\n\r\n{if testarmour_player > 0:the attack does some damage.{@testarmour_player -= @testhostile_attack,temp_attack_damage=@testhostile_attack,temp_attack_damage*=0.5,testplayer_HP -= @temp_attack_damage}}\r\n{else: {if testplayer_HP > 0:the attacks does decent damage.{testplayer_HP -= @testhostile_attack}\r\n{else:unknown error}}\r\n```\r\n\r\nor you could use javascript, which is usually a better option for more complex situations:\r\n```\r\n[[battle hostile test]]: \r\n\r\n    var player_armour = squiffy.get(\"testarmour_player\");\r\n    var player_HP = squiffy.get(\"testplayer_HP\");\r\n    var hostile_attack = squiffy.get(\"testhostile_attack\");\r\n\r\n    if (player_armour > 0) {\r\n        squiffy.set(\"temp_message\", \"the attack does some damage\");\r\n        player_armour -= hostile_attack;\r\n        player_HP -= hostile_attack * 0.5;\r\n    } else if (testplayer_HP > 0) {\r\n        squiffy.set(\"temp_message\", \"the attack does decent damage\");\r\n        player_HP -= hostile_attack;\r\n    } else {\r\n        squiffy.set(\"temp_message\", \"Unexpected error: player_HP is 0 or less\");\r\n    }\r\n    squiffy.set(\"testarmour_player\", player_armour);\r\n    squiffy.set(\"testplayer_HP\", player_HP);\r\n\r\n{temp_message}.\r\n```\r\n(Setting the attribute `temp_message` so that you can include a message from the JS in the body text of the section. An alternative would be to use `squiffy.ui.write(\"Some message\");` - as long as you don't mind your JS output being before the main part of the text.",
      "EditableFormat": "markdown",
      "HTML": "<p>A Squiffy section or passage is divided into three parts, which use different types of code.</p>\n<p>The first part is Javascript, which is a full scripting language. The javascript part goes from the start of the section (or passage) to the first line that doesn't start with four spaces.</p>\n<p>So this piece is your problem:</p>\n<pre><code>[[battle hostile test]]: \n\n\n    {if testarmour_player &gt; 0:the attack does some damage.{testarmour_player - testhostile_attack}{testplayer_HP - (testhostile_attack * 0.5)}}\n    {else: {if testplayer_HP &gt; 0:the attacks does decent damage.{testplayer_HP - testhostile_attack}}\n    {else:unknown error}\n</code></pre>\n<p>Those lines start with 4 spaces, and are not javascript.<br>\nIf you want them to be parsed through Squiffy's text processor, you need to either remove the spaces or put something else before them.</p>\n<p>Also, I'm a little puzzled by the code there. I can't find anything in the Squiffy source that lets it do maths like that. If I'm understanding what you're trying to do correctly, you might need to make it something like:</p>\n<pre><code>[[battle hostile test]]: \n\n{if testarmour_player &gt; 0:the attack does some damage.{@testarmour_player -= @testhostile_attack,temp_attack_damage=@testhostile_attack,temp_attack_damage*=0.5,testplayer_HP -= @temp_attack_damage}}\n{else: {if testplayer_HP &gt; 0:the attacks does decent damage.{testplayer_HP -= @testhostile_attack}\n{else:unknown error}}\n</code></pre>\n<p>or you could use javascript, which is usually a better option for more complex situations:</p>\n<pre><code>[[battle hostile test]]: \n\n    var player_armour = squiffy.get(\"testarmour_player\");\n    var player_HP = squiffy.get(\"testplayer_HP\");\n    var hostile_attack = squiffy.get(\"testhostile_attack\");\n\n    if (player_armour &gt; 0) {\n        squiffy.set(\"temp_message\", \"the attack does some damage\");\n        player_armour -= hostile_attack;\n        player_HP -= hostile_attack * 0.5;\n    } else if (testplayer_HP &gt; 0) {\n        squiffy.set(\"temp_message\", \"the attack does decent damage\");\n        player_HP -= hostile_attack;\n    } else {\n        squiffy.set(\"temp_message\", \"Unexpected error: player_HP is 0 or less\");\n    }\n    squiffy.set(\"testarmour_player\", player_armour);\n    squiffy.set(\"testplayer_HP\", player_HP);\n\n{temp_message}.\n</code></pre>\n<p>(Setting the attribute <code>temp_message</code> so that you can include a message from the JS in the body text of the section. An alternative would be to use <code>squiffy.ui.write(\"Some message\");</code> - as long as you don't mind your JS output being before the main part of the text.</p>\n\n",
      "PostDate": "2022-01-29T17:21:34.8944333Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "db4ec380-714b-4c2e-8aa9-7dac5d81e489",
      "UserId": 423238,
      "Username": "HCK Productions",
      "AvatarUrl": "https://i.imgur.com/2d6PlQUb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "tried other ways like this:\r\n```\r\n[[Battle test]]:\r\n\r\n@clear\r\n\r\n@set testplayer_HP 100\r\n@set testhostile_HP 1\r\n@set testarmour_player 10\r\n@set testarmour_hostile 1\r\n@set testplayer_attack 5\r\n@set testhostile_attack 1\r\n@set testhostile_sheild 1\r\n\r\nBattle test:\r\n\r\n{label:0=[No Armour](battle 1) [Light](battle 2) [Heavy](battle 3).}\r\n\r\n\r\n[battle 1]: \r\n\r\n@replace 0= battle 1\r\n@inc testhostile_hp 10\r\n@inc testhostile_attack 2\r\n\r\nfound unarmours hostile\r\n\r\nFight:\r\n[[battle phase test]] \r\n\r\n[battle 2]: \r\n\r\n@replace 0= battle 2\r\n\r\nfound light armour hostile\r\n\r\nFight:\r\n[[battle phase test]] \r\n\r\n[battle 3]: \r\n\r\n@replace 0= battle 3\r\n\r\nfound heavy armour hostile\r\n\r\nFight:\r\n[[battle phase test]] \r\n\r\n[[battle phase test]]:\r\n\r\nStatus: \r\nHealth: {testplayer_HP}HP   \r\nArmour rating: {testarmour_player}  \r\nAttack: {testplayer_attack} \r\n\r\n\r\n{label:00=[attack physical](test physical attack) (does more damage to unarmoured)}      \r\n{label:00=[attack energy](test energy attack) (does more damage to sheilds)}      \r\n{label:00=[attack explosive](test explosive attack) (does more damage to armour)}  \r\n\r\n[test physical attack]: \r\n\r\n@replace 00=\r\n\r\nattack\r\n\r\n    {if testhostile_sheild=>1:{    squiffy.story.passage(\"testsheild physical hit\")} }{else: }\r\n\r\n    {if testarmour_hostile=>1:{ squiffy.story.passage(\"testarmour physical hit\") }{else: }\r\n\r\n    {if testhostile_HP=>1:{ squiffy.story.passage(\"testhealth physical hit\")} }{else: }\r\n\r\n    {if testhostile_HP=<0:[[testvictory]].}{else: error }\r\n\r\n[testsheild physical hit]: \r\n\r\n@inc testhostile_hp {testplayer_attack * 0.2}\r\n        \r\n    squiffy.story.passage(\"Hostile stats\")\r\n\r\n[testarmour physical hit]: \r\n\r\n@inc testhostile_hp {testplayer_attack * 0.8}\r\n\r\nsquiffy.story.passage(\"Hostile stats\")\r\n\r\n[testhealth physical hit]: \r\n\r\nsquiffy.story.passage(\"Hostile stats\")\r\n\r\n@inc testhostile_hp {testplayer_attack * 1.2}\r\n\r\n[test energy attack]: \r\n\r\n@replace 00=\r\n\r\n\r\n\r\n[test explosive attack]: \r\n\r\n@replace 00=\r\n\r\n\r\n\r\n[Hostile stats]: \r\n\r\nHostile status: \r\nHealth: {testhostile_HP}    \r\nArmour: {testarmour_hostile}    \r\nsheild: {testhostile_sheild}    \r\n\r\n\r\n[battle hostile test]: \r\n\r\n\r\n\r\n\r\n\r\n[[testDefeat]]:\r\n\r\nhow?\r\n\r\n[[testvictory]]:\r\n\r\nwell done\r\n\r\n```\r\n\r\nbut no matter what nothing happens, this software just refused to combine commands or calculate things together....\r\n\r\nIf someone finds a way to do it then cool... am giving up on a battle system using this thing lol",
      "EditableFormat": "markdown",
      "HTML": "<p>tried other ways like this:</p>\n<pre><code>[[Battle test]]:\n\n@clear\n\n@set testplayer_HP 100\n@set testhostile_HP 1\n@set testarmour_player 10\n@set testarmour_hostile 1\n@set testplayer_attack 5\n@set testhostile_attack 1\n@set testhostile_sheild 1\n\nBattle test:\n\n{label:0=[No Armour](battle 1) [Light](battle 2) [Heavy](battle 3).}\n\n\n[battle 1]: \n\n@replace 0= battle 1\n@inc testhostile_hp 10\n@inc testhostile_attack 2\n\nfound unarmours hostile\n\nFight:\n[[battle phase test]] \n\n[battle 2]: \n\n@replace 0= battle 2\n\nfound light armour hostile\n\nFight:\n[[battle phase test]] \n\n[battle 3]: \n\n@replace 0= battle 3\n\nfound heavy armour hostile\n\nFight:\n[[battle phase test]] \n\n[[battle phase test]]:\n\nStatus: \nHealth: {testplayer_HP}HP   \nArmour rating: {testarmour_player}  \nAttack: {testplayer_attack} \n\n\n{label:00=[attack physical](test physical attack) (does more damage to unarmoured)}      \n{label:00=[attack energy](test energy attack) (does more damage to sheilds)}      \n{label:00=[attack explosive](test explosive attack) (does more damage to armour)}  \n\n[test physical attack]: \n\n@replace 00=\n\nattack\n\n    {if testhostile_sheild=&gt;1:{    squiffy.story.passage(\"testsheild physical hit\")} }{else: }\n\n    {if testarmour_hostile=&gt;1:{ squiffy.story.passage(\"testarmour physical hit\") }{else: }\n\n    {if testhostile_HP=&gt;1:{ squiffy.story.passage(\"testhealth physical hit\")} }{else: }\n\n    {if testhostile_HP=&lt;0:[[testvictory]].}{else: error }\n\n[testsheild physical hit]: \n\n@inc testhostile_hp {testplayer_attack * 0.2}\n        \n    squiffy.story.passage(\"Hostile stats\")\n\n[testarmour physical hit]: \n\n@inc testhostile_hp {testplayer_attack * 0.8}\n\nsquiffy.story.passage(\"Hostile stats\")\n\n[testhealth physical hit]: \n\nsquiffy.story.passage(\"Hostile stats\")\n\n@inc testhostile_hp {testplayer_attack * 1.2}\n\n[test energy attack]: \n\n@replace 00=\n\n\n\n[test explosive attack]: \n\n@replace 00=\n\n\n\n[Hostile stats]: \n\nHostile status: \nHealth: {testhostile_HP}    \nArmour: {testarmour_hostile}    \nsheild: {testhostile_sheild}    \n\n\n[battle hostile test]: \n\n\n\n\n\n[[testDefeat]]:\n\nhow?\n\n[[testvictory]]:\n\nwell done\n\n</code></pre>\n<p>but no matter what nothing happens, this software just refused to combine commands or calculate things together....</p>\n<p>If someone finds a way to do it then cool... am giving up on a battle system using this thing lol</p>\n\n",
      "PostDate": "2022-01-29T19:48:09.2636082Z",
      "LastEditDate": "2022-01-29T21:05:43.3516168Z",
      "link": null
    },
    {
      "PostId": "b56cdd2c-6bcb-45a5-b6cd-5ecc1730d601",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> tried other ways like this:\r\n\r\nDid you check out my post earlier?\r\n\r\n> but no matter what nothing happens, this software just refused to combine commands or calculate things together....\r\n\r\nThere are three parts to a Squiffy section or passage. They **MUST** come in the right order.\r\n\r\n**FIRST** The javascript part - lines starting with 4 spaces\r\n**SECOND** The assignments part - lines start with a @ sign\r\n**THIRD**  The text part - Text that's displayed to the player, and text processor commands inside `{` and `}`\r\n\r\nYou have:\r\n>         {if testhostile_sheild=>1:{    squiffy.story.passage(\"testsheild physical hit\")} }{else: }\r\n\r\n`{if` is a text processor command, and can only go in the third part. `squiffy.story.passage` is a javascript function, and can only go in the first part.\r\n\r\nIf you want to do this, you need to put it in the javascript part, and use a javascript `if` statement instead of the text processor one.\r\n\r\nA text processor if statement looks like:\r\n<pre><code>{if <em style=\"color: blue;  font-family: initial\">condition</em>: <em style=\"text: purple;  font-family: initial\">Text to display if it's true</em>}</code></pre>\r\n\r\nThe javascript version is:\r\n<pre><code>    if (<em style=\"color: blue;  font-family: initial\">condition</em>) {\r\n        <em style=\"text: purple;  font-family: initial\">Javascript commands to run if it's true</em>\r\n    }</code></pre>\r\nThey do similar things, but if you want to use `squiffy.story.go` or similar you need to use the javascript one.\r\n\r\nSo the statement I just quoted should be:\r\n```\r\n    if (squiffy.get(\"testhostile_sheild\") >= 1) {\r\n        squiffy.story.passage(\"testsheild physical hit\");\r\n    }\r\n```\r\n(note – you get Squiffy attributes in javascript you use `squiffy.get`. Also, the greater-than-or-equal-to operator is `>=`, not `=>` (which is the non-closing lambda operator))\r\n\r\n<hr style=\"border-top: 1px dotted navy\"/>\r\n\r\nAlso, you have lines like:\r\n>     @inc testhostile_hp {testplayer_attack * 0.2}\r\n\r\nI'm pretty sure this won't work. It tries to add 1 to an attribute named `testhostile_hp {testplayer_attack * 0.2}`.\r\n\r\nYou can't use `{}` expressions in the assignments part, only in the text processor part. And the value being added needs to be either a number or another attribute.\r\n\r\nIf you want to do calculations like this in the text processor, you can use a temporary variable. Like this:\r\n```\r\n{@damage_done = @testplayer_attack}  <= this sets one attribute to be equal to the other\r\n{@damage_done *= 0.2}  <= this multiplies the temporary variable by 0.2\r\n{@testhostile_hp -= @damage_done}  <= this reduces testhostile_hp by the temporary variable\r\n```\r\nI'm not sure if you can do the same thing with `@set` in the attributes part - it's likely, but I've never tried it\r\n\r\nOr you could do it in the Javascript part:\r\n```\r\n    var hp = squiffy.get(\"testhostile_hp\");   // gets a Squiffy attribute into a JS variable\r\n    var damage = squiffy.get(\"testplayer_attack\");\r\n    hp -= damage * 0.2; // JS lets you use expressions on the right had side of an =\r\n    squiffy.set(\"testhostile_hp\", hp);   // and put the result back in a Squiffy variable\r\n```\r\nor without all the temporary variables that would be:\r\n```\r\n    squiffy.set(\"testhostile_hp\", squiffy.get(\"testhostile_hp\") - squiffy.get(\"testplayer_attack\") * 0.2);\r\n```\r\n(which is shorter, but maybe harder to understand)\r\n\r\nBasically, try to use the different commands in the part that they work in.\r\n\r\nDoes that help?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>tried other ways like this:</p>\n</blockquote>\n<p>Did you check out my post earlier?</p>\n<blockquote>\n<p>but no matter what nothing happens, this software just refused to combine commands or calculate things together....</p>\n</blockquote>\n<p>There are three parts to a Squiffy section or passage. They <strong>MUST</strong> come in the right order.</p>\n<p><strong>FIRST</strong> The javascript part - lines starting with 4 spaces<br>\n<strong>SECOND</strong> The assignments part - lines start with a @ sign<br>\n<strong>THIRD</strong>  The text part - Text that's displayed to the player, and text processor commands inside <code>{</code> and <code>}</code></p>\n<p>You have:</p>\n<blockquote>\n<pre><code>    {if testhostile_sheild=&gt;1:{    squiffy.story.passage(\"testsheild physical hit\")} }{else: }\n</code></pre>\n</blockquote>\n<p><code>{if</code> is a text processor command, and can only go in the third part. <code>squiffy.story.passage</code> is a javascript function, and can only go in the first part.</p>\n<p>If you want to do this, you need to put it in the javascript part, and use a javascript <code>if</code> statement instead of the text processor one.</p>\n<p>A text processor if statement looks like:</p>\n<pre><code>{if <em style=\"color: blue; font-family: initial\">condition</em>: <em style=\"font-family: initial\">Text to display if it's true</em>}</code></pre>\n<p>The javascript version is:</p>\n<pre><code>    if (<em style=\"color: blue; font-family: initial\">condition</em>) {\n        <em style=\"font-family: initial\">Javascript commands to run if it's true</em>\n    }</code></pre>\n<p>They do similar things, but if you want to use <code>squiffy.story.go</code> or similar you need to use the javascript one.</p>\n<p>So the statement I just quoted should be:</p>\n<pre><code>    if (squiffy.get(\"testhostile_sheild\") &gt;= 1) {\n        squiffy.story.passage(\"testsheild physical hit\");\n    }\n</code></pre>\n<p>(note – you get Squiffy attributes in javascript you use <code>squiffy.get</code>. Also, the greater-than-or-equal-to operator is <code>&gt;=</code>, not <code>=&gt;</code> (which is the non-closing lambda operator))</p>\n<hr style=\"border-top: 1px dotted navy\">\n<p>Also, you have lines like:</p>\n<blockquote>\n<pre><code>@inc testhostile_hp {testplayer_attack * 0.2}\n</code></pre>\n</blockquote>\n<p>I'm pretty sure this won't work. It tries to add 1 to an attribute named <code>testhostile_hp {testplayer_attack * 0.2}</code>.</p>\n<p>You can't use <code>{}</code> expressions in the assignments part, only in the text processor part. And the value being added needs to be either a number or another attribute.</p>\n<p>If you want to do calculations like this in the text processor, you can use a temporary variable. Like this:</p>\n<pre><code>{@damage_done = @testplayer_attack}  &lt;= this sets one attribute to be equal to the other\n{@damage_done *= 0.2}  &lt;= this multiplies the temporary variable by 0.2\n{@testhostile_hp -= @damage_done}  &lt;= this reduces testhostile_hp by the temporary variable\n</code></pre>\n<p>I'm not sure if you can do the same thing with <code>@set</code> in the attributes part - it's likely, but I've never tried it</p>\n<p>Or you could do it in the Javascript part:</p>\n<pre><code>    var hp = squiffy.get(\"testhostile_hp\");   // gets a Squiffy attribute into a JS variable\n    var damage = squiffy.get(\"testplayer_attack\");\n    hp -= damage * 0.2; // JS lets you use expressions on the right had side of an =\n    squiffy.set(\"testhostile_hp\", hp);   // and put the result back in a Squiffy variable\n</code></pre>\n<p>or without all the temporary variables that would be:</p>\n<pre><code>    squiffy.set(\"testhostile_hp\", squiffy.get(\"testhostile_hp\") - squiffy.get(\"testplayer_attack\") * 0.2);\n</code></pre>\n<p>(which is shorter, but maybe harder to understand)</p>\n<p>Basically, try to use the different commands in the part that they work in.</p>\n<p>Does that help?</p>\n\n",
      "PostDate": "2022-01-29T21:46:36.1223821Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "13ce5b77-88b1-4ff7-a5b3-1aecbed31c33",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The \"RUN\" button is your friend. While I'm coding JS, I hit it every line or two to make sure I can still compile. If you sit all night and code, you'll find yourself behind the eightball if something goes wrong.",
      "EditableFormat": "markdown",
      "HTML": "<p>The \"RUN\" button is your friend. While I'm coding JS, I hit it every line or two to make sure I can still compile. If you sit all night and code, you'll find yourself behind the eightball if something goes wrong.</p>\n\n",
      "PostDate": "2022-02-04T03:09:24.1623767Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
