{
  "Topic": {
    "TopicId": "mr9wju8ju02bwneovbdmzw",
    "ForumId": "10",
    "Title": "[SOLVED] Double Checking Syntax :) ",
    "LastUpdated": "2016-09-28T06:05:55.0053692Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a92af4de-44f3-4ef1-84a1-fffed73f0c91",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I probably already know the answer to this, but I need to double check. If you have a boolean on the game object and you want to use it in a script, it would be...\r\n\r\n```\r\n{if game.blahblah=True:}\r\n```\r\nRight?\r\n\r\nThanks in advance!",
      "EditableFormat": "markdown",
      "HTML": "<p>I probably already know the answer to this, but I need to double check. If you have a boolean on the game object and you want to use it in a script, it would be...</p>\n<pre><code>{if game.blahblah=True:}\n</code></pre>\n<p>Right?</p>\n<p>Thanks in advance!</p>\n\n",
      "PostDate": "2016-09-28T06:05:55.0053692Z",
      "LastEditDate": "2016-09-28T17:09:40.9067722Z"
    },
    {
      "PostId": "34fb8c26-ad60-4a77-b20d-11bff77743a8",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "for text processor commands, you almost got it:\r\n\r\nhttp://docs.textadventures.co.uk/quest/text_processor.html\r\n\r\n```\r\n{if game.NAME_OF_BOOLEAN_ATTRIBUTE:YOUR_DESIRED_TEXT_OUTPUT} // for '=true' --- quest understands/defaults that having no '= true/false', is '=true', so when you want to be checking for true, you don't need the '=true' on it (and it saves an un-needed checking operation, as it's programmed to already be understood/defaulted as '=true')\r\n\r\nand for doing false, you can do it two ways:\r\n\r\n{if game.NAME_OF_BOOLEAN_ATTRIBUTE=false:YOUR_DESIRED_TEXT_OUTPUT}\r\n~OR~\r\n{if not game.NAME_OF_BOOLEAN_ATTRIBUTE:YOUR_DESIRED_TEXT_OUTPUT}\r\n\r\nbut, again, in this case, using the 'not' syntax is more efficient (less operations done), than using the '=false' syntax\r\n```\r\n\r\nas for directly in code scripting:\r\n\r\n```\r\nif (game.NAME_OF_BOOLEAN_ATTRIBUTE) { // for 'true' --- same reasoning as explained above, the '=true' is not needed\r\n  // script(s)\r\n}\r\n// optionally (as many as you want):\r\nelse if (CONDITION_FULL_STATEMENT/S) {\r\n  // script(s)\r\n}\r\n// optionally:\r\nelse {\r\n  // script(s)\r\n}\r\n\r\nif (game.NAME_OF_BOOLEAN_ATTRIBUTE = false) { // for 'false' --- again, using the 'not' syntax is better\r\n  // script(s)\r\n}\r\n// optionally (as many as you want):\r\nelse if (CONDITION_FULL_STATEMENT/S) {\r\n  // script(s)\r\n}\r\n// optionally:\r\nelse {\r\n  // script(s)\r\n}\r\n\r\n// OR:\r\n\r\nif (not game.NAME_OF_BOOLEAN_ATTRIBUTE) { // for 'false' --- same reasoning as explained above, the 'not' syntax is better than the '=false' syntax\r\n  // script(s)\r\n}\r\n// optionally (as many as you want):\r\nelse if (CONDITION_FULL_STATEMENT/S) {\r\n  // script(s)\r\n}\r\n// optionally:\r\nelse {\r\n  // script(s)\r\n}\r\n```\r\n\r\noh, and real quick explanation:\r\n\r\n```\r\na full statement in quest coding (think of like what makes a full sentence in human language: subject and verb):\r\n\r\nAttribute VARIABLES:\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE\r\n~OR~\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION\r\n\r\nVariable VARIABLES:\r\n\r\nNAME_OF_Variable\r\n~OR~\r\nNAME_OF_Variable = VALUE_OR_EXPRESSION\r\n\r\nConditional (Full) Statements:\r\n\r\n(a full statement is required for each of your conditionals!)\r\n\r\nAttribute VARIABLES:\r\n\r\n(I'm leaving off the optional 'else ifs' and 'else' --- too much work)\r\n\r\nif (NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION) {\r\n  // script(s)\r\n}\r\n\r\nif (NAME_OF_OBJECT_1.NAME_OF_ATTRIBUTE_1  = VALUE_OR_EXPRESSION and NAME_OF_OBJECT_2.NAME_OF_ATTRIBUTE_2  = VALUE_OR_EXPRESSION and NAME_OF_OBJECT_3.NAME_OF_ATTRIBUTE_3  = VALUE_OR_EXPRESSION) {\r\n  // script(s)\r\n}\r\n\r\nif (NAME_OF_OBJECT_1.NAME_OF_ATTRIBUTE_1  = VALUE_OR_EXPRESSION or NAME_OF_OBJECT_2.NAME_OF_ATTRIBUTE_2  = VALUE_OR_EXPRESSION or NAME_OF_OBJECT_3.NAME_OF_ATTRIBUTE_3  = VALUE_OR_EXPRESSION) {\r\n  // script(s)\r\n}\r\n\r\n// and all the other infinite (if you had infinite conditionals, lol) combinations of 'and' and 'or' usages... you can use parenthesis to split it up as you want for desired ordering/order-of-operations, just like in/with math: if ((cond1 and cond2) or (cond3 and cond4)) { /* scripts */ } --- though this is boolean logic, which is a bit difficult to follow/understand at first...\r\n\r\nVariable VARIBLES:\r\n\r\nif (NAME_OF_Variable  = VALUE_OR_EXPRESSION) {\r\n  // script(s)\r\n}\r\n\r\nif (NAME_OF_Variable_1  = VALUE_OR_EXPRESSION_1 and NAME_OF_Variable_2  = VALUE_OR_EXPRESSION_2 and NAME_OF_Variable_3  = VALUE_OR_EXPRESSION_3) {\r\n  // script(s)\r\n}\r\n\r\nif (NAME_OF_Variable_1  = VALUE_OR_EXPRESSION_1 or NAME_OF_Variable_2  = VALUE_OR_EXPRESSION_2 or NAME_OF_Variable_3  = VALUE_OR_EXPRESSION_3) {\r\n  // script(s)\r\n}\r\n\r\n// the syntax is similiar as shown/explained near the very top of this post for specifically Boolean Attributes/Variables VARIABLES (as it's only either: true or false)\r\n```\r\n\r\nessentially, the memorization/understanding/conception is that there's 3 main grammer/logic operators/opertions, and in quest, they are:\r\n\r\n```\r\nconjuntion: 'and'\r\ndisjunction: 'or'\r\nnegation (opposite): 'not' or '<>'\r\n\r\nTruth Tables:\r\n\r\nIDENTITY/DEFINITION (this is a bit obvious hopefully, but whatever, for completeness):\r\nfalse -> FALSE // yes, 'false' is 'FALSE', lol\r\ntrue -> TRUE // yes, 'true' is 'TRUE', lol\r\n\r\nNEGATION/NOT (opposite):\r\nnot false -> TRUE\r\nnot true -> FALSE\r\n\r\nAND:\r\ntrue and true -> TRUE\r\nfalse and true -> FALSE\r\ntrue and false -> FALSE\r\nfalse and false -> FALSE\r\n\r\nOR:\r\ntrue or true -> TRUE\r\nfalse or true -> TRUE\r\ntrue or false -> TRUE\r\nfalse or false -> FALSE\r\n\r\nif (HK.sex = \"male\") { then do blah\r\n// if (true), true -> TRUE, so DO blah\r\n\r\nif (HK.sex = \"female\") { then do blah\r\n// if (false), false -> FALSE, so do NOT do blah\r\n\r\nif (HK.sex = \"male\" and HK.sex = \"female\") { then do blah\r\n// if (true and false), true and false -> FALSE, so do NOT do blah\r\n\r\nif (HK.sex = \"male\" or HK.sex = \"female\") { then do blah\r\n// if (true or false), true or false -> TRUE, so DO blah\r\n\r\nif (HK.sex = \"male\" and HK.favorite_color = \"black\") { then do blah\r\n// if (true and true), true and true -> TRUE, so DO blah\r\n\r\nif (not HK.sex = \"male\") { then do blah\r\n// if (not true), not true -> FALSE, so do NOT do blah\r\n\r\n if (not HK.sex = \"female\") { then do blah\r\n// if (not false), not false -> TRUE, so DO blah\r\n\r\nif (not HK.sex = \"male\" and not HK.favorite_color = \"black\") { then do blah\r\n// if ([(not true) and (not true)]), [(not true -> false) and (not true -> false)] -> [(false) and (false)] -> FALSE, so do NOT do blah\r\n\r\nif (not HK.sex = \"female\" and not HK.favorite_color = \"pink\") { then do blah\r\n// if ([(not false) and (not false)]), [(not false -> true) and (not false -> true)] -> [(true) and (true)] -> TRUE, so DO blah\r\n```\r\n\r\n--------------\r\n\r\nI'm taking a symbolic logic philosophy class right now, and our professor gives a good explanation on how to understand boolean logic stuff:\r\n\r\n```\r\npretend you got a 5 year old kid, and you promise him/her whatever (see the boolean logic conditionals), well, do you keep your promise or not? --- let's do an example:\r\n\r\nAND:\r\nBe quiet during the car ride, and I'll take you to both: disneyland and a pizza restuarant. For me to keep my promise (TRUE), I must take my kid to both disneyland (true) and a pizza restaurant (true). However, if I take my kid to neither place (false and false) or if I take my kid to only one place (false and true --- or --- true and false), then I broke my promise (FALSE).\r\n\r\nOR:\r\nBe quiet during the car ride, and I'll take you to either: disneyland or a pizza restuarant. For me to keep my promise (TRUE), I must take my kid to either: both disneyland (true) and a pizza restaurant (true), or to just one of the places (true and false --- or --- false and true). However, if I take my kid to neither place (false and false), then I broke my promise (FALSE). While my kid would of course like to go to both disneyland and a pizza restaurant, if I take him/her to one place or the other, I've kept my promise (TRUE). And, if I've taken him to both places (true and true), then I still kept my promise (TRUE), as my kid did go to one of them.\r\n\r\nNOT:\r\nthis logic should be pretty straight forward... but the examples below, don't work so well/straight-forward, lol.... meh\r\n\r\nbe quiet and I'll (whisperingly) not (and now back to audibly) take you to disneyland\r\nthe kid heard me saying I'm taking him/her to disneyland (true), so if I don't (not true), then I'm breaking my promise (FALSE)\r\n\r\nbe quiet and I'll NOT take you to disneyland... not/just-kidding, we'll go to disneyland!\r\nthe kid heard me saying I'm NOT not-taking him/her to disneyland (NOT false == false ... NOT/just-kidding), so if I don't (NOT true == true... not/just-kidding... ya, I'm cruel... just for this example, lol), then I'm breaking my promise (FALSE)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>for text processor commands, you almost got it:</p>\n<p>http://docs.textadventures.co.uk/quest/text_processor.html</p>\n<pre><code>{if game.NAME_OF_BOOLEAN_ATTRIBUTE:YOUR_DESIRED_TEXT_OUTPUT} // for '=true' --- quest understands/defaults that having no '= true/false', is '=true', so when you want to be checking for true, you don't need the '=true' on it (and it saves an un-needed checking operation, as it's programmed to already be understood/defaulted as '=true')\n\nand for doing false, you can do it two ways:\n\n{if game.NAME_OF_BOOLEAN_ATTRIBUTE=false:YOUR_DESIRED_TEXT_OUTPUT}\n~OR~\n{if not game.NAME_OF_BOOLEAN_ATTRIBUTE:YOUR_DESIRED_TEXT_OUTPUT}\n\nbut, again, in this case, using the 'not' syntax is more efficient (less operations done), than using the '=false' syntax\n</code></pre>\n<p>as for directly in code scripting:</p>\n<pre><code>if (game.NAME_OF_BOOLEAN_ATTRIBUTE) { // for 'true' --- same reasoning as explained above, the '=true' is not needed\n  // script(s)\n}\n// optionally (as many as you want):\nelse if (CONDITION_FULL_STATEMENT/S) {\n  // script(s)\n}\n// optionally:\nelse {\n  // script(s)\n}\n\nif (game.NAME_OF_BOOLEAN_ATTRIBUTE = false) { // for 'false' --- again, using the 'not' syntax is better\n  // script(s)\n}\n// optionally (as many as you want):\nelse if (CONDITION_FULL_STATEMENT/S) {\n  // script(s)\n}\n// optionally:\nelse {\n  // script(s)\n}\n\n// OR:\n\nif (not game.NAME_OF_BOOLEAN_ATTRIBUTE) { // for 'false' --- same reasoning as explained above, the 'not' syntax is better than the '=false' syntax\n  // script(s)\n}\n// optionally (as many as you want):\nelse if (CONDITION_FULL_STATEMENT/S) {\n  // script(s)\n}\n// optionally:\nelse {\n  // script(s)\n}\n</code></pre>\n<p>oh, and real quick explanation:</p>\n<pre><code>a full statement in quest coding (think of like what makes a full sentence in human language: subject and verb):\n\nAttribute VARIABLES:\n\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE\n~OR~\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION\n\nVariable VARIABLES:\n\nNAME_OF_Variable\n~OR~\nNAME_OF_Variable = VALUE_OR_EXPRESSION\n\nConditional (Full) Statements:\n\n(a full statement is required for each of your conditionals!)\n\nAttribute VARIABLES:\n\n(I'm leaving off the optional 'else ifs' and 'else' --- too much work)\n\nif (NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION) {\n  // script(s)\n}\n\nif (NAME_OF_OBJECT_1.NAME_OF_ATTRIBUTE_1  = VALUE_OR_EXPRESSION and NAME_OF_OBJECT_2.NAME_OF_ATTRIBUTE_2  = VALUE_OR_EXPRESSION and NAME_OF_OBJECT_3.NAME_OF_ATTRIBUTE_3  = VALUE_OR_EXPRESSION) {\n  // script(s)\n}\n\nif (NAME_OF_OBJECT_1.NAME_OF_ATTRIBUTE_1  = VALUE_OR_EXPRESSION or NAME_OF_OBJECT_2.NAME_OF_ATTRIBUTE_2  = VALUE_OR_EXPRESSION or NAME_OF_OBJECT_3.NAME_OF_ATTRIBUTE_3  = VALUE_OR_EXPRESSION) {\n  // script(s)\n}\n\n// and all the other infinite (if you had infinite conditionals, lol) combinations of 'and' and 'or' usages... you can use parenthesis to split it up as you want for desired ordering/order-of-operations, just like in/with math: if ((cond1 and cond2) or (cond3 and cond4)) { /* scripts */ } --- though this is boolean logic, which is a bit difficult to follow/understand at first...\n\nVariable VARIBLES:\n\nif (NAME_OF_Variable  = VALUE_OR_EXPRESSION) {\n  // script(s)\n}\n\nif (NAME_OF_Variable_1  = VALUE_OR_EXPRESSION_1 and NAME_OF_Variable_2  = VALUE_OR_EXPRESSION_2 and NAME_OF_Variable_3  = VALUE_OR_EXPRESSION_3) {\n  // script(s)\n}\n\nif (NAME_OF_Variable_1  = VALUE_OR_EXPRESSION_1 or NAME_OF_Variable_2  = VALUE_OR_EXPRESSION_2 or NAME_OF_Variable_3  = VALUE_OR_EXPRESSION_3) {\n  // script(s)\n}\n\n// the syntax is similiar as shown/explained near the very top of this post for specifically Boolean Attributes/Variables VARIABLES (as it's only either: true or false)\n</code></pre>\n<p>essentially, the memorization/understanding/conception is that there's 3 main grammer/logic operators/opertions, and in quest, they are:</p>\n<pre><code>conjuntion: 'and'\ndisjunction: 'or'\nnegation (opposite): 'not' or '&lt;&gt;'\n\nTruth Tables:\n\nIDENTITY/DEFINITION (this is a bit obvious hopefully, but whatever, for completeness):\nfalse -&gt; FALSE // yes, 'false' is 'FALSE', lol\ntrue -&gt; TRUE // yes, 'true' is 'TRUE', lol\n\nNEGATION/NOT (opposite):\nnot false -&gt; TRUE\nnot true -&gt; FALSE\n\nAND:\ntrue and true -&gt; TRUE\nfalse and true -&gt; FALSE\ntrue and false -&gt; FALSE\nfalse and false -&gt; FALSE\n\nOR:\ntrue or true -&gt; TRUE\nfalse or true -&gt; TRUE\ntrue or false -&gt; TRUE\nfalse or false -&gt; FALSE\n\nif (HK.sex = \"male\") { then do blah\n// if (true), true -&gt; TRUE, so DO blah\n\nif (HK.sex = \"female\") { then do blah\n// if (false), false -&gt; FALSE, so do NOT do blah\n\nif (HK.sex = \"male\" and HK.sex = \"female\") { then do blah\n// if (true and false), true and false -&gt; FALSE, so do NOT do blah\n\nif (HK.sex = \"male\" or HK.sex = \"female\") { then do blah\n// if (true or false), true or false -&gt; TRUE, so DO blah\n\nif (HK.sex = \"male\" and HK.favorite_color = \"black\") { then do blah\n// if (true and true), true and true -&gt; TRUE, so DO blah\n\nif (not HK.sex = \"male\") { then do blah\n// if (not true), not true -&gt; FALSE, so do NOT do blah\n\n if (not HK.sex = \"female\") { then do blah\n// if (not false), not false -&gt; TRUE, so DO blah\n\nif (not HK.sex = \"male\" and not HK.favorite_color = \"black\") { then do blah\n// if ([(not true) and (not true)]), [(not true -&gt; false) and (not true -&gt; false)] -&gt; [(false) and (false)] -&gt; FALSE, so do NOT do blah\n\nif (not HK.sex = \"female\" and not HK.favorite_color = \"pink\") { then do blah\n// if ([(not false) and (not false)]), [(not false -&gt; true) and (not false -&gt; true)] -&gt; [(true) and (true)] -&gt; TRUE, so DO blah\n</code></pre>\n<hr>\n<p>I'm taking a symbolic logic philosophy class right now, and our professor gives a good explanation on how to understand boolean logic stuff:</p>\n<pre><code>pretend you got a 5 year old kid, and you promise him/her whatever (see the boolean logic conditionals), well, do you keep your promise or not? --- let's do an example:\n\nAND:\nBe quiet during the car ride, and I'll take you to both: disneyland and a pizza restuarant. For me to keep my promise (TRUE), I must take my kid to both disneyland (true) and a pizza restaurant (true). However, if I take my kid to neither place (false and false) or if I take my kid to only one place (false and true --- or --- true and false), then I broke my promise (FALSE).\n\nOR:\nBe quiet during the car ride, and I'll take you to either: disneyland or a pizza restuarant. For me to keep my promise (TRUE), I must take my kid to either: both disneyland (true) and a pizza restaurant (true), or to just one of the places (true and false --- or --- false and true). However, if I take my kid to neither place (false and false), then I broke my promise (FALSE). While my kid would of course like to go to both disneyland and a pizza restaurant, if I take him/her to one place or the other, I've kept my promise (TRUE). And, if I've taken him to both places (true and true), then I still kept my promise (TRUE), as my kid did go to one of them.\n\nNOT:\nthis logic should be pretty straight forward... but the examples below, don't work so well/straight-forward, lol.... meh\n\nbe quiet and I'll (whisperingly) not (and now back to audibly) take you to disneyland\nthe kid heard me saying I'm taking him/her to disneyland (true), so if I don't (not true), then I'm breaking my promise (FALSE)\n\nbe quiet and I'll NOT take you to disneyland... not/just-kidding, we'll go to disneyland!\nthe kid heard me saying I'm NOT not-taking him/her to disneyland (NOT false == false ... NOT/just-kidding), so if I don't (NOT true == true... not/just-kidding... ya, I'm cruel... just for this example, lol), then I'm breaking my promise (FALSE)\n</code></pre>\n\n",
      "PostDate": "2016-09-28T06:30:53.889959Z",
      "LastEditDate": "2016-09-28T07:55:54.4711018Z"
    },
    {
      "PostId": "d97248c0-109a-43d8-9d1b-1ac159792a83",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay! So I was doing it right. Thanks, HK. :D ",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay! So I was doing it right. Thanks, HK. :D</p>\n\n",
      "PostDate": "2016-09-28T17:09:19.0045099Z",
      "LastEditDate": null
    }
  ]
}
