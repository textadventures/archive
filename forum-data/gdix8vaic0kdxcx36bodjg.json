{
  "Topic": {
    "TopicId": "gdix8vaic0kdxcx36bodjg",
    "ForumId": "15",
    "Title": "Need help looping through unknown number of nested arrays",
    "LastUpdated": "2020-12-19T14:55:50.6036528Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c2b79bbb-3aa2-4057-8db3-795d202bc79c",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nFULL DISCLOSURE:\r\n\r\nI've gone 99% crazy trying to make this work, and I know I'm just thinking too hard and/or ignorant (meaning there's some thing(s) I don't know, not that I'm unintelligent (although that is also arguable)).\r\n\r\n---\r\nI can't make JS create the string I want!  (And I'm frustrated.)\r\n\r\n# The Old Code\r\n\r\nMy first attempt (in my currently unfinished item_links library) did not print it out correctly.\r\n\r\nHere is an **example of my old code's output** (it shows the doohickey in the Grue Bot 5000 rather than in the box):\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/102670604-f6e20d00-4154-11eb-8c43-489068a2b299.png)](https://user-images.githubusercontent.com/30656341/102670604-f6e20d00-4154-11eb-8c43-489068a2b299.png)\r\n\r\n---\r\nI just noticed the extra comma after the Grue Bot 5000.  That tells me \"(containing ...)\" was its own array item, which is not how I'd thought I'd coded it.  Bah!\r\n\r\nHere: https://github.com/KVonGit/Quest6Game1/blob/main/game/rhfiles/item_links.js#L153\r\n\r\n```getItemsLinks``` and ```getItemLinkContents``` are the culprits.\r\n\r\nDon't even click on that, though.  Just keep reading.  (Sorry.  You were warned:  I've gone mad.)\r\n\r\n---\r\n# A New Hope (?)\r\n\r\nI'm taking it back to basics.  I made these two \"old-school Quest\" functions:\r\n\r\n\r\n```js\r\nfunction getDirectChildren(item){\r\n\treturn item.getContents(item);\r\n}\r\n```\r\n```\r\nfunction getAllChildren(item){\r\n\tlet result = [];\r\n\tlet children = getDirectChildren(item);\r\n\tif (children.length < 1) return [];\r\n\tchildren.forEach(child => {\r\n\t\tresult.push(child);\r\n\t\t// Added the check on the next line due to occasional errors.\r\n\t\tlet grandchildren = typeof(child.getContents) == 'function' ? child.getContents(child) : [];\r\n\t\tif (grandchildren.length > 0){\r\n\t\t\tresult.push(getAllChildren(child));\r\n\t\t}\r\n\t})\r\n\treturn result;\r\n}\r\n```\r\n\r\n---\r\nIn the game, I have a table.  On the table, is a box and Grue Bot 5000.  In the box, is a doohickey.\r\n\r\nI want it to say: **\"You can see a table (on which there is a box (in which there is a doohickey) and a Grue Bot 5000).\"**\r\n\r\nNow, my \"new\" function:\r\n\r\n```getAllChildren(w.table)``` returns this:\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/102691843-23d60480-41d5-11eb-887f-21336413e9c2.png)](https://user-images.githubusercontent.com/30656341/102691843-23d60480-41d5-11eb-887f-21336413e9c2.png)\r\n\r\n---\r\nThat seems like it's what I want to work with.\r\n\r\nNow, I just need to figure out how to go through it all while creating the string properly.\r\n\r\nOnce I can make it create the string I want, I can easily add the item links into the mix.\r\n\r\nI hate to ask for help with this one.  I have tried and tried to figure it out.  I even tried taking a break and coming back to it, because I know it's something simple.\r\n\r\nI'm also pretty sure mrangel helped me with this in Quest 5 a while ago, but I can't find that thread.\r\n\r\nSigh.\r\n\r\n---\r\nADDED THIS TEXT TO UPDATE THIS POST",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>FULL DISCLOSURE:</p>\n<p>I've gone 99% crazy trying to make this work, and I know I'm just thinking too hard and/or ignorant (meaning there's some thing(s) I don't know, not that I'm unintelligent (although that is also arguable)).</p>\n<hr>\n<p>I can't make JS create the string I want!  (And I'm frustrated.)</p>\n<h1>The Old Code</h1>\n<p>My first attempt (in my currently unfinished item_links library) did not print it out correctly.</p>\n<p>Here is an <strong>example of my old code's output</strong> (it shows the doohickey in the Grue Bot 5000 rather than in the box):</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/102670604-f6e20d00-4154-11eb-8c43-489068a2b299.png\"><img src=\"https://user-images.githubusercontent.com/30656341/102670604-f6e20d00-4154-11eb-8c43-489068a2b299.png\" alt=\"image\"></a></p>\n<hr>\n<p>I just noticed the extra comma after the Grue Bot 5000.  That tells me \"(containing ...)\" was its own array item, which is not how I'd thought I'd coded it.  Bah!</p>\n<p>Here: https://github.com/KVonGit/Quest6Game1/blob/main/game/rhfiles/item_links.js#L153</p>\n<p><code>getItemsLinks</code> and <code>getItemLinkContents</code> are the culprits.</p>\n<p>Don't even click on that, though.  Just keep reading.  (Sorry.  You were warned:  I've gone mad.)</p>\n<hr>\n<h1>A New Hope (?)</h1>\n<p>I'm taking it back to basics.  I made these two \"old-school Quest\" functions:</p>\n<pre><code>function getDirectChildren(item){\n\treturn item.getContents(item);\n}\n</code></pre>\n<pre><code>function getAllChildren(item){\n\tlet result = [];\n\tlet children = getDirectChildren(item);\n\tif (children.length &lt; 1) return [];\n\tchildren.forEach(child =&gt; {\n\t\tresult.push(child);\n\t\t// Added the check on the next line due to occasional errors.\n\t\tlet grandchildren = typeof(child.getContents) == 'function' ? child.getContents(child) : [];\n\t\tif (grandchildren.length &gt; 0){\n\t\t\tresult.push(getAllChildren(child));\n\t\t}\n\t})\n\treturn result;\n}\n</code></pre>\n<hr>\n<p>In the game, I have a table.  On the table, is a box and Grue Bot 5000.  In the box, is a doohickey.</p>\n<p>I want it to say: <strong>\"You can see a table (on which there is a box (in which there is a doohickey) and a Grue Bot 5000).\"</strong></p>\n<p>Now, my \"new\" function:</p>\n<p><code>getAllChildren(w.table)</code> returns this:</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/102691843-23d60480-41d5-11eb-887f-21336413e9c2.png\"><img src=\"https://user-images.githubusercontent.com/30656341/102691843-23d60480-41d5-11eb-887f-21336413e9c2.png\" alt=\"image\"></a></p>\n<hr>\n<p>That seems like it's what I want to work with.</p>\n<p>Now, I just need to figure out how to go through it all while creating the string properly.</p>\n<p>Once I can make it create the string I want, I can easily add the item links into the mix.</p>\n<p>I hate to ask for help with this one.  I have tried and tried to figure it out.  I even tried taking a break and coming back to it, because I know it's something simple.</p>\n<p>I'm also pretty sure mrangel helped me with this in Quest 5 a while ago, but I can't find that thread.</p>\n<p>Sigh.</p>\n<hr>\n<p>ADDED THIS TEXT TO UPDATE THIS POST</p>\n\n",
      "PostDate": "2020-12-19T14:55:50.6036528Z",
      "LastEditDate": "2020-12-19T17:16:58.5714142Z",
      "link": null
    },
    {
      "PostId": "aae46212-63b5-4fb0-bbbb-53b686fcafe2",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This seems to hold the solution (maybe):\r\n\r\n```\r\nlet s = \"\";\r\nlet objArr = getAllChildren(w.table);\r\n\r\n\r\nfunction makeString(arr){\r\n    let string = ''\r\n    arr.forEach(a => {\r\n        if (a.name) {\r\n            string += a.name\r\n        } else if (a.length) {\r\n            string += \" (containing: \";\r\n            string += makeString(a, string)\r\n            string += \" ) \"\r\n        }\r\n        string += \" \"\r\n    })\r\n    return string\r\n}\r\n\r\ns = makeString(objArr)\r\nconsole.log (s)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>This seems to hold the solution (maybe):</p>\n<pre><code>let s = \"\";\nlet objArr = getAllChildren(w.table);\n\n\nfunction makeString(arr){\n    let string = ''\n    arr.forEach(a =&gt; {\n        if (a.name) {\n            string += a.name\n        } else if (a.length) {\n            string += \" (containing: \";\n            string += makeString(a, string)\n            string += \" ) \"\n        }\n        string += \" \"\n    })\n    return string\n}\n\ns = makeString(objArr)\nconsole.log (s)\n</code></pre>\n\n",
      "PostDate": "2020-12-19T15:54:04.4972588Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8b859ab0-1929-451b-a123-55559020c006",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would give each item the responsibility of providing its own string. So the table should return its name and its stuff, and when it gets to the box, it just inserts whatever the box hands it. The box, then, is responsible for its name and contents.\r\n\r\nThe way Quest 6 does it is with nameModifierFunctions. One item can have several of these - it might be switched on _and_ worn _and_ contain various other items - so this is not trivial. Containers all use a function `util.nameModifierFunctionForContainer`, so you might want to look at that.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would give each item the responsibility of providing its own string. So the table should return its name and its stuff, and when it gets to the box, it just inserts whatever the box hands it. The box, then, is responsible for its name and contents.</p>\n<p>The way Quest 6 does it is with nameModifierFunctions. One item can have several of these - it might be switched on <em>and</em> worn <em>and</em> contain various other items - so this is not trivial. Containers all use a function <code>util.nameModifierFunctionForContainer</code>, so you might want to look at that.</p>\n\n",
      "PostDate": "2020-12-19T15:56:39.5978424Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4e99c079-f38e-4871-81c4-353cfe23ca7f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This looks pretty confusing. It feels like there isn't a clear concept of what each function is supposed to do. `getItemLinkContents` particularly appears to return the string returned by `listItemContents`, with the result of calling `getItemLinkContents` on each item appended to the end. You're adding a string to an array, which will just look weird if there's more than one container in the list.\r\n\r\nI can't follow your structure, so I'll try to work out how I'd do it, using only the functions which make sense.\r\n\r\nI'd suggest something looking like…\r\n```\r\nfunction getItemsLinks (arr, turn, art) {\r\n  return arr.map(obj => getObjectLinkWithContents (obj, turn, art));\r\n}\r\n\r\nfunction getObjectLinkWithContents (obj, turn, art) {\r\n  var link = getItemLink (obj, turn, art);\r\n  var contents = (o.listContents ? !o.closed : o.npc) && o.getContents();\r\n  if (contents && contents.length) {\r\n    link += \" (\"\r\n        + (({container: \"containing: \", surface: \"on which you see: \"})[o.contentsType]\r\n            || (o.npc ? \"carrying: \" : \"\"))\r\n        + formatList(getItemsLinks (contents, turn, art), {lastJoiner:lang.list_and})\r\n        + \")\";\r\n  }\r\n  return (link);\r\n}\r\n```\r\n\r\nNotes: You seem to vary whether you're using `item.listContents(item)` or just `item.listContents()`. I've used the latter because it seems more likely and I don't have time to check the details.\r\n\r\nI've not looked into the method signature for `formatList` or `getItemLink`; I just copied the way you used them.and assumed that they will work.",
      "EditableFormat": "markdown",
      "HTML": "<p>This looks pretty confusing. It feels like there isn't a clear concept of what each function is supposed to do. <code>getItemLinkContents</code> particularly appears to return the string returned by <code>listItemContents</code>, with the result of calling <code>getItemLinkContents</code> on each item appended to the end. You're adding a string to an array, which will just look weird if there's more than one container in the list.</p>\n<p>I can't follow your structure, so I'll try to work out how I'd do it, using only the functions which make sense.</p>\n<p>I'd suggest something looking like…</p>\n<pre><code>function getItemsLinks (arr, turn, art) {\n  return arr.map(obj =&gt; getObjectLinkWithContents (obj, turn, art));\n}\n\nfunction getObjectLinkWithContents (obj, turn, art) {\n  var link = getItemLink (obj, turn, art);\n  var contents = (o.listContents ? !o.closed : o.npc) &amp;&amp; o.getContents();\n  if (contents &amp;&amp; contents.length) {\n    link += \" (\"\n        + (({container: \"containing: \", surface: \"on which you see: \"})[o.contentsType]\n            || (o.npc ? \"carrying: \" : \"\"))\n        + formatList(getItemsLinks (contents, turn, art), {lastJoiner:lang.list_and})\n        + \")\";\n  }\n  return (link);\n}\n</code></pre>\n<p>Notes: You seem to vary whether you're using <code>item.listContents(item)</code> or just <code>item.listContents()</code>. I've used the latter because it seems more likely and I don't have time to check the details.</p>\n<p>I've not looked into the method signature for <code>formatList</code> or <code>getItemLink</code>; I just copied the way you used them.and assumed that they will work.</p>\n\n",
      "PostDate": "2020-12-19T15:59:19.4440693Z",
      "LastEditDate": "2020-12-19T16:12:25.7466068Z",
      "link": null
    },
    {
      "PostId": "c79050dc-be53-4640-8f96-bbf9e6f63775",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, I forgot to hit 'Post Reply' over lunch, and you beat me to it :p\r\n\r\nYes, I would suggest making the object handle its own contents. I was just trying to replicate the behaviour of the code in the first post, but working.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, I forgot to hit 'Post Reply' over lunch, and you beat me to it :p</p>\n<p>Yes, I would suggest making the object handle its own contents. I was just trying to replicate the behaviour of the code in the first post, but working.</p>\n\n",
      "PostDate": "2020-12-19T16:00:39.017034Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af76ec45-9b01-4409-82f2-97e66ab72a63",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(In response to the subject: you're not looping over an n-dimensional array. You're looping over a nested array, which is exactly what recursion is for. Putting the items in a nested array seems a bit of an odd thing to do)",
      "EditableFormat": "markdown",
      "HTML": "<p>(In response to the subject: you're not looping over an n-dimensional array. You're looping over a nested array, which is exactly what recursion is for. Putting the items in a nested array seems a bit of an odd thing to do)</p>\n\n",
      "PostDate": "2020-12-19T16:09:51.0371932Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d4668de2-f0aa-4347-96ee-8df70471ae85",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay... Sorry, guys.  I think I figured it out (or at least a roundabout way to do it) before checking back to see if anyone answered.\r\n\r\n```\r\nfunction makeString(arr){\r\n    let string = ''\r\n    arr.forEach(a => {\r\n        if (a.name) {\r\n            string += a.name\r\n        } else if (a.length) {\r\n            string += \"@ \" + makeString(a, string) + '_END_'\r\n        }\r\n        string += \":\"\r\n    })\r\n    string = string.replace(/:@/g, ' (containing')\r\n    string = string.replace(/:_END_/g, ')')\r\n    return string\r\n}\r\n\r\nfunction fakeLinkStringer(arr){\r\n    let s = \"\";\r\n    s = makeString(arr)\r\n    console.log (s)\r\n    let newArr = s.split(':')\r\n    newArr = newArr.filter(el => {\r\n        return el != [];\r\n    });\r\n    let realString = formatList(newArr, {doNotSort:true, lastJoiner:'and'})\r\n    console.log(realString)\r\n}\r\n\r\nfakeLinkStringer(getAllChildren(w.table));\r\n```\r\n\r\n---\r\nThe Grue Bot 5000 is holding an open box in which is a doohickey.\r\n\r\nTHE OUTPUT:  ```Grue_Bot_5000 (containing box (containing doohickey))```\r\n\r\nHurray!\r\n\r\nAdding the articles and the links is the easy part.  Getting this string print this way was the hard part.\r\n\r\n---\r\nAll I plan to use is this along with ```getItemLink```.  (I'm going to make this apply \"carrying\", \"on top of which you see\", and \"in which you see\", according to whether it's an NPC, a surface, or a container.\r\n\r\n\r\nI'm getting rid of all the confusing functions.\r\n\r\nEach item in the game gets a ```linkAlias``` set up in ```settings.setup```.\r\n\r\nI've already got the function to add the article, too.  So, I may have cracked this one.  (Big MAY HAVE.)\r\n\r\n\r\n---\r\n>  Containers all use a function ```util.nameModifierFunctionForContainer```, so you might want to look at that.\r\n\r\nI'll check that out.\r\n\r\n---\r\nI'll test that code you posted out, too, mrangel.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay... Sorry, guys.  I think I figured it out (or at least a roundabout way to do it) before checking back to see if anyone answered.</p>\n<pre><code>function makeString(arr){\n    let string = ''\n    arr.forEach(a =&gt; {\n        if (a.name) {\n            string += a.name\n        } else if (a.length) {\n            string += \"@ \" + makeString(a, string) + '_END_'\n        }\n        string += \":\"\n    })\n    string = string.replace(/:@/g, ' (containing')\n    string = string.replace(/:_END_/g, ')')\n    return string\n}\n\nfunction fakeLinkStringer(arr){\n    let s = \"\";\n    s = makeString(arr)\n    console.log (s)\n    let newArr = s.split(':')\n    newArr = newArr.filter(el =&gt; {\n        return el != [];\n    });\n    let realString = formatList(newArr, {doNotSort:true, lastJoiner:'and'})\n    console.log(realString)\n}\n\nfakeLinkStringer(getAllChildren(w.table));\n</code></pre>\n<hr>\n<p>The Grue Bot 5000 is holding an open box in which is a doohickey.</p>\n<p>THE OUTPUT:  <code>Grue_Bot_5000 (containing box (containing doohickey))</code></p>\n<p>Hurray!</p>\n<p>Adding the articles and the links is the easy part.  Getting this string print this way was the hard part.</p>\n<hr>\n<p>All I plan to use is this along with <code>getItemLink</code>.  (I'm going to make this apply \"carrying\", \"on top of which you see\", and \"in which you see\", according to whether it's an NPC, a surface, or a container.</p>\n<p>I'm getting rid of all the confusing functions.</p>\n<p>Each item in the game gets a <code>linkAlias</code> set up in <code>settings.setup</code>.</p>\n<p>I've already got the function to add the article, too.  So, I may have cracked this one.  (Big MAY HAVE.)</p>\n<hr>\n<blockquote>\n<p>Containers all use a function <code>util.nameModifierFunctionForContainer</code>, so you might want to look at that.</p>\n</blockquote>\n<p>I'll check that out.</p>\n<hr>\n<p>I'll test that code you posted out, too, mrangel.</p>\n\n",
      "PostDate": "2020-12-19T17:15:50.2155431Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1a6f01fb-f52d-4c83-8813-c1dded1e4ebb",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> not looping over an n-dimensional array. You're looping over a nested array\r\n\r\nFixed the subject.\r\n\r\n> Putting the items in a nested array seems a bit of an odd thing to do\r\n\r\nI was copying off of ```GetAllChildren``` in Quest 5, and that's how it turned out.  \r\n\r\n---\r\n> I would give each item the responsibility of providing its own string. So the table should return its name and its stuff, and when it gets to the box, it just inserts whatever the box hands it. The box, then, is responsible for its name and contents.\r\n\r\nInteresting.\r\n\r\nI'll see if I can figure out how to pull this off after a break.\r\n\r\n---\r\n## IMPORTANT\r\n\r\nNo one should waste time looking at the existing code in the item_links library.  I found a bug, tried to fix it, and now the code is all jacked up (and that code is on GitHub).\r\n\r\nMy plan is to revamp nearly all of that library. Hopefully, I'll be done with that tonight or on the morrow.\r\n\r\nIf all else fails, I have backups of every version of that library.  So, I can back up to whatever step is necessary, if the rewrite fails (but I think the rewrite will be successful).",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>not looping over an n-dimensional array. You're looping over a nested array</p>\n</blockquote>\n<p>Fixed the subject.</p>\n<blockquote>\n<p>Putting the items in a nested array seems a bit of an odd thing to do</p>\n</blockquote>\n<p>I was copying off of <code>GetAllChildren</code> in Quest 5, and that's how it turned out.</p>\n<hr>\n<blockquote>\n<p>I would give each item the responsibility of providing its own string. So the table should return its name and its stuff, and when it gets to the box, it just inserts whatever the box hands it. The box, then, is responsible for its name and contents.</p>\n</blockquote>\n<p>Interesting.</p>\n<p>I'll see if I can figure out how to pull this off after a break.</p>\n<hr>\n<h2>IMPORTANT</h2>\n<p>No one should waste time looking at the existing code in the item_links library.  I found a bug, tried to fix it, and now the code is all jacked up (and that code is on GitHub).</p>\n<p>My plan is to revamp nearly all of that library. Hopefully, I'll be done with that tonight or on the morrow.</p>\n<p>If all else fails, I have backups of every version of that library.  So, I can back up to whatever step is necessary, if the rewrite fails (but I think the rewrite will be successful).</p>\n\n",
      "PostDate": "2020-12-19T17:32:41.6492544Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d0188ffd-522c-4ef5-9c53-1308a9a1ed20",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> No one should waste time looking at the existing code in the item_links library. I found a bug, tried to fix it, and now the code is all jacked up (and that code is on GitHub).\r\n\r\nYou probably know this, but in case you do not, you can revert to an earlier version on GitHub.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>No one should waste time looking at the existing code in the item_links library. I found a bug, tried to fix it, and now the code is all jacked up (and that code is on GitHub).</p>\n</blockquote>\n<p>You probably know this, but in case you do not, you can revert to an earlier version on GitHub.</p>\n\n",
      "PostDate": "2020-12-19T18:11:17.7509514Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9318bfba-b91e-4934-8914-3e9428d1a5ad",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My brain is going to silly places with this one now.\r\n\r\n(still haven't looked at the basic code, this was just a silly idea)\r\n```\r\nfunction getVisibleContents() {\r\n  var result;\r\n  if (this is a container and is open) {\r\n    result = some function that gets the contents of this and filters it for visibility, scenery, etc\r\n  } else {\r\n    result = [];\r\n  }\r\n  result.toString = function () {\r\n    if (this.length) {\r\n      return formatList( this.map(obj => {\r\n        var children = obj.getVisibleContents();\r\n        return getItemLink (obj, false, true) + (children.length ? (\" (\" + lang.getContentsPrefixForContainer(obj) + children + \")\") : \"\");\r\n      }), {lastJoiner:lang.list_and});\r\n    } else {\r\n      return lang.list_nothing;\r\n    }\r\n  };\r\n  return result;\r\n}\r\n```\r\n\r\nAlthough on closer inspection, I think that it might make more sense to have this function defined somewhere more global, so that it can be used by any function that returns lists of objects.\r\n\r\nIt means that you can do stuff like:\r\n```\r\n==> console.log(w.table.getContents())\r\n[Object, Object, Object]\r\n\r\n==> msgOrWhateverTheEquivalentFunctionIs(\"On the table is \"+w.table.getContents())\r\nOn the table is a bell, a box (containing: a banana), and a small piece of cheese\r\n```\r\n\r\nYes, in javascript it is perfectly legal to give an array a custom `toString` attribute so that it will come up with something human readable if you add the array to the end of a string.",
      "EditableFormat": "markdown",
      "HTML": "<p>My brain is going to silly places with this one now.</p>\n<p>(still haven't looked at the basic code, this was just a silly idea)</p>\n<pre><code>function getVisibleContents() {\n  var result;\n  if (this is a container and is open) {\n    result = some function that gets the contents of this and filters it for visibility, scenery, etc\n  } else {\n    result = [];\n  }\n  result.toString = function () {\n    if (this.length) {\n      return formatList( this.map(obj =&gt; {\n        var children = obj.getVisibleContents();\n        return getItemLink (obj, false, true) + (children.length ? (\" (\" + lang.getContentsPrefixForContainer(obj) + children + \")\") : \"\");\n      }), {lastJoiner:lang.list_and});\n    } else {\n      return lang.list_nothing;\n    }\n  };\n  return result;\n}\n</code></pre>\n<p>Although on closer inspection, I think that it might make more sense to have this function defined somewhere more global, so that it can be used by any function that returns lists of objects.</p>\n<p>It means that you can do stuff like:</p>\n<pre><code>==&gt; console.log(w.table.getContents())\n[Object, Object, Object]\n\n==&gt; msgOrWhateverTheEquivalentFunctionIs(\"On the table is \"+w.table.getContents())\nOn the table is a bell, a box (containing: a banana), and a small piece of cheese\n</code></pre>\n<p>Yes, in javascript it is perfectly legal to give an array a custom <code>toString</code> attribute so that it will come up with something human readable if you add the array to the end of a string.</p>\n\n",
      "PostDate": "2020-12-19T18:51:09.6595748Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fe952164-9fe4-49a3-8453-9068d5a3059a",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ Pixie\r\n\r\nConcerning ```util.nameModifierFunctionForContainer```\r\n\r\nIs this invoked already somehow?  Or do I need to add something to ```io.modulesToUpdate``` to call them on the items with the attribute?  (Or would you handle that differently?)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>@ Pixie</p>\n<p>Concerning <code>util.nameModifierFunctionForContainer</code></p>\n<p>Is this invoked already somehow?  Or do I need to add something to <code>io.modulesToUpdate</code> to call them on the items with the attribute?  (Or would you handle that differently?)</p>\n\n",
      "PostDate": "2020-12-20T18:55:02.5468875Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "691b368b-f473-47c8-8cf5-9c1d4ad40c4a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(yes, I'm just rambling now, stuff I thought of when reading through this thread)\r\n\r\nWith regard to `getItemLink`, it seems a little odd to have this as a static function.\r\n\r\nWould it make more sense (guessing the names of classes/functions/etc just to give you an idea what  I mean) to have something like:\r\n```\r\nItem.prototype.toString = function() {\r\n  if (settings.enableHyperlinks && !this.disableObjectLink && this.getObjectLink) {\r\n    return this.getObjectLink();\r\n  } else {\r\n    return this.getDisplayName();\r\n  }\r\n};\r\n\r\nItem.prototype.getObjectLink = function(linktext='') {\r\n  if (!linktext) { linktext = this.getDisplayName(); }\r\n  return '<a class=\"object-link\" objectid=\"' + this.id + '\">' + linktext + '</a>';\r\n};\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(yes, I'm just rambling now, stuff I thought of when reading through this thread)</p>\n<p>With regard to <code>getItemLink</code>, it seems a little odd to have this as a static function.</p>\n<p>Would it make more sense (guessing the names of classes/functions/etc just to give you an idea what  I mean) to have something like:</p>\n<pre><code>Item.prototype.toString = function() {\n  if (settings.enableHyperlinks &amp;&amp; !this.disableObjectLink &amp;&amp; this.getObjectLink) {\n    return this.getObjectLink();\n  } else {\n    return this.getDisplayName();\n  }\n};\n\nItem.prototype.getObjectLink = function(linktext='') {\n  if (!linktext) { linktext = this.getDisplayName(); }\n  return '&lt;a class=\"object-link\" objectid=\"' + this.id + '\"&gt;' + linktext + '&lt;/a&gt;';\n};\n</code></pre>\n\n",
      "PostDate": "2020-12-20T19:18:43.1983656Z",
      "LastEditDate": "2020-12-20T19:19:03.9371734Z",
      "link": null
    },
    {
      "PostId": "1fdde783-04f0-4fae-bd7e-0cff03e60aac",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Is this invoked already somehow? Or do I need to add something to io.modulesToUpdate to call them on the items with the attribute? (Or would you handle that differently?)\r\n\r\nIt is added in the CONTAINER and SURFACE templates, and gets invoked in lang.getName.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is this invoked already somehow? Or do I need to add something to io.modulesToUpdate to call them on the items with the attribute? (Or would you handle that differently?)</p>\n</blockquote>\n<p>It is added in the CONTAINER and SURFACE templates, and gets invoked in lang.getName.</p>\n\n",
      "PostDate": "2020-12-20T19:51:01.8612205Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05c2503c-61bc-499a-b73c-651f2d0a9b11",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Would it make more sense [ ... ] to have something like:\r\n\r\nMost probably so, and I'm in the process of switching it over to handling it that way.\r\n\r\nI've got all the old code stripped down to just a few functions and modifications now. So, it should be easy to plug a few things into some prototype item attributes.\r\n\r\n...but first I want to know how the name modifier functions are supposed to work (as opposed to how I could make something work, which is what I normally aim for).\r\n\r\nI've had the feeling I've been trying to reinvent wheels throughout this process, and I've been correct most of the time (in more ways than one).  I search GitHub for the code I seek, and it returns nothing.  So, I write a function or two to cover it.  Later, I find the existing function with the string I searched right there in the code.  Now, I've cloned the whole repo and the wiki, and I use GREP to search.  It works much better.\r\n\r\nFor instance, there is code for ```nameModifierFunctionForContainer``` in the GitHub repo.  If you search for ```nameModifier```, it will not return that code.  I even tried ```nameModifier*```, and got nothing.  Maybe there's some wildcard symbol I'm supposed to use on GitHub?  I don't know.\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/102723469-b5c13880-42cd-11eb-8fa1-d36370979ad9.png)\r\n\r\n---\r\nSearching the entire string does provide results, though:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/102723492-e5704080-42cd-11eb-9999-3952f821e20c.png)\r\n\r\n---\r\nAre those all the results one could want?  My Magic 8-ball says, \"Probably not.\"\r\n\r\n(Here's [the code](https://github.com/ThePix/QuestJS/blob/9fd439e6379f4ef9ac50397acebfe7474d45c4fe/lib/_util.js#L741), by the way.)\r\n\r\nAnyway, I've learned to use GREP in place of Github's search thingy.\r\n\r\n<pre id\"code-div\" style=\"max-height:300px;overflow:auto;max-width:1054px;\"><code style=\"white-space: pre;\">[rh@yourmomshouse QuestJS.wiki]$ grep -nr nameMod* *\r\nAttributes-for-items.md:293:A name modifier is a brief word or phrase that flags the current state of an object. It might flag a hat as \"worn\" or a torch as \"providing light\". Templates do this for you in a lot of instances, but you might want to add you own. Just add a \"nameModifierFunction\" function that accepts a list for the parameter.\r\nAttributes-for-items.md:299:  nameModifierFunction:function(list) {\r\nAttributes-for-items.md:313:  for (let f of item.nameModifierFunctions) f(item, list)\r\nAttributes-for-items.md:314:  if (item.nameModifierFunction) item.nameModifierFunctions(list)\r\nCustom-Templates.md:91:    o.nameModifierFunctions.push(function(o, list) {\r\nCustom-Templates.md:113:    o.nameModifierFunctions.push(function(o, list) {\r\n</code></pre>\r\n\r\n<pre id\"code-div\" style=\"max-height:300px;overflow:auto;max-width:1054px;\"><code style=\"white-space: pre;\">[rh@yourmomshouse QuestJS-work_in_progress]$ grep -nr nameMod* *\r\nlib/_templates.js:71:  res.nameModifierFunctions = [function(o, list) {\r\nlib/_templates.js:405:    o.nameModifierFunctions.push(function(o, list) {\r\nlib/_templates.js:545:    o.nameModifierFunctions.push(util.nameModifierFunctionForContainer) \r\nlib/_templates.js:546:    //console.log(o.nameModifierFunctions)\r\nlib/_templates.js:584:  res.onCreation = function(o) { o.nameModifierFunctions.push(util.nameModifierFunctionForContainer) }\r\nlib/_templates.js:605:    o.nameModifierFunctions.push(function(o, list) {\r\nlib/_templates.js:802:const SWITCHABLE = function(alreadyOn, nameModifier) {\r\nlib/_templates.js:805:  res.nameModifier = nameModifier\r\nlib/_templates.js:813:    o.nameModifierFunctions.push(function(o, list) {\r\nlib/_templates.js:814:      if (o.nameModifier && o.switchedon) list.push(o.nameModifier)\r\nlib/_templates.js:1485:      o.nameModifierFunctions.push(function(o, l) {\r\nlib/_util.js:726:util.nameModifierFunctionForContainer = function(o, list) {\r\nlib/_util.js:976:  for (let f of item.nameModifierFunctions) f(item, list)\r\nlib/_util.js:977:  if (item.nameModifierFunction) item.nameModifierFunction(list)\r\nlib/rpg.js:565:    o.nameModifierFunctions.push(function(o, list) {\r\nlib/rpg.js:629:    o.nameModifierFunctions.push(function(o, list) {\r\nlib/_world.js:143:  item.nameModifierFunctions = []\r\n</code></pre>\r\n\r\n---\r\nSo, now I can actually find stuff I search for, and I need to learn how to use name modifiers.\r\n\r\nMoving on . . .\r\n\r\n---\r\nI've done away with a good 80% of the old item_links code at this point, and I'm looking to do away with half of what's left.\r\n\r\nThe name modifier stuff in the Quest code looks like it behaves just like your last example, mrangel. It's already setup on containers specifically, too.  I am just now attempting to make it do something.  I'm just going to add to the modules to update and see how that goes.  If Pixie has it thought out differently, I can always change it.\r\n\r\n\r\n\r\nI'm extra concerned with Pixie's thoughts on this because this library will be included as an optional library in the new Quest, and I definitely want it to work how Pixie thinks it should work.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Would it make more sense [ ... ] to have something like:</p>\n</blockquote>\n<p>Most probably so, and I'm in the process of switching it over to handling it that way.</p>\n<p>I've got all the old code stripped down to just a few functions and modifications now. So, it should be easy to plug a few things into some prototype item attributes.</p>\n<p>...but first I want to know how the name modifier functions are supposed to work (as opposed to how I could make something work, which is what I normally aim for).</p>\n<p>I've had the feeling I've been trying to reinvent wheels throughout this process, and I've been correct most of the time (in more ways than one).  I search GitHub for the code I seek, and it returns nothing.  So, I write a function or two to cover it.  Later, I find the existing function with the string I searched right there in the code.  Now, I've cloned the whole repo and the wiki, and I use GREP to search.  It works much better.</p>\n<p>For instance, there is code for <code>nameModifierFunctionForContainer</code> in the GitHub repo.  If you search for <code>nameModifier</code>, it will not return that code.  I even tried <code>nameModifier*</code>, and got nothing.  Maybe there's some wildcard symbol I'm supposed to use on GitHub?  I don't know.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/102723469-b5c13880-42cd-11eb-8fa1-d36370979ad9.png\" alt=\"image\"></p>\n<hr>\n<p>Searching the entire string does provide results, though:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/102723492-e5704080-42cd-11eb-9999-3952f821e20c.png\" alt=\"image\"></p>\n<hr>\n<p>Are those all the results one could want?  My Magic 8-ball says, \"Probably not.\"</p>\n<p>(Here's <a href=\"https://github.com/ThePix/QuestJS/blob/9fd439e6379f4ef9ac50397acebfe7474d45c4fe/lib/_util.js#L741\">the code</a>, by the way.)</p>\n<p>Anyway, I've learned to use GREP in place of Github's search thingy.</p>\n<pre style=\"max-height: 300px; overflow: auto; max-width: 1054px\"><code style=\"white-space: pre\">[rh@yourmomshouse QuestJS.wiki]$ grep -nr nameMod* *\nAttributes-for-items.md:293:A name modifier is a brief word or phrase that flags the current state of an object. It might flag a hat as \"worn\" or a torch as \"providing light\". Templates do this for you in a lot of instances, but you might want to add you own. Just add a \"nameModifierFunction\" function that accepts a list for the parameter.\nAttributes-for-items.md:299:  nameModifierFunction:function(list) {\nAttributes-for-items.md:313:  for (let f of item.nameModifierFunctions) f(item, list)\nAttributes-for-items.md:314:  if (item.nameModifierFunction) item.nameModifierFunctions(list)\nCustom-Templates.md:91:    o.nameModifierFunctions.push(function(o, list) {\nCustom-Templates.md:113:    o.nameModifierFunctions.push(function(o, list) {\n</code></pre>\n<pre style=\"max-height: 300px; overflow: auto; max-width: 1054px\"><code style=\"white-space: pre\">[rh@yourmomshouse QuestJS-work_in_progress]$ grep -nr nameMod* *\nlib/_templates.js:71:  res.nameModifierFunctions = [function(o, list) {\nlib/_templates.js:405:    o.nameModifierFunctions.push(function(o, list) {\nlib/_templates.js:545:    o.nameModifierFunctions.push(util.nameModifierFunctionForContainer) \nlib/_templates.js:546:    //console.log(o.nameModifierFunctions)\nlib/_templates.js:584:  res.onCreation = function(o) { o.nameModifierFunctions.push(util.nameModifierFunctionForContainer) }\nlib/_templates.js:605:    o.nameModifierFunctions.push(function(o, list) {\nlib/_templates.js:802:const SWITCHABLE = function(alreadyOn, nameModifier) {\nlib/_templates.js:805:  res.nameModifier = nameModifier\nlib/_templates.js:813:    o.nameModifierFunctions.push(function(o, list) {\nlib/_templates.js:814:      if (o.nameModifier &amp;&amp; o.switchedon) list.push(o.nameModifier)\nlib/_templates.js:1485:      o.nameModifierFunctions.push(function(o, l) {\nlib/_util.js:726:util.nameModifierFunctionForContainer = function(o, list) {\nlib/_util.js:976:  for (let f of item.nameModifierFunctions) f(item, list)\nlib/_util.js:977:  if (item.nameModifierFunction) item.nameModifierFunction(list)\nlib/rpg.js:565:    o.nameModifierFunctions.push(function(o, list) {\nlib/rpg.js:629:    o.nameModifierFunctions.push(function(o, list) {\nlib/_world.js:143:  item.nameModifierFunctions = []\n</code></pre>\n<hr>\n<p>So, now I can actually find stuff I search for, and I need to learn how to use name modifiers.</p>\n<p>Moving on . . .</p>\n<hr>\n<p>I've done away with a good 80% of the old item_links code at this point, and I'm looking to do away with half of what's left.</p>\n<p>The name modifier stuff in the Quest code looks like it behaves just like your last example, mrangel. It's already setup on containers specifically, too.  I am just now attempting to make it do something.  I'm just going to add to the modules to update and see how that goes.  If Pixie has it thought out differently, I can always change it.</p>\n<p>I'm extra concerned with Pixie's thoughts on this because this library will be included as an optional library in the new Quest, and I definitely want it to work how Pixie thinks it should work.</p>\n\n",
      "PostDate": "2020-12-20T20:37:11.5101039Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "63bb47b8-f601-4b08-8068-52fe17d66db4",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> It is added in the CONTAINER and SURFACE templates, and gets invoked in lang.getName.\r\n\r\nI would have seen this before my last post, had I refreshed the page before posting.\r\n\r\nI'm about to get this going on right now.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>It is added in the CONTAINER and SURFACE templates, and gets invoked in lang.getName.</p>\n</blockquote>\n<p>I would have seen this before my last post, had I refreshed the page before posting.</p>\n<p>I'm about to get this going on right now.</p>\n\n",
      "PostDate": "2020-12-20T20:39:03.2285681Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bdfcd6c6-42bf-4875-8988-fc0ba5d36f9a",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "https://github.com/ThePix/QuestJS/wiki/Attributes-for-items#a-note-about-name-modifiers\r\n\r\nAw, snap!\r\n\r\nAhem.  I mean . . .\r\n\r\nBy Jove, I think I've got it!",
      "EditableFormat": "markdown",
      "HTML": "<p>https://github.com/ThePix/QuestJS/wiki/Attributes-for-items#a-note-about-name-modifiers</p>\n<p>Aw, snap!</p>\n<p>Ahem.  I mean . . .</p>\n<p>By Jove, I think I've got it!</p>\n\n",
      "PostDate": "2020-12-20T20:55:51.3405033Z",
      "LastEditDate": "2020-12-20T21:08:29.1676771Z",
      "link": null
    }
  ]
}
