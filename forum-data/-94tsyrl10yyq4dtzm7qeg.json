{
  "Topic": {
    "TopicId": "-94tsyrl10yyq4dtzm7qeg",
    "ForumId": "10",
    "Title": "Switch Statement",
    "LastUpdated": "2017-05-23T16:56:25.1526855Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "5a58fd11-f142-469c-ac33-b3cd7b1b00b6",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi,\r\n\r\nI'm trying to use a Switch statement and I figure it can be a powerful script, but I've only found a few limited uses for it as I cannot figure out what kinds of things I can use as the Switch.\r\n\r\nWhat can I type (GUI not Code View) into the Switch input box? I ask because I'd like to get input from the player and then use that input to select an option, where each option is a \"key\". However, I either get an error because the thing used as the Switch isn't properly named or it gives me an issue with the keys.\r\n\r\nFor a simple example, I'd like it to take player input of a number between 0-3. Then each key corresponds to each integer, and the game will display a simple message based on the number inputted. How would I go about making this simple example happen... in the GUI and NOT in code view. I specify, because the last few answers for my other problems have been exclusively in code view which isn't helpful to me right now, as I do not understand JavaScript.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi,</p>\n<p>I'm trying to use a Switch statement and I figure it can be a powerful script, but I've only found a few limited uses for it as I cannot figure out what kinds of things I can use as the Switch.</p>\n<p>What can I type (GUI not Code View) into the Switch input box? I ask because I'd like to get input from the player and then use that input to select an option, where each option is a \"key\". However, I either get an error because the thing used as the Switch isn't properly named or it gives me an issue with the keys.</p>\n<p>For a simple example, I'd like it to take player input of a number between 0-3. Then each key corresponds to each integer, and the game will display a simple message based on the number inputted. How would I go about making this simple example happen... in the GUI and NOT in code view. I specify, because the last few answers for my other problems have been exclusively in code view which isn't helpful to me right now, as I do not understand JavaScript.</p>\n\n",
      "PostDate": "2017-05-23T16:56:25.1526855Z",
      "LastEditDate": null
    },
    {
      "PostId": "16bb6531-38e9-4109-9483-71453b31ebc8",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you understand the code, it is easer... but I understand your problem.\r\nA lot of my code I start in UI, then finish in code...\r\nfor testing an idea, create a new \"game\" with just what you are testing...\r\nIf it works, copy it to your program...\r\nIf not, you haven't wrecked your existing program... (Can't tell you how many times I've done that!!!)\r\nCreate a new game... or copy it and work with the copy... \r\nin your room, add new script...\r\n(I assume your get input works)\r\nselect switch...\r\n(not the switch on/off)\r\nSwitch [ result]         from your getinput...\r\nkey: 0\r\nscript: whatever your message is.\r\nkey: 1\r\nscript: message #2\r\nThen look at it in code view, it will be easer to add to it from there.\r\nOne thing to watch for...\r\ngetinput returns a string, if you key is a number Quest does not like it.\r\nuse ToInt(number) to make is a number or\r\nmake the key a string...\r\nkey: \"0\"\r\neither should work.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>If you understand the code, it is easer... but I understand your problem.<br>\nA lot of my code I start in UI, then finish in code...<br>\nfor testing an idea, create a new \"game\" with just what you are testing...<br>\nIf it works, copy it to your program...<br>\nIf not, you haven't wrecked your existing program... (Can't tell you how many times I've done that!!!)<br>\nCreate a new game... or copy it and work with the copy...<br>\nin your room, add new script...<br>\n(I assume your get input works)<br>\nselect switch...<br>\n(not the switch on/off)<br>\nSwitch [ result]         from your getinput...<br>\nkey: 0<br>\nscript: whatever your message is.<br>\nkey: 1<br>\nscript: message #2<br>\nThen look at it in code view, it will be easer to add to it from there.<br>\nOne thing to watch for...<br>\ngetinput returns a string, if you key is a number Quest does not like it.<br>\nuse ToInt(number) to make is a number or<br>\nmake the key a string...<br>\nkey: \"0\"<br>\neither should work.</p>\n\n",
      "PostDate": "2017-05-23T17:41:05.8328172Z",
      "LastEditDate": null
    },
    {
      "PostId": "aeaac8f3-81fa-4d33-a770-8a95c31471c2",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nice \"slith\" for your avatar. \r\n\r\nThe issue I'm having is what to type into the switch field. I've learned that sometimes the errors the program spews aren't fully reliable, but it doesn't like what I put into the switch field.\r\n\r\nI understand how the underlying code works, but I don't know what to type into the field. So in your GetInput() example, would you type \"result\" into the Switch field? As for GetInt, would you type \"integer\" in the Switch field?\r\n\r\nHow about an image, expressing my problem... I've circled in RED what I mean by Switch Field. I gave two examples; one using the GetInput function, and one where it is just a Switch statement.\r\n\r\nhttps://www.mediafire.com/?1gcg3z7lf1sgbdt",
      "EditableFormat": "markdown",
      "HTML": "<p>Nice \"slith\" for your avatar.</p>\n<p>The issue I'm having is what to type into the switch field. I've learned that sometimes the errors the program spews aren't fully reliable, but it doesn't like what I put into the switch field.</p>\n<p>I understand how the underlying code works, but I don't know what to type into the field. So in your GetInput() example, would you type \"result\" into the Switch field? As for GetInt, would you type \"integer\" in the Switch field?</p>\n<p>How about an image, expressing my problem... I've circled in RED what I mean by Switch Field. I gave two examples; one using the GetInput function, and one where it is just a Switch statement.</p>\n<p>https://www.mediafire.com/?1gcg3z7lf1sgbdt</p>\n\n",
      "PostDate": "2017-05-24T06:19:28.4110413Z",
      "LastEditDate": null
    },
    {
      "PostId": "508f72ba-e2dd-4c2c-9b23-e5b147b969cd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the switch text box' field:\r\n\r\nVARIABLE_(AKA: INDIRECT_VALUE_INPUT)\r\nor\r\nLITERAL_(AKA: DIRECT_VALUE_INPUT)\r\n\r\n(where-ever I have 'VARIABLE' for the switch text box field, just remember/be-aware-that, it can also be a LITERAL, instead of a VARIABLE)\r\n\r\nwhich the Cases' text boxes (or whatever it is) holds/are-given the Arguments/Values which is check-compared/check-matched with the VARIABLE'S Value, if it matches up (true: do the nested script-s, and end the Switch block: aka, skip all remaining cases, including the default-case if you got it) or not (false: jump to the next case or default/case or end the Switch block if no other cases nor default-case)\r\n\r\n--------------\r\n\r\nso, the switch text box can have **ANY** VARIABLE (built-in or custom, Variable or Attribute or Parameter), some examples:\r\n\r\n```\r\nask (\"Are you alive?\") {\r\n  switch (result) { case (true) { /* scripting */ } case (false) { /* scripting */ }  ETC_MORE_OR_LESS_CASES OPTIONAL: default { /* scripting */ } }\r\n}\r\n\r\n// or --------------------------------------------------\r\n\r\ngame.EXAMPLE_STRING_ATTRIBUTE = \"password\"\r\nswitch (game.EXAMPLE_STRING_ATTRIBUTE) { case (\"password\") { /* THIS SCRIPT IS DONE/EXECUTED/RUN */ } case (\"open sesame\") { /* THIS SCRIPT IS SKIPPED AS ITS CASE IS SKIPPED */ } ALL_REMAINING_CASES_AND/OR_DEFAULT_CASE_ARE_SKIPPED }\r\n\r\nvs (example of how the check-matching of the Cases' Arguments to the VARIABLE'S Value)\r\n\r\ngame.EXAMPLE_STRING_ATTRIBUTE = \"open sesame\"\r\nswitch (game.EXAMPLE_STRING_ATTRIBUTE) { case (\"password\") { /* THIS SCRIPT IS SKIPPED AS ITS CASE FAILED THE CHECK-MATCHING */ } case (\"open sesame\") { /* THIS SCRIPT IS DONE/EXECUTED/RUN */ }  ALL_REMAINING_CASES_AND/OR_DEFAULT_CASE_ARE_SKIPPED }\r\n\r\n// or -----------------------------------------------------\r\n\r\nshow menu (\"Sex?\", split (\"male;female\", \";\"), false) {\r\n  switch (result) { case (\"male\") { /* scripting */ } case (\"female\") { /* scripting */ }  ETC_MORE_OR_LESS_CASES OPTIONAL: default { /* scripting */ } }\r\n}\r\n\r\n// or ---------------------------------------------------------\r\n\r\n<object name=\"katana\">\r\n</object>\r\n\r\n<object name=\"claymore\">\r\n</object>\r\n\r\n<function name=\"example_function\" parameters=\"sword_object_parameter\">\r\n  switch (sword_object_parameter) { case (katana) { /* scripting */ } case (claymore) { /* scripting */ }  ETC_MORE_OR_LESS_CASES OPTIONAL: default { /* scripting */ } }\r\n  }\r\n</function>\r\n```\r\n\r\n--------\r\n\r\nthe 'get input()', 'show menu(Parameters) {pop up window menu}', 'ShowMenu(Parameers) {in-line, aka: in the left big text box, hyperlink menu}', 'ask(Prompt Parameter) {popup window yes:true/no:false boolean menu}', and 'Ask(Prompt Parameter) {in-line, aka: in the left big text box, hyperlink  yes:true/no:false boolean menu}' Functions/Scripts, all automatically (hidden from you) store your typed-in or selected input into the built-in 'result' Variable VARIABLE, which can then be used for whatever you want.\r\n\r\nfor example:\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    msg (\"Sex? (Type in the number of/for your choice)\")\r\n    msg (\"1. male\")\r\n    msg (\"2. female\")\r\n    get input {\r\n      // quest automatically (hidden from you) does this for you:\r\n      // result = YOUR_TYPED_IN_OR_SELECTED_INPUT\r\n      switch (result) {\r\n        case (\"1\") { // checks the Case's Argument: \"1\", if it matches up with the Value (YOUR_TYPED_IN_OR_SELECTED_INPUT) of the 'result' Variable VARIABLE\r\n          player.sex_string_attribute = \"male\"\r\n        }\r\n        case (\"2\") { // checks the Case's Argument: \"2\", if it matches up with the Value (YOUR_TYPED_IN_OR_SELECTED_INPUT) of the 'result' Variable VARIABLE\r\n          player.sex_string_attribute = \"female\"\r\n        }\r\n        default {\r\n          msg (\"Wrong input, try again\")\r\n          wait {\r\n            ClearScreen\r\n            do (game, \"start\")\r\n          }\r\n        }\r\n      }\r\n      msg (\"Player's Sex: \" + player.sex_string-attribute)\r\n    }\r\n  </attr>\r\n</game>\r\n```\r\n\r\n-----------------------\r\n\r\nask if you got any questions about anything, or if you need anything explained.",
      "EditableFormat": "markdown",
      "HTML": "<p>the switch text box' field:</p>\n<p>VARIABLE_(AKA: INDIRECT_VALUE_INPUT)<br>\nor<br>\nLITERAL_(AKA: DIRECT_VALUE_INPUT)</p>\n<p>(where-ever I have 'VARIABLE' for the switch text box field, just remember/be-aware-that, it can also be a LITERAL, instead of a VARIABLE)</p>\n<p>which the Cases' text boxes (or whatever it is) holds/are-given the Arguments/Values which is check-compared/check-matched with the VARIABLE'S Value, if it matches up (true: do the nested script-s, and end the Switch block: aka, skip all remaining cases, including the default-case if you got it) or not (false: jump to the next case or default/case or end the Switch block if no other cases nor default-case)</p>\n<hr>\n<p>so, the switch text box can have <strong>ANY</strong> VARIABLE (built-in or custom, Variable or Attribute or Parameter), some examples:</p>\n<pre><code>ask (\"Are you alive?\") {\n  switch (result) { case (true) { /* scripting */ } case (false) { /* scripting */ }  ETC_MORE_OR_LESS_CASES OPTIONAL: default { /* scripting */ } }\n}\n\n// or --------------------------------------------------\n\ngame.EXAMPLE_STRING_ATTRIBUTE = \"password\"\nswitch (game.EXAMPLE_STRING_ATTRIBUTE) { case (\"password\") { /* THIS SCRIPT IS DONE/EXECUTED/RUN */ } case (\"open sesame\") { /* THIS SCRIPT IS SKIPPED AS ITS CASE IS SKIPPED */ } ALL_REMAINING_CASES_AND/OR_DEFAULT_CASE_ARE_SKIPPED }\n\nvs (example of how the check-matching of the Cases' Arguments to the VARIABLE'S Value)\n\ngame.EXAMPLE_STRING_ATTRIBUTE = \"open sesame\"\nswitch (game.EXAMPLE_STRING_ATTRIBUTE) { case (\"password\") { /* THIS SCRIPT IS SKIPPED AS ITS CASE FAILED THE CHECK-MATCHING */ } case (\"open sesame\") { /* THIS SCRIPT IS DONE/EXECUTED/RUN */ }  ALL_REMAINING_CASES_AND/OR_DEFAULT_CASE_ARE_SKIPPED }\n\n// or -----------------------------------------------------\n\nshow menu (\"Sex?\", split (\"male;female\", \";\"), false) {\n  switch (result) { case (\"male\") { /* scripting */ } case (\"female\") { /* scripting */ }  ETC_MORE_OR_LESS_CASES OPTIONAL: default { /* scripting */ } }\n}\n\n// or ---------------------------------------------------------\n\n&lt;object name=\"katana\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"claymore\"&gt;\n&lt;/object&gt;\n\n&lt;function name=\"example_function\" parameters=\"sword_object_parameter\"&gt;\n  switch (sword_object_parameter) { case (katana) { /* scripting */ } case (claymore) { /* scripting */ }  ETC_MORE_OR_LESS_CASES OPTIONAL: default { /* scripting */ } }\n  }\n&lt;/function&gt;\n</code></pre>\n<hr>\n<p>the 'get input()', 'show menu(Parameters) {pop up window menu}', 'ShowMenu(Parameers) {in-line, aka: in the left big text box, hyperlink menu}', 'ask(Prompt Parameter) {popup window yes:true/no:false boolean menu}', and 'Ask(Prompt Parameter) {in-line, aka: in the left big text box, hyperlink  yes:true/no:false boolean menu}' Functions/Scripts, all automatically (hidden from you) store your typed-in or selected input into the built-in 'result' Variable VARIABLE, which can then be used for whatever you want.</p>\n<p>for example:</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    msg (\"Sex? (Type in the number of/for your choice)\")\n    msg (\"1. male\")\n    msg (\"2. female\")\n    get input {\n      // quest automatically (hidden from you) does this for you:\n      // result = YOUR_TYPED_IN_OR_SELECTED_INPUT\n      switch (result) {\n        case (\"1\") { // checks the Case's Argument: \"1\", if it matches up with the Value (YOUR_TYPED_IN_OR_SELECTED_INPUT) of the 'result' Variable VARIABLE\n          player.sex_string_attribute = \"male\"\n        }\n        case (\"2\") { // checks the Case's Argument: \"2\", if it matches up with the Value (YOUR_TYPED_IN_OR_SELECTED_INPUT) of the 'result' Variable VARIABLE\n          player.sex_string_attribute = \"female\"\n        }\n        default {\n          msg (\"Wrong input, try again\")\n          wait {\n            ClearScreen\n            do (game, \"start\")\n          }\n        }\n      }\n      msg (\"Player's Sex: \" + player.sex_string-attribute)\n    }\n  &lt;/attr&gt;\n&lt;/game&gt;\n</code></pre>\n<hr>\n<p>ask if you got any questions about anything, or if you need anything explained.</p>\n\n",
      "PostDate": "2017-05-24T06:55:19.9044493Z",
      "LastEditDate": "2017-05-24T08:04:01.1277717Z"
    },
    {
      "PostId": "d9c45f01-bcc0-40b4-bfef-ad94caa710e0",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The thing that goes in the `switch` field is whatever can take the various values. In your example, that is indeed the \"result\" variable (no quotes), as that could be \"heal\" or whatever.\r\n\r\nEven better, put \"LCase(result)\" (no quotes), and then whatever the player types will go to lower case, so it will match HEAL too.\r\n\r\n At the end of the switch is an else (or default; cannot remember exactly), and you should use that in this instance to catch anything else the player may type.\r\n\r\nThere is documentation (but I now realise there was no link to it).\r\nhttp://docs.textadventures.co.uk/quest/multiple_choices___using_a_switch_script.html\r\n\r\nAnd this is kind of related (but uses if/else rather than switch).\r\nhttp://docs.textadventures.co.uk/quest/asking_a_question.html\r\n\r\nBy the way, you might want to consider showing a menu of options for spells.\r\nhttp://docs.textadventures.co.uk/quest/guides/showing_a_menu.html\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The thing that goes in the <code>switch</code> field is whatever can take the various values. In your example, that is indeed the \"result\" variable (no quotes), as that could be \"heal\" or whatever.</p>\n<p>Even better, put \"LCase(result)\" (no quotes), and then whatever the player types will go to lower case, so it will match HEAL too.</p>\n<p>At the end of the switch is an else (or default; cannot remember exactly), and you should use that in this instance to catch anything else the player may type.</p>\n<p>There is documentation (but I now realise there was no link to it).<br>\nhttp://docs.textadventures.co.uk/quest/multiple_choices___using_a_switch_script.html</p>\n<p>And this is kind of related (but uses if/else rather than switch).<br>\nhttp://docs.textadventures.co.uk/quest/asking_a_question.html</p>\n<p>By the way, you might want to consider showing a menu of options for spells.<br>\nhttp://docs.textadventures.co.uk/quest/guides/showing_a_menu.html</p>\n\n",
      "PostDate": "2017-05-24T07:15:07.3933222Z",
      "LastEditDate": null
    },
    {
      "PostId": "b4ffe022-8a6c-4a82-a087-99ee7329c4cf",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "result is the answer for getinput...\r\nIn Basic, it would make more sense...\r\ninput \"What is your sex\", player.sex\r\ninput \"What is your age\", player.age\r\n\r\nbut in Quest, result is always the variable that stores the answer.\r\nKinda like:\r\nmsg(\"What is your sex)\r\nget input {\r\n   player.sex=result\r\n}\r\nmsg (\"What is your age?\")\r\nget input {\r\nplayer.age=result\r\n}\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>result is the answer for getinput...<br>\nIn Basic, it would make more sense...<br>\ninput \"What is your sex\", player.sex<br>\ninput \"What is your age\", player.age</p>\n<p>but in Quest, result is always the variable that stores the answer.<br>\nKinda like:<br>\nmsg(\"What is your sex)<br>\nget input {<br>\nplayer.sex=result<br>\n}<br>\nmsg (\"What is your age?\")<br>\nget input {<br>\nplayer.age=result<br>\n}</p>\n\n",
      "PostDate": "2017-05-24T07:21:55.4565236Z",
      "LastEditDate": null
    },
    {
      "PostId": "ee4d6b97-0b7f-45a6-a890-fdd734021c4a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "continuing Dark Lizard's post, more about quest's 'switch' Script/Function's switch-text-box-field:\r\n\r\nyou can use either 'result' or (for example) 'player.sex', for the Argument/Value/Input of the (put/typed/coded into the) switch-text-box-field, for example:\r\n\r\n```\r\nmsg(\"What is your sex)\r\nget input {\r\n  // (input handling is missing obviously, so just pretend that the user correctly inputted/typed-in, either: 'male' or 'female')\r\n  player.sex=result\r\n  // switch (result) { /* blah cases and their scripting */ }\r\n  // and/or\r\n  // switch (player.sex) { /* blah cases and their scripting */ }\r\n}\r\n```\r\n\r\n---------\r\n\r\nhere's an example of a (Integer) LITERAL (using 3):\r\n\r\n```\r\nswitch (3) {\r\n  case (1) {\r\n    // blah scripting\r\n  }\r\n  case (2) {\r\n    // blah scripting\r\n  }\r\n  case (3) {\r\n    // blah scripting\r\n  }\r\n  case (4) {\r\n    // blah scripting\r\n  }\r\n  case (7) {\r\n    // blah scripting\r\n  }\r\n  default {\r\n    // blah scripting\r\n  }\r\n}\r\n\r\n// -----------------------------------\r\n\r\nusing 7:\r\n\r\nswitch (7) {\r\n  case (1) {\r\n    // blah scripting\r\n  }\r\n  case (2) {\r\n    // blah scripting\r\n  }\r\n  case (3) {\r\n    // blah scripting\r\n  }\r\n  case (4) {\r\n    // blah scripting\r\n  }\r\n  case (7) {\r\n    // blah scripting\r\n  }\r\n  default {\r\n    // blah scripting\r\n  }\r\n}\r\n```\r\n\r\n----------------\r\n\r\nexample of a String LITERAL:\r\n\r\n```\r\nswitch (\"dragon\") {\r\n  case (\"king\") {\r\n    // blah scripting\r\n  }\r\n  case (\"princess\") {\r\n    // blah scripting\r\n  }\r\n  case (\"dragon\") {\r\n    // blah scripting\r\n  }\r\n  case (\"sword\") {\r\n    // blah scripting\r\n  }\r\n  case (\"wizard\") {\r\n    // blah scripting\r\n  }\r\n  default {\r\n    // blah scripting\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>continuing Dark Lizard's post, more about quest's 'switch' Script/Function's switch-text-box-field:</p>\n<p>you can use either 'result' or (for example) 'player.sex', for the Argument/Value/Input of the (put/typed/coded into the) switch-text-box-field, for example:</p>\n<pre><code>msg(\"What is your sex)\nget input {\n  // (input handling is missing obviously, so just pretend that the user correctly inputted/typed-in, either: 'male' or 'female')\n  player.sex=result\n  // switch (result) { /* blah cases and their scripting */ }\n  // and/or\n  // switch (player.sex) { /* blah cases and their scripting */ }\n}\n</code></pre>\n<hr>\n<p>here's an example of a (Integer) LITERAL (using 3):</p>\n<pre><code>switch (3) {\n  case (1) {\n    // blah scripting\n  }\n  case (2) {\n    // blah scripting\n  }\n  case (3) {\n    // blah scripting\n  }\n  case (4) {\n    // blah scripting\n  }\n  case (7) {\n    // blah scripting\n  }\n  default {\n    // blah scripting\n  }\n}\n\n// -----------------------------------\n\nusing 7:\n\nswitch (7) {\n  case (1) {\n    // blah scripting\n  }\n  case (2) {\n    // blah scripting\n  }\n  case (3) {\n    // blah scripting\n  }\n  case (4) {\n    // blah scripting\n  }\n  case (7) {\n    // blah scripting\n  }\n  default {\n    // blah scripting\n  }\n}\n</code></pre>\n<hr>\n<p>example of a String LITERAL:</p>\n<pre><code>switch (\"dragon\") {\n  case (\"king\") {\n    // blah scripting\n  }\n  case (\"princess\") {\n    // blah scripting\n  }\n  case (\"dragon\") {\n    // blah scripting\n  }\n  case (\"sword\") {\n    // blah scripting\n  }\n  case (\"wizard\") {\n    // blah scripting\n  }\n  default {\n    // blah scripting\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2017-05-24T07:33:41.1066469Z",
      "LastEditDate": "2017-05-24T08:08:53.9672724Z"
    },
    {
      "PostId": "da504a6b-f62f-41a5-b343-67bde213168f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "errr... (whoopsy) .... note that (talking to myself, lol)... LITERALS are completely pointless for any check-matching (such as 'if', 'switch', and etc), lol",
      "EditableFormat": "markdown",
      "HTML": "<p>errr... (whoopsy) .... note that (talking to myself, lol)... LITERALS are completely pointless for any check-matching (such as 'if', 'switch', and etc), lol</p>\n\n",
      "PostDate": "2017-05-24T07:52:53.0474673Z",
      "LastEditDate": "2017-05-24T08:00:21.0652999Z"
    },
    {
      "PostId": "bce9ec23-994f-4048-93b5-e778b1cfa539",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How do I go about creating my own variables then?\r\n\r\nresult definitely works for the switch field, but now I get errors for unknown variable / object... example:\r\n\r\nSlap Command:\r\nGetInput()\r\nSwitch (result)\r\nkey 1 = face\r\nkey 2 = back\r\n\r\nbut as those aren't objects, how do I go about creating face or back as variables? ",
      "EditableFormat": "markdown",
      "HTML": "<p>How do I go about creating my own variables then?</p>\n<p>result definitely works for the switch field, but now I get errors for unknown variable / object... example:</p>\n<p>Slap Command:<br>\nGetInput()<br>\nSwitch (result)<br>\nkey 1 = face<br>\nkey 2 = back</p>\n<p>but as those aren't objects, how do I go about creating face or back as variables?</p>\n\n",
      "PostDate": "2017-05-24T22:18:36.9454113Z",
      "LastEditDate": null
    },
    {
      "PostId": "3cfa6643-bb4f-45f1-8e54-407fd202b8ff",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Or if I have created those as objects, and I have a script that posts a message, why is it that the message doesn't get posted at all, no error or no object is not visible messages, just nothing at all.\r\n\r\nSo in the above example:\r\n\r\nif you type in face, and you have it to say that for the script \"You slap their face\", in this situation, nothing gets posted.",
      "EditableFormat": "markdown",
      "HTML": "<p>Or if I have created those as objects, and I have a script that posts a message, why is it that the message doesn't get posted at all, no error or no object is not visible messages, just nothing at all.</p>\n<p>So in the above example:</p>\n<p>if you type in face, and you have it to say that for the script \"You slap their face\", in this situation, nothing gets posted.</p>\n\n",
      "PostDate": "2017-05-24T22:24:03.4349951Z",
      "LastEditDate": null
    },
    {
      "PostId": "2a2b8665-90e8-4925-9474-82a5c539eb6b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you're probably just working with Strings, so your Cases' Values/Arguments must have double quotes (anything in double quotes is a String Value), for example:\r\n\r\n(DO USE double quotes in the Cases)\r\n\r\n```\r\nget input {\r\n\r\n  // result = \"YOUR_TYPED_IN_INPUT\" // with 'get input' Script/Function, 'result' is always a String Variable, which (MUST and indeed does) always holds a String Value\r\n\r\n  switch (result) {\r\n    case (\"katana\") {\r\n    }\r\n    case (\"claymore\") {\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n-----------\r\n\r\n\r\nif you're working with Objects, the Objects must actually exist and/or still exist:\r\n\r\n(do NOT use double quotes in the Cases!)\r\n\r\n```\r\n// created/added and thus existing Object:\r\n<object name=\"katana\">\r\n</object>\r\n\r\n// created/added and thus existing Object\r\n<object name=\"claymore\">\r\n</object>\r\n\r\nget input {\r\n\r\n  // result = \"YOUR_TYPED_IN_INPUT\" // with 'get input' Script/Function, 'result' is always a String Variable, which (MUST and indeed does) always holds a String Value\r\n\r\n  player.right_hand_object_attribute = GetObject (result) // the 'GetObject(String Parameter)' Function takes in a String and converts it (if it can --- if it exists as an Object) into an Object (Object reference/pointer), which is then being stored into my custom 'player.right_hand_object_attribute' Object Attribute \r\n\r\n  switch (player.right_hand_object_attribute) {\r\n    case (katana) {\r\n    }\r\n    case (claymore) {\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n-----------------------\r\n\r\n\r\nsee these links (ask if you need help with anthing):\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk \r\n(you should read the whole thing, but specfically, scroll down a bit to the bolded: **the two SUPER SCRIPTS, which especially when used together, lets you do 90% of everything that you want to do in~for your game:** part/section)\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help#37375 (for the desktop/offline Text Adventure, a step by step guide walkthrough demo game on the basics of Attributes)\r\n\r\n----------\r\n\r\nyou can also take a look at Pixie's 'character creation' guide:\r\n\r\nhttp://docs.textadventures.co.uk/quest/guides/character_creation.html\r\n\r\nand here's my thread back when I was trying to learn this quest GUI/Editor and coding stuff myself:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread (scroll down some posts, to get to the character creation part)\r\n\r\n---------\r\n\r\ncomputers are stupid, so they must know what they're working with, and thus Data Types are very important, and you have to be very careful about not-mismatching them, for example:\r\n\r\nno human and no computer can do mis-matched Data Type operations, for examples:\r\n\r\n(math/arithmetic) addition operation:\r\nSTRING + INTEGER = ERROR! Can't compute!\r\n\r\n\"river\" + 77 = impossible to compute!\r\n\r\n-----\r\n\r\nsame with VARIABLES and their Values, for example:\r\n\r\nSTRING_VARIABLE = INTEGER_VALUE // ERROR! you can NOT store an Integer Value into a String VARIABLE!\r\n\r\ngame.my_string_attribute = 23 // ERROR!\r\n\r\ngame.my_string_attribute = \"23\" // NO error, we anything in double quotes, is a String Value\r\n\r\n---------\r\n\r\ngame.my_integer_attribute = \"hi\" // ERROR! you can't store a String Value into an Integer Attribute\r\n\r\ngame.my_integer_attribute = \"34\" // ERROR! you can't store a String Value into an Integer Attribute\r\n\r\ngame.my_integer_attribute = 34 // NO error\r\n\r\n-----------\r\n\r\ngame.my_boolean_attribute = \"true\" // ERROR! you can't store a String Value into a Boolean Attribute\r\n\r\ngame.my_boolean_attribute = \"false\" // ERROR! you can't store a String Value into a Boolean Attribute\r\n\r\ngame.my_boolean_attribute = true // NO error\r\n\r\ngame.my_boolean_attribute = false // NO error\r\n\r\n----------------------\r\n\r\n```\r\n<object name=\"katana\">\r\n</object>\r\n\r\ngame.my_object_attribute = \"katana\" // ERROR! You can't store a String Value into an Object (reference/pointer) Attribute\r\nvs\r\ngame.my_object_attribute = katana // NO error\r\n```\r\n\r\nvs\r\n\r\ngame.my_object_attribute = katana // ERROR! There is no (no existing and/or no still existing) 'katana' Object to be stored into the Object Attribute\r\n\r\n---------\r\n\r\nask if you need help with anything or need anything explained or are confused wth anything, the syntax/format and Data Type semantics is very confusing if you don't already know coding and this coding stuff already.",
      "EditableFormat": "markdown",
      "HTML": "<p>you're probably just working with Strings, so your Cases' Values/Arguments must have double quotes (anything in double quotes is a String Value), for example:</p>\n<p>(DO USE double quotes in the Cases)</p>\n<pre><code>get input {\n\n  // result = \"YOUR_TYPED_IN_INPUT\" // with 'get input' Script/Function, 'result' is always a String Variable, which (MUST and indeed does) always holds a String Value\n\n  switch (result) {\n    case (\"katana\") {\n    }\n    case (\"claymore\") {\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>if you're working with Objects, the Objects must actually exist and/or still exist:</p>\n<p>(do NOT use double quotes in the Cases!)</p>\n<pre><code>// created/added and thus existing Object:\n&lt;object name=\"katana\"&gt;\n&lt;/object&gt;\n\n// created/added and thus existing Object\n&lt;object name=\"claymore\"&gt;\n&lt;/object&gt;\n\nget input {\n\n  // result = \"YOUR_TYPED_IN_INPUT\" // with 'get input' Script/Function, 'result' is always a String Variable, which (MUST and indeed does) always holds a String Value\n\n  player.right_hand_object_attribute = GetObject (result) // the 'GetObject(String Parameter)' Function takes in a String and converts it (if it can --- if it exists as an Object) into an Object (Object reference/pointer), which is then being stored into my custom 'player.right_hand_object_attribute' Object Attribute \n\n  switch (player.right_hand_object_attribute) {\n    case (katana) {\n    }\n    case (claymore) {\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>see these links (ask if you need help with anthing):</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk<br>\n(you should read the whole thing, but specfically, scroll down a bit to the bolded: <strong>the two SUPER SCRIPTS, which especially when used together, lets you do 90% of everything that you want to do in~for your game:</strong> part/section)</p>\n<p>http://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help#37375 (for the desktop/offline Text Adventure, a step by step guide walkthrough demo game on the basics of Attributes)</p>\n<hr>\n<p>you can also take a look at Pixie's 'character creation' guide:</p>\n<p>http://docs.textadventures.co.uk/quest/guides/character_creation.html</p>\n<p>and here's my thread back when I was trying to learn this quest GUI/Editor and coding stuff myself:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread (scroll down some posts, to get to the character creation part)</p>\n<hr>\n<p>computers are stupid, so they must know what they're working with, and thus Data Types are very important, and you have to be very careful about not-mismatching them, for example:</p>\n<p>no human and no computer can do mis-matched Data Type operations, for examples:</p>\n<p>(math/arithmetic) addition operation:<br>\nSTRING + INTEGER = ERROR! Can't compute!</p>\n<p>\"river\" + 77 = impossible to compute!</p>\n<hr>\n<p>same with VARIABLES and their Values, for example:</p>\n<p>STRING_VARIABLE = INTEGER_VALUE // ERROR! you can NOT store an Integer Value into a String VARIABLE!</p>\n<p>game.my_string_attribute = 23 // ERROR!</p>\n<p>game.my_string_attribute = \"23\" // NO error, we anything in double quotes, is a String Value</p>\n<hr>\n<p>game.my_integer_attribute = \"hi\" // ERROR! you can't store a String Value into an Integer Attribute</p>\n<p>game.my_integer_attribute = \"34\" // ERROR! you can't store a String Value into an Integer Attribute</p>\n<p>game.my_integer_attribute = 34 // NO error</p>\n<hr>\n<p>game.my_boolean_attribute = \"true\" // ERROR! you can't store a String Value into a Boolean Attribute</p>\n<p>game.my_boolean_attribute = \"false\" // ERROR! you can't store a String Value into a Boolean Attribute</p>\n<p>game.my_boolean_attribute = true // NO error</p>\n<p>game.my_boolean_attribute = false // NO error</p>\n<hr>\n<pre><code>&lt;object name=\"katana\"&gt;\n&lt;/object&gt;\n\ngame.my_object_attribute = \"katana\" // ERROR! You can't store a String Value into an Object (reference/pointer) Attribute\nvs\ngame.my_object_attribute = katana // NO error\n</code></pre>\n<p>vs</p>\n<p>game.my_object_attribute = katana // ERROR! There is no (no existing and/or no still existing) 'katana' Object to be stored into the Object Attribute</p>\n<hr>\n<p>ask if you need help with anything or need anything explained or are confused wth anything, the syntax/format and Data Type semantics is very confusing if you don't already know coding and this coding stuff already.</p>\n\n",
      "PostDate": "2017-05-24T23:10:34.5329424Z",
      "LastEditDate": "2017-05-24T23:51:06.0095147Z"
    },
    {
      "PostId": "12497ded-3a21-4a06-8e2b-55fb39566715",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Slap Command:\r\nGetInput()\r\nSwitch (result)\r\nkey 1 = face\r\nkey 2 = back\r\nbut as those aren't objects, how do I go about creating face or back as variables?\r\n\r\nif you type in face, and you have it to say that for the script \"You slap their face\", in this situation, nothing gets posted\r\n\r\nGetInput() is returning \"face\"\r\nSwitch is looking for \"1\" or \"2\"...\r\nif you type 1, then you will get \"You slap their face\".\r\nif you had key (\"face\"), then you would get \"You slap their face\".\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Slap Command:<br>\nGetInput()<br>\nSwitch (result)<br>\nkey 1 = face<br>\nkey 2 = back<br>\nbut as those aren't objects, how do I go about creating face or back as variables?</p>\n<p>if you type in face, and you have it to say that for the script \"You slap their face\", in this situation, nothing gets posted</p>\n<p>GetInput() is returning \"face\"<br>\nSwitch is looking for \"1\" or \"2\"...<br>\nif you type 1, then you will get \"You slap their face\".<br>\nif you had key (\"face\"), then you would get \"You slap their face\".</p>\n\n",
      "PostDate": "2017-05-25T02:42:25.3400553Z",
      "LastEditDate": null
    },
    {
      "PostId": "f830c684-9b2d-476a-9cdd-f94f36c13dbd",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, by adding the \"\" the switch now works as expected, so thanks for the help.\r\n\r\nI'll probably have more questions, related to specific things, but this solves my current problem.\r\n\r\n@hegemonkhan; I do know some stuff about variables, functions, and variable types, having tried to self-teach myself C++... though pointers and their evil cousin, linked lists, still eludes me. On the topic of C++, does the coding here for Quest allow for \"global\" variables or even type-casting (ie type-casting a variable of type integer to be added to a variable of type double)",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, by adding the \"\" the switch now works as expected, so thanks for the help.</p>\n<p>I'll probably have more questions, related to specific things, but this solves my current problem.</p>\n<p>@hegemonkhan; I do know some stuff about variables, functions, and variable types, having tried to self-teach myself C++... though pointers and their evil cousin, linked lists, still eludes me. On the topic of C++, does the coding here for Quest allow for \"global\" variables or even type-casting (ie type-casting a variable of type integer to be added to a variable of type double)</p>\n\n",
      "PostDate": "2017-05-25T04:23:12.9075034Z",
      "LastEditDate": null
    },
    {
      "PostId": "0d988d87-689b-4a27-907a-517ccbdb8f04",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "C++ is a difficult language to start programming with, so good luck with that!\r\n\r\nQuest has no global variables. All data is stored as attributes of objects. Data you need global is best done as an attribute of the game object.\r\n\r\nQuest will automatically type cast variables to strings or lists. You can convert to a number with ToInt or ToDouble, and check if that is possible with IsInt and IsDouble.\r\n```\r\nmystring = \"You have \" + player.eggcount + \" eggs.\"\r\nmylist = \"One\" + NewStringList() + \"Two\"\r\nmyint = ToInt(\"42\")\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>C++ is a difficult language to start programming with, so good luck with that!</p>\n<p>Quest has no global variables. All data is stored as attributes of objects. Data you need global is best done as an attribute of the game object.</p>\n<p>Quest will automatically type cast variables to strings or lists. You can convert to a number with ToInt or ToDouble, and check if that is possible with IsInt and IsDouble.</p>\n<pre><code>mystring = \"You have \" + player.eggcount + \" eggs.\"\nmylist = \"One\" + NewStringList() + \"Two\"\nmyint = ToInt(\"42\")\n\n</code></pre>\n\n",
      "PostDate": "2017-05-25T06:55:04.5969699Z",
      "LastEditDate": null
    },
    {
      "PostId": "a12746c2-316c-4ca7-963d-bc59a6673fe2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I too have trouble with Abstract Data Structures (linked lists, dictionaries, maps, etc).\r\n\r\n-------\r\n\r\nI personally like C++'s syntax and features compared to Java (though it is hard to learn, C++ has a lot of stuff to learn!, and especially with working with arrays as you got no protections for your C++ program like in Java with its GC: garbage collecting, you have to be aware of what you're doing. Though, I do hope that, your computer is protected from memory links and dangling pointers caused/created by you messing up in C++ software ... gulps... I hope! C++ software better protect the computer from any screw ups you do in it!)\r\n\r\n------\r\n\r\nI understand pointers/references, but the hard part is understanding and putting together system/structure/design that works. My brain has trouble with this abstract OOP/OOD, as it's still oriented to the more simple proceedural coding.\r\n\r\nin quest, the 'name' String Attribute is the ID for quest, and thus it is a reference/pointer, and thus any VARIABLE holding the 'name' of some Element, is a reference/pointer, which really helps you understand the concept and usage of references/pointers, if they're still confusing for you (again though understanding pointers/references and keeping track of them - which is literally all that ASSEMBLY LANGUAGE is - as it deals with memory, is one thing, it's another thing to design a system that uses abstract data structures that use references/pointers).\r\n\r\nfor example of using Object Attributes (one type of reference/pointer in quest):\r\n\r\n```\r\n<object name=\"player\">\r\n  <attr name=\"right_hand\" type=\"object\">unarmed</attr> // initial/starting state of the pointer/reference Object Attribute : you're holding/equiping the 'unarmed' weapon Object in your right hand\r\n</object>\r\n\r\n<object name=\"unarmed\">\r\n  <attr name=\"damage\" type=\"int\">1</attr>\r\n</object>\r\n\r\n<object name=\"sword\">\r\n  <attr name=\"damage\" type=\"int\">50</attr>\r\n</object>\r\n\r\n// scripting:\r\n\r\nplayer.right_hand = sword // setting/re-setting/equiping the 'sword' weapon Object: new/current referenced/pointed-to Value (an 'Object' Element/OBJECT)\r\nplayer.right_hand = unarmed // setting/re-setting/equiping the 'unarmed' weapon Object: new/current referenced/pointed-to Value (an 'Object' Element/OBJECT)\r\n\r\nplayer.damage = player.right_hand.damage // using this reference/pointer, to apply the damage of the weapon that this pointer/reference is currently pointing/referencing to, to being the damage done by the player:\r\n// player.right_hand = unarmed\r\n// unarmed.damage = 1\r\n// player.damage = right_hand.damage = unarmed.damage = 1\r\n// player.damage = 1\r\n// or\r\n// player.right = sword\r\n// sword.damage = 50\r\n// player.damage = right_hand.damage = sword.damage = 50\r\n// player.damage = 50\r\n```\r\n\r\n------\r\n\r\nas Pixie stated, quest's global VARIABLES are Attributes (so long as the Object containing them exists and/or still exists, of course):\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_OBJECT\r\n\r\nwhereas, quest's local VARIABLES, are Variables:\r\n\r\nNAME_OF_Variable = VALUE_OR_EXPRESSION\r\n\r\n-------\r\n\r\nType Casting in quest is done via the conversion Functions:\r\n\r\nSTRING = ToString (INTEGER_OR_DOUBLE_OR_OBJECT_REFERENCE/POINTER_OR_BOOLEAN)\r\nINTEGER = ToInt (STRING)\r\nDOUBLE (quest's FLOAT/FLOATING_POINT/decimal_numbers) = ToDouble (STRING)\r\nOBJECT_REFERENCE/POINTER = GetObject (STRING)\r\n\r\nchecking of Data Types (using 'if' Script with these):\r\n\r\n(negation and matching can be applied to these as well)\r\nIsInt // if (IsInt (VARIABLE)) { /*scripting */ } // this (to the left) is understood (defaulted/shortened) as being this: IsInt // if (IsInt (VARIABLE) = true) { /*scripting */ } // if (not IsInt (VARIABLE)) { /*scripting */ } // if (IsInt (VARIABLE) = false) { /*scripting */ } // if (IsInt (VARIABLE) <> true) { /*scripting */ } // etc etc etc combinations/syntaxes\r\nIsNumeric // numeric: integer or double\r\nIsDouble\r\n\r\nTypeOf // requires matching: if (TypeOf (VARIABLE) = \"DATA_TYPE\") { /* scripting */ }\r\n\r\nchecking if Object contains Attribute itself (the Value of the Attribute is ignored):\r\n\r\n(again, used with the 'if' Script, NO matching is used)\r\nHasAttribute\r\nHasBoolean\r\nHasInt\r\nHasDouble\r\nHasString\r\nHasObject\r\nHasScript\r\n\r\nDoesInherit // matching IS used: if (DoesInherit (NAME_OF_OBJECT.NAME_OF_Inherited_Attribute) = \"NAME_OF_Object_Type\") { /* scripting */ }\r\n\r\nchecking if Object contains Attribute itself AND checks/matches if it has specified Value (returns false/null if either of these conditions fail, otherwise, returns the Value):\r\n\r\nGetAttribute\r\nGetInt // if (GetInt (player.strength) > 66) { { /* scripting */ }\r\nGetDouble\r\nGetString\r\nGetObject\r\nGetBoolean\r\n\r\n------\r\n\r\nand there's many more Functions... too... such as all the ones dealing with the List/Dictionary Attributes....\r\n\r\n-----\r\n\r\nlinks:\r\n\r\nhttp://docs.textadventures.co.uk/quest/\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/\r\nhttp://docs.textadventures.co.uk/quest/elements/object.html\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/\r\nhttp://docs.textadventures.co.uk/quest/functions/ (categorical ordering)\r\nhttp://docs.textadventures.co.uk/quest/functions/index_allfunctions.html (aphabetical ordering)\r\nhttp://docs.textadventures.co.uk/quest/scopes.html (these are nicely separated as their own link, but can also be found in the 'functions' link too)",
      "EditableFormat": "markdown",
      "HTML": "<p>I too have trouble with Abstract Data Structures (linked lists, dictionaries, maps, etc).</p>\n<hr>\n<p>I personally like C++'s syntax and features compared to Java (though it is hard to learn, C++ has a lot of stuff to learn!, and especially with working with arrays as you got no protections for your C++ program like in Java with its GC: garbage collecting, you have to be aware of what you're doing. Though, I do hope that, your computer is protected from memory links and dangling pointers caused/created by you messing up in C++ software ... gulps... I hope! C++ software better protect the computer from any screw ups you do in it!)</p>\n<hr>\n<p>I understand pointers/references, but the hard part is understanding and putting together system/structure/design that works. My brain has trouble with this abstract OOP/OOD, as it's still oriented to the more simple proceedural coding.</p>\n<p>in quest, the 'name' String Attribute is the ID for quest, and thus it is a reference/pointer, and thus any VARIABLE holding the 'name' of some Element, is a reference/pointer, which really helps you understand the concept and usage of references/pointers, if they're still confusing for you (again though understanding pointers/references and keeping track of them - which is literally all that ASSEMBLY LANGUAGE is - as it deals with memory, is one thing, it's another thing to design a system that uses abstract data structures that use references/pointers).</p>\n<p>for example of using Object Attributes (one type of reference/pointer in quest):</p>\n<pre><code>&lt;object name=\"player\"&gt;\n  &lt;attr name=\"right_hand\" type=\"object\"&gt;unarmed&lt;/attr&gt; // initial/starting state of the pointer/reference Object Attribute : you're holding/equiping the 'unarmed' weapon Object in your right hand\n&lt;/object&gt;\n\n&lt;object name=\"unarmed\"&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;1&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"sword\"&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;50&lt;/attr&gt;\n&lt;/object&gt;\n\n// scripting:\n\nplayer.right_hand = sword // setting/re-setting/equiping the 'sword' weapon Object: new/current referenced/pointed-to Value (an 'Object' Element/OBJECT)\nplayer.right_hand = unarmed // setting/re-setting/equiping the 'unarmed' weapon Object: new/current referenced/pointed-to Value (an 'Object' Element/OBJECT)\n\nplayer.damage = player.right_hand.damage // using this reference/pointer, to apply the damage of the weapon that this pointer/reference is currently pointing/referencing to, to being the damage done by the player:\n// player.right_hand = unarmed\n// unarmed.damage = 1\n// player.damage = right_hand.damage = unarmed.damage = 1\n// player.damage = 1\n// or\n// player.right = sword\n// sword.damage = 50\n// player.damage = right_hand.damage = sword.damage = 50\n// player.damage = 50\n</code></pre>\n<hr>\n<p>as Pixie stated, quest's global VARIABLES are Attributes (so long as the Object containing them exists and/or still exists, of course):</p>\n<p>NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_OBJECT</p>\n<p>whereas, quest's local VARIABLES, are Variables:</p>\n<p>NAME_OF_Variable = VALUE_OR_EXPRESSION</p>\n<hr>\n<p>Type Casting in quest is done via the conversion Functions:</p>\n<p>STRING = ToString (INTEGER_OR_DOUBLE_OR_OBJECT_REFERENCE/POINTER_OR_BOOLEAN)<br>\nINTEGER = ToInt (STRING)<br>\nDOUBLE (quest's FLOAT/FLOATING_POINT/decimal_numbers) = ToDouble (STRING)<br>\nOBJECT_REFERENCE/POINTER = GetObject (STRING)</p>\n<p>checking of Data Types (using 'if' Script with these):</p>\n<p>(negation and matching can be applied to these as well)<br>\nIsInt // if (IsInt (VARIABLE)) { /*scripting */ } // this (to the left) is understood (defaulted/shortened) as being this: IsInt // if (IsInt (VARIABLE) = true) { /*scripting */ } // if (not IsInt (VARIABLE)) { /*scripting */ } // if (IsInt (VARIABLE) = false) { /*scripting */ } // if (IsInt (VARIABLE) &lt;&gt; true) { /*scripting */ } // etc etc etc combinations/syntaxes<br>\nIsNumeric // numeric: integer or double<br>\nIsDouble</p>\n<p>TypeOf // requires matching: if (TypeOf (VARIABLE) = \"DATA_TYPE\") { /* scripting */ }</p>\n<p>checking if Object contains Attribute itself (the Value of the Attribute is ignored):</p>\n<p>(again, used with the 'if' Script, NO matching is used)<br>\nHasAttribute<br>\nHasBoolean<br>\nHasInt<br>\nHasDouble<br>\nHasString<br>\nHasObject<br>\nHasScript</p>\n<p>DoesInherit // matching IS used: if (DoesInherit (NAME_OF_OBJECT.NAME_OF_Inherited_Attribute) = \"NAME_OF_Object_Type\") { /* scripting */ }</p>\n<p>checking if Object contains Attribute itself AND checks/matches if it has specified Value (returns false/null if either of these conditions fail, otherwise, returns the Value):</p>\n<p>GetAttribute<br>\nGetInt // if (GetInt (player.strength) &gt; 66) { { /* scripting */ }<br>\nGetDouble<br>\nGetString<br>\nGetObject<br>\nGetBoolean</p>\n<hr>\n<p>and there's many more Functions... too... such as all the ones dealing with the List/Dictionary Attributes....</p>\n<hr>\n<p>links:</p>\n<p>http://docs.textadventures.co.uk/quest/</p>\n<p>http://docs.textadventures.co.uk/quest/elements/<br>\nhttp://docs.textadventures.co.uk/quest/elements/object.html</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/<br>\nhttp://docs.textadventures.co.uk/quest/functions/ (categorical ordering)<br>\nhttp://docs.textadventures.co.uk/quest/functions/index_allfunctions.html (aphabetical ordering)<br>\nhttp://docs.textadventures.co.uk/quest/scopes.html (these are nicely separated as their own link, but can also be found in the 'functions' link too)</p>\n\n",
      "PostDate": "2017-05-25T15:23:25.7577145Z",
      "LastEditDate": "2017-05-25T17:13:01.0283643Z"
    },
    {
      "PostId": "ba180166-63fa-4c74-8b95-63b474a421d1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the 'switch' and 'if' block Scripts/Functions are exactly the same thing:\r\n\r\n(so, it's just aesthetics: which design you like better and/or that works better for the coding situation, as functionally, they do exactly the same thing, the 'switch' Script/Function can handle the same or nearly-the-same complexity as can be handled by the 'if' Script/Function, as Pertex/Pixie/Jay demonstrated/shown to me, but I find doing complex scripting easier with the 'if' Script/Function)\r\n\r\nalso, you can do complexity with the text processor commands too, as you can nest multiple text processor commands... as Pertex (or maybe Pixie/Jay, but I think it was Pertex for this stuff) shown/demonstrated to me\r\n\r\n```\r\nthe 'if/else if/else' if block:\r\n\r\nif (VARIABLE = VALUE_OR_EXPRESSION_1) {\r\n  // blah scripting\r\n} else if (VARIABLE = VALUE_OR_EXPRESSION_2) {\r\n  // blah scripting\r\n} else if (VARIABLE = VALUE_OR_EXPRESSION_3) {\r\n  // blah scripting\r\n}  else {\r\n  // blah scripting\r\n}\r\n\r\nthe 'switch/case/default' switch block:\r\n\r\nswitch (VARIABLE) {\r\n  case (VALUE_OR_EXPRESSION_1) {\r\n    // blah scripting\r\n  }\r\n  case (VALUE_OR_EXPRESSION_2) {\r\n    // blah scripting\r\n  }\r\n  case (VALUE_OR_EXPRESSION_3) {\r\n    // blah scripting\r\n  }\r\n  default {\r\n    // blah scripting\r\n  }\r\n}\r\n\r\n// ---------\r\n\r\nso the:\r\n\r\nswitch (VARIABLE), matches up with the first part (left of the OPERATOR) of the: if (VARIABLE ....)\r\n\r\ncase (VALUE_OR_EXPRESSION), matches up with the last part (right of the OEPRATOR) of the: if/else if (.... VALUE_OR_EXPRESSION) \r\n\r\ndefault, matches up with: else\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>the 'switch' and 'if' block Scripts/Functions are exactly the same thing:</p>\n<p>(so, it's just aesthetics: which design you like better and/or that works better for the coding situation, as functionally, they do exactly the same thing, the 'switch' Script/Function can handle the same or nearly-the-same complexity as can be handled by the 'if' Script/Function, as Pertex/Pixie/Jay demonstrated/shown to me, but I find doing complex scripting easier with the 'if' Script/Function)</p>\n<p>also, you can do complexity with the text processor commands too, as you can nest multiple text processor commands... as Pertex (or maybe Pixie/Jay, but I think it was Pertex for this stuff) shown/demonstrated to me</p>\n<pre><code>the 'if/else if/else' if block:\n\nif (VARIABLE = VALUE_OR_EXPRESSION_1) {\n  // blah scripting\n} else if (VARIABLE = VALUE_OR_EXPRESSION_2) {\n  // blah scripting\n} else if (VARIABLE = VALUE_OR_EXPRESSION_3) {\n  // blah scripting\n}  else {\n  // blah scripting\n}\n\nthe 'switch/case/default' switch block:\n\nswitch (VARIABLE) {\n  case (VALUE_OR_EXPRESSION_1) {\n    // blah scripting\n  }\n  case (VALUE_OR_EXPRESSION_2) {\n    // blah scripting\n  }\n  case (VALUE_OR_EXPRESSION_3) {\n    // blah scripting\n  }\n  default {\n    // blah scripting\n  }\n}\n\n// ---------\n\nso the:\n\nswitch (VARIABLE), matches up with the first part (left of the OPERATOR) of the: if (VARIABLE ....)\n\ncase (VALUE_OR_EXPRESSION), matches up with the last part (right of the OEPRATOR) of the: if/else if (.... VALUE_OR_EXPRESSION) \n\ndefault, matches up with: else\n</code></pre>\n\n",
      "PostDate": "2017-05-25T16:01:09.5945413Z",
      "LastEditDate": "2017-05-25T16:05:42.3671646Z"
    },
    {
      "PostId": "ea9594ff-8933-4300-8526-6a0cf8353f0a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if the (VARIABLE) is holding a String, then it's a String VARIABLE, and thus then you MUST HAVE the double quotes on the being-compared/matched-to VALUE/EXPRESSION (to make it a String Value/Expression): (\"VALUE_OR_EXPRESSION\")\r\n\r\nif the (VARIABLE) is holding an Object, then it's an Object VARIABLE, and thus then you MUST NOT have double quotes on the being-compared/matched-to VALUE/EXPRESSION (making it an Object Value/EXPRESSION): (VALUE_OR_EXPRESSION)",
      "EditableFormat": "markdown",
      "HTML": "<p>if the (VARIABLE) is holding a String, then it's a String VARIABLE, and thus then you MUST HAVE the double quotes on the being-compared/matched-to VALUE/EXPRESSION (to make it a String Value/Expression): (\"VALUE_OR_EXPRESSION\")</p>\n<p>if the (VARIABLE) is holding an Object, then it's an Object VARIABLE, and thus then you MUST NOT have double quotes on the being-compared/matched-to VALUE/EXPRESSION (making it an Object Value/EXPRESSION): (VALUE_OR_EXPRESSION)</p>\n\n",
      "PostDate": "2017-05-25T16:09:47.5144291Z",
      "LastEditDate": "2017-05-25T16:26:05.6775731Z"
    },
    {
      "PostId": "16c7f520-6e25-4247-b1b2-297e869d7391",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nhow matching works:\r\n\r\n(pretend that the names of my VARIABLES, makes/determine them as those Data Types of VARIABLES, for these examples/explanations)\r\n\r\n(the VARIABLE'S DATA TYPE is actually determined by: the DATA TYPE of its Value when done in code, and if done in the GUI/Editor, you set/determine the VARIABLES' Data Type when you create/add it)\r\n\r\nstring_variable =\"HK\"\r\nif (string_variable = \"HK\")\r\n// DATA TYPE MATCHING:\r\n// if (STRING = STRING)\r\n// true: string_variable = STRING\r\n// true: \"HK\" = STRING\r\n// TRUE, thus continue below:\r\n// STRING/TEXT MATCHING:\r\n// if (\"HK\" = \"HK\")\r\n// true: \"H\" = \"H\"\r\n// true: \"K\" = \"K\"\r\n// TRUE\r\n\r\nstring_variable =\"HK\"\r\nif (string_variable = \"HegemonKhan\")\r\n// DATA TYPE MATCHING:\r\n// if (STRING = STRING)\r\n// true: string_variable = STRING\r\n// true: \"HegemonKhan\" = STRING\r\n// TRUE, thus continue below:\r\n// STRING/TEXT MATCHING:\r\n// if (\"HK\" = \"HegemonKhan\")\r\n// true: \"H\" = \"H\"\r\n// false: \"K\" = \"e\" \r\n// FALSE\r\n\r\nstring_variable =\"HegemonKhan\"\r\nif (string_variable = \"HK\")\r\n// DATA TYPE MATCHING:\r\n// if (STRING = STRING)\r\n// true: string_variable = STRING\r\n// true: \"HK\" = STRING\r\n// TRUE, thus continue below:\r\n// STRING/TEXT MATCHING:\r\n// if (\"HegemonKhan\" = \"HK\")\r\n// true: \"H\" = \"H\"\r\n// false: \"e\" = \"K\"\r\n// FALSE\r\n\r\nstring_variable =\"HegemonKhan\"\r\nif (string_variable = \"HegemonKhan\")\r\n// DATA TYPE MATCHING:\r\n// if (STRING = STRING)\r\n// true: string_variable = STRING\r\n// true: \"HegemonKhan\" = STRING\r\n// TRUE, thus continue below:\r\n// STRING/TEXT MATCHING:\r\n// if (\"HegemonKhan\" = \"HegemonKhan\")\r\n// true: \"H\" = \"H\"\r\n// true: \"e\" = \"e\"\r\n// true: \"g\" = \"g\"\r\n// true: \"e\" = \"e\"\r\n// true: \"m\" = \"m\"\r\n// true: \"o\" = \"o\"\r\n// true: \"n\" = \"n\"\r\n// true: \"K\" = \"K\"\r\n// true: \"h\" = \"h\"\r\n// true: \"a\" = \"a\"\r\n// true: \"n\" = \"n\"\r\n// TRUE\r\n\r\n<object name=\"HK\"></object>\r\nstring_variable = HK\r\nif (string_variable = \"HK\")\r\n// DOES 'HK' Object Exist?\r\n// true: <object name=\"HK\"></object>\r\n// TRUE, thus continue below:\r\n// DATA TYPE MATCHING:\r\n// if (STRING = STRING)\r\n// true: string_variable = STRING\r\n// false: HK = Object\r\n// FALSE\r\n\r\n<object name=\"sword\"></object>\r\nobject_variable = sword\r\nif (object_variable = sword)\r\n// DOES 'sword' Object Exist?\r\n// true: <object name=\"sword\"></object>\r\n// TRUE, thus continue below:\r\n// DATA TYPE MATCHING:\r\n// if (Object = Object)\r\n// true: object_variable = Object\r\n// true: sword = Object\r\n// TRUE, thus continue below:\r\n// STRING/TEXT MATCHING:\r\n// if (\"sword\" = \"sword\")\r\n// true: \"s\" = \"s\"\r\n// true: \"w\" = \"w\"\r\n// true: \"o\" = \"o\"\r\n// true: \"r\" = \"r\"\r\n// true: \"d\" = \"d\"\r\n// TRUE\r\n\r\nobject_variable = sword\r\nif (object_variable = sword)\r\n// DOES 'sword' Object Exist?\r\n// false: THERE IS NO: <object name=\"sword\"></object>\r\n// FALSE\r\n\r\n<object name=\"sword\"></object>\r\nobject_variable = sword\r\nif (object_variable = \"sword\")\r\n// DOES 'sword' Object Exist?\r\n// true: <object name=\"sword\"></object>\r\n// TRUE, thus continue below:\r\n// DATA TYPE MATCHING:\r\n// if (Object = Object)\r\n// true: object_variable = Object\r\n// false: \"sword\" = STRING\r\n// FALSE\r\n\r\n<object name=\"sword\"></object>\r\nobject_variable = \"sword\"\r\n// does the 'object_variable' Object VARIABLE, contain an Object Value/Expression, ???\r\n// false: \"sword\" = Object\r\n// FALSE\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>how matching works:\n\n(pretend that the names of my VARIABLES, makes/determine them as those Data Types of VARIABLES, for these examples/explanations)\n\n(the VARIABLE'S DATA TYPE is actually determined by: the DATA TYPE of its Value when done in code, and if done in the GUI/Editor, you set/determine the VARIABLES' Data Type when you create/add it)\n\nstring_variable =\"HK\"\nif (string_variable = \"HK\")\n// DATA TYPE MATCHING:\n// if (STRING = STRING)\n// true: string_variable = STRING\n// true: \"HK\" = STRING\n// TRUE, thus continue below:\n// STRING/TEXT MATCHING:\n// if (\"HK\" = \"HK\")\n// true: \"H\" = \"H\"\n// true: \"K\" = \"K\"\n// TRUE\n\nstring_variable =\"HK\"\nif (string_variable = \"HegemonKhan\")\n// DATA TYPE MATCHING:\n// if (STRING = STRING)\n// true: string_variable = STRING\n// true: \"HegemonKhan\" = STRING\n// TRUE, thus continue below:\n// STRING/TEXT MATCHING:\n// if (\"HK\" = \"HegemonKhan\")\n// true: \"H\" = \"H\"\n// false: \"K\" = \"e\" \n// FALSE\n\nstring_variable =\"HegemonKhan\"\nif (string_variable = \"HK\")\n// DATA TYPE MATCHING:\n// if (STRING = STRING)\n// true: string_variable = STRING\n// true: \"HK\" = STRING\n// TRUE, thus continue below:\n// STRING/TEXT MATCHING:\n// if (\"HegemonKhan\" = \"HK\")\n// true: \"H\" = \"H\"\n// false: \"e\" = \"K\"\n// FALSE\n\nstring_variable =\"HegemonKhan\"\nif (string_variable = \"HegemonKhan\")\n// DATA TYPE MATCHING:\n// if (STRING = STRING)\n// true: string_variable = STRING\n// true: \"HegemonKhan\" = STRING\n// TRUE, thus continue below:\n// STRING/TEXT MATCHING:\n// if (\"HegemonKhan\" = \"HegemonKhan\")\n// true: \"H\" = \"H\"\n// true: \"e\" = \"e\"\n// true: \"g\" = \"g\"\n// true: \"e\" = \"e\"\n// true: \"m\" = \"m\"\n// true: \"o\" = \"o\"\n// true: \"n\" = \"n\"\n// true: \"K\" = \"K\"\n// true: \"h\" = \"h\"\n// true: \"a\" = \"a\"\n// true: \"n\" = \"n\"\n// TRUE\n\n&lt;object name=\"HK\"&gt;&lt;/object&gt;\nstring_variable = HK\nif (string_variable = \"HK\")\n// DOES 'HK' Object Exist?\n// true: &lt;object name=\"HK\"&gt;&lt;/object&gt;\n// TRUE, thus continue below:\n// DATA TYPE MATCHING:\n// if (STRING = STRING)\n// true: string_variable = STRING\n// false: HK = Object\n// FALSE\n\n&lt;object name=\"sword\"&gt;&lt;/object&gt;\nobject_variable = sword\nif (object_variable = sword)\n// DOES 'sword' Object Exist?\n// true: &lt;object name=\"sword\"&gt;&lt;/object&gt;\n// TRUE, thus continue below:\n// DATA TYPE MATCHING:\n// if (Object = Object)\n// true: object_variable = Object\n// true: sword = Object\n// TRUE, thus continue below:\n// STRING/TEXT MATCHING:\n// if (\"sword\" = \"sword\")\n// true: \"s\" = \"s\"\n// true: \"w\" = \"w\"\n// true: \"o\" = \"o\"\n// true: \"r\" = \"r\"\n// true: \"d\" = \"d\"\n// TRUE\n\nobject_variable = sword\nif (object_variable = sword)\n// DOES 'sword' Object Exist?\n// false: THERE IS NO: &lt;object name=\"sword\"&gt;&lt;/object&gt;\n// FALSE\n\n&lt;object name=\"sword\"&gt;&lt;/object&gt;\nobject_variable = sword\nif (object_variable = \"sword\")\n// DOES 'sword' Object Exist?\n// true: &lt;object name=\"sword\"&gt;&lt;/object&gt;\n// TRUE, thus continue below:\n// DATA TYPE MATCHING:\n// if (Object = Object)\n// true: object_variable = Object\n// false: \"sword\" = STRING\n// FALSE\n\n&lt;object name=\"sword\"&gt;&lt;/object&gt;\nobject_variable = \"sword\"\n// does the 'object_variable' Object VARIABLE, contain an Object Value/Expression, ???\n// false: \"sword\" = Object\n// FALSE\n</code></pre>\n\n",
      "PostDate": "2017-05-25T16:40:30.1946939Z",
      "LastEditDate": "2017-05-25T16:57:43.8697095Z"
    },
    {
      "PostId": "0d376f97-9741-445a-a0b2-37b7cc8f3d5a",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My $.02...\r\n\"If\" is good for 1 or 2 compares...\r\n\"Switch\" is good for more than 2, and easer to modify...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>My $.02...<br>\n\"If\" is good for 1 or 2 compares...<br>\n\"Switch\" is good for more than 2, and easer to modify...</p>\n\n",
      "PostDate": "2017-05-25T17:51:02.5317892Z",
      "LastEditDate": null
    },
    {
      "PostId": "f79aefb4-ba46-4a06-9e1e-e5c635f324d1",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How do you do numerical keys with Switches though, when you are looking for a range of numbers.\r\n\r\nie  Example below of what I mean:\r\n\r\nif = (player.Health > 100) and (player.Health < 150)\r\nelseif = player.Health > 149\r\nelseif = (player.Health < 100) and (player.Health > 1)\r\n\r\nWhen it is a range of numbers, I find that it can only be done with tons of If statements. Same applies when dealing with objects with flags, you need a separate if statement for each flag, particularly if that flag requires exclusivity. Such as:\r\n\r\nshoot arrow at what body location\r\nif object has flag AtFace\r\n... damage face with arrow\r\nif object has flag AtBelly\r\n... damage belly with arrow\r\netc...\r\n\r\nyou'd have to use if statements for each of those situations... same applies to a switch on/off functionality... as flags afaik aren't objects, or variables or strings.",
      "EditableFormat": "markdown",
      "HTML": "<p>How do you do numerical keys with Switches though, when you are looking for a range of numbers.</p>\n<p>ie  Example below of what I mean:</p>\n<p>if = (player.Health &gt; 100) and (player.Health &lt; 150)<br>\nelseif = player.Health &gt; 149<br>\nelseif = (player.Health &lt; 100) and (player.Health &gt; 1)</p>\n<p>When it is a range of numbers, I find that it can only be done with tons of If statements. Same applies when dealing with objects with flags, you need a separate if statement for each flag, particularly if that flag requires exclusivity. Such as:</p>\n<p>shoot arrow at what body location<br>\nif object has flag AtFace<br>\n... damage face with arrow<br>\nif object has flag AtBelly<br>\n... damage belly with arrow<br>\netc...</p>\n<p>you'd have to use if statements for each of those situations... same applies to a switch on/off functionality... as flags afaik aren't objects, or variables or strings.</p>\n\n",
      "PostDate": "2017-05-26T08:24:52.8787335Z",
      "LastEditDate": null
    },
    {
      "PostId": "7cc73a05-4094-44be-a62c-942edbdca5d7",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "By matching against `true`.\r\n```\r\nswitch (true) {\r\n  case (health < 1) {\r\n    msg(\"You are dead!\")\r\n  }\r\n  case (health < 100) {\r\n    msg(\"You are not feeling so good\")\r\n  }\r\n  default {\r\n    msg(\"Doing fine!\")\r\n  }\r\n}\r\n```\r\nQuest will stop at the first case that matches, do that, and then stop, so the second case only needs to check if health is less than 100, not that it is over 0.",
      "EditableFormat": "markdown",
      "HTML": "<p>By matching against <code>true</code>.</p>\n<pre><code>switch (true) {\n  case (health &lt; 1) {\n    msg(\"You are dead!\")\n  }\n  case (health &lt; 100) {\n    msg(\"You are not feeling so good\")\n  }\n  default {\n    msg(\"Doing fine!\")\n  }\n}\n</code></pre>\n<p>Quest will stop at the first case that matches, do that, and then stop, so the second case only needs to check if health is less than 100, not that it is over 0.</p>\n\n",
      "PostDate": "2017-05-26T12:20:46.4448193Z",
      "LastEditDate": null
    },
    {
      "PostId": "0a7505dd-5e7a-4d2e-b721-96c645085fe7",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks Pixie. That helps a lot.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks Pixie. That helps a lot.</p>\n\n",
      "PostDate": "2017-05-26T18:26:03.3416866Z",
      "LastEditDate": null
    },
    {
      "PostId": "23bb77e2-65ad-4058-9c2c-b3ade3c6cf56",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Problem though. Quest keeps rearranging my switch keys, and so when I initially code it looks like this:\r\n\r\nx > 4 ... msg\r\nx > 2 ... msg\r\nx > 0 ... msg\r\n\r\nbut since it re-arranged it, it now looks like:\r\n\r\nx > 0 ... msg\r\nx > 4 ... msg\r\nx > 2 ... msg\r\n\r\nHow do re-rearrange them or do I need to use a double Boolean statement?\r\n\r\nie x > 0 and x < 3\r\nie x > 2 and x < 5",
      "EditableFormat": "markdown",
      "HTML": "<p>Problem though. Quest keeps rearranging my switch keys, and so when I initially code it looks like this:</p>\n<p>x &gt; 4 ... msg<br>\nx &gt; 2 ... msg<br>\nx &gt; 0 ... msg</p>\n<p>but since it re-arranged it, it now looks like:</p>\n<p>x &gt; 0 ... msg<br>\nx &gt; 4 ... msg<br>\nx &gt; 2 ... msg</p>\n<p>How do re-rearrange them or do I need to use a double Boolean statement?</p>\n<p>ie x &gt; 0 and x &lt; 3<br>\nie x &gt; 2 and x &lt; 5</p>\n\n",
      "PostDate": "2017-05-27T04:12:31.1159872Z",
      "LastEditDate": null
    },
    {
      "PostId": "f5abced9-a530-4dbc-bb4a-c3b00463951b",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have never known it do that, and I would consider that to be a bug.\r\n\r\nAre you using the desktop version or the web version? Could you say exactly what steps you did? \r\n\r\nTo change the order, you would need to click on the Code view button, and rearrange . If you want to paste the code into a post, we could do that for you if you are not sure (and it might help workout why it rearranged).",
      "EditableFormat": "markdown",
      "HTML": "<p>I have never known it do that, and I would consider that to be a bug.</p>\n<p>Are you using the desktop version or the web version? Could you say exactly what steps you did?</p>\n<p>To change the order, you would need to click on the Code view button, and rearrange . If you want to paste the code into a post, we could do that for you if you are not sure (and it might help workout why it rearranged).</p>\n\n",
      "PostDate": "2017-05-27T06:48:30.4449584Z",
      "LastEditDate": null
    },
    {
      "PostId": "2592aaad-1247-4ae2-81ee-c76721b9df2b",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Desktop Version\r\n\r\nIts possible that by copying the entire Switch and pasting it again, so that I would have to do the minimal amount of retyping, as the copied Switch was going to do something similar to the initial one but slightly and specifically different.  I do know that sometimes copying and pasting does screw some things up... such as emptying object has flag fields or causing some custom if expressions to get mangled; ie if I want to check for two GetBooleans with And/Or = GetBoolean() and GetBoolean(). Just something one needs to check with a copy/paste I suppose. I do recall in an old Visual Basic class the teacher saying something along the lines of be careful copy/pasting code...and I suppose these are examples of when one should be careful.\r\n\r\nBasically what is was doing was that a character (orc) has an attribute FaceBlood, LowerTorsoBlood and an attribute BellyBlood. When they have taken a hit to the face, FaceBlood gets +1; to the belly, BellyBlood +1. So when orc.FaceBlood > 0; case = description. orc.FaceBlood > 2; case = description or orc.FaceBlood > 4; case = description. Each description would be descriptive of how much blood was flowing from that area, if the player did the command Look at Orc. So, since the switch was similar, but slightly different for BellyBlood or LowerTorsoBlood, I copied the FaceBlood switch, renamed the Keys to BellyBlood or LowerTorsoBlood, and redid the descriptions. THEN I saved the file and played the game, and noticed in game that despite having more than 8 for FaceBlood, it was only showing the description for the orc.FaceBlood > 2 and noticed the ordering for FaceBlood, BellyBlood and LowerTorsoBlood was mangled... and thus had to use double Booleans to ensure that whatever order they got put in, they'd still produce the correct logic for the situation. \r\n\r\nI did find that doing double Booleans ensured that it would get the correct 'case' but a bunch of annoying work to do so. Had another situation where there was 6 cases, and after adding double Booleans to it, the order got mixed up again. Annoying, but I suppose its just an issue with the program... like a bunch of other ones I've encountered... like the annoying and useless arithmetic isn't defined for Objects or Int32... which I've figured out to mean that I misspelled an object name or an object attribute, and by properly spelling it the error goes away.",
      "EditableFormat": "markdown",
      "HTML": "<p>Desktop Version</p>\n<p>Its possible that by copying the entire Switch and pasting it again, so that I would have to do the minimal amount of retyping, as the copied Switch was going to do something similar to the initial one but slightly and specifically different.  I do know that sometimes copying and pasting does screw some things up... such as emptying object has flag fields or causing some custom if expressions to get mangled; ie if I want to check for two GetBooleans with And/Or = GetBoolean() and GetBoolean(). Just something one needs to check with a copy/paste I suppose. I do recall in an old Visual Basic class the teacher saying something along the lines of be careful copy/pasting code...and I suppose these are examples of when one should be careful.</p>\n<p>Basically what is was doing was that a character (orc) has an attribute FaceBlood, LowerTorsoBlood and an attribute BellyBlood. When they have taken a hit to the face, FaceBlood gets +1; to the belly, BellyBlood +1. So when orc.FaceBlood &gt; 0; case = description. orc.FaceBlood &gt; 2; case = description or orc.FaceBlood &gt; 4; case = description. Each description would be descriptive of how much blood was flowing from that area, if the player did the command Look at Orc. So, since the switch was similar, but slightly different for BellyBlood or LowerTorsoBlood, I copied the FaceBlood switch, renamed the Keys to BellyBlood or LowerTorsoBlood, and redid the descriptions. THEN I saved the file and played the game, and noticed in game that despite having more than 8 for FaceBlood, it was only showing the description for the orc.FaceBlood &gt; 2 and noticed the ordering for FaceBlood, BellyBlood and LowerTorsoBlood was mangled... and thus had to use double Booleans to ensure that whatever order they got put in, they'd still produce the correct logic for the situation.</p>\n<p>I did find that doing double Booleans ensured that it would get the correct 'case' but a bunch of annoying work to do so. Had another situation where there was 6 cases, and after adding double Booleans to it, the order got mixed up again. Annoying, but I suppose its just an issue with the program... like a bunch of other ones I've encountered... like the annoying and useless arithmetic isn't defined for Objects or Int32... which I've figured out to mean that I misspelled an object name or an object attribute, and by properly spelling it the error goes away.</p>\n\n",
      "PostDate": "2017-05-27T08:03:17.7025271Z",
      "LastEditDate": null
    },
    {
      "PostId": "d62d278a-64c5-4241-82b9-c98afa6f338a",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I use the desktop version a lot, and have never seen it do that. I do tend to type in code rather than through the GUI, but I would not have thought that was an issue.",
      "EditableFormat": "markdown",
      "HTML": "<p>I use the desktop version a lot, and have never seen it do that. I do tend to type in code rather than through the GUI, but I would not have thought that was an issue.</p>\n\n",
      "PostDate": "2017-05-27T09:37:01.9329492Z",
      "LastEditDate": null
    },
    {
      "PostId": "ce3a739e-a897-4324-bec9-92abf9314052",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "we can always try to find the 'sorting' function within the underlying quest code... unless it's even worse... using some computer system control/code or some other 3rd party source for the sorting... meh...\r\n\r\notherwise... you can always just use the 'if' Script/Function/block.... hehe\r\n\r\nor, you're just stuck with using the 'and' to create the within-range for each case... if you're dead-set on using the 'switch' Script/Function/block",
      "EditableFormat": "markdown",
      "HTML": "<p>we can always try to find the 'sorting' function within the underlying quest code... unless it's even worse... using some computer system control/code or some other 3rd party source for the sorting... meh...</p>\n<p>otherwise... you can always just use the 'if' Script/Function/block.... hehe</p>\n<p>or, you're just stuck with using the 'and' to create the within-range for each case... if you're dead-set on using the 'switch' Script/Function/block</p>\n\n",
      "PostDate": "2017-05-27T11:17:57.5822639Z",
      "LastEditDate": null
    },
    {
      "PostId": "128b2eb8-9068-4650-8c21-57962c625b12",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/6bf915571362451733db8730696fe55d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually, I have also had a similar issue when using switches where I would order the various cases in a certain way, but the Quest program would reorder them in a different way.  I haven't tried reordering them through the direct ASLX code yet.  I'm also using the desktop version of Quest.  I have never had a problem with the If-Then scripts though.",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually, I have also had a similar issue when using switches where I would order the various cases in a certain way, but the Quest program would reorder them in a different way.  I haven't tried reordering them through the direct ASLX code yet.  I'm also using the desktop version of Quest.  I have never had a problem with the If-Then scripts though.</p>\n\n",
      "PostDate": "2017-05-29T16:14:52.1310186Z",
      "LastEditDate": null
    }
  ]
}
