{
  "Topic": {
    "TopicId": "jxb7adjgpk6qjafdaitnja",
    "ForumId": "10",
    "Title": "Calling an attribute no matter where object or player is?",
    "LastUpdated": "2019-01-12T09:10:40.3408487Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "34cac11b-2b70-4ac4-8c0c-968d008b0dff",
      "UserId": 395857,
      "Username": "Lobonlo",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e293cb6bbe69f501874f5d61c682482a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey, I'm trying to create a command that let's the player \"think\" about objects. This would basically give a secondary description for an object that includes more tasty LORE! and the main character's opinions. Currently this command prints out a string attribute of an object, which it does do brilliantly! In the room you're in.\r\n\r\nThis makes it a glorified \"look\" but I want you to be able to \"think\" about objects that are not present currently or aren't physically present in the actual story at all (but of course as objects in the game code). For example, you can think of a character that's three rooms over and you can also think about a planet that's colony is advertised on a poster, but you can't actually ever go there. Or maybe think about something obvious like Earth that is mentioned in descriptions but has no physical representation in the game.\r\n\r\nCurrently thinking of an inaccessible room where all these objects that aren't present could be and you could get the string attribute from there when needed. If one can get this to work, you can of course do it with other rooms and their objects. Another option I thought was an container on the player that would have objects that have been mentioned to you in story and you can think about them through there. Still, I would kinda prefer if these objects wouldn't have to be visible to you for this to work, but for example putting scenery items in your inventory doesn't work.\r\n\r\nAaanyhow, that's the idea. Help much need.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey, I'm trying to create a command that let's the player \"think\" about objects. This would basically give a secondary description for an object that includes more tasty LORE! and the main character's opinions. Currently this command prints out a string attribute of an object, which it does do brilliantly! In the room you're in.</p>\n<p>This makes it a glorified \"look\" but I want you to be able to \"think\" about objects that are not present currently or aren't physically present in the actual story at all (but of course as objects in the game code). For example, you can think of a character that's three rooms over and you can also think about a planet that's colony is advertised on a poster, but you can't actually ever go there. Or maybe think about something obvious like Earth that is mentioned in descriptions but has no physical representation in the game.</p>\n<p>Currently thinking of an inaccessible room where all these objects that aren't present could be and you could get the string attribute from there when needed. If one can get this to work, you can of course do it with other rooms and their objects. Another option I thought was an container on the player that would have objects that have been mentioned to you in story and you can think about them through there. Still, I would kinda prefer if these objects wouldn't have to be visible to you for this to work, but for example putting scenery items in your inventory doesn't work.</p>\n<p>Aaanyhow, that's the idea. Help much need.</p>\n\n",
      "PostDate": "2019-01-12T09:10:40.3408487Z",
      "LastEditDate": "2019-01-12T09:13:24.4199474Z",
      "link": null
    },
    {
      "PostId": "6c2df7be-f6ed-40ed-9bef-ee0b1a1b47fe",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Look at the alternative scope section on this page:\r\nhttp://docs.textadventures.co.uk/quest/advanced_scope.html\r\n\r\nThe way I would do it is give the THINK command a scope of \"world\" and then have it check ifthe memory attribute of the item exists. If it does, print, otherwise say you do not remember it.\r\n\r\nPutting the objects in a certain location will get messy if the player can also find them in the game world.",
      "EditableFormat": "markdown",
      "HTML": "<p>Look at the alternative scope section on this page:<br>\nhttp://docs.textadventures.co.uk/quest/advanced_scope.html</p>\n<p>The way I would do it is give the THINK command a scope of \"world\" and then have it check ifthe memory attribute of the item exists. If it does, print, otherwise say you do not remember it.</p>\n<p>Putting the objects in a certain location will get messy if the player can also find them in the game world.</p>\n\n",
      "PostDate": "2019-01-12T09:32:12.7665768Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2e0a7fdc-aca1-4a6d-a22a-7dfabadf2d5a",
      "UserId": 395857,
      "Username": "Lobonlo",
      "AvatarUrl": "https://i.imgur.com/fWSlzVyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh thanks! I did think about setting the scope but then thought it would just limit the scope.\r\n\r\nYeah, the idea of doing a clone to THINK about for each character, for example, sounded rather messy and a lot of work that I'd prefer to avoid.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh thanks! I did think about setting the scope but then thought it would just limit the scope.</p>\n<p>Yeah, the idea of doing a clone to THINK about for each character, for example, sounded rather messy and a lot of work that I'd prefer to avoid.</p>\n\n",
      "PostDate": "2019-01-12T09:38:01.3292796Z",
      "LastEditDate": "2019-01-12T09:38:57.8195031Z",
      "link": null
    },
    {
      "PostId": "48db877f-992e-4295-a5e8-8ce96c244369",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you set the command's scope to \"world\", it will work with any object or room in the game, whether the player can see it or not. So you can have objects that are mentioned but never seen in an inaccessible room somewhere, and then the player can think about both visible and abstract objects.\r\n\r\nThe downside of using 'world' is that the player could think about actual objects that they haven't found yet, which you might not want. So you could also take a slightly more complex solution, of making an object list of thinkable items. You could put objects into this list in the backdrop scope script (on the game's \"advanced scripts\" tab), using something like:\r\n```\r\nif (not HasAttribute (game.pov, \"items_seen\")) {\r\n  game.pov.items_seen = ScopeInventory()\r\n}\r\nif (not ListContains (game.pov.items_seen, game.pov.parent)) {\r\n  list add (game.pov.items_seen, game.pov.parent)\r\n}\r\nforeach (item, items) {\r\n  if (not ListContains (game.pov.items_seen, item)) {\r\n    list add (game.pov.items_seen, item)\r\n  }\r\n}\r\n```\r\nThat basically means that whenever the player uses a command, the objects that are valid for that command get added to the items_seen list.\r\nYou could then give your \"think\" command the scope: `Some inaccessible room;'items_seen` to include both objects in the inaccessible room, and every object they've seen.\r\nThe disadvantage in this case is that some objects might be duplicates. For example, \"think about door\" shouldn't ask the player to choose between all the doors they've seen if there's one in the current room, because it's kind of obvious which one is meant. There are a few ways this could be dealt with, none of them particularly complicated.\r\n\r\nI'd probably modify that by giving the \"think\" command a script attribute, `changecommandscope`, looking something like this:\r\n```\r\nvisible = ScopeVisible()\r\nnothere = ListExclude (items, visible)\r\nforeach (item, visible) {\r\n  foreach (duplicate, FilterByAttribute (nothere, \"alias\", GetDisplayAlias(item))) {\r\n    if (ListContains (items, duplicate)) {\r\n      list remove (items, duplicate)\r\n    }\r\n  }\r\n}\r\n```\r\nThat would mean that the command works on all items that have been seen by the player, but not items which have the same alias as something they can currently see. I think that if I was playing such a game, in most cases that would cause it to behave the way I expected.\r\n\r\n\r\nHope one of thoise suggestions proves useful to you.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you set the command's scope to \"world\", it will work with any object or room in the game, whether the player can see it or not. So you can have objects that are mentioned but never seen in an inaccessible room somewhere, and then the player can think about both visible and abstract objects.</p>\n<p>The downside of using 'world' is that the player could think about actual objects that they haven't found yet, which you might not want. So you could also take a slightly more complex solution, of making an object list of thinkable items. You could put objects into this list in the backdrop scope script (on the game's \"advanced scripts\" tab), using something like:</p>\n<pre><code>if (not HasAttribute (game.pov, \"items_seen\")) {\n  game.pov.items_seen = ScopeInventory()\n}\nif (not ListContains (game.pov.items_seen, game.pov.parent)) {\n  list add (game.pov.items_seen, game.pov.parent)\n}\nforeach (item, items) {\n  if (not ListContains (game.pov.items_seen, item)) {\n    list add (game.pov.items_seen, item)\n  }\n}\n</code></pre>\n<p>That basically means that whenever the player uses a command, the objects that are valid for that command get added to the items_seen list.<br>\nYou could then give your \"think\" command the scope: <code>Some inaccessible room;'items_seen</code> to include both objects in the inaccessible room, and every object they've seen.<br>\nThe disadvantage in this case is that some objects might be duplicates. For example, \"think about door\" shouldn't ask the player to choose between all the doors they've seen if there's one in the current room, because it's kind of obvious which one is meant. There are a few ways this could be dealt with, none of them particularly complicated.</p>\n<p>I'd probably modify that by giving the \"think\" command a script attribute, <code>changecommandscope</code>, looking something like this:</p>\n<pre><code>visible = ScopeVisible()\nnothere = ListExclude (items, visible)\nforeach (item, visible) {\n  foreach (duplicate, FilterByAttribute (nothere, \"alias\", GetDisplayAlias(item))) {\n    if (ListContains (items, duplicate)) {\n      list remove (items, duplicate)\n    }\n  }\n}\n</code></pre>\n<p>That would mean that the command works on all items that have been seen by the player, but not items which have the same alias as something they can currently see. I think that if I was playing such a game, in most cases that would cause it to behave the way I expected.</p>\n<p>Hope one of thoise suggestions proves useful to you.</p>\n\n",
      "PostDate": "2019-01-12T09:45:32.7572953Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "38441be3-56b3-43a8-a1ab-5922615c44cc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, Pixie beat me to it :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, Pixie beat me to it :)</p>\n\n",
      "PostDate": "2019-01-12T09:47:47.7337551Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ae22b98a-ca0e-4c63-a260-85b0ca4b5de2",
      "UserId": 395857,
      "Username": "Lobonlo",
      "AvatarUrl": "https://i.imgur.com/fWSlzVyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yay! Thanks to you both :> I'll start testing the more complex version soon.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yay! Thanks to you both :&gt; I'll start testing the more complex version soon.</p>\n\n",
      "PostDate": "2019-01-13T07:42:50.7870957Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
