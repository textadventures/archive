{
  "Topic": {
    "TopicId": "jumvs4kvvuoxuxzacigifa",
    "ForumId": "10",
    "Title": "Hello! I'm new, just had a quick question.",
    "LastUpdated": "2019-03-31T08:48:47.5452267Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e399ac1f-aac7-461b-8cd9-9b8b1b6a1da6",
      "UserId": 350325,
      "Username": "Bobinator",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't intend to be long! I've just started poking around with Quest, trying to learn what I can from the tutorial. It's been a little tough so far -- mostly what I've been having a hard time with is understanding the difference between commands and verbs. Beyond that, I can't seem to figure out how to make it so you can throw things at other things... at least, not that I've figured out yet. Anybody have any advice on that? Mostly I want to have it to so you have a baseball or something you can throw at things to have various responses occur.\r\n\r\nI've mostly wanted to ask if there are any good examples of Quest coding to look at beyond Cloak in the Darkness I could study from. Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't intend to be long! I've just started poking around with Quest, trying to learn what I can from the tutorial. It's been a little tough so far -- mostly what I've been having a hard time with is understanding the difference between commands and verbs. Beyond that, I can't seem to figure out how to make it so you can throw things at other things... at least, not that I've figured out yet. Anybody have any advice on that? Mostly I want to have it to so you have a baseball or something you can throw at things to have various responses occur.</p>\n<p>I've mostly wanted to ask if there are any good examples of Quest coding to look at beyond Cloak in the Darkness I could study from. Thanks!</p>\n\n",
      "PostDate": "2019-03-31T08:48:47.5452267Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "51704034-d71d-4494-8d7b-b78c1eeb9777",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A verb is basically a special type of command <small>(a command which inherits the type `defaultverb`, to be more technical)</small>.\r\n\r\nA command has a *pattern*, which controls what the player must type in so that they can activate it. This could be something simple like `use #object#` or `open #object#`, or more varied like `put #object1# in #object2#` or `turn #object# over`. A command also has a *script* which is run when the command is entered.\r\n\r\nWith **verbs**, these two things are predefined; I think you can change them in the desktop version of Quest, but not in the online version. A verb's *pattern* is `verbname #object#`, and a verb's *script* looks to see if the object you're using it on has an attribute with the same name as the verb, and if so it runs that script attribute or displays that message.\r\n\r\nVerbs may be more convenient if there's something that's only applicable to one object, or where every object does something different. A command is more appropriate if you've got some action the player character can do, and doing it to different objects will have a similar effect.\r\n\r\n**For your throwing example** you probably want to use a command. Your pattern would probably be `throw #object1# at #object2#`. But you might also want to make a separate `throw #object#` command, either for throwing an object in the air, or asking the player what they want to throw it at.\r\n\r\nI hope that makes sense?",
      "EditableFormat": "markdown",
      "HTML": "<p>A verb is basically a special type of command <small>(a command which inherits the type <code>defaultverb</code>, to be more technical)</small>.</p>\n<p>A command has a <em>pattern</em>, which controls what the player must type in so that they can activate it. This could be something simple like <code>use #object#</code> or <code>open #object#</code>, or more varied like <code>put #object1# in #object2#</code> or <code>turn #object# over</code>. A command also has a <em>script</em> which is run when the command is entered.</p>\n<p>With <strong>verbs</strong>, these two things are predefined; I think you can change them in the desktop version of Quest, but not in the online version. A verb's <em>pattern</em> is <code>verbname #object#</code>, and a verb's <em>script</em> looks to see if the object you're using it on has an attribute with the same name as the verb, and if so it runs that script attribute or displays that message.</p>\n<p>Verbs may be more convenient if there's something that's only applicable to one object, or where every object does something different. A command is more appropriate if you've got some action the player character can do, and doing it to different objects will have a similar effect.</p>\n<p><strong>For your throwing example</strong> you probably want to use a command. Your pattern would probably be <code>throw #object1# at #object2#</code>. But you might also want to make a separate <code>throw #object#</code> command, either for throwing an object in the air, or asking the player what they want to throw it at.</p>\n<p>I hope that makes sense?</p>\n\n",
      "PostDate": "2019-03-31T09:05:10.4316884Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "26207400-ec6d-4342-89c1-ab95e6451e9e",
      "UserId": 350325,
      "Username": "Bobinator",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I hate to admit it, but I'm still stuck. Once you've set the command, where do you go to set the individual responses for each thing you can throw your object at? Would you need to make an if statement for each object in the game you're meant to throw something at, or am I missing something?",
      "EditableFormat": "markdown",
      "HTML": "<p>I hate to admit it, but I'm still stuck. Once you've set the command, where do you go to set the individual responses for each thing you can throw your object at? Would you need to make an if statement for each object in the game you're meant to throw something at, or am I missing something?</p>\n\n",
      "PostDate": "2019-03-31T09:33:44.9362171Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5d3cc652-4e96-4b8c-b87f-aaf442e009f5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Would you need to make an if statement for each object in the game you're meant to throw something at\r\n\r\nIf throwing something at different objects has different results, yes. It may end up easier to use a switch/case statement instead; which is more efficient if you're comparing one variable to several options.\r\nFor example:\r\n\r\n```\r\nswitch (object2) {\r\n  case (wall, pillar, table) {\r\n    msg (\"The \"+GetDiaplayAlias(object1)+\" bounces off and rolls back to your feet.\")\r\n    MoveObject (object1, game.pov.parent)\r\n  }\r\n  case (vase1, vase2, vase3, crockery, greenhouse) {\r\n    msg (\"The \"+GetDiaplayAlias(object1)+\" shatters with a resounding crash.\")\r\n    MoveObject (object1, object2.parent)\r\n    RemoveObject (object2)\r\n  }\r\n  case (hummingbird, cloud) {\r\n    msg (\"You try, but you just can't hit it.\")\r\n  }\r\n}\r\n```\r\n\r\nIf throwing something at different objects has different results, but the thrown object doesn't make much difference, then you could give objects a script attribute named `thrownat` or something, which is run when something is thrown at it. Then just have the command run that script attribute if it's found.\r\n\r\nIf there's a couple of different ways it might behave (like, some objects break when something is thrown at them, sometimes it bounces off, or similar), you could create a couple of flags to indicate what should happen, and have the command check for those rather than listing every possible \r\n\r\nThere's a few different ways to do it. Which one is best depends on the effects you want throwing an object to have. Does it depend on the thrown object, or the target?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Would you need to make an if statement for each object in the game you're meant to throw something at</p>\n</blockquote>\n<p>If throwing something at different objects has different results, yes. It may end up easier to use a switch/case statement instead; which is more efficient if you're comparing one variable to several options.<br>\nFor example:</p>\n<pre><code>switch (object2) {\n  case (wall, pillar, table) {\n    msg (\"The \"+GetDiaplayAlias(object1)+\" bounces off and rolls back to your feet.\")\n    MoveObject (object1, game.pov.parent)\n  }\n  case (vase1, vase2, vase3, crockery, greenhouse) {\n    msg (\"The \"+GetDiaplayAlias(object1)+\" shatters with a resounding crash.\")\n    MoveObject (object1, object2.parent)\n    RemoveObject (object2)\n  }\n  case (hummingbird, cloud) {\n    msg (\"You try, but you just can't hit it.\")\n  }\n}\n</code></pre>\n<p>If throwing something at different objects has different results, but the thrown object doesn't make much difference, then you could give objects a script attribute named <code>thrownat</code> or something, which is run when something is thrown at it. Then just have the command run that script attribute if it's found.</p>\n<p>If there's a couple of different ways it might behave (like, some objects break when something is thrown at them, sometimes it bounces off, or similar), you could create a couple of flags to indicate what should happen, and have the command check for those rather than listing every possible</p>\n<p>There's a few different ways to do it. Which one is best depends on the effects you want throwing an object to have. Does it depend on the thrown object, or the target?</p>\n\n",
      "PostDate": "2019-03-31T09:46:42.1458929Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c29ea55b-5b21-42d9-bd67-82b13759e026",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you still need help with using 'Commands', here's a guide I made/wrote on them:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/hfojgbh7jkqmludjjbz6bg/say-command\r\n\r\nand if you want, you can take a stab at this other guide of mine (which is what you're stuck at/on with the conditional event/action and subsequent response/re-action you want to do):\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/civbyvvpc0qviwc0hvoeka/variable-that-impacts-choices-depending-on-its-state#f3d74bc7-c308-49a6-bce2-defa7c0a93e1 (DATA/VARIABLE/Attribute/Variable/VALUE Types)\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk (you might want to try reading the whole post, otherwise skip past the top bit / scroll down a bit, to the bolded 'the two superscript section', and start reading from there on down to the end of my post)\r\n\r\nif you want further help and interest in learning quest and its coding:\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c",
      "EditableFormat": "markdown",
      "HTML": "<p>if you still need help with using 'Commands', here's a guide I made/wrote on them:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/hfojgbh7jkqmludjjbz6bg/say-command</p>\n<p>and if you want, you can take a stab at this other guide of mine (which is what you're stuck at/on with the conditional event/action and subsequent response/re-action you want to do):</p>\n<p>http://textadventures.co.uk/forum/quest/topic/civbyvvpc0qviwc0hvoeka/variable-that-impacts-choices-depending-on-its-state#f3d74bc7-c308-49a6-bce2-defa7c0a93e1 (DATA/VARIABLE/Attribute/Variable/VALUE Types)</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk (you might want to try reading the whole post, otherwise skip past the top bit / scroll down a bit, to the bolded 'the two superscript section', and start reading from there on down to the end of my post)</p>\n<p>if you want further help and interest in learning quest and its coding:</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n\n",
      "PostDate": "2019-03-31T12:50:24.8668648Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f2bcac30-65e2-4470-8624-2ae19fb15ec2",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Option 1:  If the object you are throwing the baseball at is limited to one room (easy) --> this applies to a situation like... a refrigerator or a wall or a door or a window...  Things that cannot be moved from the room.\r\n\r\nA.  Right click on the room with the immovable object and add a command.\r\nB.  Under command pattern type in something like this:\r\nthrow ball at fridge; throw ball toward fridge; throw ball at refrigerator; throw ball toward refrigerator; hit fridge with ball; hit refrigerator with ball\r\netc... basically, any combination of words that you think someone may type in to throw the ball at the fridge...\r\n\r\nThe downside here is that any combination of words that you do not think of (or misspellings) will not be recognized.  So... if I typed throw ball against fridge or throw bal at fridge the response will cause an error.\r\n\r\nC.  Then just add your scripts that you want.  Example... Add Print message  script \"The ball bounces of the fridge and the fridge door pops open.\"  Add open object refrigerator script.",
      "EditableFormat": "markdown",
      "HTML": "<p>Option 1:  If the object you are throwing the baseball at is limited to one room (easy) --&gt; this applies to a situation like... a refrigerator or a wall or a door or a window...  Things that cannot be moved from the room.</p>\n<p>A.  Right click on the room with the immovable object and add a command.<br>\nB.  Under command pattern type in something like this:<br>\nthrow ball at fridge; throw ball toward fridge; throw ball at refrigerator; throw ball toward refrigerator; hit fridge with ball; hit refrigerator with ball<br>\netc... basically, any combination of words that you think someone may type in to throw the ball at the fridge...</p>\n<p>The downside here is that any combination of words that you do not think of (or misspellings) will not be recognized.  So... if I typed throw ball against fridge or throw bal at fridge the response will cause an error.</p>\n<p>C.  Then just add your scripts that you want.  Example... Add Print message  script \"The ball bounces of the fridge and the fridge door pops open.\"  Add open object refrigerator script.</p>\n\n",
      "PostDate": "2019-03-31T16:37:22.4438041Z",
      "LastEditDate": "2019-03-31T17:04:02.692717Z",
      "link": null
    },
    {
      "PostId": "6cfe3e60-0e09-4eb7-98ed-1f32422dccbb",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Option 2:  more complex but deals with TWO movable objects or multiple objects that the ball can be thrown at in the same room (this option is more suitable and realistic)\r\n\r\nA.  Right click on the room you want the command in and add a command.  You can create a command in the game column in the tree of stuff if you want it to be universal.\r\nB.  Change the command pattern type to regular expression and type something like this in the empty box beneath:\r\n```^(throw|toss|launch|heave) (?<object>.*) (in|into|at|against) (fridge|refrigerator)$```\r\n\r\nC.  Add an If command and switch it to expression.  Type object = baseball\r\nD.  Add your scripts in the Then box that you want to happen if the \"object\" object in question is the baseball.\r\nE.  If you want... add an else if script if you think the person might reasonable throw any other object against the fridge.  Say they have a melon.  In the else if box type object = melon and run a print message script like \"Why would you want to throw a perfectly good melon against the fridge?\"\r\nF.  In the else section, add a print message script like \"That will not help your cause.\" and this will handle everything that is not a baseball and not a melon.\r\n\r\nOption 3:  A lot more complicated (and will make an addition to this soon).",
      "EditableFormat": "markdown",
      "HTML": "<p>Option 2:  more complex but deals with TWO movable objects or multiple objects that the ball can be thrown at in the same room (this option is more suitable and realistic)</p>\n<p>A.  Right click on the room you want the command in and add a command.  You can create a command in the game column in the tree of stuff if you want it to be universal.<br>\nB.  Change the command pattern type to regular expression and type something like this in the empty box beneath:<br>\n<code>^(throw|toss|launch|heave) (?&lt;object&gt;.*) (in|into|at|against) (fridge|refrigerator)$</code></p>\n<p>C.  Add an If command and switch it to expression.  Type object = baseball<br>\nD.  Add your scripts in the Then box that you want to happen if the \"object\" object in question is the baseball.<br>\nE.  If you want... add an else if script if you think the person might reasonable throw any other object against the fridge.  Say they have a melon.  In the else if box type object = melon and run a print message script like \"Why would you want to throw a perfectly good melon against the fridge?\"<br>\nF.  In the else section, add a print message script like \"That will not help your cause.\" and this will handle everything that is not a baseball and not a melon.</p>\n<p>Option 3:  A lot more complicated (and will make an addition to this soon).</p>\n\n",
      "PostDate": "2019-03-31T17:04:12.8189593Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2037de40-1124-4cd8-9e99-436853bcc478",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another option, sorry if someone else said it, I can't read well.\r\n\r\nthrow command\r\n\r\nPattern: throw #object1# #object2#\r\nThe pattern is the stuff you type in the parser, in gameplay, to start the command.\r\n\r\ncode for command (I'm doing this from memory, please recreate this in the user interface/panel/editing mode.)\r\n\r\n```\r\nif expression (object.throwndart = true) {\r\n  msg (\"You already threw the dart!\" )\r\n}\r\nif not has attribute (object1, throwable) {\r\n  msg (\"That's not throwable!\")\r\n}\r\nif not has attribute (object2, hittable) {\r\n  msg (\"You can't hit that!\")\r\n}\r\nelse {\r\n  msg (\"You hit the bullseye with the dart!\")\r\n  board.throwndart = true\r\n}\r\n```\r\n\r\nIt's something like that.\r\n\r\nAnd then for the objects, you put attributes. It's best to put them in the attributes section if your on the desktop/computer cersion of Quest. If you are using the web version, it's best to use the game -> script -> start script section. On the web version, you can also put attributes on the object -> features, click yes on user interface -> user interface section.\r\n\r\nobject1, dart\r\n\r\n```\r\ndart.throwable = true\r\n```\r\n\r\nobject2, board\r\n\r\n```\r\nboard.hittable = true\r\n```\r\n\r\nI hope this helps!",
      "EditableFormat": "markdown",
      "HTML": "<p>Another option, sorry if someone else said it, I can't read well.</p>\n<p>throw command</p>\n<p>Pattern: throw #object1# #object2#<br>\nThe pattern is the stuff you type in the parser, in gameplay, to start the command.</p>\n<p>code for command (I'm doing this from memory, please recreate this in the user interface/panel/editing mode.)</p>\n<pre><code>if expression (object.throwndart = true) {\n  msg (\"You already threw the dart!\" )\n}\nif not has attribute (object1, throwable) {\n  msg (\"That's not throwable!\")\n}\nif not has attribute (object2, hittable) {\n  msg (\"You can't hit that!\")\n}\nelse {\n  msg (\"You hit the bullseye with the dart!\")\n  board.throwndart = true\n}\n</code></pre>\n<p>It's something like that.</p>\n<p>And then for the objects, you put attributes. It's best to put them in the attributes section if your on the desktop/computer cersion of Quest. If you are using the web version, it's best to use the game -&gt; script -&gt; start script section. On the web version, you can also put attributes on the object -&gt; features, click yes on user interface -&gt; user interface section.</p>\n<p>object1, dart</p>\n<pre><code>dart.throwable = true\n</code></pre>\n<p>object2, board</p>\n<pre><code>board.hittable = true\n</code></pre>\n<p>I hope this helps!</p>\n\n",
      "PostDate": "2019-03-31T19:02:46.0596733Z",
      "LastEditDate": "2019-03-31T19:06:23.5284433Z",
      "link": null
    },
    {
      "PostId": "a247657c-0cb7-4056-962b-81fea9b669b5",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I feel bad for taking your top forum spot/mention.",
      "EditableFormat": "markdown",
      "HTML": "<p>I feel bad for taking your top forum spot/mention.</p>\n\n",
      "PostDate": "2019-04-01T04:38:14.8349925Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
