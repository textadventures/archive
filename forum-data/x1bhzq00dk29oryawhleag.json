{
  "Topic": {
    "TopicId": "x1bhzq00dk29oryawhleag",
    "ForumId": "10",
    "Title": "[SOLVED] How do I refer to an attribute of player.parent?",
    "LastUpdated": "2016-12-29T09:47:04.9041295Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "96c05366-f5a5-48f8-a2dd-b4671f882be5",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey guys, I'm trying to reference an attribute of the room that the player is currently in for a script that triggers every time the player enters a room. I'm not sure what syntax would be used to do this. There are multiple attributes I'd like to reference, some are booleans, some are integers.\r\n\r\nHow would I go about this?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey guys, I'm trying to reference an attribute of the room that the player is currently in for a script that triggers every time the player enters a room. I'm not sure what syntax would be used to do this. There are multiple attributes I'd like to reference, some are booleans, some are integers.</p>\n<p>How would I go about this?</p>\n\n",
      "PostDate": "2016-12-29T09:47:04.9041295Z",
      "LastEditDate": "2016-12-29T11:54:17.1948703Z"
    },
    {
      "PostId": "b0af6453-5445-436a-9ada-b5f675012399",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could use something like:\r\n\r\n```\r\nroom = player.parent\r\nif (room.attribute1) {\r\n    room.attrubute2 = room.attribute2+1\r\n}\r\n```\r\nIs that what you mean?\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>You could use something like:</p>\n<pre><code>room = player.parent\nif (room.attribute1) {\n    room.attrubute2 = room.attribute2+1\n}\n</code></pre>\n<p>Is that what you mean?</p>\n\n",
      "PostDate": "2016-12-29T09:55:43.4415441Z",
      "LastEditDate": "2016-12-29T09:56:03.5012445Z"
    },
    {
      "PostId": "528037f8-3c52-434a-ae4a-76cec06e0f36",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's it! Thank you!",
      "EditableFormat": "markdown",
      "HTML": "<p>That's it! Thank you!</p>\n\n",
      "PostDate": "2016-12-29T10:14:05.0321238Z",
      "LastEditDate": null
    },
    {
      "PostId": "cb857400-e3af-413c-9504-369566ab926d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "as has already been explained on the other thread, just to recap/explain it:\r\n\r\nNAME_OF_OBJECT.parent = stores and thus can be used to get/return the Object containing the 'NAME_OF_OBJECT' Object, which would then be applied to a further attached Attribute, for example:\r\n\r\n```\r\n<object name=\"father\">\r\n  <attr name=\"alias\" type=\"string\">jeff</attr>\r\n</object>\r\n\r\n<object name=\"son\">\r\n  <attr name=\"parent\" type=\"object\">father</attr>\r\n  <attr name=\"alias\" type=\"string\">bill</attr>\r\n</object>\r\n\r\nmsg (father.alias)\r\n// outputs: jeff\r\n\r\nmsg (son.alias)\r\n// outputs: bob\r\n\r\nmsg (son.parent.alias)\r\n// outputs: jeff\r\n//\r\n// effectively it is doing this:\r\n// msg (<son.parent>.alias)\r\n// son.parent = father\r\n// msg (<father>.alias)\r\n// msg (father.alias)\r\n// outputs: jeff\r\n```\r\n\r\n---------------------\r\n\r\nyou may be interested in a neat application of this, Sgrieg's 'follower' code (or it could just further demonstrate/explain how using 'OBJECT.ATTRIBUTE.ATTRIBUTE' can/does work):\r\n\r\n```\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n  <attr name=\"team_objectlist_attribute\" type=\"objectlist\">player2;player3</attr>\r\n  <attr name=\"changedparent\" type=\"script\">\r\n    foreach (team_member_object_variable, this.team_objectlist_attribute) {\r\n      team_member_object_variable.parent = this.parent\r\n    }\r\n  </attr>\r\n</object>\r\n\r\n<object name=\"player2\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"player3\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"room\">\r\n</object>\r\n\r\n<object name=\"room2\">\r\n</object>\r\n\r\n// when the 'player' Player Object moves to 'room2' Room Object (player.parent = room2),\r\n// the 'player2' and 'player3' Objects are also moved to the parent Room of the 'player' Player object, which is 'room2'\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>as has already been explained on the other thread, just to recap/explain it:</p>\n<p>NAME_OF_OBJECT.parent = stores and thus can be used to get/return the Object containing the 'NAME_OF_OBJECT' Object, which would then be applied to a further attached Attribute, for example:</p>\n<pre><code>&lt;object name=\"father\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;jeff&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"son\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;father&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;bill&lt;/attr&gt;\n&lt;/object&gt;\n\nmsg (father.alias)\n// outputs: jeff\n\nmsg (son.alias)\n// outputs: bob\n\nmsg (son.parent.alias)\n// outputs: jeff\n//\n// effectively it is doing this:\n// msg (&lt;son.parent&gt;.alias)\n// son.parent = father\n// msg (&lt;father&gt;.alias)\n// msg (father.alias)\n// outputs: jeff\n</code></pre>\n<hr>\n<p>you may be interested in a neat application of this, Sgrieg's 'follower' code (or it could just further demonstrate/explain how using 'OBJECT.ATTRIBUTE.ATTRIBUTE' can/does work):</p>\n<pre><code>&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n  &lt;attr name=\"team_objectlist_attribute\" type=\"objectlist\"&gt;player2;player3&lt;/attr&gt;\n  &lt;attr name=\"changedparent\" type=\"script\"&gt;\n    foreach (team_member_object_variable, this.team_objectlist_attribute) {\n      team_member_object_variable.parent = this.parent\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player2\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player3\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room2\"&gt;\n&lt;/object&gt;\n\n// when the 'player' Player Object moves to 'room2' Room Object (player.parent = room2),\n// the 'player2' and 'player3' Objects are also moved to the parent Room of the 'player' Player object, which is 'room2'\n</code></pre>\n\n",
      "PostDate": "2016-12-29T20:13:59.869247Z",
      "LastEditDate": null
    }
  ]
}
