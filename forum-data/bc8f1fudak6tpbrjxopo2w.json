{
  "Topic": {
    "TopicId": "bc8f1fudak6tpbrjxopo2w",
    "ForumId": "20",
    "Title": "What would be more logical?",
    "LastUpdated": "2021-07-25T01:49:22.8723845Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "282d524d-7e65-47c1-9010-451dfb9de663",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nLet's say we have a game with an NPC who will obey the player's commands.\r\n\r\n...but the NPC has script attributes for some actions to handle them differently depending upon certain conditions.\r\n\r\nLet's also say we also have objects (and other NPCs) with script attributes for some actions to handle them differently depending upon certain conditions.\r\n\r\nWith me?\r\n\r\nGood. Let's keep saying stuff. . .\r\n\r\nOur NPC who obeys our commands is Ralph.\r\n\r\nAnother NPC in the game is named Bob.\r\n\r\nNow, Ralph has an ```attack``` script attribute, and Bob has an ```attack``` script attribute.\r\n\r\nThere is also another NPC named Jane who has an ```attack``` script attribute.\r\n\r\nRalph's ```attack``` attribute expects Ralph to be the attacker, but it handles most possibilities and will handle things accordingly if Ralph is the person to be attacked. Anyway, Ralph's ```attack``` script will check who is to be attacked and respond differently depending on many factors (e.g., Ralph doesn't believe a man should hit a woman; therefore he would probably not attack Jane -- unless maybe Jane was attacking Ralph and it was in self-defense).\r\n\r\nEvery other NPC's ```attack``` script is just a verb, there to handle things when the NPC is to be attacked.\r\n\r\n---\r\nHere's my question:\r\n\r\nIn what order should the ```attack``` command's script check which object has an ```attack``` attribute?\r\n\r\nShould it check if the would-be victim has it first? Or should it check if the would-be attacker has it first?\r\n\r\n---\r\nI am purposefully not being any more specific concerning which NPC's scripts might handle what, because that's the point of this \"exercise\".\r\n\r\nI can't come up with a logical, objective reason why either way would be superior to the other, but that's probably just because I'm overlooking something, though.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>Let's say we have a game with an NPC who will obey the player's commands.</p>\n<p>...but the NPC has script attributes for some actions to handle them differently depending upon certain conditions.</p>\n<p>Let's also say we also have objects (and other NPCs) with script attributes for some actions to handle them differently depending upon certain conditions.</p>\n<p>With me?</p>\n<p>Good. Let's keep saying stuff. . .</p>\n<p>Our NPC who obeys our commands is Ralph.</p>\n<p>Another NPC in the game is named Bob.</p>\n<p>Now, Ralph has an <code>attack</code> script attribute, and Bob has an <code>attack</code> script attribute.</p>\n<p>There is also another NPC named Jane who has an <code>attack</code> script attribute.</p>\n<p>Ralph's <code>attack</code> attribute expects Ralph to be the attacker, but it handles most possibilities and will handle things accordingly if Ralph is the person to be attacked. Anyway, Ralph's <code>attack</code> script will check who is to be attacked and respond differently depending on many factors (e.g., Ralph doesn't believe a man should hit a woman; therefore he would probably not attack Jane -- unless maybe Jane was attacking Ralph and it was in self-defense).</p>\n<p>Every other NPC's <code>attack</code> script is just a verb, there to handle things when the NPC is to be attacked.</p>\n<hr>\n<p>Here's my question:</p>\n<p>In what order should the <code>attack</code> command's script check which object has an <code>attack</code> attribute?</p>\n<p>Should it check if the would-be victim has it first? Or should it check if the would-be attacker has it first?</p>\n<hr>\n<p>I am purposefully not being any more specific concerning which NPC's scripts might handle what, because that's the point of this \"exercise\".</p>\n<p>I can't come up with a logical, objective reason why either way would be superior to the other, but that's probably just because I'm overlooking something, though.</p>\n\n",
      "PostDate": "2021-07-25T01:49:22.8723845Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cf9ba285-ec8b-4777-9b53-43864503ce78",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "PS\r\n\r\nHere's what I think (at the moment):\r\n\r\n<details>\r\n\r\nI think it should check the attacker first. If Ralph won't try to attack Jane, it doesn't matter if Jane has an ```attack``` script.\r\n\r\nAlso, Ralph's ```attack``` script should check if the victim has an ```attack``` script just before going through with Ralph's default attack -- considering the victim is someone Ralph would actually attack.\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>PS</p>\n<p>Here's what I think (at the moment):</p>\n<details>\n<p>I think it should check the attacker first. If Ralph won't try to attack Jane, it doesn't matter if Jane has an <code>attack</code> script.</p>\n<p>Also, Ralph's <code>attack</code> script should check if the victim has an <code>attack</code> script just before going through with Ralph's default attack -- considering the victim is someone Ralph would actually attack.</p>\n</details>\n\n",
      "PostDate": "2021-07-25T01:53:35.1321792Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cc5cb2b3-39ba-4ad5-8d22-9b05111759de",
      "UserId": 5574,
      "Username": "R2T1",
      "AvatarUrl": "http://i.imgur.com/32ogfqMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So where does Bob figure in all this? What happens if Ralph attackes Bob? Or vice versa? \r\nI agree that the instigator of the attack should be checked first and their script should check all othe NPCs that are present for their possible action/reaction. \r\nIf Ralph attacks Jane (which is against his principles) but you check her script as well as Bob's before performing Ralph's actions, and if Bob is scripted to help Jane, What happens?\r\nJust trying to play Devil's Advocate here.",
      "EditableFormat": "markdown",
      "HTML": "<p>So where does Bob figure in all this? What happens if Ralph attackes Bob? Or vice versa?<br>\nI agree that the instigator of the attack should be checked first and their script should check all othe NPCs that are present for their possible action/reaction.<br>\nIf Ralph attacks Jane (which is against his principles) but you check her script as well as Bob's before performing Ralph's actions, and if Bob is scripted to help Jane, What happens?<br>\nJust trying to play Devil's Advocate here.</p>\n\n",
      "PostDate": "2021-07-25T02:28:40.3503337Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "10ba3439-f8e5-4261-a693-4067901a5aa6",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> So where does Bob figure in all this?\r\n\r\nThat depends on where he is during any given turn, if he's even still in the game, if Jane has mistreated him, if Jane has flirted with him, if he has seen Jane flirt with Ralph, etc.\r\n\r\nSo, Bob may or may not be there, and he may or may not figure into anything at all if he is there, depending on what has happened in the story so far.\r\n\r\n> What happens if Ralph attackes Bob?\r\n\r\nHe may or may not wish to fight Ralph. Even if Ralph were to attack, Bob is skilled enough to bob and weave without really having to fight back to defend himself.\r\n\r\n...but he might be mad at Ralph, or he might just be in a bad mood in general.\r\n\r\n> Or vice versa?\r\n\r\nRalph is the only NPC who obeys the player's command in this story. So, Bob would just tell you to bugger off if you were to say, \"Bob, kick Ralph\"\r\n\r\n...but, if Bob *were* to take orders, it would work just like Ralph: Bob's ```attack``` script would have an ```if``` statement to handle being ordered to attack, which would be: **\"Violence will get us nowhere in this story,\" says Bob.**\r\n\r\n---\r\n> If Ralph attacks Jane (which is against his principles) but you check her script as well as Bob's before performing Ralph's actions, and if Bob is scripted to help Jane, What happens?\r\n\r\nAh! Good question!\r\n\r\nJane's ```attack``` verb script would have to call Bob's ```jane_under_attack``` script, which might just have to call Ralph's ```bob_jumps_in``` script. . .\r\n\r\n---\r\nI'm apparently making a Jerry Springer episode. :)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>So where does Bob figure in all this?</p>\n</blockquote>\n<p>That depends on where he is during any given turn, if he's even still in the game, if Jane has mistreated him, if Jane has flirted with him, if he has seen Jane flirt with Ralph, etc.</p>\n<p>So, Bob may or may not be there, and he may or may not figure into anything at all if he is there, depending on what has happened in the story so far.</p>\n<blockquote>\n<p>What happens if Ralph attackes Bob?</p>\n</blockquote>\n<p>He may or may not wish to fight Ralph. Even if Ralph were to attack, Bob is skilled enough to bob and weave without really having to fight back to defend himself.</p>\n<p>...but he might be mad at Ralph, or he might just be in a bad mood in general.</p>\n<blockquote>\n<p>Or vice versa?</p>\n</blockquote>\n<p>Ralph is the only NPC who obeys the player's command in this story. So, Bob would just tell you to bugger off if you were to say, \"Bob, kick Ralph\"</p>\n<p>...but, if Bob <em>were</em> to take orders, it would work just like Ralph: Bob's <code>attack</code> script would have an <code>if</code> statement to handle being ordered to attack, which would be: <strong>\"Violence will get us nowhere in this story,\" says Bob.</strong></p>\n<hr>\n<blockquote>\n<p>If Ralph attacks Jane (which is against his principles) but you check her script as well as Bob's before performing Ralph's actions, and if Bob is scripted to help Jane, What happens?</p>\n</blockquote>\n<p>Ah! Good question!</p>\n<p>Jane's <code>attack</code> verb script would have to call Bob's <code>jane_under_attack</code> script, which might just have to call Ralph's <code>bob_jumps_in</code> script. . .</p>\n<hr>\n<p>I'm apparently making a Jerry Springer episode. :)</p>\n\n",
      "PostDate": "2021-07-25T03:27:10.7021219Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "691d1807-866f-496a-8d3f-bb647c1b7df7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Ralph's `attack` attribute expects Ralph to be the attacker,\r\n> Every other NPC's `attack` script is just a verb\r\n\r\nThis is probably a bad idea. First off, it will put 'attack' on Ralph's verb list, which seems a little awkward. I think it would be better for Ralph's script attribute to be something like `npcattack`.\r\n\r\nAs for your question, I would handle it the same way as the \"put\" command.\r\n\r\nIf the attacker doesn't have a `npcattack`, they're not capable of attacking, so show a simple message. (Maybe with some other options. Like if `npcattack` is true, they'll attack anyone, and if it's a string, it could be a message like \"Sorry, I'm a pacifist\" that they respond with)\r\n\r\nIf there's an `npcattack` script, you rely on it to determine if they're willing to attack that person, and if so call the target's `attack`.\r\n\r\nActually, it probably makes sense to have a function `PerformAttack (attacker, target)`, which is called by the `npcattack` script. The same function can be called from an attack command for cases where the player attacks directly.\r\nThis could handle a few cases:\r\n* target's `attack` is a script - run it, passing `attacker` (and `weapon`?) as a parameter\r\n* target's `attack` is a string - display the message\r\n* target's `attack` is `true` - use the default attack/damage calculation formula\r\n* target's `attack` is false or null - \"You can't attack it\"\r\n\r\nSo… when the player tells one NPC to attack another, it calls the attacker's `npcattack` script, and relies on that to call PerformAttack. When the player attacks directly, it just calls PerformAttack. Which then calls the target's `attack`.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Ralph's <code>attack</code> attribute expects Ralph to be the attacker,<br>\nEvery other NPC's <code>attack</code> script is just a verb</p>\n</blockquote>\n<p>This is probably a bad idea. First off, it will put 'attack' on Ralph's verb list, which seems a little awkward. I think it would be better for Ralph's script attribute to be something like <code>npcattack</code>.</p>\n<p>As for your question, I would handle it the same way as the \"put\" command.</p>\n<p>If the attacker doesn't have a <code>npcattack</code>, they're not capable of attacking, so show a simple message. (Maybe with some other options. Like if <code>npcattack</code> is true, they'll attack anyone, and if it's a string, it could be a message like \"Sorry, I'm a pacifist\" that they respond with)</p>\n<p>If there's an <code>npcattack</code> script, you rely on it to determine if they're willing to attack that person, and if so call the target's <code>attack</code>.</p>\n<p>Actually, it probably makes sense to have a function <code>PerformAttack (attacker, target)</code>, which is called by the <code>npcattack</code> script. The same function can be called from an attack command for cases where the player attacks directly.<br>\nThis could handle a few cases:</p>\n<ul>\n<li>target's <code>attack</code> is a script - run it, passing <code>attacker</code> (and <code>weapon</code>?) as a parameter</li>\n<li>target's <code>attack</code> is a string - display the message</li>\n<li>target's <code>attack</code> is <code>true</code> - use the default attack/damage calculation formula</li>\n<li>target's <code>attack</code> is false or null - \"You can't attack it\"</li>\n</ul>\n<p>So… when the player tells one NPC to attack another, it calls the attacker's <code>npcattack</code> script, and relies on that to call PerformAttack. When the player attacks directly, it just calls PerformAttack. Which then calls the target's <code>attack</code>.</p>\n\n",
      "PostDate": "2021-07-25T09:55:47.7004974Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "df5d6240-a387-476f-99cb-71e2db7d4fc0",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That sounds quite logical.\r\n\r\n---\r\nI honestly got lost in my own example. :)\r\n\r\nI should have went with a ```hang``` command. A garment can have a ```hang``` property, and a hanger can have a ```hang``` property.\r\n\r\n...but your answer really fits any action which could be performed, which is one reason I value your input.",
      "EditableFormat": "markdown",
      "HTML": "<p>That sounds quite logical.</p>\n<hr>\n<p>I honestly got lost in my own example. :)</p>\n<p>I should have went with a <code>hang</code> command. A garment can have a <code>hang</code> property, and a hanger can have a <code>hang</code> property.</p>\n<p>...but your answer really fits any action which could be performed, which is one reason I value your input.</p>\n\n",
      "PostDate": "2021-07-26T15:39:37.3985324Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "57736060-91c5-4a22-8140-13a1cc842c63",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I should have went with a hang command. A garment can have a hang property, and a hanger can have a hang property.\r\n\r\nIn any case, it makes sense for an attribute to have a distinct meaning. If there's multiple things a word could mean, it probably isn't the best name for an attribute. For the hanger, you could have separate `hangthisonsomething` and `hangsomethingonthis` properties. That way, it's easy to check whether a certain action is valid for any given object, and there's no chance you'll put the script in the wrong place during later editing.\r\n\r\nSame applies for homonyms, I think. If there's a word that could mean multiple things, pick a synonym for each that's clear and unambiguous. Then for a word with multiple meanings, you'd have a command which tests which of the meanings is valid for that object and calls the appropriate one (or possibly gives a disambiguation menu).",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I should have went with a hang command. A garment can have a hang property, and a hanger can have a hang property.</p>\n</blockquote>\n<p>In any case, it makes sense for an attribute to have a distinct meaning. If there's multiple things a word could mean, it probably isn't the best name for an attribute. For the hanger, you could have separate <code>hangthisonsomething</code> and <code>hangsomethingonthis</code> properties. That way, it's easy to check whether a certain action is valid for any given object, and there's no chance you'll put the script in the wrong place during later editing.</p>\n<p>Same applies for homonyms, I think. If there's a word that could mean multiple things, pick a synonym for each that's clear and unambiguous. Then for a word with multiple meanings, you'd have a command which tests which of the meanings is valid for that object and calls the appropriate one (or possibly gives a disambiguation menu).</p>\n\n",
      "PostDate": "2021-07-26T16:10:54.4383484Z",
      "LastEditDate": "2021-07-26T16:13:29.1171449Z",
      "link": null
    }
  ]
}
